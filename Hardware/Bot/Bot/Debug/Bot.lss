
Bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  00007826  000078ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000424  0080026e  0080026e  00007928  2**0
                  ALLOC
  3 .stab         000045cc  00000000  00000000  00007928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000149d  00000000  00000000  0000bef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  0000d391  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000017e9  00000000  00000000  0000d671  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bcb1  00000000  00000000  0000ee5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000232e  00000000  00000000  0001ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006e31  00000000  00000000  0001ce39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001060  00000000  00000000  00023c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002863  00000000  00000000  00024ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000078ac  00000000  00000000  0002752f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004db  00000000  00000000  0002eddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001a0  00000000  00000000  0002f2b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__vector_1>
       8:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__vector_2>
       c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__vector_3>
      10:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_4>
      14:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__vector_5>
      18:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__vector_6>
      1c:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_7>
      20:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_8>
      24:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      28:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      2c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      30:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      34:	0c 94 06 12 	jmp	0x240c	; 0x240c <__vector_13>
      38:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      3c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      40:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      44:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      48:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      4c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      50:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      54:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      58:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      5c:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__vector_23>
      60:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      64:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__vector_25>
      68:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_26>
      6c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      70:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      74:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      78:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      7c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      80:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      84:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      88:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      8c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      90:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_36>
      94:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_37>
      98:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      9c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      ac:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      bc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      cc:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_51>
      d0:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_52>
      d4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d8:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_54>
      dc:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_55>
      e0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>

000000e4 <_ZL21tone_pin_to_timer_PGM>:
      e4:	02                                                  .

000000e5 <port_to_mode_PGM>:
      e5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
      f5:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000ff <port_to_output_PGM>:
      ff:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     10f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000119 <port_to_input_PGM>:
     119:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     129:	00 01 00 00 03 01 06 01 09 01                       ..........

00000133 <digital_pin_to_port_PGM>:
     133:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     143:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     153:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     163:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     173:	0b 0b 0b 0b 0b 0b                                   ......

00000179 <digital_pin_to_bit_mask_PGM>:
     179:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     189:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     199:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b9:	04 08 10 20 40 80                                   ... @.

000001bf <digital_pin_to_timer_PGM>:
     1bf:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     1eb:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000205 <pstr_inf>:
     205:	49 4e 46                                            INF

00000208 <pstr_inity>:
     208:	49 4e 49 54 59                                      INITY

0000020d <pstr_nan>:
     20d:	4e 41 4e                                            NAN

00000210 <pwr_m10>:
     210:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     220:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000228 <pwr_p10>:
     228:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     238:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     248:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     258:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     268:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     278:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     288:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     298:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2a8:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2b8:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2c8:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2d8:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2e8:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2f8:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     308:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     318:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     328:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     338:	3d 27                                               ='

0000033a <__ctors_start>:
     33a:	59 06       	cpc	r5, r25
     33c:	e0 07       	cpc	r30, r16

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	cf ef       	ldi	r28, 0xFF	; 255
     344:	d1 e2       	ldi	r29, 0x21	; 33
     346:	de bf       	out	0x3e, r29	; 62
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	0c bf       	out	0x3c, r16	; 60

0000034e <__do_copy_data>:
     34e:	12 e0       	ldi	r17, 0x02	; 2
     350:	a0 e0       	ldi	r26, 0x00	; 0
     352:	b2 e0       	ldi	r27, 0x02	; 2
     354:	e6 e2       	ldi	r30, 0x26	; 38
     356:	f8 e7       	ldi	r31, 0x78	; 120
     358:	00 e0       	ldi	r16, 0x00	; 0
     35a:	0b bf       	out	0x3b, r16	; 59
     35c:	02 c0       	rjmp	.+4      	; 0x362 <__do_copy_data+0x14>
     35e:	07 90       	elpm	r0, Z+
     360:	0d 92       	st	X+, r0
     362:	ae 36       	cpi	r26, 0x6E	; 110
     364:	b1 07       	cpc	r27, r17
     366:	d9 f7       	brne	.-10     	; 0x35e <__do_copy_data+0x10>

00000368 <__do_clear_bss>:
     368:	16 e0       	ldi	r17, 0x06	; 6
     36a:	ae e6       	ldi	r26, 0x6E	; 110
     36c:	b2 e0       	ldi	r27, 0x02	; 2
     36e:	01 c0       	rjmp	.+2      	; 0x372 <.do_clear_bss_start>

00000370 <.do_clear_bss_loop>:
     370:	1d 92       	st	X+, r1

00000372 <.do_clear_bss_start>:
     372:	a2 39       	cpi	r26, 0x92	; 146
     374:	b1 07       	cpc	r27, r17
     376:	e1 f7       	brne	.-8      	; 0x370 <.do_clear_bss_loop>

00000378 <__do_global_ctors>:
     378:	13 e0       	ldi	r17, 0x03	; 3
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	ce e3       	ldi	r28, 0x3E	; 62
     37e:	d3 e0       	ldi	r29, 0x03	; 3
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	06 c0       	rjmp	.+12     	; 0x390 <__do_global_ctors+0x18>
     384:	22 97       	sbiw	r28, 0x02	; 2
     386:	41 09       	sbc	r20, r1
     388:	fe 01       	movw	r30, r28
     38a:	4b bf       	out	0x3b, r20	; 59
     38c:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <__tablejump_elpm__>
     390:	ca 33       	cpi	r28, 0x3A	; 58
     392:	d1 07       	cpc	r29, r17
     394:	40 07       	cpc	r20, r16
     396:	b1 f7       	brne	.-20     	; 0x384 <__do_global_ctors+0xc>
     398:	0e 94 ef 07 	call	0xfde	; 0xfde <main>
     39c:	0c 94 11 3c 	jmp	0x7822	; 0x7822 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a4 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     3a4:	fc 01       	movw	r30, r24
     3a6:	24 85       	ldd	r18, Z+12	; 0x0c
     3a8:	35 85       	ldd	r19, Z+13	; 0x0d
     3aa:	f9 01       	movw	r30, r18
     3ac:	e0 5c       	subi	r30, 0xC0	; 192
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	2e 5b       	subi	r18, 0xBE	; 190
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	31 81       	ldd	r19, Z+1	; 0x01
     3be:	80 5c       	subi	r24, 0xC0	; 192
     3c0:	9f 4f       	sbci	r25, 0xFF	; 255
     3c2:	82 1b       	sub	r24, r18
     3c4:	93 0b       	sbc	r25, r19
     3c6:	60 e4       	ldi	r22, 0x40	; 64
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divmodhi4>
}
     3ce:	08 95       	ret

000003d0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     3d0:	fc 01       	movw	r30, r24
     3d2:	84 85       	ldd	r24, Z+12	; 0x0c
     3d4:	95 85       	ldd	r25, Z+13	; 0x0d
     3d6:	fc 01       	movw	r30, r24
     3d8:	e0 5c       	subi	r30, 0xC0	; 192
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	40 81       	ld	r20, Z
     3de:	51 81       	ldd	r21, Z+1	; 0x01
     3e0:	fc 01       	movw	r30, r24
     3e2:	ee 5b       	subi	r30, 0xBE	; 190
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	20 81       	ld	r18, Z
     3e8:	31 81       	ldd	r19, Z+1	; 0x01
     3ea:	42 17       	cp	r20, r18
     3ec:	53 07       	cpc	r21, r19
     3ee:	59 f0       	breq	.+22     	; 0x406 <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     3f0:	fc 01       	movw	r30, r24
     3f2:	ee 5b       	subi	r30, 0xBE	; 190
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	20 81       	ld	r18, Z
     3f8:	31 81       	ldd	r19, Z+1	; 0x01
     3fa:	82 0f       	add	r24, r18
     3fc:	93 1f       	adc	r25, r19
     3fe:	fc 01       	movw	r30, r24
     400:	20 81       	ld	r18, Z
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <_ZN14HardwareSerial4peekEv+0x3a>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     40a:	82 2f       	mov	r24, r18
     40c:	93 2f       	mov	r25, r19
     40e:	08 95       	ret

00000410 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     410:	dc 01       	movw	r26, r24
     412:	1c 96       	adiw	r26, 0x0c	; 12
     414:	8d 91       	ld	r24, X+
     416:	9c 91       	ld	r25, X
     418:	1d 97       	sbiw	r26, 0x0d	; 13
     41a:	fc 01       	movw	r30, r24
     41c:	e0 5c       	subi	r30, 0xC0	; 192
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	40 81       	ld	r20, Z
     422:	51 81       	ldd	r21, Z+1	; 0x01
     424:	fc 01       	movw	r30, r24
     426:	ee 5b       	subi	r30, 0xBE	; 190
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	20 81       	ld	r18, Z
     42c:	31 81       	ldd	r19, Z+1	; 0x01
     42e:	42 17       	cp	r20, r18
     430:	53 07       	cpc	r21, r19
     432:	91 f0       	breq	.+36     	; 0x458 <_ZN14HardwareSerial4readEv+0x48>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     434:	fc 01       	movw	r30, r24
     436:	ee 5b       	subi	r30, 0xBE	; 190
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	20 81       	ld	r18, Z
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	dc 01       	movw	r26, r24
     444:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     446:	80 81       	ld	r24, Z
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	8f 73       	andi	r24, 0x3F	; 63
     44e:	90 70       	andi	r25, 0x00	; 0
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	80 83       	st	Z, r24
    return c;
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <_ZN14HardwareSerial4readEv+0x4c>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     45c:	82 2f       	mov	r24, r18
     45e:	93 2f       	mov	r25, r19
     460:	08 95       	ret

00000462 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     462:	fc 01       	movw	r30, r24
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     464:	81 a1       	ldd	r24, Z+33	; 0x21
     466:	88 23       	and	r24, r24
     468:	29 f0       	breq	.+10     	; 0x474 <_ZN14HardwareSerial5flushEv+0x12>
     46a:	a4 89       	ldd	r26, Z+20	; 0x14
     46c:	b5 89       	ldd	r27, Z+21	; 0x15
     46e:	8c 91       	ld	r24, X
     470:	86 ff       	sbrs	r24, 6
     472:	fb cf       	rjmp	.-10     	; 0x46a <_ZN14HardwareSerial5flushEv+0x8>
  transmitting = false;
     474:	11 a2       	std	Z+33, r1	; 0x21
}
     476:	08 95       	ret

00000478 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     478:	fc 01       	movw	r30, r24
  unsigned int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     47a:	46 85       	ldd	r20, Z+14	; 0x0e
     47c:	57 85       	ldd	r21, Z+15	; 0x0f
     47e:	da 01       	movw	r26, r20
     480:	a0 5c       	subi	r26, 0xC0	; 192
     482:	bf 4f       	sbci	r27, 0xFF	; 255
     484:	2d 91       	ld	r18, X+
     486:	3c 91       	ld	r19, X
     488:	2f 5f       	subi	r18, 0xFF	; 255
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	2f 73       	andi	r18, 0x3F	; 63
     48e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     490:	da 01       	movw	r26, r20
     492:	ae 5b       	subi	r26, 0xBE	; 190
     494:	bf 4f       	sbci	r27, 0xFF	; 255
     496:	8d 91       	ld	r24, X+
     498:	9c 91       	ld	r25, X
     49a:	11 97       	sbiw	r26, 0x01	; 1
     49c:	28 17       	cp	r18, r24
     49e:	39 07       	cpc	r19, r25
     4a0:	d1 f3       	breq	.-12     	; 0x496 <_ZN14HardwareSerial5writeEh+0x1e>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     4a2:	da 01       	movw	r26, r20
     4a4:	a0 5c       	subi	r26, 0xC0	; 192
     4a6:	bf 4f       	sbci	r27, 0xFF	; 255
     4a8:	8d 91       	ld	r24, X+
     4aa:	9c 91       	ld	r25, X
     4ac:	48 0f       	add	r20, r24
     4ae:	59 1f       	adc	r21, r25
     4b0:	da 01       	movw	r26, r20
     4b2:	6c 93       	st	X, r22
  _tx_buffer->head = i;
     4b4:	a6 85       	ldd	r26, Z+14	; 0x0e
     4b6:	b7 85       	ldd	r27, Z+15	; 0x0f
     4b8:	a0 5c       	subi	r26, 0xC0	; 192
     4ba:	bf 4f       	sbci	r27, 0xFF	; 255
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	3c 93       	st	X, r19
     4c0:	2e 93       	st	-X, r18
	
  sbi(*_ucsrb, _udrie);
     4c2:	a6 89       	ldd	r26, Z+22	; 0x16
     4c4:	b7 89       	ldd	r27, Z+23	; 0x17
     4c6:	4c 91       	ld	r20, X
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	c9 01       	movw	r24, r18
     4ce:	07 8c       	ldd	r0, Z+31	; 0x1f
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <_ZN14HardwareSerial5writeEh+0x5e>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	0a 94       	dec	r0
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <_ZN14HardwareSerial5writeEh+0x5a>
     4da:	84 2b       	or	r24, r20
     4dc:	8c 93       	st	X, r24
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	81 a3       	std	Z+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     4e2:	04 88       	ldd	r0, Z+20	; 0x14
     4e4:	f5 89       	ldd	r31, Z+21	; 0x15
     4e6:	e0 2d       	mov	r30, r0
     4e8:	80 81       	ld	r24, Z
     4ea:	80 64       	ori	r24, 0x40	; 64
     4ec:	80 83       	st	Z, r24
  
  return 1;
}
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	08 95       	ret

000004f4 <_Z12serialEvent1v>:
// #endif
// #endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
     4f4:	08 95       	ret

000004f6 <__vector_36>:
  #define serialEvent1_implemented
  ISR(USART1_RX_vect)
  {
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	0b b6       	in	r0, 0x3b	; 59
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
    if (bit_is_clear(UCSR1A, UPE1)) {
     512:	80 91 c8 00 	lds	r24, 0x00C8
     516:	82 fd       	sbrc	r24, 2
     518:	1c c0       	rjmp	.+56     	; 0x552 <__vector_36+0x5c>
      unsigned char c = UDR1;
     51a:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     51e:	80 91 36 03 	lds	r24, 0x0336
     522:	90 91 37 03 	lds	r25, 0x0337
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	8f 73       	andi	r24, 0x3F	; 63
     52a:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     52c:	20 91 38 03 	lds	r18, 0x0338
     530:	30 91 39 03 	lds	r19, 0x0339
     534:	82 17       	cp	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	71 f0       	breq	.+28     	; 0x556 <__vector_36+0x60>
    buffer->buffer[buffer->head] = c;
     53a:	e0 91 36 03 	lds	r30, 0x0336
     53e:	f0 91 37 03 	lds	r31, 0x0337
     542:	ea 50       	subi	r30, 0x0A	; 10
     544:	fd 4f       	sbci	r31, 0xFD	; 253
     546:	40 83       	st	Z, r20
    buffer->head = i;
     548:	90 93 37 03 	sts	0x0337, r25
     54c:	80 93 36 03 	sts	0x0336, r24
     550:	02 c0       	rjmp	.+4      	; 0x556 <__vector_36+0x60>
  {
    if (bit_is_clear(UCSR1A, UPE1)) {
      unsigned char c = UDR1;
      store_char(c, &rx_buffer1);
    } else {
      unsigned char c = UDR1;
     552:	80 91 ce 00 	lds	r24, 0x00CE
    };
  }
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0b be       	out	0x3b, r0	; 59
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <_Z12serialEvent2v>:
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
     572:	08 95       	ret

00000574 <__vector_51>:
  #define serialEvent2_implemented
  ISR(USART2_RX_vect)
  {
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	0b b6       	in	r0, 0x3b	; 59
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	3f 93       	push	r19
     586:	4f 93       	push	r20
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
    if (bit_is_clear(UCSR2A, UPE2)) {
     590:	80 91 d0 00 	lds	r24, 0x00D0
     594:	82 fd       	sbrc	r24, 2
     596:	1c c0       	rjmp	.+56     	; 0x5d0 <__vector_51+0x5c>
      unsigned char c = UDR2;
     598:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     59c:	80 91 be 03 	lds	r24, 0x03BE
     5a0:	90 91 bf 03 	lds	r25, 0x03BF
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	8f 73       	andi	r24, 0x3F	; 63
     5a8:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     5aa:	20 91 c0 03 	lds	r18, 0x03C0
     5ae:	30 91 c1 03 	lds	r19, 0x03C1
     5b2:	82 17       	cp	r24, r18
     5b4:	93 07       	cpc	r25, r19
     5b6:	71 f0       	breq	.+28     	; 0x5d4 <__vector_51+0x60>
    buffer->buffer[buffer->head] = c;
     5b8:	e0 91 be 03 	lds	r30, 0x03BE
     5bc:	f0 91 bf 03 	lds	r31, 0x03BF
     5c0:	e2 58       	subi	r30, 0x82	; 130
     5c2:	fc 4f       	sbci	r31, 0xFC	; 252
     5c4:	40 83       	st	Z, r20
    buffer->head = i;
     5c6:	90 93 bf 03 	sts	0x03BF, r25
     5ca:	80 93 be 03 	sts	0x03BE, r24
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__vector_51+0x60>
  {
    if (bit_is_clear(UCSR2A, UPE2)) {
      unsigned char c = UDR2;
      store_char(c, &rx_buffer2);
    } else {
      unsigned char c = UDR2;
     5d0:	80 91 d6 00 	lds	r24, 0x00D6
    };
  }
     5d4:	ff 91       	pop	r31
     5d6:	ef 91       	pop	r30
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0b be       	out	0x3b, r0	; 59
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <_Z12serialEvent3v>:
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
     5f0:	08 95       	ret

000005f2 <__vector_54>:
  #define serialEvent3_implemented
  ISR(USART3_RX_vect)
  {
     5f2:	1f 92       	push	r1
     5f4:	0f 92       	push	r0
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	0f 92       	push	r0
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	2f 93       	push	r18
     602:	3f 93       	push	r19
     604:	4f 93       	push	r20
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
    if (bit_is_clear(UCSR3A, UPE3)) {
     60e:	80 91 30 01 	lds	r24, 0x0130
     612:	82 fd       	sbrc	r24, 2
     614:	1c c0       	rjmp	.+56     	; 0x64e <__vector_54+0x5c>
      unsigned char c = UDR3;
     616:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     61a:	80 91 46 04 	lds	r24, 0x0446
     61e:	90 91 47 04 	lds	r25, 0x0447
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	8f 73       	andi	r24, 0x3F	; 63
     626:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     628:	20 91 48 04 	lds	r18, 0x0448
     62c:	30 91 49 04 	lds	r19, 0x0449
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	71 f0       	breq	.+28     	; 0x652 <__vector_54+0x60>
    buffer->buffer[buffer->head] = c;
     636:	e0 91 46 04 	lds	r30, 0x0446
     63a:	f0 91 47 04 	lds	r31, 0x0447
     63e:	ea 5f       	subi	r30, 0xFA	; 250
     640:	fb 4f       	sbci	r31, 0xFB	; 251
     642:	40 83       	st	Z, r20
    buffer->head = i;
     644:	90 93 47 04 	sts	0x0447, r25
     648:	80 93 46 04 	sts	0x0446, r24
     64c:	02 c0       	rjmp	.+4      	; 0x652 <__vector_54+0x60>
  {
    if (bit_is_clear(UCSR3A, UPE3)) {
      unsigned char c = UDR3;
      store_char(c, &rx_buffer3);
    } else {
      unsigned char c = UDR3;
     64e:	80 91 36 01 	lds	r24, 0x0136
    };
  }
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <_Z14serialEventRunv>:
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
     66e:	80 eb       	ldi	r24, 0xB0	; 176
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN14HardwareSerial9availableEv>
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	11 f0       	breq	.+4      	; 0x67e <_Z14serialEventRunv+0x10>
     67a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
     67e:	82 ed       	ldi	r24, 0xD2	; 210
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN14HardwareSerial9availableEv>
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	11 f0       	breq	.+4      	; 0x68e <_Z14serialEventRunv+0x20>
     68a:	0e 94 b9 02 	call	0x572	; 0x572 <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
     68e:	84 ef       	ldi	r24, 0xF4	; 244
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN14HardwareSerial9availableEv>
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	11 f0       	breq	.+4      	; 0x69e <_Z14serialEventRunv+0x30>
     69a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_Z12serialEvent3v>
     69e:	08 95       	ret

000006a0 <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	0b b6       	in	r0, 0x3b	; 59
     6aa:	0f 92       	push	r0
     6ac:	11 24       	eor	r1, r1
     6ae:	2f 93       	push	r18
     6b0:	3f 93       	push	r19
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	ef 93       	push	r30
     6b8:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     6ba:	20 91 f2 02 	lds	r18, 0x02F2
     6be:	30 91 f3 02 	lds	r19, 0x02F3
     6c2:	80 91 f4 02 	lds	r24, 0x02F4
     6c6:	90 91 f5 02 	lds	r25, 0x02F5
     6ca:	28 17       	cp	r18, r24
     6cc:	39 07       	cpc	r19, r25
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     6d0:	e1 ec       	ldi	r30, 0xC1	; 193
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 7d       	andi	r24, 0xDF	; 223
     6d8:	80 83       	st	Z, r24
     6da:	14 c0       	rjmp	.+40     	; 0x704 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     6dc:	e0 91 f4 02 	lds	r30, 0x02F4
     6e0:	f0 91 f5 02 	lds	r31, 0x02F5
     6e4:	ee 54       	subi	r30, 0x4E	; 78
     6e6:	fd 4f       	sbci	r31, 0xFD	; 253
     6e8:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     6ea:	80 91 f4 02 	lds	r24, 0x02F4
     6ee:	90 91 f5 02 	lds	r25, 0x02F5
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	8f 73       	andi	r24, 0x3F	; 63
     6f6:	90 70       	andi	r25, 0x00	; 0
     6f8:	90 93 f5 02 	sts	0x02F5, r25
     6fc:	80 93 f4 02 	sts	0x02F4, r24
	
  #if defined(UDR0)
    UDR0 = c;
     700:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	3f 91       	pop	r19
     70e:	2f 91       	pop	r18
     710:	0f 90       	pop	r0
     712:	0b be       	out	0x3b, r0	; 59
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
     738:	20 91 7a 03 	lds	r18, 0x037A
     73c:	30 91 7b 03 	lds	r19, 0x037B
     740:	80 91 7c 03 	lds	r24, 0x037C
     744:	90 91 7d 03 	lds	r25, 0x037D
     748:	28 17       	cp	r18, r24
     74a:	39 07       	cpc	r19, r25
     74c:	31 f4       	brne	.+12     	; 0x75a <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
     74e:	e9 ec       	ldi	r30, 0xC9	; 201
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8f 7d       	andi	r24, 0xDF	; 223
     756:	80 83       	st	Z, r24
     758:	14 c0       	rjmp	.+40     	; 0x782 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
     75a:	e0 91 7c 03 	lds	r30, 0x037C
     75e:	f0 91 7d 03 	lds	r31, 0x037D
     762:	e6 5c       	subi	r30, 0xC6	; 198
     764:	fc 4f       	sbci	r31, 0xFC	; 252
     766:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
     768:	80 91 7c 03 	lds	r24, 0x037C
     76c:	90 91 7d 03 	lds	r25, 0x037D
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	8f 73       	andi	r24, 0x3F	; 63
     774:	90 70       	andi	r25, 0x00	; 0
     776:	90 93 7d 03 	sts	0x037D, r25
     77a:	80 93 7c 03 	sts	0x037C, r24
	
    UDR1 = c;
     77e:	20 93 ce 00 	sts	0x00CE, r18
  }
}
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	3f 91       	pop	r19
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
     79c:	1f 92       	push	r1
     79e:	0f 92       	push	r0
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	0f 92       	push	r0
     7a4:	0b b6       	in	r0, 0x3b	; 59
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	8f 93       	push	r24
     7b0:	9f 93       	push	r25
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
     7b6:	20 91 02 04 	lds	r18, 0x0402
     7ba:	30 91 03 04 	lds	r19, 0x0403
     7be:	80 91 04 04 	lds	r24, 0x0404
     7c2:	90 91 05 04 	lds	r25, 0x0405
     7c6:	28 17       	cp	r18, r24
     7c8:	39 07       	cpc	r19, r25
     7ca:	31 f4       	brne	.+12     	; 0x7d8 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
     7cc:	e1 ed       	ldi	r30, 0xD1	; 209
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 7d       	andi	r24, 0xDF	; 223
     7d4:	80 83       	st	Z, r24
     7d6:	14 c0       	rjmp	.+40     	; 0x800 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
     7d8:	e0 91 04 04 	lds	r30, 0x0404
     7dc:	f0 91 05 04 	lds	r31, 0x0405
     7e0:	ee 53       	subi	r30, 0x3E	; 62
     7e2:	fc 4f       	sbci	r31, 0xFC	; 252
     7e4:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
     7e6:	80 91 04 04 	lds	r24, 0x0404
     7ea:	90 91 05 04 	lds	r25, 0x0405
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	8f 73       	andi	r24, 0x3F	; 63
     7f2:	90 70       	andi	r25, 0x00	; 0
     7f4:	90 93 05 04 	sts	0x0405, r25
     7f8:	80 93 04 04 	sts	0x0404, r24
	
    UDR2 = c;
     7fc:	20 93 d6 00 	sts	0x00D6, r18
  }
}
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0b be       	out	0x3b, r0	; 59
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
     834:	20 91 8a 04 	lds	r18, 0x048A
     838:	30 91 8b 04 	lds	r19, 0x048B
     83c:	80 91 8c 04 	lds	r24, 0x048C
     840:	90 91 8d 04 	lds	r25, 0x048D
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	31 f4       	brne	.+12     	; 0x856 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
     84a:	e1 e3       	ldi	r30, 0x31	; 49
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	80 81       	ld	r24, Z
     850:	8f 7d       	andi	r24, 0xDF	; 223
     852:	80 83       	st	Z, r24
     854:	14 c0       	rjmp	.+40     	; 0x87e <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
     856:	e0 91 8c 04 	lds	r30, 0x048C
     85a:	f0 91 8d 04 	lds	r31, 0x048D
     85e:	e6 5b       	subi	r30, 0xB6	; 182
     860:	fb 4f       	sbci	r31, 0xFB	; 251
     862:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
     864:	80 91 8c 04 	lds	r24, 0x048C
     868:	90 91 8d 04 	lds	r25, 0x048D
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	8f 73       	andi	r24, 0x3F	; 63
     870:	90 70       	andi	r25, 0x00	; 0
     872:	90 93 8d 04 	sts	0x048D, r25
     876:	80 93 8c 04 	sts	0x048C, r24
	
    UDR3 = c;
     87a:	20 93 36 01 	sts	0x0136, r18
  }
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0b be       	out	0x3b, r0	; 59
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     8b6:	13 82       	std	Z+3, r1	; 0x03
     8b8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     8ba:	88 ee       	ldi	r24, 0xE8	; 232
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	a0 e0       	ldi	r26, 0x00	; 0
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	84 83       	std	Z+4, r24	; 0x04
     8c4:	95 83       	std	Z+5, r25	; 0x05
     8c6:	a6 83       	std	Z+6, r26	; 0x06
     8c8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     8ca:	8a e0       	ldi	r24, 0x0A	; 10
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
     8d2:	75 87       	std	Z+13, r23	; 0x0d
     8d4:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
     8d6:	57 87       	std	Z+15, r21	; 0x0f
     8d8:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
     8da:	31 8b       	std	Z+17, r19	; 0x11
     8dc:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
     8de:	13 8b       	std	Z+19, r17	; 0x13
     8e0:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
     8e2:	f5 8a       	std	Z+21, r15	; 0x15
     8e4:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
     8e6:	d7 8a       	std	Z+23, r13	; 0x17
     8e8:	c6 8a       	std	Z+22, r12	; 0x16
  _ucsrc = ucsrc;
     8ea:	b1 8e       	std	Z+25, r11	; 0x19
     8ec:	a0 8e       	std	Z+24, r10	; 0x18
  _udr = udr;
     8ee:	93 8e       	std	Z+27, r9	; 0x1b
     8f0:	82 8e       	std	Z+26, r8	; 0x1a
  _rxen = rxen;
     8f2:	88 89       	ldd	r24, Y+16	; 0x10
     8f4:	84 8f       	std	Z+28, r24	; 0x1c
  _txen = txen;
     8f6:	89 89       	ldd	r24, Y+17	; 0x11
     8f8:	85 8f       	std	Z+29, r24	; 0x1d
  _rxcie = rxcie;
     8fa:	8a 89       	ldd	r24, Y+18	; 0x12
     8fc:	86 8f       	std	Z+30, r24	; 0x1e
  _udrie = udrie;
     8fe:	8b 89       	ldd	r24, Y+19	; 0x13
     900:	87 8f       	std	Z+31, r24	; 0x1f
  _u2x = u2x;
     902:	8c 89       	ldd	r24, Y+20	; 0x14
     904:	80 a3       	std	Z+32, r24	; 0x20
}
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	08 95       	ret

00000920 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     920:	2f 92       	push	r2
     922:	3f 92       	push	r3
     924:	4f 92       	push	r4
     926:	5f 92       	push	r5
     928:	6f 92       	push	r6
     92a:	7f 92       	push	r7
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	ec 01       	movw	r28, r24
     946:	6a 01       	movw	r12, r20
     948:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     94a:	11 e0       	ldi	r17, 0x01	; 1
     94c:	40 30       	cpi	r20, 0x00	; 0
     94e:	81 ee       	ldi	r24, 0xE1	; 225
     950:	58 07       	cpc	r21, r24
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	68 07       	cpc	r22, r24
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	78 07       	cpc	r23, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <_ZN14HardwareSerial5beginEm+0x44>
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     960:	10 2f       	mov	r17, r16
     962:	18 c0       	rjmp	.+48     	; 0x994 <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     964:	22 24       	eor	r2, r2
     966:	33 24       	eor	r3, r3
     968:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     96a:	0f 2e       	mov	r0, r31
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	8f 2e       	mov	r8, r31
     970:	f9 e0       	ldi	r31, 0x09	; 9
     972:	9f 2e       	mov	r9, r31
     974:	fd e3       	ldi	r31, 0x3D	; 61
     976:	af 2e       	mov	r10, r31
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	bf 2e       	mov	r11, r31
     97c:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     97e:	0f 2e       	mov	r0, r31
     980:	f0 e8       	ldi	r31, 0x80	; 128
     982:	4f 2e       	mov	r4, r31
     984:	f4 e8       	ldi	r31, 0x84	; 132
     986:	5f 2e       	mov	r5, r31
     988:	fe e1       	ldi	r31, 0x1E	; 30
     98a:	6f 2e       	mov	r6, r31
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	7f 2e       	mov	r7, r31
     990:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     992:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
     994:	11 23       	and	r17, r17
     996:	c9 f0       	breq	.+50     	; 0x9ca <_ZN14HardwareSerial5beginEm+0xaa>
    *_ucsra = 1 << _u2x;
     998:	ec 89       	ldd	r30, Y+20	; 0x14
     99a:	fd 89       	ldd	r31, Y+21	; 0x15
     99c:	c1 01       	movw	r24, r2
     99e:	08 a0       	ldd	r0, Y+32	; 0x20
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_ZN14HardwareSerial5beginEm+0x86>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <_ZN14HardwareSerial5beginEm+0x82>
     9aa:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9ac:	c5 01       	movw	r24, r10
     9ae:	b4 01       	movw	r22, r8
     9b0:	a7 01       	movw	r20, r14
     9b2:	96 01       	movw	r18, r12
     9b4:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	30 40       	sbci	r19, 0x00	; 0
     9bc:	40 40       	sbci	r20, 0x00	; 0
     9be:	50 40       	sbci	r21, 0x00	; 0
     9c0:	56 95       	lsr	r21
     9c2:	47 95       	ror	r20
     9c4:	37 95       	ror	r19
     9c6:	27 95       	ror	r18
     9c8:	11 c0       	rjmp	.+34     	; 0x9ec <_ZN14HardwareSerial5beginEm+0xcc>
  } else {
    *_ucsra = 0;
     9ca:	ec 89       	ldd	r30, Y+20	; 0x14
     9cc:	fd 89       	ldd	r31, Y+21	; 0x15
     9ce:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     9d0:	c3 01       	movw	r24, r6
     9d2:	b2 01       	movw	r22, r4
     9d4:	a7 01       	movw	r20, r14
     9d6:	96 01       	movw	r18, r12
     9d8:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	30 40       	sbci	r19, 0x00	; 0
     9e0:	40 40       	sbci	r20, 0x00	; 0
     9e2:	50 40       	sbci	r21, 0x00	; 0
     9e4:	56 95       	lsr	r21
     9e6:	47 95       	ror	r20
     9e8:	37 95       	ror	r19
     9ea:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     9ec:	80 e1       	ldi	r24, 0x10	; 16
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	38 07       	cpc	r19, r24
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <_ZN14HardwareSerial5beginEm+0xda>
     9f4:	11 23       	and	r17, r17
     9f6:	09 f0       	breq	.+2      	; 0x9fa <_ZN14HardwareSerial5beginEm+0xda>
     9f8:	b3 cf       	rjmp	.-154    	; 0x960 <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     9fa:	e8 89       	ldd	r30, Y+16	; 0x10
     9fc:	f9 89       	ldd	r31, Y+17	; 0x11
     9fe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a00:	ea 89       	ldd	r30, Y+18	; 0x12
     a02:	fb 89       	ldd	r31, Y+19	; 0x13
     a04:	20 83       	st	Z, r18

  transmitting = false;
     a06:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     a08:	ee 89       	ldd	r30, Y+22	; 0x16
     a0a:	ff 89       	ldd	r31, Y+23	; 0x17
     a0c:	40 81       	ld	r20, Z
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 01       	movw	r18, r24
     a14:	0c 8c       	ldd	r0, Y+28	; 0x1c
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <_ZN14HardwareSerial5beginEm+0xfc>
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	0a 94       	dec	r0
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <_ZN14HardwareSerial5beginEm+0xf8>
     a20:	24 2b       	or	r18, r20
     a22:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
     a24:	ee 89       	ldd	r30, Y+22	; 0x16
     a26:	ff 89       	ldd	r31, Y+23	; 0x17
     a28:	40 81       	ld	r20, Z
     a2a:	9c 01       	movw	r18, r24
     a2c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN14HardwareSerial5beginEm+0x114>
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <_ZN14HardwareSerial5beginEm+0x110>
     a38:	24 2b       	or	r18, r20
     a3a:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
     a3c:	ee 89       	ldd	r30, Y+22	; 0x16
     a3e:	ff 89       	ldd	r31, Y+23	; 0x17
     a40:	40 81       	ld	r20, Z
     a42:	9c 01       	movw	r18, r24
     a44:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <_ZN14HardwareSerial5beginEm+0x12c>
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <_ZN14HardwareSerial5beginEm+0x128>
     a50:	24 2b       	or	r18, r20
     a52:	20 83       	st	Z, r18
  cbi(*_ucsrb, _udrie);
     a54:	ee 89       	ldd	r30, Y+22	; 0x16
     a56:	ff 89       	ldd	r31, Y+23	; 0x17
     a58:	20 81       	ld	r18, Z
     a5a:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <_ZN14HardwareSerial5beginEm+0x142>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	0a 94       	dec	r0
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <_ZN14HardwareSerial5beginEm+0x13e>
     a66:	80 95       	com	r24
     a68:	82 23       	and	r24, r18
     a6a:	80 83       	st	Z, r24
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	bf 90       	pop	r11
     a7e:	af 90       	pop	r10
     a80:	9f 90       	pop	r9
     a82:	8f 90       	pop	r8
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	3f 90       	pop	r3
     a8e:	2f 90       	pop	r2
     a90:	08 95       	ret

00000a92 <_ZN14HardwareSerial5beginEmh>:

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a92:	3f 92       	push	r3
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	6a 01       	movw	r12, r20
     ab8:	7b 01       	movw	r14, r22
     aba:	32 2e       	mov	r3, r18
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::begin(unsigned long baud, byte config)
     abc:	11 e0       	ldi	r17, 0x01	; 1
     abe:	40 30       	cpi	r20, 0x00	; 0
     ac0:	81 ee       	ldi	r24, 0xE1	; 225
     ac2:	58 07       	cpc	r21, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	68 07       	cpc	r22, r24
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	78 07       	cpc	r23, r24
     acc:	21 f4       	brne	.+8      	; 0xad6 <_ZN14HardwareSerial5beginEmh+0x44>
     ace:	10 e0       	ldi	r17, 0x00	; 0
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <_ZN14HardwareSerial5beginEmh+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     ad2:	10 2f       	mov	r17, r16
     ad4:	15 c0       	rjmp	.+42     	; 0xb00 <_ZN14HardwareSerial5beginEmh+0x6e>

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ad6:	0f 2e       	mov	r0, r31
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	8f 2e       	mov	r8, r31
     adc:	f9 e0       	ldi	r31, 0x09	; 9
     ade:	9f 2e       	mov	r9, r31
     ae0:	fd e3       	ldi	r31, 0x3D	; 61
     ae2:	af 2e       	mov	r10, r31
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	bf 2e       	mov	r11, r31
     ae8:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     aea:	0f 2e       	mov	r0, r31
     aec:	f0 e8       	ldi	r31, 0x80	; 128
     aee:	4f 2e       	mov	r4, r31
     af0:	f4 e8       	ldi	r31, 0x84	; 132
     af2:	5f 2e       	mov	r5, r31
     af4:	fe e1       	ldi	r31, 0x1E	; 30
     af6:	6f 2e       	mov	r6, r31
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	7f 2e       	mov	r7, r31
     afc:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     afe:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
     b00:	11 23       	and	r17, r17
     b02:	d1 f0       	breq	.+52     	; 0xb38 <_ZN14HardwareSerial5beginEmh+0xa6>
    *_ucsra = 1 << _u2x;
     b04:	ec 89       	ldd	r30, Y+20	; 0x14
     b06:	fd 89       	ldd	r31, Y+21	; 0x15
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	08 a0       	ldd	r0, Y+32	; 0x20
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <_ZN14HardwareSerial5beginEmh+0x82>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <_ZN14HardwareSerial5beginEmh+0x7e>
     b18:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b1a:	c5 01       	movw	r24, r10
     b1c:	b4 01       	movw	r22, r8
     b1e:	a7 01       	movw	r20, r14
     b20:	96 01       	movw	r18, r12
     b22:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
     b26:	21 50       	subi	r18, 0x01	; 1
     b28:	30 40       	sbci	r19, 0x00	; 0
     b2a:	40 40       	sbci	r20, 0x00	; 0
     b2c:	50 40       	sbci	r21, 0x00	; 0
     b2e:	56 95       	lsr	r21
     b30:	47 95       	ror	r20
     b32:	37 95       	ror	r19
     b34:	27 95       	ror	r18
     b36:	11 c0       	rjmp	.+34     	; 0xb5a <_ZN14HardwareSerial5beginEmh+0xc8>
  } else {
    *_ucsra = 0;
     b38:	ec 89       	ldd	r30, Y+20	; 0x14
     b3a:	fd 89       	ldd	r31, Y+21	; 0x15
     b3c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b3e:	c3 01       	movw	r24, r6
     b40:	b2 01       	movw	r22, r4
     b42:	a7 01       	movw	r20, r14
     b44:	96 01       	movw	r18, r12
     b46:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	30 40       	sbci	r19, 0x00	; 0
     b4e:	40 40       	sbci	r20, 0x00	; 0
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	56 95       	lsr	r21
     b54:	47 95       	ror	r20
     b56:	37 95       	ror	r19
     b58:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	20 30       	cpi	r18, 0x00	; 0
     b5e:	38 07       	cpc	r19, r24
     b60:	18 f0       	brcs	.+6      	; 0xb68 <_ZN14HardwareSerial5beginEmh+0xd6>
     b62:	11 23       	and	r17, r17
     b64:	09 f0       	breq	.+2      	; 0xb68 <_ZN14HardwareSerial5beginEmh+0xd6>
     b66:	b5 cf       	rjmp	.-150    	; 0xad2 <_ZN14HardwareSerial5beginEmh+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b68:	e8 89       	ldd	r30, Y+16	; 0x10
     b6a:	f9 89       	ldd	r31, Y+17	; 0x11
     b6c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b6e:	ea 89       	ldd	r30, Y+18	; 0x12
     b70:	fb 89       	ldd	r31, Y+19	; 0x13
     b72:	20 83       	st	Z, r18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b74:	e8 8d       	ldd	r30, Y+24	; 0x18
     b76:	f9 8d       	ldd	r31, Y+25	; 0x19
     b78:	30 82       	st	Z, r3
  
  sbi(*_ucsrb, _rxen);
     b7a:	ee 89       	ldd	r30, Y+22	; 0x16
     b7c:	ff 89       	ldd	r31, Y+23	; 0x17
     b7e:	40 81       	ld	r20, Z
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	9c 01       	movw	r18, r24
     b86:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <_ZN14HardwareSerial5beginEmh+0xfc>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <_ZN14HardwareSerial5beginEmh+0xf8>
     b92:	24 2b       	or	r18, r20
     b94:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
     b96:	ee 89       	ldd	r30, Y+22	; 0x16
     b98:	ff 89       	ldd	r31, Y+23	; 0x17
     b9a:	40 81       	ld	r20, Z
     b9c:	9c 01       	movw	r18, r24
     b9e:	0d 8c       	ldd	r0, Y+29	; 0x1d
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <_ZN14HardwareSerial5beginEmh+0x114>
     ba2:	22 0f       	add	r18, r18
     ba4:	33 1f       	adc	r19, r19
     ba6:	0a 94       	dec	r0
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <_ZN14HardwareSerial5beginEmh+0x110>
     baa:	24 2b       	or	r18, r20
     bac:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
     bae:	ee 89       	ldd	r30, Y+22	; 0x16
     bb0:	ff 89       	ldd	r31, Y+23	; 0x17
     bb2:	40 81       	ld	r20, Z
     bb4:	9c 01       	movw	r18, r24
     bb6:	0e 8c       	ldd	r0, Y+30	; 0x1e
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <_ZN14HardwareSerial5beginEmh+0x12c>
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <_ZN14HardwareSerial5beginEmh+0x128>
     bc2:	24 2b       	or	r18, r20
     bc4:	20 83       	st	Z, r18
  cbi(*_ucsrb, _udrie);
     bc6:	ee 89       	ldd	r30, Y+22	; 0x16
     bc8:	ff 89       	ldd	r31, Y+23	; 0x17
     bca:	20 81       	ld	r18, Z
     bcc:	0f 8c       	ldd	r0, Y+31	; 0x1f
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <_ZN14HardwareSerial5beginEmh+0x142>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <_ZN14HardwareSerial5beginEmh+0x13e>
     bd8:	80 95       	com	r24
     bda:	82 23       	and	r24, r18
     bdc:	80 83       	st	Z, r24
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	3f 90       	pop	r3
     c00:	08 95       	ret

00000c02 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
     c08:	a6 85       	ldd	r26, Z+14	; 0x0e
     c0a:	b7 85       	ldd	r27, Z+15	; 0x0f
     c0c:	ed 01       	movw	r28, r26
     c0e:	c0 5c       	subi	r28, 0xC0	; 192
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	ae 5b       	subi	r26, 0xBE	; 190
     c14:	bf 4f       	sbci	r27, 0xFF	; 255
     c16:	48 81       	ld	r20, Y
     c18:	59 81       	ldd	r21, Y+1	; 0x01
     c1a:	2d 91       	ld	r18, X+
     c1c:	3c 91       	ld	r19, X
     c1e:	11 97       	sbiw	r26, 0x01	; 1
     c20:	42 17       	cp	r20, r18
     c22:	53 07       	cpc	r21, r19
     c24:	c1 f7       	brne	.-16     	; 0xc16 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
     c26:	a6 89       	ldd	r26, Z+22	; 0x16
     c28:	b7 89       	ldd	r27, Z+23	; 0x17
     c2a:	4c 91       	ld	r20, X
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9c 01       	movw	r18, r24
     c32:	04 8c       	ldd	r0, Z+28	; 0x1c
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <_ZN14HardwareSerial3endEv+0x38>
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <_ZN14HardwareSerial3endEv+0x34>
     c3e:	20 95       	com	r18
     c40:	24 23       	and	r18, r20
     c42:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
     c44:	a6 89       	ldd	r26, Z+22	; 0x16
     c46:	b7 89       	ldd	r27, Z+23	; 0x17
     c48:	4c 91       	ld	r20, X
     c4a:	9c 01       	movw	r18, r24
     c4c:	05 8c       	ldd	r0, Z+29	; 0x1d
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <_ZN14HardwareSerial3endEv+0x52>
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <_ZN14HardwareSerial3endEv+0x4e>
     c58:	20 95       	com	r18
     c5a:	24 23       	and	r18, r20
     c5c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
     c5e:	a6 89       	ldd	r26, Z+22	; 0x16
     c60:	b7 89       	ldd	r27, Z+23	; 0x17
     c62:	4c 91       	ld	r20, X
     c64:	9c 01       	movw	r18, r24
     c66:	06 8c       	ldd	r0, Z+30	; 0x1e
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <_ZN14HardwareSerial3endEv+0x6c>
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <_ZN14HardwareSerial3endEv+0x68>
     c72:	20 95       	com	r18
     c74:	24 23       	and	r18, r20
     c76:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
     c78:	a6 89       	ldd	r26, Z+22	; 0x16
     c7a:	b7 89       	ldd	r27, Z+23	; 0x17
     c7c:	2c 91       	ld	r18, X
     c7e:	07 8c       	ldd	r0, Z+31	; 0x1f
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <_ZN14HardwareSerial3endEv+0x84>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <_ZN14HardwareSerial3endEv+0x80>
     c8a:	80 95       	com	r24
     c8c:	82 23       	and	r24, r18
     c8e:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
     c90:	84 85       	ldd	r24, Z+12	; 0x0c
     c92:	95 85       	ldd	r25, Z+13	; 0x0d
     c94:	fc 01       	movw	r30, r24
     c96:	ee 5b       	subi	r30, 0xBE	; 190
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	80 5c       	subi	r24, 0xC0	; 192
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	fc 01       	movw	r30, r24
     ca4:	31 83       	std	Z+1, r19	; 0x01
     ca6:	20 83       	st	Z, r18
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	08 95       	ret

00000cb2 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
     cb2:	3f 92       	push	r3
     cb4:	4f 92       	push	r4
     cb6:	5f 92       	push	r5
     cb8:	6f 92       	push	r6
     cba:	7f 92       	push	r7
     cbc:	8f 92       	push	r8
     cbe:	9f 92       	push	r9
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <_GLOBAL__I_rx_buffer+0x20>
     cd2:	0f 92       	push	r0
     cd4:	0f 92       	push	r0
     cd6:	ed b7       	in	r30, 0x3d	; 61
     cd8:	fe b7       	in	r31, 0x3e	; 62
     cda:	31 96       	adiw	r30, 0x01	; 1
     cdc:	77 24       	eor	r7, r7
     cde:	68 94       	set
     ce0:	72 f8       	bld	r7, 2
     ce2:	ad b7       	in	r26, 0x3d	; 61
     ce4:	be b7       	in	r27, 0x3e	; 62
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	7c 92       	st	X, r7
     cea:	0f 2e       	mov	r0, r31
     cec:	f3 e0       	ldi	r31, 0x03	; 3
     cee:	6f 2e       	mov	r6, r31
     cf0:	f0 2d       	mov	r31, r0
     cf2:	61 82       	std	Z+1, r6	; 0x01
     cf4:	0f 2e       	mov	r0, r31
     cf6:	f7 e0       	ldi	r31, 0x07	; 7
     cf8:	5f 2e       	mov	r5, r31
     cfa:	f0 2d       	mov	r31, r0
     cfc:	52 82       	std	Z+2, r5	; 0x02
     cfe:	0f 2e       	mov	r0, r31
     d00:	f5 e0       	ldi	r31, 0x05	; 5
     d02:	4f 2e       	mov	r4, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	43 82       	std	Z+3, r4	; 0x03
     d08:	33 24       	eor	r3, r3
     d0a:	33 94       	inc	r3
     d0c:	34 82       	std	Z+4, r3	; 0x04
     d0e:	8e e8       	ldi	r24, 0x8E	; 142
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	6e e6       	ldi	r22, 0x6E	; 110
     d14:	72 e0       	ldi	r23, 0x02	; 2
     d16:	42 eb       	ldi	r20, 0xB2	; 178
     d18:	52 e0       	ldi	r21, 0x02	; 2
     d1a:	25 ec       	ldi	r18, 0xC5	; 197
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	04 ec       	ldi	r16, 0xC4	; 196
     d20:	10 e0       	ldi	r17, 0x00	; 0
     d22:	0f 2e       	mov	r0, r31
     d24:	f0 ec       	ldi	r31, 0xC0	; 192
     d26:	ef 2e       	mov	r14, r31
     d28:	ff 24       	eor	r15, r15
     d2a:	f0 2d       	mov	r31, r0
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f1 ec       	ldi	r31, 0xC1	; 193
     d30:	cf 2e       	mov	r12, r31
     d32:	dd 24       	eor	r13, r13
     d34:	f0 2d       	mov	r31, r0
     d36:	0f 2e       	mov	r0, r31
     d38:	f2 ec       	ldi	r31, 0xC2	; 194
     d3a:	af 2e       	mov	r10, r31
     d3c:	bb 24       	eor	r11, r11
     d3e:	f0 2d       	mov	r31, r0
     d40:	0f 2e       	mov	r0, r31
     d42:	f6 ec       	ldi	r31, 0xC6	; 198
     d44:	8f 2e       	mov	r8, r31
     d46:	99 24       	eor	r9, r9
     d48:	f0 2d       	mov	r31, r0
     d4a:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
     d4e:	ed b7       	in	r30, 0x3d	; 61
     d50:	fe b7       	in	r31, 0x3e	; 62
     d52:	31 96       	adiw	r30, 0x01	; 1
     d54:	ad b7       	in	r26, 0x3d	; 61
     d56:	be b7       	in	r27, 0x3e	; 62
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	7c 92       	st	X, r7
     d5c:	61 82       	std	Z+1, r6	; 0x01
     d5e:	52 82       	std	Z+2, r5	; 0x02
     d60:	43 82       	std	Z+3, r4	; 0x03
     d62:	34 82       	std	Z+4, r3	; 0x04
     d64:	80 eb       	ldi	r24, 0xB0	; 176
     d66:	94 e0       	ldi	r25, 0x04	; 4
     d68:	66 ef       	ldi	r22, 0xF6	; 246
     d6a:	72 e0       	ldi	r23, 0x02	; 2
     d6c:	4a e3       	ldi	r20, 0x3A	; 58
     d6e:	53 e0       	ldi	r21, 0x03	; 3
     d70:	2d ec       	ldi	r18, 0xCD	; 205
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	0c ec       	ldi	r16, 0xCC	; 204
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	0f 2e       	mov	r0, r31
     d7a:	f8 ec       	ldi	r31, 0xC8	; 200
     d7c:	ef 2e       	mov	r14, r31
     d7e:	ff 24       	eor	r15, r15
     d80:	f0 2d       	mov	r31, r0
     d82:	0f 2e       	mov	r0, r31
     d84:	f9 ec       	ldi	r31, 0xC9	; 201
     d86:	cf 2e       	mov	r12, r31
     d88:	dd 24       	eor	r13, r13
     d8a:	f0 2d       	mov	r31, r0
     d8c:	0f 2e       	mov	r0, r31
     d8e:	fa ec       	ldi	r31, 0xCA	; 202
     d90:	af 2e       	mov	r10, r31
     d92:	bb 24       	eor	r11, r11
     d94:	f0 2d       	mov	r31, r0
     d96:	0f 2e       	mov	r0, r31
     d98:	fe ec       	ldi	r31, 0xCE	; 206
     d9a:	8f 2e       	mov	r8, r31
     d9c:	99 24       	eor	r9, r9
     d9e:	f0 2d       	mov	r31, r0
     da0:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
     da4:	ed b7       	in	r30, 0x3d	; 61
     da6:	fe b7       	in	r31, 0x3e	; 62
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	ad b7       	in	r26, 0x3d	; 61
     dac:	be b7       	in	r27, 0x3e	; 62
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	7c 92       	st	X, r7
     db2:	61 82       	std	Z+1, r6	; 0x01
     db4:	52 82       	std	Z+2, r5	; 0x02
     db6:	43 82       	std	Z+3, r4	; 0x03
     db8:	34 82       	std	Z+4, r3	; 0x04
     dba:	82 ed       	ldi	r24, 0xD2	; 210
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	6e e7       	ldi	r22, 0x7E	; 126
     dc0:	73 e0       	ldi	r23, 0x03	; 3
     dc2:	42 ec       	ldi	r20, 0xC2	; 194
     dc4:	53 e0       	ldi	r21, 0x03	; 3
     dc6:	25 ed       	ldi	r18, 0xD5	; 213
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	04 ed       	ldi	r16, 0xD4	; 212
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	0f 2e       	mov	r0, r31
     dd0:	f0 ed       	ldi	r31, 0xD0	; 208
     dd2:	ef 2e       	mov	r14, r31
     dd4:	ff 24       	eor	r15, r15
     dd6:	f0 2d       	mov	r31, r0
     dd8:	0f 2e       	mov	r0, r31
     dda:	f1 ed       	ldi	r31, 0xD1	; 209
     ddc:	cf 2e       	mov	r12, r31
     dde:	dd 24       	eor	r13, r13
     de0:	f0 2d       	mov	r31, r0
     de2:	0f 2e       	mov	r0, r31
     de4:	f2 ed       	ldi	r31, 0xD2	; 210
     de6:	af 2e       	mov	r10, r31
     de8:	bb 24       	eor	r11, r11
     dea:	f0 2d       	mov	r31, r0
     dec:	0f 2e       	mov	r0, r31
     dee:	f6 ed       	ldi	r31, 0xD6	; 214
     df0:	8f 2e       	mov	r8, r31
     df2:	99 24       	eor	r9, r9
     df4:	f0 2d       	mov	r31, r0
     df6:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
     dfa:	ed b7       	in	r30, 0x3d	; 61
     dfc:	fe b7       	in	r31, 0x3e	; 62
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	ad b7       	in	r26, 0x3d	; 61
     e02:	be b7       	in	r27, 0x3e	; 62
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	7c 92       	st	X, r7
     e08:	61 82       	std	Z+1, r6	; 0x01
     e0a:	52 82       	std	Z+2, r5	; 0x02
     e0c:	43 82       	std	Z+3, r4	; 0x03
     e0e:	34 82       	std	Z+4, r3	; 0x04
     e10:	84 ef       	ldi	r24, 0xF4	; 244
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	66 e0       	ldi	r22, 0x06	; 6
     e16:	74 e0       	ldi	r23, 0x04	; 4
     e18:	4a e4       	ldi	r20, 0x4A	; 74
     e1a:	54 e0       	ldi	r21, 0x04	; 4
     e1c:	25 e3       	ldi	r18, 0x35	; 53
     e1e:	31 e0       	ldi	r19, 0x01	; 1
     e20:	04 e3       	ldi	r16, 0x34	; 52
     e22:	11 e0       	ldi	r17, 0x01	; 1
     e24:	0f 2e       	mov	r0, r31
     e26:	f0 e3       	ldi	r31, 0x30	; 48
     e28:	ef 2e       	mov	r14, r31
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	ff 2e       	mov	r15, r31
     e2e:	f0 2d       	mov	r31, r0
     e30:	0f 2e       	mov	r0, r31
     e32:	f1 e3       	ldi	r31, 0x31	; 49
     e34:	cf 2e       	mov	r12, r31
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	df 2e       	mov	r13, r31
     e3a:	f0 2d       	mov	r31, r0
     e3c:	0f 2e       	mov	r0, r31
     e3e:	f2 e3       	ldi	r31, 0x32	; 50
     e40:	af 2e       	mov	r10, r31
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	bf 2e       	mov	r11, r31
     e46:	f0 2d       	mov	r31, r0
     e48:	0f 2e       	mov	r0, r31
     e4a:	f6 e3       	ldi	r31, 0x36	; 54
     e4c:	8f 2e       	mov	r8, r31
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	9f 2e       	mov	r9, r31
     e52:	f0 2d       	mov	r31, r0
     e54:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	3f 90       	pop	r3
     e80:	08 95       	ret

00000e82 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	4c 01       	movw	r8, r24
     e9c:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     e9e:	aa 24       	eor	r10, r10
     ea0:	bb 24       	eor	r11, r11
     ea2:	68 94       	set
     ea4:	a1 f8       	bld	r10, 1
     ea6:	a8 0e       	add	r10, r24
     ea8:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     eae:	cc 24       	eor	r12, r12
     eb0:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     eb2:	f5 01       	movw	r30, r10
     eb4:	61 91       	ld	r22, Z+
     eb6:	5f 01       	movw	r10, r30
     eb8:	c7 01       	movw	r24, r14
     eba:	4a e0       	ldi	r20, 0x0A	; 10
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN5Print5printEhi>
     ec2:	ec 01       	movw	r28, r24
        n += p.print('.');
     ec4:	c7 01       	movw	r24, r14
     ec6:	6e e2       	ldi	r22, 0x2E	; 46
     ec8:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     ecc:	c8 0f       	add	r28, r24
     ece:	d9 1f       	adc	r29, r25
        n += p.print('.');
     ed0:	cc 0e       	add	r12, r28
     ed2:	dd 1e       	adc	r13, r29
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     ed4:	0f 5f       	subi	r16, 0xFF	; 255
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	03 30       	cpi	r16, 0x03	; 3
     eda:	11 05       	cpc	r17, r1
     edc:	51 f7       	brne	.-44     	; 0xeb2 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     ede:	c7 01       	movw	r24, r14
     ee0:	f4 01       	movw	r30, r8
     ee2:	65 81       	ldd	r22, Z+5	; 0x05
     ee4:	4a e0       	ldi	r20, 0x0A	; 10
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN5Print5printEhi>
     eec:	c8 0e       	add	r12, r24
     eee:	d9 1e       	adc	r13, r25
    return n;
}
     ef0:	8c 2d       	mov	r24, r12
     ef2:	9d 2d       	mov	r25, r13
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	bf 90       	pop	r11
     f06:	af 90       	pop	r10
     f08:	9f 90       	pop	r9
     f0a:	8f 90       	pop	r8
     f0c:	08 95       	ret

00000f0e <_ZN9IPAddressC1Ev>:
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     f0e:	fc 01       	movw	r30, r24
     f10:	8a e2       	ldi	r24, 0x2A	; 42
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     f18:	12 82       	std	Z+2, r1	; 0x02
     f1a:	13 82       	std	Z+3, r1	; 0x03
     f1c:	14 82       	std	Z+4, r1	; 0x04
     f1e:	15 82       	std	Z+5, r1	; 0x05
}
     f20:	08 95       	ret

00000f22 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     f22:	0f 93       	push	r16
     f24:	fc 01       	movw	r30, r24
     f26:	8a e2       	ldi	r24, 0x2A	; 42
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     f2e:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     f30:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     f32:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     f34:	05 83       	std	Z+5, r16	; 0x05
}
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
     f3a:	fc 01       	movw	r30, r24
     f3c:	8a e2       	ldi	r24, 0x2A	; 42
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
     f44:	42 83       	std	Z+2, r20	; 0x02
     f46:	53 83       	std	Z+3, r21	; 0x03
     f48:	64 83       	std	Z+4, r22	; 0x04
     f4a:	75 83       	std	Z+5, r23	; 0x05
}
     f4c:	08 95       	ret

00000f4e <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
     f4e:	fc 01       	movw	r30, r24
     f50:	8a e2       	ldi	r24, 0x2A	; 42
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
     f58:	db 01       	movw	r26, r22
     f5a:	2d 91       	ld	r18, X+
     f5c:	3d 91       	ld	r19, X+
     f5e:	4d 91       	ld	r20, X+
     f60:	5c 91       	ld	r21, X
     f62:	13 97       	sbiw	r26, 0x03	; 3
     f64:	22 83       	std	Z+2, r18	; 0x02
     f66:	33 83       	std	Z+3, r19	; 0x03
     f68:	44 83       	std	Z+4, r20	; 0x04
     f6a:	55 83       	std	Z+5, r21	; 0x05
}
     f6c:	08 95       	ret

00000f6e <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	fc 01       	movw	r30, r24
    memcpy(_address, address, sizeof(_address));
     f74:	eb 01       	movw	r28, r22
     f76:	88 81       	ld	r24, Y
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	aa 81       	ldd	r26, Y+2	; 0x02
     f7c:	bb 81       	ldd	r27, Y+3	; 0x03
     f7e:	82 83       	std	Z+2, r24	; 0x02
     f80:	93 83       	std	Z+3, r25	; 0x03
     f82:	a4 83       	std	Z+4, r26	; 0x04
     f84:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
     f86:	8e 2f       	mov	r24, r30
     f88:	9f 2f       	mov	r25, r31
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
     f90:	fc 01       	movw	r30, r24
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
     f92:	42 83       	std	Z+2, r20	; 0x02
     f94:	53 83       	std	Z+3, r21	; 0x03
     f96:	64 83       	std	Z+4, r22	; 0x04
     f98:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
     f9a:	9f 2f       	mov	r25, r31
     f9c:	08 95       	ret

00000f9e <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
     f9e:	9b 01       	movw	r18, r22
    return memcmp(addr, _address, sizeof(_address)) == 0;
     fa0:	bc 01       	movw	r22, r24
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	c9 01       	movw	r24, r18
     fa8:	44 e0       	ldi	r20, 0x04	; 4
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <memcmp>
     fb0:	28 2f       	mov	r18, r24
     fb2:	39 2f       	mov	r19, r25
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	09 f0       	breq	.+2      	; 0xfbe <_ZN9IPAddresseqEPKh+0x20>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
}
     fbe:	08 95       	ret

00000fc0 <_GLOBAL__I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
     fc0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     fc2:	86 e1       	ldi	r24, 0x16	; 22
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN9IPAddressC1Ehhhh>
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <atexit>:
*/

#include <Arduino.h>

//Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (*func)()) { return 0; }
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	08 95       	ret

00000fdc <initVariant>:

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     fdc:	08 95       	ret

00000fde <main>:

int main(void)
{
	init();
     fde:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <init>

	initVariant();
     fe2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     fe6:	0e 94 58 30 	call	0x60b0	; 0x60b0 <setup>
    
	for (;;) {
		loop();
     fea:	0e 94 a2 30 	call	0x6144	; 0x6144 <loop>
		if (serialEventRun) serialEventRun();
     fee:	87 e3       	ldi	r24, 0x37	; 55
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	29 f0       	breq	.+10     	; 0x1000 <main+0x22>
     ff6:	0e 94 37 03 	call	0x66e	; 0x66e <_Z14serialEventRunv>
#endif
	
	setup();
    
	for (;;) {
		loop();
     ffa:	0e 94 a2 30 	call	0x6144	; 0x6144 <loop>
     ffe:	fb cf       	rjmp	.-10     	; 0xff6 <main+0x18>
    1000:	0e 94 a2 30 	call	0x6144	; 0x6144 <loop>
    1004:	fd cf       	rjmp	.-6      	; 0x1000 <main+0x22>

00001006 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    1006:	0e 94 28 31 	call	0x6250	; 0x6250 <malloc>
}
    100a:	08 95       	ret

0000100c <_Znaj>:

void * operator new[](size_t size)
{
  return malloc(size);
    100c:	0e 94 28 31 	call	0x6250	; 0x6250 <malloc>
}
    1010:	08 95       	ret

00001012 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    1012:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
}
    1016:	08 95       	ret

00001018 <_ZdaPv>:

void operator delete[](void * ptr)
{
  free(ptr);
    1018:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
}
    101c:	08 95       	ret

0000101e <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	11 f0       	breq	.+4      	; 0x102e <__cxa_guard_acquire+0x10>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	82 2f       	mov	r24, r18
    1030:	93 2f       	mov	r25, r19
    1032:	08 95       	ret

00001034 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	08 95       	ret

0000103c <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    103c:	08 95       	ret

0000103e <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    103e:	08 95       	ret

00001040 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	6c 01       	movw	r12, r24
    1052:	7b 01       	movw	r14, r22
    1054:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    1056:	20 97       	sbiw	r28, 0x00	; 0
    1058:	91 f0       	breq	.+36     	; 0x107e <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    105e:	d7 01       	movw	r26, r14
    1060:	6d 91       	ld	r22, X+
    1062:	7d 01       	movw	r14, r26
    1064:	d6 01       	movw	r26, r12
    1066:	ed 91       	ld	r30, X+
    1068:	fc 91       	ld	r31, X
    106a:	01 90       	ld	r0, Z+
    106c:	f0 81       	ld	r31, Z
    106e:	e0 2d       	mov	r30, r0
    1070:	c6 01       	movw	r24, r12
    1072:	19 95       	eicall
    1074:	08 0f       	add	r16, r24
    1076:	19 1f       	adc	r17, r25
    1078:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    107a:	89 f7       	brne	.-30     	; 0x105e <_ZN5Print5writeEPKhj+0x1e>
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    1082:	80 2f       	mov	r24, r16
    1084:	91 2f       	mov	r25, r17
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	08 95       	ret

00001098 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	7c 01       	movw	r14, r24
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
    10aa:	c6 2e       	mov	r12, r22
    10ac:	e6 01       	movw	r28, r12
    10ae:	6e 01       	movw	r12, r28
    10b0:	d7 2e       	mov	r13, r23
    10b2:	e6 01       	movw	r28, r12
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    10b4:	f6 01       	movw	r30, r12
    10b6:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    10b8:	66 23       	and	r22, r22
    10ba:	91 f0       	breq	.+36     	; 0x10e0 <_ZN5Print5printEPK19__FlashStringHelper+0x48>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    10bc:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    10be:	00 e0       	ldi	r16, 0x00	; 0
    10c0:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    10c2:	f7 01       	movw	r30, r14
    10c4:	a0 81       	ld	r26, Z
    10c6:	b1 81       	ldd	r27, Z+1	; 0x01
    10c8:	ed 91       	ld	r30, X+
    10ca:	fc 91       	ld	r31, X
    10cc:	c7 01       	movw	r24, r14
    10ce:	19 95       	eicall
    10d0:	08 0f       	add	r16, r24
    10d2:	19 1f       	adc	r17, r25
    10d4:	fe 01       	movw	r30, r28
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    10d6:	21 96       	adiw	r28, 0x01	; 1
    10d8:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    10da:	66 23       	and	r22, r22
    10dc:	91 f7       	brne	.-28     	; 0x10c2 <_ZN5Print5printEPK19__FlashStringHelper+0x2a>
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <_ZN5Print5printEPK19__FlashStringHelper+0x4c>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    10e0:	00 e0       	ldi	r16, 0x00	; 0
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    10e4:	80 2f       	mov	r24, r16
    10e6:	91 2f       	mov	r25, r17
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	fb 01       	movw	r30, r22
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1100:	ec 01       	movw	r28, r24
    1102:	a8 81       	ld	r26, Y
    1104:	b9 81       	ldd	r27, Y+1	; 0x01
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	44 81       	ldd	r20, Z+4	; 0x04
    110c:	55 81       	ldd	r21, Z+5	; 0x05
    110e:	12 96       	adiw	r26, 0x02	; 2
    1110:	ed 91       	ld	r30, X+
    1112:	fc 91       	ld	r31, X
    1114:	13 97       	sbiw	r26, 0x03	; 3
    1116:	19 95       	eicall
  return write(s.c_str(), s.length());
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    111e:	61 15       	cp	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	a1 f0       	breq	.+40     	; 0x114c <_ZN5Print5printEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1124:	e6 2f       	mov	r30, r22
    1126:	f7 2f       	mov	r31, r23
    1128:	df 01       	movw	r26, r30
    112a:	0d 90       	ld	r0, X+
    112c:	00 20       	and	r0, r0
    112e:	e9 f7       	brne	.-6      	; 0x112a <_ZN5Print5printEPKc+0xc>
    1130:	ad 01       	movw	r20, r26
    1132:	41 50       	subi	r20, 0x01	; 1
    1134:	50 40       	sbci	r21, 0x00	; 0
    1136:	4e 1b       	sub	r20, r30
    1138:	5f 0b       	sbc	r21, r31
    113a:	dc 01       	movw	r26, r24
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	02 80       	ldd	r0, Z+2	; 0x02
    1142:	f3 81       	ldd	r31, Z+3	; 0x03
    1144:	e0 2d       	mov	r30, r0
    1146:	19 95       	eicall
    1148:	9c 01       	movw	r18, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <_ZN5Print5printEPKc+0x32>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
    1150:	82 2f       	mov	r24, r18
    1152:	93 2f       	mov	r25, r19
    1154:	08 95       	ret

00001156 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    1156:	dc 01       	movw	r26, r24
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
    1162:	19 95       	eicall
}
    1164:	08 95       	ret

00001166 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    1166:	9c 01       	movw	r18, r24
    1168:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    116a:	db 01       	movw	r26, r22
    116c:	ed 91       	ld	r30, X+
    116e:	fc 91       	ld	r31, X
    1170:	01 90       	ld	r0, Z+
    1172:	f0 81       	ld	r31, Z
    1174:	e0 2d       	mov	r30, r0
    1176:	b9 01       	movw	r22, r18
    1178:	19 95       	eicall
}
    117a:	08 95       	ret

0000117c <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    118a:	6d e0       	ldi	r22, 0x0D	; 13
    118c:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
    1190:	ec 01       	movw	r28, r24
  n += print('\n');
    1192:	c8 01       	movw	r24, r16
    1194:	6a e0       	ldi	r22, 0x0A	; 10
    1196:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
    119a:	c8 0f       	add	r28, r24
    119c:	d9 1f       	adc	r29, r25
  return n;
}
    119e:	7e 01       	movw	r14, r28
    11a0:	8c 2f       	mov	r24, r28
    11a2:	9f 2d       	mov	r25, r15
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	08 95       	ret

000011b2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    11c0:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Print5printEPK19__FlashStringHelper>
    11c4:	ec 01       	movw	r28, r24
  n += println();
    11c6:	c8 01       	movw	r24, r16
    11c8:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    11cc:	c8 0f       	add	r28, r24
    11ce:	d9 1f       	adc	r29, r25
  return n;
}
    11d0:	7e 01       	movw	r14, r28
    11d2:	8c 2f       	mov	r24, r28
    11d4:	9f 2d       	mov	r25, r15
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	08 95       	ret

000011e4 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	8c 01       	movw	r16, r24
  size_t n = print(s);
    11f2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN5Print5printERK6String>
    11f6:	ec 01       	movw	r28, r24
  n += println();
    11f8:	c8 01       	movw	r24, r16
    11fa:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    11fe:	c8 0f       	add	r28, r24
    1200:	d9 1f       	adc	r29, r25
  return n;
}
    1202:	7e 01       	movw	r14, r28
    1204:	8c 2f       	mov	r24, r28
    1206:	9f 2d       	mov	r25, r15
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	08 95       	ret

00001216 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	8c 01       	movw	r16, r24
  size_t n = print(c);
    1224:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
    1228:	ec 01       	movw	r28, r24
  n += println();
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1230:	c8 0f       	add	r28, r24
    1232:	d9 1f       	adc	r29, r25
  return n;
}
    1234:	7e 01       	movw	r14, r28
    1236:	8c 2f       	mov	r24, r28
    1238:	9f 2d       	mov	r25, r15
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	08 95       	ret

00001248 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	8c 01       	movw	r16, r24
  size_t n = print(c);
    1256:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
    125a:	ec 01       	movw	r28, r24
  n += println();
    125c:	c8 01       	movw	r24, r16
    125e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1262:	c8 0f       	add	r28, r24
    1264:	d9 1f       	adc	r29, r25
  return n;
}
    1266:	7e 01       	movw	r14, r28
    1268:	8c 2f       	mov	r24, r28
    126a:	9f 2d       	mov	r25, r15
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	08 95       	ret

0000127a <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
  size_t n = print(x);
    1288:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printERK9Printable>
    128c:	ec 01       	movw	r28, r24
  n += println();
    128e:	c8 01       	movw	r24, r16
    1290:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1294:	c8 0f       	add	r28, r24
    1296:	d9 1f       	adc	r29, r25
  return n;
}
    1298:	7e 01       	movw	r14, r28
    129a:	8c 2f       	mov	r24, r28
    129c:	9f 2d       	mov	r25, r15
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	08 95       	ret

000012ac <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    12ac:	4f 92       	push	r4
    12ae:	5f 92       	push	r5
    12b0:	6f 92       	push	r6
    12b2:	7f 92       	push	r7
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	a1 97       	sbiw	r28, 0x21	; 33
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	2c 01       	movw	r4, r24
    12de:	f4 2e       	mov	r15, r20
    12e0:	35 2f       	mov	r19, r21
    12e2:	86 2f       	mov	r24, r22
    12e4:	97 2f       	mov	r25, r23
    12e6:	e2 2e       	mov	r14, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    12e8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	20 f4       	brcc	.+8      	; 0x12f6 <_ZN5Print11printNumberEmh+0x4a>
    12ee:	0f 2e       	mov	r0, r31
    12f0:	fa e0       	ldi	r31, 0x0A	; 10
    12f2:	ef 2e       	mov	r14, r31
    12f4:	f0 2d       	mov	r31, r0
    12f6:	8e 01       	movw	r16, r28
    12f8:	0f 5d       	subi	r16, 0xDF	; 223
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    12fc:	6e 2c       	mov	r6, r14
    12fe:	77 24       	eor	r7, r7
    1300:	88 24       	eor	r8, r8
    1302:	99 24       	eor	r9, r9
    1304:	03 c0       	rjmp	.+6      	; 0x130c <_ZN5Print11printNumberEmh+0x60>
    1306:	f2 2e       	mov	r15, r18
    1308:	84 2f       	mov	r24, r20
    130a:	95 2f       	mov	r25, r21
    130c:	6f 2d       	mov	r22, r15
    130e:	73 2f       	mov	r23, r19
    1310:	a4 01       	movw	r20, r8
    1312:	93 01       	movw	r18, r6
    1314:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    1318:	a2 2e       	mov	r10, r18
    131a:	b3 2e       	mov	r11, r19
    131c:	c4 2e       	mov	r12, r20
    131e:	d5 2e       	mov	r13, r21
    char c = m - base * n;
    1320:	e2 9e       	mul	r14, r18
    1322:	80 2d       	mov	r24, r0
    1324:	11 24       	eor	r1, r1
    1326:	f8 1a       	sub	r15, r24
    1328:	8f 2d       	mov	r24, r15
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    132a:	01 50       	subi	r16, 0x01	; 1
    132c:	10 40       	sbci	r17, 0x00	; 0
    132e:	8a 30       	cpi	r24, 0x0A	; 10
    1330:	10 f4       	brcc	.+4      	; 0x1336 <_ZN5Print11printNumberEmh+0x8a>
    1332:	80 5d       	subi	r24, 0xD0	; 208
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <_ZN5Print11printNumberEmh+0x8c>
    1336:	89 5c       	subi	r24, 0xC9	; 201
    1338:	d8 01       	movw	r26, r16
    133a:	8c 93       	st	X, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    133c:	a1 14       	cp	r10, r1
    133e:	b1 04       	cpc	r11, r1
    1340:	c1 04       	cpc	r12, r1
    1342:	d1 04       	cpc	r13, r1
    1344:	01 f7       	brne	.-64     	; 0x1306 <_ZN5Print11printNumberEmh+0x5a>
    1346:	01 15       	cp	r16, r1
    1348:	11 05       	cpc	r17, r1
    134a:	b1 f0       	breq	.+44     	; 0x1378 <_ZN5Print11printNumberEmh+0xcc>
      return write((const uint8_t *)str, strlen(str));
    134c:	e0 2f       	mov	r30, r16
    134e:	f1 2f       	mov	r31, r17
    1350:	df 01       	movw	r26, r30
    1352:	0d 90       	ld	r0, X+
    1354:	00 20       	and	r0, r0
    1356:	e9 f7       	brne	.-6      	; 0x1352 <_ZN5Print11printNumberEmh+0xa6>
    1358:	ad 01       	movw	r20, r26
    135a:	41 50       	subi	r20, 0x01	; 1
    135c:	50 40       	sbci	r21, 0x00	; 0
    135e:	4e 1b       	sub	r20, r30
    1360:	5f 0b       	sbc	r21, r31
    1362:	d2 01       	movw	r26, r4
    1364:	ed 91       	ld	r30, X+
    1366:	fc 91       	ld	r31, X
    1368:	02 80       	ldd	r0, Z+2	; 0x02
    136a:	f3 81       	ldd	r31, Z+3	; 0x03
    136c:	e0 2d       	mov	r30, r0
    136e:	c2 01       	movw	r24, r4
    1370:	b8 01       	movw	r22, r16
    1372:	19 95       	eicall
    1374:	9c 01       	movw	r18, r24
    1376:	02 c0       	rjmp	.+4      	; 0x137c <_ZN5Print11printNumberEmh+0xd0>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    137c:	82 2f       	mov	r24, r18
    137e:	93 2f       	mov	r25, r19
    1380:	a1 96       	adiw	r28, 0x21	; 33
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	7f 90       	pop	r7
    13a6:	6f 90       	pop	r6
    13a8:	5f 90       	pop	r5
    13aa:	4f 90       	pop	r4
    13ac:	08 95       	ret

000013ae <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    13ae:	21 15       	cp	r18, r1
    13b0:	31 05       	cpc	r19, r1
    13b2:	49 f4       	brne	.+18     	; 0x13c6 <_ZN5Print5printEmi+0x18>
    13b4:	dc 01       	movw	r26, r24
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	01 90       	ld	r0, Z+
    13bc:	f0 81       	ld	r31, Z
    13be:	e0 2d       	mov	r30, r0
    13c0:	64 2f       	mov	r22, r20
    13c2:	19 95       	eicall
    13c4:	08 95       	ret
  else return printNumber(n, base);
    13c6:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN5Print11printNumberEmh>
}
    13ca:	08 95       	ret

000013cc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    13da:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEmi>
    13de:	ec 01       	movw	r28, r24
  n += println();
    13e0:	c8 01       	movw	r24, r16
    13e2:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    13e6:	c8 0f       	add	r28, r24
    13e8:	d9 1f       	adc	r29, r25
  return n;
}
    13ea:	7e 01       	movw	r14, r28
    13ec:	8c 2f       	mov	r24, r28
    13ee:	9f 2d       	mov	r25, r15
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	08 95       	ret

000013fe <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    13fe:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1400:	ab 01       	movw	r20, r22
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEmi>
}
    140a:	08 95       	ret

0000140c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    141a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN5Print5printEji>
    141e:	ec 01       	movw	r28, r24
  n += println();
    1420:	c8 01       	movw	r24, r16
    1422:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1426:	c8 0f       	add	r28, r24
    1428:	d9 1f       	adc	r29, r25
  return n;
}
    142a:	7e 01       	movw	r14, r28
    142c:	8c 2f       	mov	r24, r28
    142e:	9f 2d       	mov	r25, r15
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    143e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1440:	46 2f       	mov	r20, r22
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEmi>
}
    144c:	08 95       	ret

0000144e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    145c:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN5Print5printEhi>
    1460:	ec 01       	movw	r28, r24
  n += println();
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1468:	c8 0f       	add	r28, r24
    146a:	d9 1f       	adc	r29, r25
  return n;
}
    146c:	7e 01       	movw	r14, r28
    146e:	8c 2f       	mov	r24, r28
    1470:	9f 2d       	mov	r25, r15
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	08 95       	ret

00001480 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	ec 01       	movw	r28, r24
    1492:	7a 01       	movw	r14, r20
    1494:	8b 01       	movw	r16, r22
  if (base == 0) {
    1496:	21 15       	cp	r18, r1
    1498:	31 05       	cpc	r19, r1
    149a:	49 f4       	brne	.+18     	; 0x14ae <_ZN5Print5printEli+0x2e>
    return write(n);
    149c:	e8 81       	ld	r30, Y
    149e:	f9 81       	ldd	r31, Y+1	; 0x01
    14a0:	01 90       	ld	r0, Z+
    14a2:	f0 81       	ld	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	64 2f       	mov	r22, r20
    14a8:	19 95       	eicall
    14aa:	6c 01       	movw	r12, r24
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <_ZN5Print5printEli+0x6c>
  } else if (base == 10) {
    14ae:	2a 30       	cpi	r18, 0x0A	; 10
    14b0:	31 05       	cpc	r19, r1
    14b2:	c9 f4       	brne	.+50     	; 0x14e6 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    14b4:	77 23       	and	r23, r23
    14b6:	94 f4       	brge	.+36     	; 0x14dc <_ZN5Print5printEli+0x5c>
      int t = print('-');
    14b8:	6d e2       	ldi	r22, 0x2D	; 45
    14ba:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
    14be:	6c 01       	movw	r12, r24
      n = -n;
    14c0:	44 27       	eor	r20, r20
    14c2:	55 27       	eor	r21, r21
    14c4:	ba 01       	movw	r22, r20
    14c6:	4e 19       	sub	r20, r14
    14c8:	5f 09       	sbc	r21, r15
    14ca:	60 0b       	sbc	r22, r16
    14cc:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    14ce:	ce 01       	movw	r24, r28
    14d0:	2a e0       	ldi	r18, 0x0A	; 10
    14d2:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN5Print11printNumberEmh>
    14d6:	c8 0e       	add	r12, r24
    14d8:	d9 1e       	adc	r13, r25
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    14dc:	2a e0       	ldi	r18, 0x0A	; 10
    14de:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN5Print11printNumberEmh>
    14e2:	6c 01       	movw	r12, r24
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <_ZN5Print5printEli+0x6c>
  } else {
    return printNumber(n, base);
    14e6:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN5Print11printNumberEmh>
    14ea:	6c 01       	movw	r12, r24
  }
}
    14ec:	8c 2d       	mov	r24, r12
    14ee:	9d 2d       	mov	r25, r13
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	08 95       	ret

00001502 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    1510:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN5Print5printEli>
    1514:	ec 01       	movw	r28, r24
  n += println();
    1516:	c8 01       	movw	r24, r16
    1518:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    151c:	c8 0f       	add	r28, r24
    151e:	d9 1f       	adc	r29, r25
  return n;
}
    1520:	7e 01       	movw	r14, r28
    1522:	8c 2f       	mov	r24, r28
    1524:	9f 2d       	mov	r25, r15
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	08 95       	ret

00001534 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1534:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1536:	fb 01       	movw	r30, r22
    1538:	af 01       	movw	r20, r30
    153a:	66 27       	eor	r22, r22
    153c:	57 fd       	sbrc	r21, 7
    153e:	60 95       	com	r22
    1540:	76 2f       	mov	r23, r22
    1542:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN5Print5printEli>
}
    1546:	08 95       	ret

00001548 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    1556:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN5Print5printEii>
    155a:	ec 01       	movw	r28, r24
  n += println();
    155c:	c8 01       	movw	r24, r16
    155e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    1562:	c8 0f       	add	r28, r24
    1564:	d9 1f       	adc	r29, r25
  return n;
}
    1566:	7e 01       	movw	r14, r28
    1568:	8c 2f       	mov	r24, r28
    156a:	9f 2d       	mov	r25, r15
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	08 95       	ret

0000157a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	4c 01       	movw	r8, r24
    159c:	5a 01       	movw	r10, r20
    159e:	6b 01       	movw	r12, r22
    15a0:	f2 2e       	mov	r15, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    15a2:	cb 01       	movw	r24, r22
    15a4:	ba 01       	movw	r22, r20
    15a6:	a6 01       	movw	r20, r12
    15a8:	95 01       	movw	r18, r10
    15aa:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__unordsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <_ZN5Print10printFloatEdh+0x46>
    15b2:	c4 01       	movw	r24, r8
    15b4:	62 e3       	ldi	r22, 0x32	; 50
    15b6:	72 e0       	ldi	r23, 0x02	; 2
    15b8:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
    15bc:	5c 01       	movw	r10, r24
    15be:	d9 c0       	rjmp	.+434    	; 0x1772 <_ZN5Print10printFloatEdh+0x1f8>
  if (isinf(number)) return print("inf");
    15c0:	25 01       	movw	r4, r10
    15c2:	36 01       	movw	r6, r12
    15c4:	e8 94       	clt
    15c6:	77 f8       	bld	r7, 7
    15c8:	11 e0       	ldi	r17, 0x01	; 1
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	2f ef       	ldi	r18, 0xFF	; 255
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	5f e7       	ldi	r21, 0x7F	; 127
    15d6:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <__unordsf2>
    15da:	88 23       	and	r24, r24
    15dc:	59 f4       	brne	.+22     	; 0x15f4 <_ZN5Print10printFloatEdh+0x7a>
    15de:	c3 01       	movw	r24, r6
    15e0:	b2 01       	movw	r22, r4
    15e2:	2f ef       	ldi	r18, 0xFF	; 255
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	5f e7       	ldi	r21, 0x7F	; 127
    15ea:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	0c f4       	brge	.+2      	; 0x15f4 <_ZN5Print10printFloatEdh+0x7a>
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	11 23       	and	r17, r17
    15f6:	39 f4       	brne	.+14     	; 0x1606 <_ZN5Print10printFloatEdh+0x8c>
    15f8:	c4 01       	movw	r24, r8
    15fa:	66 e3       	ldi	r22, 0x36	; 54
    15fc:	72 e0       	ldi	r23, 0x02	; 2
    15fe:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
    1602:	5c 01       	movw	r10, r24
    1604:	b6 c0       	rjmp	.+364    	; 0x1772 <_ZN5Print10printFloatEdh+0x1f8>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1606:	c6 01       	movw	r24, r12
    1608:	b5 01       	movw	r22, r10
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	5f e4       	ldi	r21, 0x4F	; 79
    1612:	0e 94 20 35 	call	0x6a40	; 0x6a40 <__gesf2>
    1616:	18 16       	cp	r1, r24
    1618:	3c f4       	brge	.+14     	; 0x1628 <_ZN5Print10printFloatEdh+0xae>
    161a:	c4 01       	movw	r24, r8
    161c:	6a e3       	ldi	r22, 0x3A	; 58
    161e:	72 e0       	ldi	r23, 0x02	; 2
    1620:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
    1624:	5c 01       	movw	r10, r24
    1626:	a5 c0       	rjmp	.+330    	; 0x1772 <_ZN5Print10printFloatEdh+0x1f8>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1628:	c6 01       	movw	r24, r12
    162a:	b5 01       	movw	r22, r10
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	5f ec       	ldi	r21, 0xCF	; 207
    1634:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    1638:	88 23       	and	r24, r24
    163a:	3c f4       	brge	.+14     	; 0x164a <_ZN5Print10printFloatEdh+0xd0>
    163c:	c4 01       	movw	r24, r8
    163e:	6a e3       	ldi	r22, 0x3A	; 58
    1640:	72 e0       	ldi	r23, 0x02	; 2
    1642:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
    1646:	5c 01       	movw	r10, r24
    1648:	94 c0       	rjmp	.+296    	; 0x1772 <_ZN5Print10printFloatEdh+0x1f8>
  
  // Handle negative numbers
  if (number < 0.0)
    164a:	c6 01       	movw	r24, r12
    164c:	b5 01       	movw	r22, r10
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	a9 01       	movw	r20, r18
    1654:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    1658:	88 23       	and	r24, r24
    165a:	54 f4       	brge	.+20     	; 0x1670 <_ZN5Print10printFloatEdh+0xf6>
  {
     n += print('-');
    165c:	c4 01       	movw	r24, r8
    165e:	6d e2       	ldi	r22, 0x2D	; 45
    1660:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN5Print5printEc>
    1664:	3c 01       	movw	r6, r24
     number = -number;
    1666:	d7 fa       	bst	r13, 7
    1668:	d0 94       	com	r13
    166a:	d7 f8       	bld	r13, 7
    166c:	d0 94       	com	r13
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1670:	66 24       	eor	r6, r6
    1672:	77 24       	eor	r7, r7
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1674:	ff 20       	and	r15, r15
    1676:	09 f4       	brne	.+2      	; 0x167a <_ZN5Print10printFloatEdh+0x100>
    1678:	8f c0       	rjmp	.+286    	; 0x1798 <_ZN5Print10printFloatEdh+0x21e>
    167a:	10 e0       	ldi	r17, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1684:	65 2f       	mov	r22, r21
    1686:	74 2f       	mov	r23, r20
    1688:	83 2f       	mov	r24, r19
    168a:	92 2f       	mov	r25, r18
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__divsf3>
    1698:	56 2f       	mov	r21, r22
    169a:	47 2f       	mov	r20, r23
    169c:	38 2f       	mov	r19, r24
    169e:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    16a0:	1f 5f       	subi	r17, 0xFF	; 255
    16a2:	1f 15       	cp	r17, r15
    16a4:	78 f3       	brcs	.-34     	; 0x1684 <_ZN5Print10printFloatEdh+0x10a>
    rounding /= 10.0;
  
  number += rounding;
    16a6:	c6 01       	movw	r24, r12
    16a8:	b5 01       	movw	r22, r10
    16aa:	f3 2f       	mov	r31, r19
    16ac:	e2 2f       	mov	r30, r18
    16ae:	25 2f       	mov	r18, r21
    16b0:	34 2f       	mov	r19, r20
    16b2:	4f 2f       	mov	r20, r31
    16b4:	5e 2f       	mov	r21, r30
    16b6:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>
    16ba:	16 2f       	mov	r17, r22
    16bc:	07 2f       	mov	r16, r23
    16be:	e8 2e       	mov	r14, r24
    16c0:	d9 2e       	mov	r13, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    16c2:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    16c6:	a6 2e       	mov	r10, r22
    16c8:	47 2e       	mov	r4, r23
    16ca:	c8 2e       	mov	r12, r24
    16cc:	b9 2e       	mov	r11, r25
  double remainder = number - (double)int_part;
    16ce:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	61 2f       	mov	r22, r17
    16d8:	70 2f       	mov	r23, r16
    16da:	8e 2d       	mov	r24, r14
    16dc:	9d 2d       	mov	r25, r13
    16de:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    16e2:	e6 2e       	mov	r14, r22
    16e4:	d7 2e       	mov	r13, r23
    16e6:	08 2f       	mov	r16, r24
    16e8:	19 2f       	mov	r17, r25
  n += print(int_part);
    16ea:	c4 01       	movw	r24, r8
    16ec:	4a 2d       	mov	r20, r10
    16ee:	54 2d       	mov	r21, r4
    16f0:	6c 2d       	mov	r22, r12
    16f2:	7b 2d       	mov	r23, r11
    16f4:	2a e0       	ldi	r18, 0x0A	; 10
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEmi>
    16fc:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    16fe:	c4 01       	movw	r24, r8
    1700:	6e e3       	ldi	r22, 0x3E	; 62
    1702:	72 e0       	ldi	r23, 0x02	; 2
    1704:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1708:	c8 0f       	add	r28, r24
    170a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    170c:	5e 01       	movw	r10, r28
    170e:	a6 0c       	add	r10, r6
    1710:	b7 1c       	adc	r11, r7
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1712:	6e 2d       	mov	r22, r14
    1714:	7d 2d       	mov	r23, r13
    1716:	80 2f       	mov	r24, r16
    1718:	91 2f       	mov	r25, r17
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    1726:	16 2f       	mov	r17, r22
    1728:	07 2f       	mov	r16, r23
    172a:	e8 2e       	mov	r14, r24
    172c:	d9 2e       	mov	r13, r25
    int toPrint = int(remainder);
    172e:	0e 94 3d 34 	call	0x687a	; 0x687a <__fixsfsi>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	eb 01       	movw	r28, r22
    n += print(toPrint);
    1738:	c4 01       	movw	r24, r8
    173a:	b9 01       	movw	r22, r18
    173c:	4a e0       	ldi	r20, 0x0A	; 10
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN5Print5printEii>
    1744:	a8 0e       	add	r10, r24
    1746:	b9 1e       	adc	r11, r25
    remainder -= toPrint; 
    1748:	be 01       	movw	r22, r28
    174a:	88 27       	eor	r24, r24
    174c:	77 fd       	sbrc	r23, 7
    174e:	80 95       	com	r24
    1750:	98 2f       	mov	r25, r24
    1752:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__floatsisf>
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	61 2f       	mov	r22, r17
    175c:	70 2f       	mov	r23, r16
    175e:	8e 2d       	mov	r24, r14
    1760:	9d 2d       	mov	r25, r13
    1762:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    1766:	e6 2e       	mov	r14, r22
    1768:	d7 2e       	mov	r13, r23
    176a:	08 2f       	mov	r16, r24
    176c:	19 2f       	mov	r17, r25
    176e:	fa 94       	dec	r15
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1770:	81 f6       	brne	.-96     	; 0x1712 <_ZN5Print10printFloatEdh+0x198>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1772:	8a 2d       	mov	r24, r10
    1774:	9b 2d       	mov	r25, r11
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	9f 90       	pop	r9
    178c:	8f 90       	pop	r8
    178e:	7f 90       	pop	r7
    1790:	6f 90       	pop	r6
    1792:	5f 90       	pop	r5
    1794:	4f 90       	pop	r4
    1796:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    17a8:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    17ac:	ab 01       	movw	r20, r22
    17ae:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    17b0:	c4 01       	movw	r24, r8
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEmi>
    17ba:	5c 01       	movw	r10, r24
    17bc:	a6 0c       	add	r10, r6
    17be:	b7 1c       	adc	r11, r7
    17c0:	d8 cf       	rjmp	.-80     	; 0x1772 <_ZN5Print10printFloatEdh+0x1f8>

000017c2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    17c2:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print10printFloatEdh>
}
    17c6:	08 95       	ret

000017c8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    17d6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print5printEdi>
    17da:	ec 01       	movw	r28, r24
  n += println();
    17dc:	c8 01       	movw	r24, r16
    17de:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN5Print7printlnEv>
    17e2:	c8 0f       	add	r28, r24
    17e4:	d9 1f       	adc	r29, r25
  return n;
}
    17e6:	7e 01       	movw	r14, r28
    17e8:	8c 2f       	mov	r24, r28
    17ea:	9f 2d       	mov	r25, r15
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	08 95       	ret

000017fa <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    1800:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    1804:	68 87       	std	Y+8, r22	; 0x08
    1806:	79 87       	std	Y+9, r23	; 0x09
    1808:	8a 87       	std	Y+10, r24	; 0x0a
    180a:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
    180c:	e8 81       	ld	r30, Y
    180e:	f9 81       	ldd	r31, Y+1	; 0x01
    1810:	06 80       	ldd	r0, Z+6	; 0x06
    1812:	f7 81       	ldd	r31, Z+7	; 0x07
    1814:	e0 2d       	mov	r30, r0
    1816:	ce 01       	movw	r24, r28
    1818:	19 95       	eicall
    181a:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
    181c:	99 23       	and	r25, r25
    181e:	bc f4       	brge	.+46     	; 0x184e <_ZN6Stream9timedReadEv+0x54>
  } while(millis() - _startMillis < _timeout);
    1820:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    1828:	88 85       	ldd	r24, Y+8	; 0x08
    182a:	99 85       	ldd	r25, Y+9	; 0x09
    182c:	aa 85       	ldd	r26, Y+10	; 0x0a
    182e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1830:	28 1b       	sub	r18, r24
    1832:	39 0b       	sbc	r19, r25
    1834:	4a 0b       	sbc	r20, r26
    1836:	5b 0b       	sbc	r21, r27
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	ae 81       	ldd	r26, Y+6	; 0x06
    183e:	bf 81       	ldd	r27, Y+7	; 0x07
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	4a 07       	cpc	r20, r26
    1846:	5b 07       	cpc	r21, r27
    1848:	08 f3       	brcs	.-62     	; 0x180c <_ZN6Stream9timedReadEv+0x12>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    184a:	2f ef       	ldi	r18, 0xFF	; 255
    184c:	3f ef       	ldi	r19, 0xFF	; 255
}
    184e:	82 2f       	mov	r24, r18
    1850:	93 2f       	mov	r25, r19
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    185e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    1862:	68 87       	std	Y+8, r22	; 0x08
    1864:	79 87       	std	Y+9, r23	; 0x09
    1866:	8a 87       	std	Y+10, r24	; 0x0a
    1868:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = peek();
    186a:	e8 81       	ld	r30, Y
    186c:	f9 81       	ldd	r31, Y+1	; 0x01
    186e:	00 84       	ldd	r0, Z+8	; 0x08
    1870:	f1 85       	ldd	r31, Z+9	; 0x09
    1872:	e0 2d       	mov	r30, r0
    1874:	ce 01       	movw	r24, r28
    1876:	19 95       	eicall
    1878:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
    187a:	99 23       	and	r25, r25
    187c:	bc f4       	brge	.+46     	; 0x18ac <_ZN6Stream9timedPeekEv+0x54>
  } while(millis() - _startMillis < _timeout);
    187e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    1882:	9b 01       	movw	r18, r22
    1884:	ac 01       	movw	r20, r24
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
    1886:	88 85       	ldd	r24, Y+8	; 0x08
    1888:	99 85       	ldd	r25, Y+9	; 0x09
    188a:	aa 85       	ldd	r26, Y+10	; 0x0a
    188c:	bb 85       	ldd	r27, Y+11	; 0x0b
    188e:	28 1b       	sub	r18, r24
    1890:	39 0b       	sbc	r19, r25
    1892:	4a 0b       	sbc	r20, r26
    1894:	5b 0b       	sbc	r21, r27
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	ae 81       	ldd	r26, Y+6	; 0x06
    189c:	bf 81       	ldd	r27, Y+7	; 0x07
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	4a 07       	cpc	r20, r26
    18a4:	5b 07       	cpc	r21, r27
    18a6:	08 f3       	brcs	.-62     	; 0x186a <_ZN6Stream9timedPeekEv+0x12>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    18a8:	2f ef       	ldi	r18, 0xFF	; 255
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
}
    18ac:	82 2f       	mov	r24, r18
    18ae:	93 2f       	mov	r25, r19
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	ec 01       	movw	r28, r24
  int c;
  while (1) {
    c = timedPeek();
    18bc:	ce 01       	movw	r24, r28
    18be:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN6Stream9timedPeekEv>
    18c2:	9c 01       	movw	r18, r24
    if (c < 0) return c;  // timeout
    18c4:	99 23       	and	r25, r25
    18c6:	7c f0       	brlt	.+30     	; 0x18e6 <_ZN6Stream13peekNextDigitEv+0x30>
    if (c == '-') return c;
    18c8:	8d 32       	cpi	r24, 0x2D	; 45
    18ca:	91 05       	cpc	r25, r1
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <_ZN6Stream13peekNextDigitEv+0x30>
    if (c >= '0' && c <= '9') return c;
    18ce:	c0 97       	sbiw	r24, 0x30	; 48
    18d0:	8a 30       	cpi	r24, 0x0A	; 10
    18d2:	91 05       	cpc	r25, r1
    18d4:	40 f0       	brcs	.+16     	; 0x18e6 <_ZN6Stream13peekNextDigitEv+0x30>
    read();  // discard non-numeric
    18d6:	e8 81       	ld	r30, Y
    18d8:	f9 81       	ldd	r31, Y+1	; 0x01
    18da:	06 80       	ldd	r0, Z+6	; 0x06
    18dc:	f7 81       	ldd	r31, Z+7	; 0x07
    18de:	e0 2d       	mov	r30, r0
    18e0:	ce 01       	movw	r24, r28
    18e2:	19 95       	eicall
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    18e4:	eb cf       	rjmp	.-42     	; 0x18bc <_ZN6Stream13peekNextDigitEv+0x6>
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    18e6:	82 2f       	mov	r24, r18
    18e8:	93 2f       	mov	r25, r19
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    18f0:	fc 01       	movw	r30, r24
    18f2:	44 83       	std	Z+4, r20	; 0x04
    18f4:	55 83       	std	Z+5, r21	; 0x05
    18f6:	66 83       	std	Z+6, r22	; 0x06
    18f8:	77 83       	std	Z+7, r23	; 0x07
}
    18fa:	08 95       	ret

000018fc <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
    18fc:	4f 92       	push	r4
    18fe:	5f 92       	push	r5
    1900:	6f 92       	push	r6
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	4c 01       	movw	r8, r24
    191e:	7b 01       	movw	r14, r22
    1920:	2a 01       	movw	r4, r20
    1922:	39 01       	movw	r6, r18
    1924:	58 01       	movw	r10, r16
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    1926:	fb 01       	movw	r30, r22
    1928:	80 81       	ld	r24, Z
    192a:	88 23       	and	r24, r24
    192c:	c1 f1       	breq	.+112    	; 0x199e <_ZN6Stream9findUntilEPcjS0_j+0xa2>
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	10 e0       	ldi	r17, 0x00	; 0
    1932:	c0 e0       	ldi	r28, 0x00	; 0
    1934:	d0 e0       	ldi	r29, 0x00	; 0
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1936:	cc 24       	eor	r12, r12
    1938:	dd 24       	eor	r13, r13
    193a:	29 c0       	rjmp	.+82     	; 0x198e <_ZN6Stream9findUntilEPcjS0_j+0x92>
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
    193c:	f7 01       	movw	r30, r14
    193e:	ec 0f       	add	r30, r28
    1940:	fd 1f       	adc	r31, r29
    1942:	20 81       	ld	r18, Z
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	28 17       	cp	r18, r24
    1948:	39 07       	cpc	r19, r25
    194a:	39 f0       	breq	.+14     	; 0x195a <_ZN6Stream9findUntilEPcjS0_j+0x5e>
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
    194c:	f7 01       	movw	r30, r14
    194e:	20 81       	ld	r18, Z
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	31 f4       	brne	.+12     	; 0x1964 <_ZN6Stream9findUntilEPcjS0_j+0x68>
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1958:	e6 01       	movw	r28, r12
    
    if( c == target[index]){
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
    195a:	21 96       	adiw	r28, 0x01	; 1
    195c:	c4 15       	cp	r28, r4
    195e:	d5 05       	cpc	r29, r5
    1960:	10 f0       	brcs	.+4      	; 0x1966 <_ZN6Stream9findUntilEPcjS0_j+0x6a>
    1962:	1f c0       	rjmp	.+62     	; 0x19a2 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1964:	e6 01       	movw	r28, r12
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
    1966:	a1 14       	cp	r10, r1
    1968:	b1 04       	cpc	r11, r1
    196a:	71 f0       	breq	.+28     	; 0x1988 <_ZN6Stream9findUntilEPcjS0_j+0x8c>
    196c:	f3 01       	movw	r30, r6
    196e:	e0 0f       	add	r30, r16
    1970:	f1 1f       	adc	r31, r17
    1972:	20 81       	ld	r18, Z
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	28 17       	cp	r18, r24
    1978:	39 07       	cpc	r19, r25
    197a:	41 f4       	brne	.+16     	; 0x198c <_ZN6Stream9findUntilEPcjS0_j+0x90>
      if(++termIndex >= termLen)
    197c:	0f 5f       	subi	r16, 0xFF	; 255
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	0a 15       	cp	r16, r10
    1982:	1b 05       	cpc	r17, r11
    1984:	20 f0       	brcs	.+8      	; 0x198e <_ZN6Stream9findUntilEPcjS0_j+0x92>
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <_ZN6Stream9findUntilEPcjS0_j+0xaa>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
    1988:	86 01       	movw	r16, r12
    198a:	01 c0       	rjmp	.+2      	; 0x198e <_ZN6Stream9findUntilEPcjS0_j+0x92>
    198c:	86 01       	movw	r16, r12
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    198e:	c4 01       	movw	r24, r8
    1990:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    1994:	18 16       	cp	r1, r24
    1996:	19 06       	cpc	r1, r25
    1998:	8c f2       	brlt	.-94     	; 0x193c <_ZN6Stream9findUntilEPcjS0_j+0x40>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <_ZN6Stream9findUntilEPcjS0_j+0xac>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <_ZN6Stream9findUntilEPcjS0_j+0xac>
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <_ZN6Stream9findUntilEPcjS0_j+0xac>
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
      termIndex = 0;
  }
  return false;
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	5f 90       	pop	r5
    19c6:	4f 90       	pop	r4
    19c8:	08 95       	ret

000019ca <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	24 2f       	mov	r18, r20
    19d0:	35 2f       	mov	r19, r21
  return findUntil(target, strlen(target), terminator, strlen(terminator));
    19d2:	e6 2f       	mov	r30, r22
    19d4:	f7 2f       	mov	r31, r23
    19d6:	df 01       	movw	r26, r30
    19d8:	0d 90       	ld	r0, X+
    19da:	00 20       	and	r0, r0
    19dc:	e9 f7       	brne	.-6      	; 0x19d8 <_ZN6Stream9findUntilEPcS0_+0xe>
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	ad 01       	movw	r20, r26
    19e2:	4e 1b       	sub	r20, r30
    19e4:	5f 0b       	sbc	r21, r31
    19e6:	e2 2f       	mov	r30, r18
    19e8:	f3 2f       	mov	r31, r19
    19ea:	df 01       	movw	r26, r30
    19ec:	0d 90       	ld	r0, X+
    19ee:	00 20       	and	r0, r0
    19f0:	e9 f7       	brne	.-6      	; 0x19ec <_ZN6Stream9findUntilEPcS0_+0x22>
    19f2:	11 97       	sbiw	r26, 0x01	; 1
    19f4:	8d 01       	movw	r16, r26
    19f6:	0e 1b       	sub	r16, r30
    19f8:	1f 0b       	sbc	r17, r31
    19fa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_ZN6Stream9findUntilEPcjS0_j>
}
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	08 95       	ret

00001a04 <_ZN6Stream4findEPc>:

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  //return findUntil(target, "");
  return findUntil(target, NULL);
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN6Stream9findUntilEPcS0_>
}
    1a0c:	08 95       	ret

00001a0e <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
  return findUntil(target, length, NULL, 0);
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_ZN6Stream9findUntilEPcjS0_j>
}
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    1a24:	8f 92       	push	r8
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	e6 2e       	mov	r14, r22
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    1a40:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN6Stream13peekNextDigitEv>
    1a44:	ec 01       	movw	r28, r24
  // ignore non numeric leading characters
  if(c < 0)
    1a46:	99 23       	and	r25, r25
    1a48:	0c f4       	brge	.+2      	; 0x1a4c <_ZN6Stream8parseIntEc+0x28>
    1a4a:	4b c0       	rjmp	.+150    	; 0x1ae2 <_ZN6Stream8parseIntEc+0xbe>
    1a4c:	aa 24       	eor	r10, r10
    1a4e:	bb 24       	eor	r11, r11
    1a50:	65 01       	movw	r12, r10
    1a52:	99 24       	eor	r9, r9
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1a54:	ff 24       	eor	r15, r15
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    1a56:	88 24       	eor	r8, r8
    1a58:	83 94       	inc	r8
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1a5a:	ec 16       	cp	r14, r28
    1a5c:	fd 06       	cpc	r15, r29
    1a5e:	19 f1       	breq	.+70     	; 0x1aa6 <_ZN6Stream8parseIntEc+0x82>
      ; // ignore this charactor
    else if(c == '-')
    1a60:	cd 32       	cpi	r28, 0x2D	; 45
    1a62:	d1 05       	cpc	r29, r1
    1a64:	f9 f0       	breq	.+62     	; 0x1aa4 <_ZN6Stream8parseIntEc+0x80>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    1a66:	ce 01       	movw	r24, r28
    1a68:	c0 97       	sbiw	r24, 0x30	; 48
    1a6a:	8a 30       	cpi	r24, 0x0A	; 10
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	d8 f4       	brcc	.+54     	; 0x1aa6 <_ZN6Stream8parseIntEc+0x82>
      value = value * 10 + c - '0';
    1a70:	c6 01       	movw	r24, r12
    1a72:	b5 01       	movw	r22, r10
    1a74:	2a e0       	ldi	r18, 0x0A	; 10
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    1a80:	5e 01       	movw	r10, r28
    1a82:	cc 24       	eor	r12, r12
    1a84:	b7 fc       	sbrc	r11, 7
    1a86:	c0 94       	com	r12
    1a88:	dc 2c       	mov	r13, r12
    1a8a:	a6 0e       	add	r10, r22
    1a8c:	b7 1e       	adc	r11, r23
    1a8e:	c8 1e       	adc	r12, r24
    1a90:	d9 1e       	adc	r13, r25
    1a92:	80 ed       	ldi	r24, 0xD0	; 208
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	af ef       	ldi	r26, 0xFF	; 255
    1a98:	bf ef       	ldi	r27, 0xFF	; 255
    1a9a:	a8 0e       	add	r10, r24
    1a9c:	b9 1e       	adc	r11, r25
    1a9e:	ca 1e       	adc	r12, r26
    1aa0:	db 1e       	adc	r13, r27
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <_ZN6Stream8parseIntEc+0x82>

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    1aa4:	98 2c       	mov	r9, r8
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	06 80       	ldd	r0, Z+6	; 0x06
    1aae:	f7 81       	ldd	r31, Z+7	; 0x07
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	19 95       	eicall
    c = timedPeek();
    1ab6:	c8 01       	movw	r24, r16
    1ab8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN6Stream9timedPeekEv>
    1abc:	ec 01       	movw	r28, r24
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    1abe:	c0 97       	sbiw	r24, 0x30	; 48
    1ac0:	8a 30       	cpi	r24, 0x0A	; 10
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	50 f2       	brcs	.-108    	; 0x1a5a <_ZN6Stream8parseIntEc+0x36>
    1ac6:	ec 16       	cp	r14, r28
    1ac8:	fd 06       	cpc	r15, r29
    1aca:	39 f2       	breq	.-114    	; 0x1a5a <_ZN6Stream8parseIntEc+0x36>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    1acc:	99 20       	and	r9, r9
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <_ZN6Stream8parseIntEc+0xc4>
    value = -value;
    1ad0:	d0 94       	com	r13
    1ad2:	c0 94       	com	r12
    1ad4:	b0 94       	com	r11
    1ad6:	a0 94       	com	r10
    1ad8:	a1 1c       	adc	r10, r1
    1ada:	b1 1c       	adc	r11, r1
    1adc:	c1 1c       	adc	r12, r1
    1ade:	d1 1c       	adc	r13, r1
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <_ZN6Stream8parseIntEc+0xc4>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    1ae2:	aa 24       	eor	r10, r10
    1ae4:	bb 24       	eor	r11, r11
    1ae6:	65 01       	movw	r12, r10
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    1ae8:	6a 2d       	mov	r22, r10
    1aea:	7b 2d       	mov	r23, r11
    1aec:	8c 2d       	mov	r24, r12
    1aee:	9d 2d       	mov	r25, r13
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	af 90       	pop	r10
    1b04:	9f 90       	pop	r9
    1b06:	8f 90       	pop	r8
    1b08:	08 95       	ret

00001b0a <_ZN6Stream8parseIntEv>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN6Stream8parseIntEc>
}
    1b10:	08 95       	ret

00001b12 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	ec 01       	movw	r28, r24
    1b32:	06 2f       	mov	r16, r22
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;

  c = peekNextDigit();
    1b34:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN6Stream13peekNextDigitEv>
    1b38:	18 2f       	mov	r17, r24
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;
    1b3a:	88 24       	eor	r8, r8
    1b3c:	77 24       	eor	r7, r7
    1b3e:	0f 2e       	mov	r0, r31
    1b40:	f0 e8       	ldi	r31, 0x80	; 128
    1b42:	6f 2e       	mov	r6, r31
    1b44:	f0 2d       	mov	r31, r0
    1b46:	0f 2e       	mov	r0, r31
    1b48:	ff e3       	ldi	r31, 0x3F	; 63
    1b4a:	5f 2e       	mov	r5, r31
    1b4c:	f0 2d       	mov	r31, r0
// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
  long value = 0;
    1b4e:	cc 24       	eor	r12, r12
    1b50:	dd 24       	eor	r13, r13
    1b52:	76 01       	movw	r14, r12

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
    1b54:	bb 24       	eor	r11, r11
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
    1b56:	99 24       	eor	r9, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    1b58:	aa 24       	eor	r10, r10
    1b5a:	a3 94       	inc	r10
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1b5c:	10 17       	cp	r17, r16
    1b5e:	b1 f1       	breq	.+108    	; 0x1bcc <_ZN6Stream10parseFloatEc+0xba>
      ; // ignore
    else if(c == '-')
    1b60:	1d 32       	cpi	r17, 0x2D	; 45
    1b62:	89 f1       	breq	.+98     	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb4>
      isNegative = true;
    else if (c == '.')
    1b64:	1e 32       	cpi	r17, 0x2E	; 46
    1b66:	89 f1       	breq	.+98     	; 0x1bca <_ZN6Stream10parseFloatEc+0xb8>
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    1b68:	81 2f       	mov	r24, r17
    1b6a:	80 53       	subi	r24, 0x30	; 48
    1b6c:	8a 30       	cpi	r24, 0x0A	; 10
    1b6e:	70 f5       	brcc	.+92     	; 0x1bcc <_ZN6Stream10parseFloatEc+0xba>
      value = value * 10 + c - '0';
    1b70:	c7 01       	movw	r24, r14
    1b72:	b6 01       	movw	r22, r12
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    1b80:	61 0f       	add	r22, r17
    1b82:	71 1d       	adc	r23, r1
    1b84:	81 1d       	adc	r24, r1
    1b86:	91 1d       	adc	r25, r1
    1b88:	0f 2e       	mov	r0, r31
    1b8a:	f0 ed       	ldi	r31, 0xD0	; 208
    1b8c:	cf 2e       	mov	r12, r31
    1b8e:	ff ef       	ldi	r31, 0xFF	; 255
    1b90:	df 2e       	mov	r13, r31
    1b92:	ff ef       	ldi	r31, 0xFF	; 255
    1b94:	ef 2e       	mov	r14, r31
    1b96:	ff ef       	ldi	r31, 0xFF	; 255
    1b98:	ff 2e       	mov	r15, r31
    1b9a:	f0 2d       	mov	r31, r0
    1b9c:	c6 0e       	add	r12, r22
    1b9e:	d7 1e       	adc	r13, r23
    1ba0:	e8 1e       	adc	r14, r24
    1ba2:	f9 1e       	adc	r15, r25
      if(isFraction)
    1ba4:	bb 20       	and	r11, r11
    1ba6:	91 f0       	breq	.+36     	; 0x1bcc <_ZN6Stream10parseFloatEc+0xba>
         fraction *= 0.1;
    1ba8:	68 2d       	mov	r22, r8
    1baa:	77 2d       	mov	r23, r7
    1bac:	86 2d       	mov	r24, r6
    1bae:	95 2d       	mov	r25, r5
    1bb0:	2d ec       	ldi	r18, 0xCD	; 205
    1bb2:	3c ec       	ldi	r19, 0xCC	; 204
    1bb4:	4c ec       	ldi	r20, 0xCC	; 204
    1bb6:	5d e3       	ldi	r21, 0x3D	; 61
    1bb8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    1bbc:	86 2e       	mov	r8, r22
    1bbe:	77 2e       	mov	r7, r23
    1bc0:	68 2e       	mov	r6, r24
    1bc2:	59 2e       	mov	r5, r25
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <_ZN6Stream10parseFloatEc+0xba>

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    1bc6:	9a 2c       	mov	r9, r10
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <_ZN6Stream10parseFloatEc+0xba>
    else if (c == '.')
      isFraction = true;
    1bca:	ba 2c       	mov	r11, r10
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
    }
    read();  // consume the character we got with peek
    1bcc:	e8 81       	ld	r30, Y
    1bce:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd0:	06 80       	ldd	r0, Z+6	; 0x06
    1bd2:	f7 81       	ldd	r31, Z+7	; 0x07
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	19 95       	eicall
    c = timedPeek();
    1bda:	ce 01       	movw	r24, r28
    1bdc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN6Stream9timedPeekEv>
    1be0:	18 2f       	mov	r17, r24
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    1be2:	80 53       	subi	r24, 0x30	; 48
    1be4:	8a 30       	cpi	r24, 0x0A	; 10
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <_ZN6Stream10parseFloatEc+0xd8>
    1be8:	b9 cf       	rjmp	.-142    	; 0x1b5c <_ZN6Stream10parseFloatEc+0x4a>
    1bea:	1e 32       	cpi	r17, 0x2E	; 46
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <_ZN6Stream10parseFloatEc+0xde>
    1bee:	b6 cf       	rjmp	.-148    	; 0x1b5c <_ZN6Stream10parseFloatEc+0x4a>
    1bf0:	01 17       	cp	r16, r17
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <_ZN6Stream10parseFloatEc+0xe4>
    1bf4:	b3 cf       	rjmp	.-154    	; 0x1b5c <_ZN6Stream10parseFloatEc+0x4a>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
    1bf6:	99 20       	and	r9, r9
    1bf8:	41 f0       	breq	.+16     	; 0x1c0a <_ZN6Stream10parseFloatEc+0xf8>
    value = -value;
    1bfa:	f0 94       	com	r15
    1bfc:	e0 94       	com	r14
    1bfe:	d0 94       	com	r13
    1c00:	c0 94       	com	r12
    1c02:	c1 1c       	adc	r12, r1
    1c04:	d1 1c       	adc	r13, r1
    1c06:	e1 1c       	adc	r14, r1
    1c08:	f1 1c       	adc	r15, r1
  if(isFraction)
    1c0a:	bb 20       	and	r11, r11
    1c0c:	59 f0       	breq	.+22     	; 0x1c24 <_ZN6Stream10parseFloatEc+0x112>
    return value * fraction;
    1c0e:	c7 01       	movw	r24, r14
    1c10:	b6 01       	movw	r22, r12
    1c12:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__floatsisf>
    1c16:	28 2d       	mov	r18, r8
    1c18:	37 2d       	mov	r19, r7
    1c1a:	46 2d       	mov	r20, r6
    1c1c:	55 2d       	mov	r21, r5
    1c1e:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <_ZN6Stream10parseFloatEc+0x11a>
  else
    return value;
    1c24:	c7 01       	movw	r24, r14
    1c26:	b6 01       	movw	r22, r12
    1c28:	0e 94 70 34 	call	0x68e0	; 0x68e0 <__floatsisf>
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	08 95       	ret

00001c4c <_ZN6Stream10parseFloatEv>:


// as parseInt but returns a floating point value
float Stream::parseFloat()
{
  return parseFloat(NO_SKIP_CHAR);
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_ZN6Stream10parseFloatEc>
}
    1c52:	08 95       	ret

00001c54 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	6c 01       	movw	r12, r24
    1c66:	7a 01       	movw	r14, r20
  size_t count = 0;
  while (count < length) {
    1c68:	41 15       	cp	r20, r1
    1c6a:	51 05       	cpc	r21, r1
    1c6c:	89 f0       	breq	.+34     	; 0x1c90 <_ZN6Stream9readBytesEPcj+0x3c>
    1c6e:	06 2f       	mov	r16, r22
    1c70:	17 2f       	mov	r17, r23
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
    1c72:	c0 e0       	ldi	r28, 0x00	; 0
    1c74:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    int c = timedRead();
    1c76:	c6 01       	movw	r24, r12
    1c78:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1c7c:	99 23       	and	r25, r25
    1c7e:	54 f0       	brlt	.+20     	; 0x1c94 <_ZN6Stream9readBytesEPcj+0x40>
    *buffer++ = (char)c;
    1c80:	f8 01       	movw	r30, r16
    1c82:	81 93       	st	Z+, r24
    1c84:	8f 01       	movw	r16, r30
    count++;
    1c86:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1c88:	ce 15       	cp	r28, r14
    1c8a:	df 05       	cpc	r29, r15
    1c8c:	a0 f3       	brcs	.-24     	; 0x1c76 <_ZN6Stream9readBytesEPcj+0x22>
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <_ZN6Stream9readBytesEPcj+0x40>
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
    1c90:	c0 e0       	ldi	r28, 0x00	; 0
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1c94:	7e 01       	movw	r14, r28
    1c96:	8c 2f       	mov	r24, r28
    1c98:	9f 2d       	mov	r25, r15
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	08 95       	ret

00001cac <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	6c 01       	movw	r12, r24
    1cc2:	79 01       	movw	r14, r18
  if (length < 1) return 0;
    1cc4:	21 15       	cp	r18, r1
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	b1 f0       	breq	.+44     	; 0x1cf6 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    1cca:	04 2f       	mov	r16, r20
    1ccc:	15 2f       	mov	r17, r21
    1cce:	c0 e0       	ldi	r28, 0x00	; 0
    1cd0:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    1cd2:	a6 2e       	mov	r10, r22
    1cd4:	bb 24       	eor	r11, r11
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
    1cdc:	99 23       	and	r25, r25
    1cde:	6c f0       	brlt	.+26     	; 0x1cfa <_ZN6Stream14readBytesUntilEcPcj+0x4e>
    1ce0:	a8 16       	cp	r10, r24
    1ce2:	b9 06       	cpc	r11, r25
    1ce4:	51 f0       	breq	.+20     	; 0x1cfa <_ZN6Stream14readBytesUntilEcPcj+0x4e>
    *buffer++ = (char)c;
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	81 93       	st	Z+, r24
    1cea:	8f 01       	movw	r16, r30
    index++;
    1cec:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    1cee:	ce 15       	cp	r28, r14
    1cf0:	df 05       	cpc	r29, r15
    1cf2:	88 f3       	brcs	.-30     	; 0x1cd6 <_ZN6Stream14readBytesUntilEcPcj+0x2a>
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <_ZN6Stream14readBytesUntilEcPcj+0x4e>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    1cf6:	c0 e0       	ldi	r28, 0x00	; 0
    1cf8:	d0 e0       	ldi	r29, 0x00	; 0
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    1cfa:	7e 01       	movw	r14, r28
    1cfc:	8c 2f       	mov	r24, r28
    1cfe:	9f 2d       	mov	r25, r15
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	08 95       	ret

00001d16 <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	f8 2e       	mov	r15, r24
    1d24:	e9 2e       	mov	r14, r25
    1d26:	eb 01       	movw	r28, r22
  String ret;
    1d28:	08 2f       	mov	r16, r24
    1d2a:	19 2f       	mov	r17, r25
    1d2c:	68 e4       	ldi	r22, 0x48	; 72
    1d2e:	72 e0       	ldi	r23, 0x02	; 2
    1d30:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <_ZN6StringC1EPKc>
  int c = timedRead();
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    1d3a:	bc 01       	movw	r22, r24
  while (c >= 0)
    1d3c:	99 23       	and	r25, r25
    1d3e:	54 f0       	brlt	.+20     	; 0x1d54 <_ZN6Stream10readStringEv+0x3e>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1d40:	80 2f       	mov	r24, r16
    1d42:	91 2f       	mov	r25, r17
    1d44:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    1d4e:	bc 01       	movw	r22, r24

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
    1d50:	99 23       	and	r25, r25
    1d52:	b4 f7       	brge	.-20     	; 0x1d40 <_ZN6Stream10readStringEv+0x2a>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    1d54:	8f 2d       	mov	r24, r15
    1d56:	9e 2d       	mov	r25, r14
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	08 95       	ret

00001d66 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	08 2f       	mov	r16, r24
    1d7a:	19 2f       	mov	r17, r25
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	b4 2e       	mov	r11, r20
  String ret;
    1d80:	d8 2e       	mov	r13, r24
    1d82:	c9 2e       	mov	r12, r25
    1d84:	68 e4       	ldi	r22, 0x48	; 72
    1d86:	72 e0       	ldi	r23, 0x02	; 2
    1d88:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <_ZN6StringC1EPKc>
  int c = timedRead();
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    1d92:	bc 01       	movw	r22, r24
  while (c >= 0 && c != terminator)
    1d94:	cb 2d       	mov	r28, r11
    1d96:	d0 e0       	ldi	r29, 0x00	; 0
    1d98:	77 23       	and	r23, r23
    1d9a:	64 f0       	brlt	.+24     	; 0x1db4 <_ZN6Stream15readStringUntilEc+0x4e>
    1d9c:	c6 17       	cp	r28, r22
    1d9e:	d7 07       	cpc	r29, r23
    1da0:	49 f0       	breq	.+18     	; 0x1db4 <_ZN6Stream15readStringUntilEc+0x4e>
    1da2:	8d 2d       	mov	r24, r13
    1da4:	9c 2d       	mov	r25, r12
    1da6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
    1daa:	c7 01       	movw	r24, r14
    1dac:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN6Stream9timedReadEv>
    1db0:	bc 01       	movw	r22, r24
    1db2:	f2 cf       	rjmp	.-28     	; 0x1d98 <_ZN6Stream15readStringUntilEc+0x32>
  }
  return ret;
}
    1db4:	80 2f       	mov	r24, r16
    1db6:	91 2f       	mov	r25, r17
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	08 95       	ret

00001dcc <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1dcc:	2f 92       	push	r2
    1dce:	3f 92       	push	r3
    1dd0:	4f 92       	push	r4
    1dd2:	5f 92       	push	r5
    1dd4:	6f 92       	push	r6
    1dd6:	7f 92       	push	r7
    1dd8:	8f 92       	push	r8
    1dda:	9f 92       	push	r9
    1ddc:	af 92       	push	r10
    1dde:	bf 92       	push	r11
    1de0:	cf 92       	push	r12
    1de2:	df 92       	push	r13
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	1f 93       	push	r17
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <_Z4tonehjm+0x24>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	1b 01       	movw	r2, r22
    1df8:	49 01       	movw	r8, r18
    1dfa:	5a 01       	movw	r10, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1dfc:	90 91 49 02 	lds	r25, 0x0249
    1e00:	89 17       	cp	r24, r25
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <_Z4tonehjm+0x40>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e04:	e4 ee       	ldi	r30, 0xE4	; 228
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	14 91       	lpm	r17, Z+
    1e0a:	f0 c0       	rjmp	.+480    	; 0x1fec <_Z4tonehjm+0x220>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    1e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <_Z4tonehjm+0x46>
    1e10:	9e c2       	rjmp	.+1340   	; 0x234e <__stack+0x14f>
      tone_pins[i] = _pin;
    1e12:	80 93 49 02 	sts	0x0249, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e16:	e4 ee       	ldi	r30, 0xE4	; 228
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	14 91       	lpm	r17, Z+
      break;
    }
  }
  
  if (_timer != -1)
    1e1c:	1f 3f       	cpi	r17, 0xFF	; 255
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <_Z4tonehjm+0x56>
    1e20:	96 c2       	rjmp	.+1324   	; 0x234e <__stack+0x14f>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1e22:	12 30       	cpi	r17, 0x02	; 2
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <_Z4tonehjm+0x5c>
    1e26:	55 c0       	rjmp	.+170    	; 0x1ed2 <_Z4tonehjm+0x106>
    1e28:	13 30       	cpi	r17, 0x03	; 3
    1e2a:	34 f4       	brge	.+12     	; 0x1e38 <_Z4tonehjm+0x6c>
    1e2c:	11 23       	and	r17, r17
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <_Z4tonehjm+0x80>
    1e30:	11 30       	cpi	r17, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <_Z4tonehjm+0x6a>
    1e34:	db c0       	rjmp	.+438    	; 0x1fec <_Z4tonehjm+0x220>
    1e36:	2a c0       	rjmp	.+84     	; 0x1e8c <_Z4tonehjm+0xc0>
    1e38:	14 30       	cpi	r17, 0x04	; 4
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <_Z4tonehjm+0x72>
    1e3c:	91 c0       	rjmp	.+290    	; 0x1f60 <_Z4tonehjm+0x194>
    1e3e:	14 30       	cpi	r17, 0x04	; 4
    1e40:	0c f4       	brge	.+2      	; 0x1e44 <_Z4tonehjm+0x78>
    1e42:	6b c0       	rjmp	.+214    	; 0x1f1a <_Z4tonehjm+0x14e>
    1e44:	15 30       	cpi	r17, 0x05	; 5
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <_Z4tonehjm+0x7e>
    1e48:	d1 c0       	rjmp	.+418    	; 0x1fec <_Z4tonehjm+0x220>
    1e4a:	ad c0       	rjmp	.+346    	; 0x1fa6 <_Z4tonehjm+0x1da>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    1e4c:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1e4e:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1e50:	94 b5       	in	r25, 0x24	; 36
    1e52:	92 60       	ori	r25, 0x02	; 2
    1e54:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1e56:	95 b5       	in	r25, 0x25	; 37
    1e58:	91 60       	ori	r25, 0x01	; 1
    1e5a:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	f9 01       	movw	r30, r18
    1e62:	ed 5c       	subi	r30, 0xCD	; 205
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	e4 91       	lpm	r30, Z+
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	e1 50       	subi	r30, 0x01	; 1
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	45 91       	lpm	r20, Z+
    1e74:	54 91       	lpm	r21, Z+
    1e76:	40 93 20 05 	sts	0x0520, r20
    1e7a:	50 93 21 05 	sts	0x0521, r21
        timer0_pin_mask = digitalPinToBitMask(_pin);
    1e7e:	27 58       	subi	r18, 0x87	; 135
    1e80:	3e 4f       	sbci	r19, 0xFE	; 254
    1e82:	f9 01       	movw	r30, r18
    1e84:	24 91       	lpm	r18, Z+
    1e86:	20 93 22 05 	sts	0x0522, r18
    1e8a:	b3 c0       	rjmp	.+358    	; 0x1ff2 <_Z4tonehjm+0x226>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    1e8c:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
    1e90:	e1 e8       	ldi	r30, 0x81	; 129
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
    1e96:	90 81       	ld	r25, Z
    1e98:	98 60       	ori	r25, 0x08	; 8
    1e9a:	90 83       	st	Z, r25
        bitWrite(TCCR1B, CS10, 1);
    1e9c:	90 81       	ld	r25, Z
    1e9e:	91 60       	ori	r25, 0x01	; 1
    1ea0:	90 83       	st	Z, r25
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	ed 5c       	subi	r30, 0xCD	; 205
    1eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1eac:	e4 91       	lpm	r30, Z+
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	e1 50       	subi	r30, 0x01	; 1
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	45 91       	lpm	r20, Z+
    1eba:	54 91       	lpm	r21, Z+
    1ebc:	40 93 27 05 	sts	0x0527, r20
    1ec0:	50 93 28 05 	sts	0x0528, r21
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1ec4:	27 58       	subi	r18, 0x87	; 135
    1ec6:	3e 4f       	sbci	r19, 0xFE	; 254
    1ec8:	f9 01       	movw	r30, r18
    1eca:	24 91       	lpm	r18, Z+
    1ecc:	20 93 29 05 	sts	0x0529, r18
    1ed0:	90 c0       	rjmp	.+288    	; 0x1ff2 <_Z4tonehjm+0x226>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    1ed2:	a0 eb       	ldi	r26, 0xB0	; 176
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	1c 92       	st	X, r1
        TCCR2B = 0;
    1ed8:	e1 eb       	ldi	r30, 0xB1	; 177
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
    1ede:	9c 91       	ld	r25, X
    1ee0:	92 60       	ori	r25, 0x02	; 2
    1ee2:	9c 93       	st	X, r25
        bitWrite(TCCR2B, CS20, 1);
    1ee4:	90 81       	ld	r25, Z
    1ee6:	91 60       	ori	r25, 0x01	; 1
    1ee8:	90 83       	st	Z, r25
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	ed 5c       	subi	r30, 0xCD	; 205
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	e4 91       	lpm	r30, Z+
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	e1 50       	subi	r30, 0x01	; 1
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	45 91       	lpm	r20, Z+
    1f02:	54 91       	lpm	r21, Z+
    1f04:	40 93 2e 05 	sts	0x052E, r20
    1f08:	50 93 2f 05 	sts	0x052F, r21
        timer2_pin_mask = digitalPinToBitMask(_pin);
    1f0c:	27 58       	subi	r18, 0x87	; 135
    1f0e:	3e 4f       	sbci	r19, 0xFE	; 254
    1f10:	f9 01       	movw	r30, r18
    1f12:	24 91       	lpm	r18, Z+
    1f14:	20 93 30 05 	sts	0x0530, r18
    1f18:	6c c0       	rjmp	.+216    	; 0x1ff2 <_Z4tonehjm+0x226>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    1f1a:	10 92 90 00 	sts	0x0090, r1
        TCCR3B = 0;
    1f1e:	e1 e9       	ldi	r30, 0x91	; 145
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	10 82       	st	Z, r1
        bitWrite(TCCR3B, WGM32, 1);
    1f24:	90 81       	ld	r25, Z
    1f26:	98 60       	ori	r25, 0x08	; 8
    1f28:	90 83       	st	Z, r25
        bitWrite(TCCR3B, CS30, 1);
    1f2a:	90 81       	ld	r25, Z
    1f2c:	91 60       	ori	r25, 0x01	; 1
    1f2e:	90 83       	st	Z, r25
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	f9 01       	movw	r30, r18
    1f36:	ed 5c       	subi	r30, 0xCD	; 205
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	e4 91       	lpm	r30, Z+
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	e1 50       	subi	r30, 0x01	; 1
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	45 91       	lpm	r20, Z+
    1f48:	54 91       	lpm	r21, Z+
    1f4a:	40 93 35 05 	sts	0x0535, r20
    1f4e:	50 93 36 05 	sts	0x0536, r21
        timer3_pin_mask = digitalPinToBitMask(_pin);
    1f52:	27 58       	subi	r18, 0x87	; 135
    1f54:	3e 4f       	sbci	r19, 0xFE	; 254
    1f56:	f9 01       	movw	r30, r18
    1f58:	24 91       	lpm	r18, Z+
    1f5a:	20 93 37 05 	sts	0x0537, r18
    1f5e:	49 c0       	rjmp	.+146    	; 0x1ff2 <_Z4tonehjm+0x226>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    1f60:	10 92 a0 00 	sts	0x00A0, r1
        TCCR4B = 0;
    1f64:	e1 ea       	ldi	r30, 0xA1	; 161
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	10 82       	st	Z, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    1f6a:	90 81       	ld	r25, Z
    1f6c:	98 60       	ori	r25, 0x08	; 8
    1f6e:	90 83       	st	Z, r25
        #elif defined(CS43)
          #warning this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    1f70:	90 81       	ld	r25, Z
    1f72:	91 60       	ori	r25, 0x01	; 1
    1f74:	90 83       	st	Z, r25
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	ed 5c       	subi	r30, 0xCD	; 205
    1f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f80:	e4 91       	lpm	r30, Z+
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e1 50       	subi	r30, 0x01	; 1
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	45 91       	lpm	r20, Z+
    1f8e:	54 91       	lpm	r21, Z+
    1f90:	40 93 3c 05 	sts	0x053C, r20
    1f94:	50 93 3d 05 	sts	0x053D, r21
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1f98:	27 58       	subi	r18, 0x87	; 135
    1f9a:	3e 4f       	sbci	r19, 0xFE	; 254
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	24 91       	lpm	r18, Z+
    1fa0:	20 93 3e 05 	sts	0x053E, r18
    1fa4:	26 c0       	rjmp	.+76     	; 0x1ff2 <_Z4tonehjm+0x226>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    1fa6:	10 92 20 01 	sts	0x0120, r1
        TCCR5B = 0;
    1faa:	e1 e2       	ldi	r30, 0x21	; 33
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	10 82       	st	Z, r1
        bitWrite(TCCR5B, WGM52, 1);
    1fb0:	90 81       	ld	r25, Z
    1fb2:	98 60       	ori	r25, 0x08	; 8
    1fb4:	90 83       	st	Z, r25
        bitWrite(TCCR5B, CS50, 1);
    1fb6:	90 81       	ld	r25, Z
    1fb8:	91 60       	ori	r25, 0x01	; 1
    1fba:	90 83       	st	Z, r25
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	ed 5c       	subi	r30, 0xCD	; 205
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	e4 91       	lpm	r30, Z+
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	e1 50       	subi	r30, 0x01	; 1
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	45 91       	lpm	r20, Z+
    1fd4:	54 91       	lpm	r21, Z+
    1fd6:	40 93 43 05 	sts	0x0543, r20
    1fda:	50 93 44 05 	sts	0x0544, r21
        timer5_pin_mask = digitalPinToBitMask(_pin);
    1fde:	27 58       	subi	r18, 0x87	; 135
    1fe0:	3e 4f       	sbci	r19, 0xFE	; 254
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	24 91       	lpm	r18, Z+
    1fe6:	20 93 45 05 	sts	0x0545, r18
    1fea:	03 c0       	rjmp	.+6      	; 0x1ff2 <_Z4tonehjm+0x226>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1fec:	11 23       	and	r17, r17
    1fee:	0c f4       	brge	.+2      	; 0x1ff2 <_Z4tonehjm+0x226>
    1ff0:	ae c1       	rjmp	.+860    	; 0x234e <__stack+0x14f>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1ff8:	11 23       	and	r17, r17
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <_Z4tonehjm+0x236>
    1ffc:	12 30       	cpi	r17, 0x02	; 2
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <_Z4tonehjm+0x236>
    2000:	c5 c0       	rjmp	.+394    	; 0x218c <_Z4tonehjm+0x3c0>
    {
      ocr = F_CPU / frequency / 2 - 1;
    2002:	21 01       	movw	r4, r2
    2004:	66 24       	eor	r6, r6
    2006:	77 24       	eor	r7, r7
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	72 e1       	ldi	r23, 0x12	; 18
    200c:	8a e7       	ldi	r24, 0x7A	; 122
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a3 01       	movw	r20, r6
    2012:	92 01       	movw	r18, r4
    2014:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    2018:	29 83       	std	Y+1, r18	; 0x01
    201a:	3a 83       	std	Y+2, r19	; 0x02
    201c:	4b 83       	std	Y+3, r20	; 0x03
    201e:	5c 83       	std	Y+4, r21	; 0x04
    2020:	69 01       	movw	r12, r18
    2022:	7a 01       	movw	r14, r20
    2024:	08 94       	sec
    2026:	c1 08       	sbc	r12, r1
    2028:	d1 08       	sbc	r13, r1
    202a:	e1 08       	sbc	r14, r1
    202c:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    202e:	ff ef       	ldi	r31, 0xFF	; 255
    2030:	cf 16       	cp	r12, r31
    2032:	d1 04       	cpc	r13, r1
    2034:	e1 04       	cpc	r14, r1
    2036:	f1 04       	cpc	r15, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <_Z4tonehjm+0x270>
    203a:	08 f4       	brcc	.+2      	; 0x203e <_Z4tonehjm+0x272>
    203c:	9a c0       	rjmp	.+308    	; 0x2172 <_Z4tonehjm+0x3a6>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    203e:	60 e4       	ldi	r22, 0x40	; 64
    2040:	72 e4       	ldi	r23, 0x42	; 66
    2042:	8f e0       	ldi	r24, 0x0F	; 15
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a3 01       	movw	r20, r6
    2048:	92 01       	movw	r18, r4
    204a:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    204e:	69 01       	movw	r12, r18
    2050:	7a 01       	movw	r14, r20
    2052:	08 94       	sec
    2054:	c1 08       	sbc	r12, r1
    2056:	d1 08       	sbc	r13, r1
    2058:	e1 08       	sbc	r14, r1
    205a:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    205c:	12 30       	cpi	r17, 0x02	; 2
    205e:	c9 f4       	brne	.+50     	; 0x2092 <_Z4tonehjm+0x2c6>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	c8 16       	cp	r12, r24
    2064:	d1 04       	cpc	r13, r1
    2066:	e1 04       	cpc	r14, r1
    2068:	f1 04       	cpc	r15, r1
    206a:	09 f0       	breq	.+2      	; 0x206e <_Z4tonehjm+0x2a2>
    206c:	08 f4       	brcc	.+2      	; 0x2070 <_Z4tonehjm+0x2a4>
    206e:	83 c0       	rjmp	.+262    	; 0x2176 <_Z4tonehjm+0x3aa>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2070:	60 e9       	ldi	r22, 0x90	; 144
    2072:	70 ed       	ldi	r23, 0xD0	; 208
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a3 01       	movw	r20, r6
    207a:	92 01       	movw	r18, r4
    207c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    2080:	69 01       	movw	r12, r18
    2082:	7a 01       	movw	r14, r20
    2084:	08 94       	sec
    2086:	c1 08       	sbc	r12, r1
    2088:	d1 08       	sbc	r13, r1
    208a:	e1 08       	sbc	r14, r1
    208c:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <_Z4tonehjm+0x2c8>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2092:	82 e0       	ldi	r24, 0x02	; 2
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2094:	9f ef       	ldi	r25, 0xFF	; 255
    2096:	c9 16       	cp	r12, r25
    2098:	d1 04       	cpc	r13, r1
    209a:	e1 04       	cpc	r14, r1
    209c:	f1 04       	cpc	r15, r1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <_Z4tonehjm+0x2d6>
    20a0:	08 f4       	brcc	.+2      	; 0x20a4 <_Z4tonehjm+0x2d8>
    20a2:	6a c0       	rjmp	.+212    	; 0x2178 <_Z4tonehjm+0x3ac>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    20a4:	68 e4       	ldi	r22, 0x48	; 72
    20a6:	78 ee       	ldi	r23, 0xE8	; 232
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a3 01       	movw	r20, r6
    20ae:	92 01       	movw	r18, r4
    20b0:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    20b4:	69 01       	movw	r12, r18
    20b6:	7a 01       	movw	r14, r20
    20b8:	08 94       	sec
    20ba:	c1 08       	sbc	r12, r1
    20bc:	d1 08       	sbc	r13, r1
    20be:	e1 08       	sbc	r14, r1
    20c0:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    20c2:	11 23       	and	r17, r17
    20c4:	d9 f0       	breq	.+54     	; 0x20fc <_Z4tonehjm+0x330>

          if (_timer == 2 && ocr > 255)
    20c6:	12 30       	cpi	r17, 0x02	; 2
    20c8:	d9 f4       	brne	.+54     	; 0x2100 <_Z4tonehjm+0x334>
    20ca:	ef ef       	ldi	r30, 0xFF	; 255
    20cc:	ce 16       	cp	r12, r30
    20ce:	d1 04       	cpc	r13, r1
    20d0:	e1 04       	cpc	r14, r1
    20d2:	f1 04       	cpc	r15, r1
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <_Z4tonehjm+0x30c>
    20d6:	08 f4       	brcc	.+2      	; 0x20da <_Z4tonehjm+0x30e>
    20d8:	55 c0       	rjmp	.+170    	; 0x2184 <_Z4tonehjm+0x3b8>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    20da:	64 e2       	ldi	r22, 0x24	; 36
    20dc:	74 ef       	ldi	r23, 0xF4	; 244
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a3 01       	movw	r20, r6
    20e4:	92 01       	movw	r18, r4
    20e6:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    20ea:	69 01       	movw	r12, r18
    20ec:	7a 01       	movw	r14, r20
    20ee:	08 94       	sec
    20f0:	c1 08       	sbc	r12, r1
    20f2:	d1 08       	sbc	r13, r1
    20f4:	e1 08       	sbc	r14, r1
    20f6:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
    20f8:	85 e0       	ldi	r24, 0x05	; 5
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <_Z4tonehjm+0x336>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <_Z4tonehjm+0x336>
    2100:	84 e0       	ldi	r24, 0x04	; 4
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    2102:	ff ef       	ldi	r31, 0xFF	; 255
    2104:	cf 16       	cp	r12, r31
    2106:	d1 04       	cpc	r13, r1
    2108:	e1 04       	cpc	r14, r1
    210a:	f1 04       	cpc	r15, r1
    210c:	a9 f1       	breq	.+106    	; 0x2178 <_Z4tonehjm+0x3ac>
    210e:	a0 f1       	brcs	.+104    	; 0x2178 <_Z4tonehjm+0x3ac>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2110:	62 e1       	ldi	r22, 0x12	; 18
    2112:	7a e7       	ldi	r23, 0x7A	; 122
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a3 01       	movw	r20, r6
    211a:	92 01       	movw	r18, r4
    211c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    2120:	69 01       	movw	r12, r18
    2122:	7a 01       	movw	r14, r20
    2124:	08 94       	sec
    2126:	c1 08       	sbc	r12, r1
    2128:	d1 08       	sbc	r13, r1
    212a:	e1 08       	sbc	r14, r1
    212c:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    212e:	11 23       	and	r17, r17
    2130:	11 f4       	brne	.+4      	; 0x2136 <_Z4tonehjm+0x36a>
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <_Z4tonehjm+0x36c>
    2136:	86 e0       	ldi	r24, 0x06	; 6
            if (ocr > 255)
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	c9 16       	cp	r12, r25
    213c:	d1 04       	cpc	r13, r1
    213e:	e1 04       	cpc	r14, r1
    2140:	f1 04       	cpc	r15, r1
    2142:	d1 f0       	breq	.+52     	; 0x2178 <_Z4tonehjm+0x3ac>
    2144:	c8 f0       	brcs	.+50     	; 0x2178 <_Z4tonehjm+0x3ac>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2146:	c9 80       	ldd	r12, Y+1	; 0x01
    2148:	da 80       	ldd	r13, Y+2	; 0x02
    214a:	eb 80       	ldd	r14, Y+3	; 0x03
    214c:	fc 80       	ldd	r15, Y+4	; 0x04
    214e:	0b 2e       	mov	r0, r27
    2150:	ba e0       	ldi	r27, 0x0A	; 10
    2152:	f6 94       	lsr	r15
    2154:	e7 94       	ror	r14
    2156:	d7 94       	ror	r13
    2158:	c7 94       	ror	r12
    215a:	ba 95       	dec	r27
    215c:	d1 f7       	brne	.-12     	; 0x2152 <_Z4tonehjm+0x386>
    215e:	b0 2d       	mov	r27, r0
    2160:	08 94       	sec
    2162:	c1 08       	sbc	r12, r1
    2164:	d1 08       	sbc	r13, r1
    2166:	e1 08       	sbc	r14, r1
    2168:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    216a:	11 23       	and	r17, r17
    216c:	41 f0       	breq	.+16     	; 0x217e <_Z4tonehjm+0x3b2>
    216e:	87 e0       	ldi	r24, 0x07	; 7
    2170:	0a c0       	rjmp	.+20     	; 0x2186 <_Z4tonehjm+0x3ba>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <_Z4tonehjm+0x3ac>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2176:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2178:	11 23       	and	r17, r17
    217a:	11 f0       	breq	.+4      	; 0x2180 <_Z4tonehjm+0x3b4>
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <_Z4tonehjm+0x3ba>
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    217e:	85 e0       	ldi	r24, 0x05	; 5
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = prescalarbits;
    2180:	85 bd       	out	0x25, r24	; 37
    2182:	54 c0       	rjmp	.+168    	; 0x222c <__stack+0x2d>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2184:	84 e0       	ldi	r24, 0x04	; 4
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
    2186:	80 93 b1 00 	sts	0x00B1, r24
    218a:	50 c0       	rjmp	.+160    	; 0x222c <__stack+0x2d>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    218c:	21 01       	movw	r4, r2
    218e:	66 24       	eor	r6, r6
    2190:	77 24       	eor	r7, r7
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	72 e1       	ldi	r23, 0x12	; 18
    2196:	8a e7       	ldi	r24, 0x7A	; 122
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a3 01       	movw	r20, r6
    219c:	92 01       	movw	r18, r4
    219e:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    21a2:	69 01       	movw	r12, r18
    21a4:	7a 01       	movw	r14, r20
    21a6:	08 94       	sec
    21a8:	c1 08       	sbc	r12, r1
    21aa:	d1 08       	sbc	r13, r1
    21ac:	e1 08       	sbc	r14, r1
    21ae:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    21b0:	e0 e0       	ldi	r30, 0x00	; 0
    21b2:	ce 16       	cp	r12, r30
    21b4:	e0 e0       	ldi	r30, 0x00	; 0
    21b6:	de 06       	cpc	r13, r30
    21b8:	e1 e0       	ldi	r30, 0x01	; 1
    21ba:	ee 06       	cpc	r14, r30
    21bc:	e0 e0       	ldi	r30, 0x00	; 0
    21be:	fe 06       	cpc	r15, r30
    21c0:	88 f0       	brcs	.+34     	; 0x21e4 <_Z4tonehjm+0x418>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    21c2:	68 e4       	ldi	r22, 0x48	; 72
    21c4:	78 ee       	ldi	r23, 0xE8	; 232
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a3 01       	movw	r20, r6
    21cc:	92 01       	movw	r18, r4
    21ce:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    21d2:	69 01       	movw	r12, r18
    21d4:	7a 01       	movw	r14, r20
    21d6:	08 94       	sec
    21d8:	c1 08       	sbc	r12, r1
    21da:	d1 08       	sbc	r13, r1
    21dc:	e1 08       	sbc	r14, r1
    21de:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <_Z4tonehjm+0x41a>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    21e6:	11 30       	cpi	r17, 0x01	; 1
    21e8:	39 f4       	brne	.+14     	; 0x21f8 <_Z4tonehjm+0x42c>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    21ea:	e1 e8       	ldi	r30, 0x81	; 129
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	90 81       	ld	r25, Z
    21f0:	98 7f       	andi	r25, 0xF8	; 248
    21f2:	89 2b       	or	r24, r25
    21f4:	80 83       	st	Z, r24
    21f6:	1a c0       	rjmp	.+52     	; 0x222c <__stack+0x2d>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    21f8:	13 30       	cpi	r17, 0x03	; 3
    21fa:	39 f4       	brne	.+14     	; 0x220a <__stack+0xb>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    21fc:	e1 e9       	ldi	r30, 0x91	; 145
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	90 81       	ld	r25, Z
    2202:	98 7f       	andi	r25, 0xF8	; 248
    2204:	89 2b       	or	r24, r25
    2206:	80 83       	st	Z, r24
    2208:	11 c0       	rjmp	.+34     	; 0x222c <__stack+0x2d>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    220a:	14 30       	cpi	r17, 0x04	; 4
    220c:	39 f4       	brne	.+14     	; 0x221c <__stack+0x1d>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    220e:	e1 ea       	ldi	r30, 0xA1	; 161
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	90 81       	ld	r25, Z
    2214:	98 7f       	andi	r25, 0xF8	; 248
    2216:	89 2b       	or	r24, r25
    2218:	80 83       	st	Z, r24
    221a:	08 c0       	rjmp	.+16     	; 0x222c <__stack+0x2d>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    221c:	15 30       	cpi	r17, 0x05	; 5
    221e:	31 f4       	brne	.+12     	; 0x222c <__stack+0x2d>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    2220:	e1 e2       	ldi	r30, 0x21	; 33
    2222:	f1 e0       	ldi	r31, 0x01	; 1
    2224:	90 81       	ld	r25, Z
    2226:	98 7f       	andi	r25, 0xF8	; 248
    2228:	89 2b       	or	r24, r25
    222a:	80 83       	st	Z, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
    222c:	81 14       	cp	r8, r1
    222e:	91 04       	cpc	r9, r1
    2230:	a1 04       	cpc	r10, r1
    2232:	b1 04       	cpc	r11, r1
    2234:	81 f0       	breq	.+32     	; 0x2256 <__stack+0x57>
    {
      toggle_count = 2 * frequency * duration / 1000;
    2236:	b1 01       	movw	r22, r2
    2238:	66 0f       	add	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a5 01       	movw	r20, r10
    2242:	94 01       	movw	r18, r8
    2244:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    2248:	28 ee       	ldi	r18, 0xE8	; 232
    224a:	33 e0       	ldi	r19, 0x03	; 3
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    2254:	03 c0       	rjmp	.+6      	; 0x225c <__stack+0x5d>
    }
    else
    {
      toggle_count = -1;
    2256:	2f ef       	ldi	r18, 0xFF	; 255
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    225c:	12 30       	cpi	r17, 0x02	; 2
    225e:	91 f1       	breq	.+100    	; 0x22c4 <__stack+0xc5>
    2260:	13 30       	cpi	r17, 0x03	; 3
    2262:	34 f4       	brge	.+12     	; 0x2270 <__stack+0x71>
    2264:	11 23       	and	r17, r17
    2266:	69 f0       	breq	.+26     	; 0x2282 <__stack+0x83>
    2268:	11 30       	cpi	r17, 0x01	; 1
    226a:	09 f0       	breq	.+2      	; 0x226e <__stack+0x6f>
    226c:	70 c0       	rjmp	.+224    	; 0x234e <__stack+0x14f>
    226e:	18 c0       	rjmp	.+48     	; 0x22a0 <__stack+0xa1>
    2270:	14 30       	cpi	r17, 0x04	; 4
    2272:	09 f4       	brne	.+2      	; 0x2276 <__stack+0x77>
    2274:	49 c0       	rjmp	.+146    	; 0x2308 <__stack+0x109>
    2276:	14 30       	cpi	r17, 0x04	; 4
    2278:	ac f1       	brlt	.+106    	; 0x22e4 <__stack+0xe5>
    227a:	15 30       	cpi	r17, 0x05	; 5
    227c:	09 f0       	breq	.+2      	; 0x2280 <__stack+0x81>
    227e:	67 c0       	rjmp	.+206    	; 0x234e <__stack+0x14f>
    2280:	55 c0       	rjmp	.+170    	; 0x232c <__stack+0x12d>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2282:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    2284:	20 93 1c 05 	sts	0x051C, r18
    2288:	30 93 1d 05 	sts	0x051D, r19
    228c:	40 93 1e 05 	sts	0x051E, r20
    2290:	50 93 1f 05 	sts	0x051F, r21
        bitWrite(TIMSK0, OCIE0A, 1);
    2294:	ee e6       	ldi	r30, 0x6E	; 110
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	82 60       	ori	r24, 0x02	; 2
    229c:	80 83       	st	Z, r24
        break;
    229e:	57 c0       	rjmp	.+174    	; 0x234e <__stack+0x14f>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    22a0:	d0 92 89 00 	sts	0x0089, r13
    22a4:	c0 92 88 00 	sts	0x0088, r12
        timer1_toggle_count = toggle_count;
    22a8:	20 93 23 05 	sts	0x0523, r18
    22ac:	30 93 24 05 	sts	0x0524, r19
    22b0:	40 93 25 05 	sts	0x0525, r20
    22b4:	50 93 26 05 	sts	0x0526, r21
        bitWrite(TIMSK1, OCIE1A, 1);
    22b8:	ef e6       	ldi	r30, 0x6F	; 111
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	82 60       	ori	r24, 0x02	; 2
    22c0:	80 83       	st	Z, r24
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    22c2:	45 c0       	rjmp	.+138    	; 0x234e <__stack+0x14f>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    22c4:	c0 92 b3 00 	sts	0x00B3, r12
        timer2_toggle_count = toggle_count;
    22c8:	20 93 2a 05 	sts	0x052A, r18
    22cc:	30 93 2b 05 	sts	0x052B, r19
    22d0:	40 93 2c 05 	sts	0x052C, r20
    22d4:	50 93 2d 05 	sts	0x052D, r21
        bitWrite(TIMSK2, OCIE2A, 1);
    22d8:	e0 e7       	ldi	r30, 0x70	; 112
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	80 83       	st	Z, r24
        break;
    22e2:	35 c0       	rjmp	.+106    	; 0x234e <__stack+0x14f>
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
    22e4:	d0 92 99 00 	sts	0x0099, r13
    22e8:	c0 92 98 00 	sts	0x0098, r12
        timer3_toggle_count = toggle_count;
    22ec:	20 93 31 05 	sts	0x0531, r18
    22f0:	30 93 32 05 	sts	0x0532, r19
    22f4:	40 93 33 05 	sts	0x0533, r20
    22f8:	50 93 34 05 	sts	0x0534, r21
        bitWrite(TIMSK3, OCIE3A, 1);
    22fc:	e1 e7       	ldi	r30, 0x71	; 113
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	82 60       	ori	r24, 0x02	; 2
    2304:	80 83       	st	Z, r24
        break;
    2306:	23 c0       	rjmp	.+70     	; 0x234e <__stack+0x14f>
#endif

#if defined(TIMSK4)
      case 4:
        OCR4A = ocr;
    2308:	d0 92 a9 00 	sts	0x00A9, r13
    230c:	c0 92 a8 00 	sts	0x00A8, r12
        timer4_toggle_count = toggle_count;
    2310:	20 93 38 05 	sts	0x0538, r18
    2314:	30 93 39 05 	sts	0x0539, r19
    2318:	40 93 3a 05 	sts	0x053A, r20
    231c:	50 93 3b 05 	sts	0x053B, r21
        bitWrite(TIMSK4, OCIE4A, 1);
    2320:	e2 e7       	ldi	r30, 0x72	; 114
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	82 60       	ori	r24, 0x02	; 2
    2328:	80 83       	st	Z, r24
        break;
    232a:	11 c0       	rjmp	.+34     	; 0x234e <__stack+0x14f>
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    232c:	d0 92 29 01 	sts	0x0129, r13
    2330:	c0 92 28 01 	sts	0x0128, r12
        timer5_toggle_count = toggle_count;
    2334:	20 93 3f 05 	sts	0x053F, r18
    2338:	30 93 40 05 	sts	0x0540, r19
    233c:	40 93 41 05 	sts	0x0541, r20
    2340:	50 93 42 05 	sts	0x0542, r21
        bitWrite(TIMSK5, OCIE5A, 1);
    2344:	e3 e7       	ldi	r30, 0x73	; 115
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	82 60       	ori	r24, 0x02	; 2
    234c:	80 83       	st	Z, r24
        break;
#endif

    }
  }
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	1f 91       	pop	r17
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	7f 90       	pop	r7
    236e:	6f 90       	pop	r6
    2370:	5f 90       	pop	r5
    2372:	4f 90       	pop	r4
    2374:	3f 90       	pop	r3
    2376:	2f 90       	pop	r2
    2378:	08 95       	ret

0000237a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	b9 f0       	breq	.+46     	; 0x23ac <_Z12disableTimerh+0x32>
    237e:	83 30       	cpi	r24, 0x03	; 3
    2380:	28 f4       	brcc	.+10     	; 0x238c <_Z12disableTimerh+0x12>
    2382:	88 23       	and	r24, r24
    2384:	51 f0       	breq	.+20     	; 0x239a <_Z12disableTimerh+0x20>
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	51 f5       	brne	.+84     	; 0x23de <_Z12disableTimerh+0x64>
    238a:	0a c0       	rjmp	.+20     	; 0x23a0 <_Z12disableTimerh+0x26>
    238c:	84 30       	cpi	r24, 0x04	; 4
    238e:	11 f1       	breq	.+68     	; 0x23d4 <_Z12disableTimerh+0x5a>
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	e8 f0       	brcs	.+58     	; 0x23ce <_Z12disableTimerh+0x54>
    2394:	85 30       	cpi	r24, 0x05	; 5
    2396:	19 f5       	brne	.+70     	; 0x23de <_Z12disableTimerh+0x64>
    2398:	20 c0       	rjmp	.+64     	; 0x23da <_Z12disableTimerh+0x60>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    239a:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    239e:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    23a0:	ef e6       	ldi	r30, 0x6F	; 111
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8d 7f       	andi	r24, 0xFD	; 253
    23a8:	80 83       	st	Z, r24
      break;
    23aa:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    23ac:	e0 e7       	ldi	r30, 0x70	; 112
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8d 7f       	andi	r24, 0xFD	; 253
    23b4:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    23bc:	e1 eb       	ldi	r30, 0xB1	; 177
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	88 7f       	andi	r24, 0xF8	; 248
    23c4:	84 60       	ori	r24, 0x04	; 4
    23c6:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    23c8:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    23cc:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    23ce:	10 92 71 00 	sts	0x0071, r1
      break;
    23d2:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    23d4:	10 92 72 00 	sts	0x0072, r1
      break;
    23d8:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    23da:	10 92 73 00 	sts	0x0073, r1
    23de:	08 95       	ret

000023e0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23e0:	1f 93       	push	r17
    23e2:	18 2f       	mov	r17, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23e4:	80 91 49 02 	lds	r24, 0x0249
    23e8:	81 17       	cp	r24, r17
    23ea:	39 f4       	brne	.+14     	; 0x23fa <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23ec:	e4 ee       	ldi	r30, 0xE4	; 228
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	84 91       	lpm	r24, Z+
      tone_pins[i] = 255;
    23f2:	9f ef       	ldi	r25, 0xFF	; 255
    23f4:	90 93 49 02 	sts	0x0249, r25
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <_Z6noToneh+0x1c>
void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    23fc:	0e 94 bd 11 	call	0x237a	; 0x237a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2400:	81 2f       	mov	r24, r17
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
}
    2408:	1f 91       	pop	r17
    240a:	08 95       	ret

0000240c <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    240c:	1f 92       	push	r1
    240e:	0f 92       	push	r0
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	0f 92       	push	r0
    2414:	0b b6       	in	r0, 0x3b	; 59
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    2432:	80 91 2a 05 	lds	r24, 0x052A
    2436:	90 91 2b 05 	lds	r25, 0x052B
    243a:	a0 91 2c 05 	lds	r26, 0x052C
    243e:	b0 91 2d 05 	lds	r27, 0x052D
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	a1 05       	cpc	r26, r1
    2446:	b1 05       	cpc	r27, r1
    2448:	51 f1       	breq	.+84     	; 0x249e <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    244a:	e0 91 2e 05 	lds	r30, 0x052E
    244e:	f0 91 2f 05 	lds	r31, 0x052F
    2452:	90 81       	ld	r25, Z
    2454:	80 91 30 05 	lds	r24, 0x0530
    2458:	89 27       	eor	r24, r25
    245a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    245c:	80 91 2a 05 	lds	r24, 0x052A
    2460:	90 91 2b 05 	lds	r25, 0x052B
    2464:	a0 91 2c 05 	lds	r26, 0x052C
    2468:	b0 91 2d 05 	lds	r27, 0x052D
    246c:	18 16       	cp	r1, r24
    246e:	19 06       	cpc	r1, r25
    2470:	1a 06       	cpc	r1, r26
    2472:	1b 06       	cpc	r1, r27
    2474:	c4 f4       	brge	.+48     	; 0x24a6 <__vector_13+0x9a>
      timer2_toggle_count--;
    2476:	80 91 2a 05 	lds	r24, 0x052A
    247a:	90 91 2b 05 	lds	r25, 0x052B
    247e:	a0 91 2c 05 	lds	r26, 0x052C
    2482:	b0 91 2d 05 	lds	r27, 0x052D
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	a1 09       	sbc	r26, r1
    248a:	b1 09       	sbc	r27, r1
    248c:	80 93 2a 05 	sts	0x052A, r24
    2490:	90 93 2b 05 	sts	0x052B, r25
    2494:	a0 93 2c 05 	sts	0x052C, r26
    2498:	b0 93 2d 05 	sts	0x052D, r27
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <__vector_13+0x9a>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    249e:	80 91 49 02 	lds	r24, 0x0249
    24a2:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    24a6:	ff 91       	pop	r31
    24a8:	ef 91       	pop	r30
    24aa:	bf 91       	pop	r27
    24ac:	af 91       	pop	r26
    24ae:	9f 91       	pop	r25
    24b0:	8f 91       	pop	r24
    24b2:	7f 91       	pop	r23
    24b4:	6f 91       	pop	r22
    24b6:	5f 91       	pop	r21
    24b8:	4f 91       	pop	r20
    24ba:	3f 91       	pop	r19
    24bc:	2f 91       	pop	r18
    24be:	0f 90       	pop	r0
    24c0:	0b be       	out	0x3b, r0	; 59
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	0f 90       	pop	r0
    24c8:	1f 90       	pop	r1
    24ca:	18 95       	reti

000024cc <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    24cc:	88 30       	cpi	r24, 0x08	; 8
    24ce:	08 f0       	brcs	.+2      	; 0x24d2 <attachInterrupt+0x6>
    24d0:	82 c0       	rjmp	.+260    	; 0x25d6 <attachInterrupt+0x10a>
    intFunc[interruptNum] = userFunc;
    24d2:	e8 2f       	mov	r30, r24
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	ea 5b       	subi	r30, 0xBA	; 186
    24dc:	fa 4f       	sbci	r31, 0xFA	; 250
    24de:	71 83       	std	Z+1, r23	; 0x01
    24e0:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    24e2:	83 30       	cpi	r24, 0x03	; 3
    24e4:	d9 f0       	breq	.+54     	; 0x251c <attachInterrupt+0x50>
    24e6:	84 30       	cpi	r24, 0x04	; 4
    24e8:	30 f4       	brcc	.+12     	; 0x24f6 <attachInterrupt+0x2a>
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <attachInterrupt+0x24>
    24ee:	49 c0       	rjmp	.+146    	; 0x2582 <attachInterrupt+0xb6>
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	60 f4       	brcc	.+24     	; 0x250c <attachInterrupt+0x40>
    24f4:	3e c0       	rjmp	.+124    	; 0x2572 <attachInterrupt+0xa6>
    24f6:	85 30       	cpi	r24, 0x05	; 5
    24f8:	59 f1       	breq	.+86     	; 0x2550 <attachInterrupt+0x84>
    24fa:	85 30       	cpi	r24, 0x05	; 5
    24fc:	d8 f0       	brcs	.+54     	; 0x2534 <attachInterrupt+0x68>
    24fe:	86 30       	cpi	r24, 0x06	; 6
    2500:	09 f4       	brne	.+2      	; 0x2504 <attachInterrupt+0x38>
    2502:	4b c0       	rjmp	.+150    	; 0x259a <attachInterrupt+0xce>
    2504:	87 30       	cpi	r24, 0x07	; 7
    2506:	09 f0       	breq	.+2      	; 0x250a <attachInterrupt+0x3e>
    2508:	66 c0       	rjmp	.+204    	; 0x25d6 <attachInterrupt+0x10a>
    250a:	55 c0       	rjmp	.+170    	; 0x25b6 <attachInterrupt+0xea>
        EICRB = (EICRB & ~((1<<ISC60) | (1<<ISC61))) | (mode << ISC60);
        EIMSK |= (1<<INT6);
        break;
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    250c:	e9 e6       	ldi	r30, 0x69	; 105
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8c 7f       	andi	r24, 0xFC	; 252
    2514:	48 2b       	or	r20, r24
    2516:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    2518:	e8 9a       	sbi	0x1d, 0	; 29
      break;
    251a:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    251c:	e9 e6       	ldi	r30, 0x69	; 105
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	44 0f       	add	r20, r20
    2524:	55 1f       	adc	r21, r21
    2526:	44 0f       	add	r20, r20
    2528:	55 1f       	adc	r21, r21
    252a:	83 7f       	andi	r24, 0xF3	; 243
    252c:	48 2b       	or	r20, r24
    252e:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    2530:	e9 9a       	sbi	0x1d, 1	; 29
      break;
    2532:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    2534:	e9 e6       	ldi	r30, 0x69	; 105
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	42 95       	swap	r20
    253c:	52 95       	swap	r21
    253e:	50 7f       	andi	r21, 0xF0	; 240
    2540:	54 27       	eor	r21, r20
    2542:	40 7f       	andi	r20, 0xF0	; 240
    2544:	54 27       	eor	r21, r20
    2546:	8f 7c       	andi	r24, 0xCF	; 207
    2548:	48 2b       	or	r20, r24
    254a:	40 83       	st	Z, r20
      EIMSK |= (1 << INT2);
    254c:	ea 9a       	sbi	0x1d, 2	; 29
      break;
    254e:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    2550:	e9 e6       	ldi	r30, 0x69	; 105
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	00 24       	eor	r0, r0
    2558:	56 95       	lsr	r21
    255a:	47 95       	ror	r20
    255c:	07 94       	ror	r0
    255e:	56 95       	lsr	r21
    2560:	47 95       	ror	r20
    2562:	07 94       	ror	r0
    2564:	54 2f       	mov	r21, r20
    2566:	40 2d       	mov	r20, r0
    2568:	8f 73       	andi	r24, 0x3F	; 63
    256a:	48 2b       	or	r20, r24
    256c:	40 83       	st	Z, r20
      EIMSK |= (1 << INT3);
    256e:	eb 9a       	sbi	0x1d, 3	; 29
      break;
    2570:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    2572:	ea e6       	ldi	r30, 0x6A	; 106
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	8c 7f       	andi	r24, 0xFC	; 252
    257a:	48 2b       	or	r20, r24
    257c:	40 83       	st	Z, r20
      EIMSK |= (1 << INT4);
    257e:	ec 9a       	sbi	0x1d, 4	; 29
      break;
    2580:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    2582:	ea e6       	ldi	r30, 0x6A	; 106
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	44 0f       	add	r20, r20
    258a:	55 1f       	adc	r21, r21
    258c:	44 0f       	add	r20, r20
    258e:	55 1f       	adc	r21, r21
    2590:	83 7f       	andi	r24, 0xF3	; 243
    2592:	48 2b       	or	r20, r24
    2594:	40 83       	st	Z, r20
      EIMSK |= (1 << INT5);
    2596:	ed 9a       	sbi	0x1d, 5	; 29
      break;
    2598:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    259a:	ea e6       	ldi	r30, 0x6A	; 106
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	42 95       	swap	r20
    25a2:	52 95       	swap	r21
    25a4:	50 7f       	andi	r21, 0xF0	; 240
    25a6:	54 27       	eor	r21, r20
    25a8:	40 7f       	andi	r20, 0xF0	; 240
    25aa:	54 27       	eor	r21, r20
    25ac:	8f 7c       	andi	r24, 0xCF	; 207
    25ae:	48 2b       	or	r20, r24
    25b0:	40 83       	st	Z, r20
      EIMSK |= (1 << INT6);
    25b2:	ee 9a       	sbi	0x1d, 6	; 29
      break;
    25b4:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    25b6:	ea e6       	ldi	r30, 0x6A	; 106
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	00 24       	eor	r0, r0
    25be:	56 95       	lsr	r21
    25c0:	47 95       	ror	r20
    25c2:	07 94       	ror	r0
    25c4:	56 95       	lsr	r21
    25c6:	47 95       	ror	r20
    25c8:	07 94       	ror	r0
    25ca:	54 2f       	mov	r21, r20
    25cc:	40 2d       	mov	r20, r0
    25ce:	8f 73       	andi	r24, 0x3F	; 63
    25d0:	48 2b       	or	r20, r24
    25d2:	40 83       	st	Z, r20
      EIMSK |= (1 << INT7);
    25d4:	ef 9a       	sbi	0x1d, 7	; 29
    25d6:	08 95       	ret

000025d8 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	48 f5       	brcc	.+82     	; 0x262e <detachInterrupt+0x56>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    25dc:	83 30       	cpi	r24, 0x03	; 3
    25de:	91 f0       	breq	.+36     	; 0x2604 <detachInterrupt+0x2c>
    25e0:	84 30       	cpi	r24, 0x04	; 4
    25e2:	28 f4       	brcc	.+10     	; 0x25ee <detachInterrupt+0x16>
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	b1 f0       	breq	.+44     	; 0x2614 <detachInterrupt+0x3c>
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	50 f4       	brcc	.+20     	; 0x2600 <detachInterrupt+0x28>
    25ec:	11 c0       	rjmp	.+34     	; 0x2610 <detachInterrupt+0x38>
    25ee:	85 30       	cpi	r24, 0x05	; 5
    25f0:	69 f0       	breq	.+26     	; 0x260c <detachInterrupt+0x34>
    25f2:	85 30       	cpi	r24, 0x05	; 5
    25f4:	48 f0       	brcs	.+18     	; 0x2608 <detachInterrupt+0x30>
    25f6:	86 30       	cpi	r24, 0x06	; 6
    25f8:	79 f0       	breq	.+30     	; 0x2618 <detachInterrupt+0x40>
    25fa:	87 30       	cpi	r24, 0x07	; 7
    25fc:	81 f4       	brne	.+32     	; 0x261e <detachInterrupt+0x46>
    25fe:	0e c0       	rjmp	.+28     	; 0x261c <detachInterrupt+0x44>
    case 4:
        EIMSK &= ~(1<<INT6);
        break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
    2600:	e8 98       	cbi	0x1d, 0	; 29
      break;
    2602:	0d c0       	rjmp	.+26     	; 0x261e <detachInterrupt+0x46>
    case 3:
      EIMSK &= ~(1 << INT1);
    2604:	e9 98       	cbi	0x1d, 1	; 29
      break;
    2606:	0b c0       	rjmp	.+22     	; 0x261e <detachInterrupt+0x46>
    case 4:
      EIMSK &= ~(1 << INT2);
    2608:	ea 98       	cbi	0x1d, 2	; 29
      break;
    260a:	09 c0       	rjmp	.+18     	; 0x261e <detachInterrupt+0x46>
    case 5:
      EIMSK &= ~(1 << INT3);
    260c:	eb 98       	cbi	0x1d, 3	; 29
      break;
    260e:	07 c0       	rjmp	.+14     	; 0x261e <detachInterrupt+0x46>
    case 0:
      EIMSK &= ~(1 << INT4);
    2610:	ec 98       	cbi	0x1d, 4	; 29
      break;
    2612:	05 c0       	rjmp	.+10     	; 0x261e <detachInterrupt+0x46>
    case 1:
      EIMSK &= ~(1 << INT5);
    2614:	ed 98       	cbi	0x1d, 5	; 29
      break;
    2616:	03 c0       	rjmp	.+6      	; 0x261e <detachInterrupt+0x46>
    case 6:
      EIMSK &= ~(1 << INT6);
    2618:	ee 98       	cbi	0x1d, 6	; 29
      break;
    261a:	01 c0       	rjmp	.+2      	; 0x261e <detachInterrupt+0x46>
    case 7:
      EIMSK &= ~(1 << INT7);
    261c:	ef 98       	cbi	0x1d, 7	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    261e:	e8 2f       	mov	r30, r24
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	ea 5b       	subi	r30, 0xBA	; 186
    2628:	fa 4f       	sbci	r31, 0xFA	; 250
    262a:	11 82       	std	Z+1, r1	; 0x01
    262c:	10 82       	st	Z, r1
    262e:	08 95       	ret

00002630 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    2630:	1f 92       	push	r1
    2632:	0f 92       	push	r0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	0f 92       	push	r0
    2638:	0b b6       	in	r0, 0x3b	; 59
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    2656:	80 91 4a 05 	lds	r24, 0x054A
    265a:	90 91 4b 05 	lds	r25, 0x054B
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	29 f0       	breq	.+10     	; 0x266c <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    2662:	e0 91 4a 05 	lds	r30, 0x054A
    2666:	f0 91 4b 05 	lds	r31, 0x054B
    266a:	19 95       	eicall
}
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0b be       	out	0x3b, r0	; 59
    2688:	0f 90       	pop	r0
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	0f 90       	pop	r0
    268e:	1f 90       	pop	r1
    2690:	18 95       	reti

00002692 <__vector_2>:

ISR(INT1_vect) {
    2692:	1f 92       	push	r1
    2694:	0f 92       	push	r0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	0f 92       	push	r0
    269a:	0b b6       	in	r0, 0x3b	; 59
    269c:	0f 92       	push	r0
    269e:	11 24       	eor	r1, r1
    26a0:	2f 93       	push	r18
    26a2:	3f 93       	push	r19
    26a4:	4f 93       	push	r20
    26a6:	5f 93       	push	r21
    26a8:	6f 93       	push	r22
    26aa:	7f 93       	push	r23
    26ac:	8f 93       	push	r24
    26ae:	9f 93       	push	r25
    26b0:	af 93       	push	r26
    26b2:	bf 93       	push	r27
    26b4:	ef 93       	push	r30
    26b6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    26b8:	80 91 4c 05 	lds	r24, 0x054C
    26bc:	90 91 4d 05 	lds	r25, 0x054D
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	29 f0       	breq	.+10     	; 0x26ce <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    26c4:	e0 91 4c 05 	lds	r30, 0x054C
    26c8:	f0 91 4d 05 	lds	r31, 0x054D
    26cc:	19 95       	eicall
}
    26ce:	ff 91       	pop	r31
    26d0:	ef 91       	pop	r30
    26d2:	bf 91       	pop	r27
    26d4:	af 91       	pop	r26
    26d6:	9f 91       	pop	r25
    26d8:	8f 91       	pop	r24
    26da:	7f 91       	pop	r23
    26dc:	6f 91       	pop	r22
    26de:	5f 91       	pop	r21
    26e0:	4f 91       	pop	r20
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0b be       	out	0x3b, r0	; 59
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	0f 90       	pop	r0
    26f0:	1f 90       	pop	r1
    26f2:	18 95       	reti

000026f4 <__vector_3>:

ISR(INT2_vect) {
    26f4:	1f 92       	push	r1
    26f6:	0f 92       	push	r0
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	0f 92       	push	r0
    26fc:	0b b6       	in	r0, 0x3b	; 59
    26fe:	0f 92       	push	r0
    2700:	11 24       	eor	r1, r1
    2702:	2f 93       	push	r18
    2704:	3f 93       	push	r19
    2706:	4f 93       	push	r20
    2708:	5f 93       	push	r21
    270a:	6f 93       	push	r22
    270c:	7f 93       	push	r23
    270e:	8f 93       	push	r24
    2710:	9f 93       	push	r25
    2712:	af 93       	push	r26
    2714:	bf 93       	push	r27
    2716:	ef 93       	push	r30
    2718:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    271a:	80 91 4e 05 	lds	r24, 0x054E
    271e:	90 91 4f 05 	lds	r25, 0x054F
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	29 f0       	breq	.+10     	; 0x2730 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    2726:	e0 91 4e 05 	lds	r30, 0x054E
    272a:	f0 91 4f 05 	lds	r31, 0x054F
    272e:	19 95       	eicall
}
    2730:	ff 91       	pop	r31
    2732:	ef 91       	pop	r30
    2734:	bf 91       	pop	r27
    2736:	af 91       	pop	r26
    2738:	9f 91       	pop	r25
    273a:	8f 91       	pop	r24
    273c:	7f 91       	pop	r23
    273e:	6f 91       	pop	r22
    2740:	5f 91       	pop	r21
    2742:	4f 91       	pop	r20
    2744:	3f 91       	pop	r19
    2746:	2f 91       	pop	r18
    2748:	0f 90       	pop	r0
    274a:	0b be       	out	0x3b, r0	; 59
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <__vector_4>:

ISR(INT3_vect) {
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	0f 92       	push	r0
    275e:	0b b6       	in	r0, 0x3b	; 59
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    277c:	80 91 50 05 	lds	r24, 0x0550
    2780:	90 91 51 05 	lds	r25, 0x0551
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	29 f0       	breq	.+10     	; 0x2792 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    2788:	e0 91 50 05 	lds	r30, 0x0550
    278c:	f0 91 51 05 	lds	r31, 0x0551
    2790:	19 95       	eicall
}
    2792:	ff 91       	pop	r31
    2794:	ef 91       	pop	r30
    2796:	bf 91       	pop	r27
    2798:	af 91       	pop	r26
    279a:	9f 91       	pop	r25
    279c:	8f 91       	pop	r24
    279e:	7f 91       	pop	r23
    27a0:	6f 91       	pop	r22
    27a2:	5f 91       	pop	r21
    27a4:	4f 91       	pop	r20
    27a6:	3f 91       	pop	r19
    27a8:	2f 91       	pop	r18
    27aa:	0f 90       	pop	r0
    27ac:	0b be       	out	0x3b, r0	; 59
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	0f 90       	pop	r0
    27b4:	1f 90       	pop	r1
    27b6:	18 95       	reti

000027b8 <__vector_5>:

ISR(INT4_vect) {
    27b8:	1f 92       	push	r1
    27ba:	0f 92       	push	r0
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	0f 92       	push	r0
    27c0:	0b b6       	in	r0, 0x3b	; 59
    27c2:	0f 92       	push	r0
    27c4:	11 24       	eor	r1, r1
    27c6:	2f 93       	push	r18
    27c8:	3f 93       	push	r19
    27ca:	4f 93       	push	r20
    27cc:	5f 93       	push	r21
    27ce:	6f 93       	push	r22
    27d0:	7f 93       	push	r23
    27d2:	8f 93       	push	r24
    27d4:	9f 93       	push	r25
    27d6:	af 93       	push	r26
    27d8:	bf 93       	push	r27
    27da:	ef 93       	push	r30
    27dc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    27de:	80 91 46 05 	lds	r24, 0x0546
    27e2:	90 91 47 05 	lds	r25, 0x0547
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	29 f0       	breq	.+10     	; 0x27f4 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    27ea:	e0 91 46 05 	lds	r30, 0x0546
    27ee:	f0 91 47 05 	lds	r31, 0x0547
    27f2:	19 95       	eicall
}
    27f4:	ff 91       	pop	r31
    27f6:	ef 91       	pop	r30
    27f8:	bf 91       	pop	r27
    27fa:	af 91       	pop	r26
    27fc:	9f 91       	pop	r25
    27fe:	8f 91       	pop	r24
    2800:	7f 91       	pop	r23
    2802:	6f 91       	pop	r22
    2804:	5f 91       	pop	r21
    2806:	4f 91       	pop	r20
    2808:	3f 91       	pop	r19
    280a:	2f 91       	pop	r18
    280c:	0f 90       	pop	r0
    280e:	0b be       	out	0x3b, r0	; 59
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <__vector_6>:

ISR(INT5_vect) {
    281a:	1f 92       	push	r1
    281c:	0f 92       	push	r0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	0b b6       	in	r0, 0x3b	; 59
    2824:	0f 92       	push	r0
    2826:	11 24       	eor	r1, r1
    2828:	2f 93       	push	r18
    282a:	3f 93       	push	r19
    282c:	4f 93       	push	r20
    282e:	5f 93       	push	r21
    2830:	6f 93       	push	r22
    2832:	7f 93       	push	r23
    2834:	8f 93       	push	r24
    2836:	9f 93       	push	r25
    2838:	af 93       	push	r26
    283a:	bf 93       	push	r27
    283c:	ef 93       	push	r30
    283e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    2840:	80 91 48 05 	lds	r24, 0x0548
    2844:	90 91 49 05 	lds	r25, 0x0549
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	29 f0       	breq	.+10     	; 0x2856 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    284c:	e0 91 48 05 	lds	r30, 0x0548
    2850:	f0 91 49 05 	lds	r31, 0x0549
    2854:	19 95       	eicall
}
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_7>:

ISR(INT6_vect) {
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	0b b6       	in	r0, 0x3b	; 59
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    28a2:	80 91 52 05 	lds	r24, 0x0552
    28a6:	90 91 53 05 	lds	r25, 0x0553
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    28ae:	e0 91 52 05 	lds	r30, 0x0552
    28b2:	f0 91 53 05 	lds	r31, 0x0553
    28b6:	19 95       	eicall
}
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	0f 90       	pop	r0
    28d2:	0b be       	out	0x3b, r0	; 59
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0
    28da:	1f 90       	pop	r1
    28dc:	18 95       	reti

000028de <__vector_8>:

ISR(INT7_vect) {
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	0b b6       	in	r0, 0x3b	; 59
    28e8:	0f 92       	push	r0
    28ea:	11 24       	eor	r1, r1
    28ec:	2f 93       	push	r18
    28ee:	3f 93       	push	r19
    28f0:	4f 93       	push	r20
    28f2:	5f 93       	push	r21
    28f4:	6f 93       	push	r22
    28f6:	7f 93       	push	r23
    28f8:	8f 93       	push	r24
    28fa:	9f 93       	push	r25
    28fc:	af 93       	push	r26
    28fe:	bf 93       	push	r27
    2900:	ef 93       	push	r30
    2902:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    2904:	80 91 54 05 	lds	r24, 0x0554
    2908:	90 91 55 05 	lds	r25, 0x0555
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	29 f0       	breq	.+10     	; 0x291a <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    2910:	e0 91 54 05 	lds	r30, 0x0554
    2914:	f0 91 55 05 	lds	r31, 0x0555
    2918:	19 95       	eicall
}
    291a:	ff 91       	pop	r31
    291c:	ef 91       	pop	r30
    291e:	bf 91       	pop	r27
    2920:	af 91       	pop	r26
    2922:	9f 91       	pop	r25
    2924:	8f 91       	pop	r24
    2926:	7f 91       	pop	r23
    2928:	6f 91       	pop	r22
    292a:	5f 91       	pop	r21
    292c:	4f 91       	pop	r20
    292e:	3f 91       	pop	r19
    2930:	2f 91       	pop	r18
    2932:	0f 90       	pop	r0
    2934:	0b be       	out	0x3b, r0	; 59
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

00002940 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2940:	1f 92       	push	r1
    2942:	0f 92       	push	r0
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	0f 92       	push	r0
    2948:	11 24       	eor	r1, r1
    294a:	2f 93       	push	r18
    294c:	8f 93       	push	r24
    294e:	9f 93       	push	r25
    2950:	af 93       	push	r26
    2952:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2954:	80 91 5a 05 	lds	r24, 0x055A
    2958:	90 91 5b 05 	lds	r25, 0x055B
    295c:	a0 91 5c 05 	lds	r26, 0x055C
    2960:	b0 91 5d 05 	lds	r27, 0x055D
	unsigned char f = timer0_fract;
    2964:	20 91 5e 05 	lds	r18, 0x055E

	m += MILLIS_INC;
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	a1 1d       	adc	r26, r1
    296c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    296e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2970:	2d 37       	cpi	r18, 0x7D	; 125
    2972:	20 f0       	brcs	.+8      	; 0x297c <__vector_23+0x3c>
		f -= FRACT_MAX;
    2974:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	a1 1d       	adc	r26, r1
    297a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    297c:	20 93 5e 05 	sts	0x055E, r18
	timer0_millis = m;
    2980:	80 93 5a 05 	sts	0x055A, r24
    2984:	90 93 5b 05 	sts	0x055B, r25
    2988:	a0 93 5c 05 	sts	0x055C, r26
    298c:	b0 93 5d 05 	sts	0x055D, r27
	timer0_overflow_count++;
    2990:	80 91 56 05 	lds	r24, 0x0556
    2994:	90 91 57 05 	lds	r25, 0x0557
    2998:	a0 91 58 05 	lds	r26, 0x0558
    299c:	b0 91 59 05 	lds	r27, 0x0559
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	a1 1d       	adc	r26, r1
    29a4:	b1 1d       	adc	r27, r1
    29a6:	80 93 56 05 	sts	0x0556, r24
    29aa:	90 93 57 05 	sts	0x0557, r25
    29ae:	a0 93 58 05 	sts	0x0558, r26
    29b2:	b0 93 59 05 	sts	0x0559, r27
}
    29b6:	bf 91       	pop	r27
    29b8:	af 91       	pop	r26
    29ba:	9f 91       	pop	r25
    29bc:	8f 91       	pop	r24
    29be:	2f 91       	pop	r18
    29c0:	0f 90       	pop	r0
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	0f 90       	pop	r0
    29c6:	1f 90       	pop	r1
    29c8:	18 95       	reti

000029ca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    29ca:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    29cc:	f8 94       	cli
	m = timer0_millis;
    29ce:	20 91 5a 05 	lds	r18, 0x055A
    29d2:	30 91 5b 05 	lds	r19, 0x055B
    29d6:	40 91 5c 05 	lds	r20, 0x055C
    29da:	50 91 5d 05 	lds	r21, 0x055D
	SREG = oldSREG;
    29de:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    29e0:	62 2f       	mov	r22, r18
    29e2:	73 2f       	mov	r23, r19
    29e4:	84 2f       	mov	r24, r20
    29e6:	95 2f       	mov	r25, r21
    29e8:	08 95       	ret

000029ea <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    29ea:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    29ec:	f8 94       	cli
	m = timer0_overflow_count;
    29ee:	20 91 56 05 	lds	r18, 0x0556
    29f2:	30 91 57 05 	lds	r19, 0x0557
    29f6:	40 91 58 05 	lds	r20, 0x0558
    29fa:	50 91 59 05 	lds	r21, 0x0559
#if defined(TCNT0)
	t = TCNT0;
    29fe:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a00:	a8 9b       	sbis	0x15, 0	; 21
    2a02:	06 c0       	rjmp	.+12     	; 0x2a10 <micros+0x26>
    2a04:	8f 3f       	cpi	r24, 0xFF	; 255
    2a06:	21 f0       	breq	.+8      	; 0x2a10 <micros+0x26>
		m++;
    2a08:	2f 5f       	subi	r18, 0xFF	; 255
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a10:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2a12:	54 2f       	mov	r21, r20
    2a14:	43 2f       	mov	r20, r19
    2a16:	32 2f       	mov	r19, r18
    2a18:	22 27       	eor	r18, r18
    2a1a:	28 0f       	add	r18, r24
    2a1c:	31 1d       	adc	r19, r1
    2a1e:	41 1d       	adc	r20, r1
    2a20:	51 1d       	adc	r21, r1
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	44 1f       	adc	r20, r20
    2a28:	55 1f       	adc	r21, r21
    2a2a:	22 0f       	add	r18, r18
    2a2c:	33 1f       	adc	r19, r19
    2a2e:	44 1f       	adc	r20, r20
    2a30:	55 1f       	adc	r21, r21
}
    2a32:	62 2f       	mov	r22, r18
    2a34:	73 2f       	mov	r23, r19
    2a36:	84 2f       	mov	r24, r20
    2a38:	95 2f       	mov	r25, r21
    2a3a:	08 95       	ret

00002a3c <delay>:

void delay(unsigned long ms)
{
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	7b 01       	movw	r14, r22
    2a4a:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2a4c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <micros>

	while (ms > 0) {
    2a50:	e1 14       	cp	r14, r1
    2a52:	f1 04       	cpc	r15, r1
    2a54:	01 05       	cpc	r16, r1
    2a56:	11 05       	cpc	r17, r1
    2a58:	a9 f0       	breq	.+42     	; 0x2a84 <delay+0x48>
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    2a5a:	eb 01       	movw	r28, r22

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    2a5c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <micros>
    2a60:	6c 1b       	sub	r22, r28
    2a62:	7d 0b       	sbc	r23, r29
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	68 3e       	cpi	r22, 0xE8	; 232
    2a68:	78 07       	cpc	r23, r24
    2a6a:	38 f0       	brcs	.+14     	; 0x2a7a <delay+0x3e>
			ms--;
    2a6c:	08 94       	sec
    2a6e:	e1 08       	sbc	r14, r1
    2a70:	f1 08       	sbc	r15, r1
    2a72:	01 09       	sbc	r16, r1
    2a74:	11 09       	sbc	r17, r1
			start += 1000;
    2a76:	c8 51       	subi	r28, 0x18	; 24
    2a78:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2a7a:	e1 14       	cp	r14, r1
    2a7c:	f1 04       	cpc	r15, r1
    2a7e:	01 05       	cpc	r16, r1
    2a80:	11 05       	cpc	r17, r1
    2a82:	61 f7       	brne	.-40     	; 0x2a5c <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	08 95       	ret

00002a92 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	39 f0       	breq	.+14     	; 0x2aa4 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2a9e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <delayMicroseconds+0xe>
    2aa4:	08 95       	ret

00002aa6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2aa6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2aa8:	84 b5       	in	r24, 0x24	; 36
    2aaa:	82 60       	ori	r24, 0x02	; 2
    2aac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2aae:	84 b5       	in	r24, 0x24	; 36
    2ab0:	81 60       	ori	r24, 0x01	; 1
    2ab2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ab4:	85 b5       	in	r24, 0x25	; 37
    2ab6:	82 60       	ori	r24, 0x02	; 2
    2ab8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2aba:	85 b5       	in	r24, 0x25	; 37
    2abc:	81 60       	ori	r24, 0x01	; 1
    2abe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ac0:	ee e6       	ldi	r30, 0x6E	; 110
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2aca:	e1 e8       	ldi	r30, 0x81	; 129
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2ad0:	80 81       	ld	r24, Z
    2ad2:	82 60       	ori	r24, 0x02	; 2
    2ad4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2ad6:	80 81       	ld	r24, Z
    2ad8:	81 60       	ori	r24, 0x01	; 1
    2ada:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2adc:	e0 e8       	ldi	r30, 0x80	; 128
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 60       	ori	r24, 0x01	; 1
    2ae4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ae6:	e1 eb       	ldi	r30, 0xB1	; 177
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	84 60       	ori	r24, 0x04	; 4
    2aee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2af0:	e0 eb       	ldi	r30, 0xB0	; 176
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	81 60       	ori	r24, 0x01	; 1
    2af8:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2afa:	e1 e9       	ldi	r30, 0x91	; 145
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	82 60       	ori	r24, 0x02	; 2
    2b02:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2b04:	80 81       	ld	r24, Z
    2b06:	81 60       	ori	r24, 0x01	; 1
    2b08:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2b0a:	e0 e9       	ldi	r30, 0x90	; 144
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	81 60       	ori	r24, 0x01	; 1
    2b12:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2b14:	e1 ea       	ldi	r30, 0xA1	; 161
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	82 60       	ori	r24, 0x02	; 2
    2b1c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2b24:	e0 ea       	ldi	r30, 0xA0	; 160
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	81 60       	ori	r24, 0x01	; 1
    2b2c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2b2e:	e1 e2       	ldi	r30, 0x21	; 33
    2b30:	f1 e0       	ldi	r31, 0x01	; 1
    2b32:	80 81       	ld	r24, Z
    2b34:	82 60       	ori	r24, 0x02	; 2
    2b36:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2b38:	80 81       	ld	r24, Z
    2b3a:	81 60       	ori	r24, 0x01	; 1
    2b3c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2b3e:	e0 e2       	ldi	r30, 0x20	; 32
    2b40:	f1 e0       	ldi	r31, 0x01	; 1
    2b42:	80 81       	ld	r24, Z
    2b44:	81 60       	ori	r24, 0x01	; 1
    2b46:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2b48:	ea e7       	ldi	r30, 0x7A	; 122
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	84 60       	ori	r24, 0x04	; 4
    2b50:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2b52:	80 81       	ld	r24, Z
    2b54:	82 60       	ori	r24, 0x02	; 2
    2b56:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2b58:	80 81       	ld	r24, Z
    2b5a:	81 60       	ori	r24, 0x01	; 1
    2b5c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b5e:	80 81       	ld	r24, Z
    2b60:	80 68       	ori	r24, 0x80	; 128
    2b62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b64:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2b68:	08 95       	ret

00002b6a <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2b6a:	80 93 4a 02 	sts	0x024A, r24
}
    2b6e:	08 95       	ret

00002b70 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    2b70:	86 33       	cpi	r24, 0x36	; 54
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <analogRead+0x6>
    2b74:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2b76:	eb e7       	ldi	r30, 0x7B	; 123
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	90 81       	ld	r25, Z
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	26 95       	lsr	r18
    2b80:	26 95       	lsr	r18
    2b82:	26 95       	lsr	r18
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	21 70       	andi	r18, 0x01	; 1
    2b88:	30 70       	andi	r19, 0x00	; 0
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	22 0f       	add	r18, r18
    2b90:	33 1f       	adc	r19, r19
    2b92:	22 0f       	add	r18, r18
    2b94:	33 1f       	adc	r19, r19
    2b96:	97 7f       	andi	r25, 0xF7	; 247
    2b98:	29 2b       	or	r18, r25
    2b9a:	20 83       	st	Z, r18
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2b9c:	87 70       	andi	r24, 0x07	; 7
    2b9e:	90 91 4a 02 	lds	r25, 0x024A
    2ba2:	92 95       	swap	r25
    2ba4:	99 0f       	add	r25, r25
    2ba6:	99 0f       	add	r25, r25
    2ba8:	90 7c       	andi	r25, 0xC0	; 192
    2baa:	89 2b       	or	r24, r25
    2bac:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2bb0:	ea e7       	ldi	r30, 0x7A	; 122
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 64       	ori	r24, 0x40	; 64
    2bb8:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2bba:	80 81       	ld	r24, Z
    2bbc:	86 fd       	sbrc	r24, 6
    2bbe:	fd cf       	rjmp	.-6      	; 0x2bba <analogRead+0x4a>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2bc0:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2bc4:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2bc8:	93 2f       	mov	r25, r19
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	28 2b       	or	r18, r24
    2bd0:	39 2b       	or	r19, r25
}
    2bd2:	82 2f       	mov	r24, r18
    2bd4:	93 2f       	mov	r25, r19
    2bd6:	08 95       	ret

00002bd8 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	18 2f       	mov	r17, r24
    2be0:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <pinMode>
	if (val == 0)
    2be8:	20 97       	sbiw	r28, 0x00	; 0
    2bea:	29 f4       	brne	.+10     	; 0x2bf6 <analogWrite+0x1e>
	{
		digitalWrite(pin, LOW);
    2bec:	81 2f       	mov	r24, r17
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    2bf4:	d5 c0       	rjmp	.+426    	; 0x2da0 <analogWrite+0x1c8>
	}
	else if (val == 255)
    2bf6:	cf 3f       	cpi	r28, 0xFF	; 255
    2bf8:	d1 05       	cpc	r29, r1
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <analogWrite+0x2e>
	{
		digitalWrite(pin, HIGH);
    2bfc:	81 2f       	mov	r24, r17
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    2c04:	cd c0       	rjmp	.+410    	; 0x2da0 <analogWrite+0x1c8>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2c06:	e1 2f       	mov	r30, r17
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	e1 54       	subi	r30, 0x41	; 65
    2c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0e:	e4 91       	lpm	r30, Z+
    2c10:	e9 30       	cpi	r30, 0x09	; 9
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <analogWrite+0x3e>
    2c14:	66 c0       	rjmp	.+204    	; 0x2ce2 <analogWrite+0x10a>
    2c16:	ea 30       	cpi	r30, 0x0A	; 10
    2c18:	b0 f4       	brcc	.+44     	; 0x2c46 <analogWrite+0x6e>
    2c1a:	e4 30       	cpi	r30, 0x04	; 4
    2c1c:	f1 f1       	breq	.+124    	; 0x2c9a <analogWrite+0xc2>
    2c1e:	e5 30       	cpi	r30, 0x05	; 5
    2c20:	40 f4       	brcc	.+16     	; 0x2c32 <analogWrite+0x5a>
    2c22:	e2 30       	cpi	r30, 0x02	; 2
    2c24:	59 f1       	breq	.+86     	; 0x2c7c <analogWrite+0xa4>
    2c26:	e3 30       	cpi	r30, 0x03	; 3
    2c28:	70 f5       	brcc	.+92     	; 0x2c86 <analogWrite+0xae>
    2c2a:	e1 30       	cpi	r30, 0x01	; 1
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <analogWrite+0x58>
    2c2e:	ac c0       	rjmp	.+344    	; 0x2d88 <analogWrite+0x1b0>
    2c30:	20 c0       	rjmp	.+64     	; 0x2c72 <analogWrite+0x9a>
    2c32:	e7 30       	cpi	r30, 0x07	; 7
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <analogWrite+0x60>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <analogWrite+0xe6>
    2c38:	e8 30       	cpi	r30, 0x08	; 8
    2c3a:	08 f0       	brcs	.+2      	; 0x2c3e <analogWrite+0x66>
    2c3c:	48 c0       	rjmp	.+144    	; 0x2cce <analogWrite+0xf6>
    2c3e:	e6 30       	cpi	r30, 0x06	; 6
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <analogWrite+0x6c>
    2c42:	a2 c0       	rjmp	.+324    	; 0x2d88 <analogWrite+0x1b0>
    2c44:	34 c0       	rjmp	.+104    	; 0x2cae <analogWrite+0xd6>
    2c46:	ed 30       	cpi	r30, 0x0D	; 13
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <analogWrite+0x74>
    2c4a:	76 c0       	rjmp	.+236    	; 0x2d38 <analogWrite+0x160>
    2c4c:	ee 30       	cpi	r30, 0x0E	; 14
    2c4e:	38 f4       	brcc	.+14     	; 0x2c5e <analogWrite+0x86>
    2c50:	eb 30       	cpi	r30, 0x0B	; 11
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <analogWrite+0x7e>
    2c54:	5a c0       	rjmp	.+180    	; 0x2d0a <analogWrite+0x132>
    2c56:	ec 30       	cpi	r30, 0x0C	; 12
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <analogWrite+0x84>
    2c5a:	64 c0       	rjmp	.+200    	; 0x2d24 <analogWrite+0x14c>
    2c5c:	4c c0       	rjmp	.+152    	; 0x2cf6 <analogWrite+0x11e>
    2c5e:	e0 31       	cpi	r30, 0x10	; 16
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <analogWrite+0x8c>
    2c62:	7e c0       	rjmp	.+252    	; 0x2d60 <analogWrite+0x188>
    2c64:	e1 31       	cpi	r30, 0x11	; 17
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <analogWrite+0x92>
    2c68:	85 c0       	rjmp	.+266    	; 0x2d74 <analogWrite+0x19c>
    2c6a:	ef 30       	cpi	r30, 0x0F	; 15
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <analogWrite+0x98>
    2c6e:	8c c0       	rjmp	.+280    	; 0x2d88 <analogWrite+0x1b0>
    2c70:	6d c0       	rjmp	.+218    	; 0x2d4c <analogWrite+0x174>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2c72:	84 b5       	in	r24, 0x24	; 36
    2c74:	80 68       	ori	r24, 0x80	; 128
    2c76:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2c78:	c7 bd       	out	0x27, r28	; 39
				break;
    2c7a:	92 c0       	rjmp	.+292    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2c7c:	84 b5       	in	r24, 0x24	; 36
    2c7e:	80 62       	ori	r24, 0x20	; 32
    2c80:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2c82:	c8 bd       	out	0x28, r28	; 40
				break;
    2c84:	8d c0       	rjmp	.+282    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2c86:	e0 e8       	ldi	r30, 0x80	; 128
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 68       	ori	r24, 0x80	; 128
    2c8e:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    2c90:	d0 93 89 00 	sts	0x0089, r29
    2c94:	c0 93 88 00 	sts	0x0088, r28
				break;
    2c98:	83 c0       	rjmp	.+262    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2c9a:	e0 e8       	ldi	r30, 0x80	; 128
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 62       	ori	r24, 0x20	; 32
    2ca2:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    2ca4:	d0 93 8b 00 	sts	0x008B, r29
    2ca8:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2cac:	79 c0       	rjmp	.+242    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2cae:	e0 eb       	ldi	r30, 0xB0	; 176
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	80 68       	ori	r24, 0x80	; 128
    2cb6:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    2cb8:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2cbc:	71 c0       	rjmp	.+226    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2cbe:	e0 eb       	ldi	r30, 0xB0	; 176
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 62       	ori	r24, 0x20	; 32
    2cc6:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    2cc8:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2ccc:	69 c0       	rjmp	.+210    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    2cce:	e0 e9       	ldi	r30, 0x90	; 144
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    2cd8:	d0 93 99 00 	sts	0x0099, r29
    2cdc:	c0 93 98 00 	sts	0x0098, r28
				break;
    2ce0:	5f c0       	rjmp	.+190    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    2ce2:	e0 e9       	ldi	r30, 0x90	; 144
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 62       	ori	r24, 0x20	; 32
    2cea:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    2cec:	d0 93 9b 00 	sts	0x009B, r29
    2cf0:	c0 93 9a 00 	sts	0x009A, r28
				break;
    2cf4:	55 c0       	rjmp	.+170    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    2cf6:	e0 e9       	ldi	r30, 0x90	; 144
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 60       	ori	r24, 0x08	; 8
    2cfe:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    2d00:	d0 93 9d 00 	sts	0x009D, r29
    2d04:	c0 93 9c 00 	sts	0x009C, r28
				break;
    2d08:	4b c0       	rjmp	.+150    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    2d0a:	e0 ea       	ldi	r30, 0xA0	; 160
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 68       	ori	r24, 0x80	; 128
    2d12:	80 83       	st	Z, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 7b       	andi	r24, 0xBF	; 191
    2d18:	80 83       	st	Z, r24
				#endif
				OCR4A = val;	// set pwm duty
    2d1a:	d0 93 a9 00 	sts	0x00A9, r29
    2d1e:	c0 93 a8 00 	sts	0x00A8, r28
				break;
    2d22:	3e c0       	rjmp	.+124    	; 0x2da0 <analogWrite+0x1c8>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    2d24:	e0 ea       	ldi	r30, 0xA0	; 160
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	80 62       	ori	r24, 0x20	; 32
    2d2c:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    2d2e:	d0 93 ab 00 	sts	0x00AB, r29
    2d32:	c0 93 aa 00 	sts	0x00AA, r28
				break;
    2d36:	34 c0       	rjmp	.+104    	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    2d38:	e0 ea       	ldi	r30, 0xA0	; 160
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 60       	ori	r24, 0x08	; 8
    2d40:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    2d42:	d0 93 ad 00 	sts	0x00AD, r29
    2d46:	c0 93 ac 00 	sts	0x00AC, r28
				break;
    2d4a:	2a c0       	rjmp	.+84     	; 0x2da0 <analogWrite+0x1c8>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    2d4c:	e0 e2       	ldi	r30, 0x20	; 32
    2d4e:	f1 e0       	ldi	r31, 0x01	; 1
    2d50:	80 81       	ld	r24, Z
    2d52:	80 68       	ori	r24, 0x80	; 128
    2d54:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    2d56:	d0 93 29 01 	sts	0x0129, r29
    2d5a:	c0 93 28 01 	sts	0x0128, r28
				break;
    2d5e:	20 c0       	rjmp	.+64     	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    2d60:	e0 e2       	ldi	r30, 0x20	; 32
    2d62:	f1 e0       	ldi	r31, 0x01	; 1
    2d64:	80 81       	ld	r24, Z
    2d66:	80 62       	ori	r24, 0x20	; 32
    2d68:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    2d6a:	d0 93 2b 01 	sts	0x012B, r29
    2d6e:	c0 93 2a 01 	sts	0x012A, r28
				break;
    2d72:	16 c0       	rjmp	.+44     	; 0x2da0 <analogWrite+0x1c8>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    2d74:	e0 e2       	ldi	r30, 0x20	; 32
    2d76:	f1 e0       	ldi	r31, 0x01	; 1
    2d78:	80 81       	ld	r24, Z
    2d7a:	88 60       	ori	r24, 0x08	; 8
    2d7c:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    2d7e:	d0 93 2d 01 	sts	0x012D, r29
    2d82:	c0 93 2c 01 	sts	0x012C, r28
				break;
    2d86:	0c c0       	rjmp	.+24     	; 0x2da0 <analogWrite+0x1c8>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2d88:	c0 38       	cpi	r28, 0x80	; 128
    2d8a:	d1 05       	cpc	r29, r1
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <analogWrite+0x1c0>
					digitalWrite(pin, LOW);
    2d8e:	81 2f       	mov	r24, r17
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <analogWrite+0x1c8>
				} else {
					digitalWrite(pin, HIGH);
    2d98:	81 2f       	mov	r24, r17
    2d9a:	61 e0       	ldi	r22, 0x01	; 1
    2d9c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
				}
		}
	}
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	08 95       	ret

00002da8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2da8:	89 30       	cpi	r24, 0x09	; 9
    2daa:	09 f4       	brne	.+2      	; 0x2dae <turnOffPWM+0x6>
    2dac:	52 c0       	rjmp	.+164    	; 0x2e52 <turnOffPWM+0xaa>
    2dae:	8a 30       	cpi	r24, 0x0A	; 10
    2db0:	a0 f4       	brcc	.+40     	; 0x2dda <turnOffPWM+0x32>
    2db2:	84 30       	cpi	r24, 0x04	; 4
    2db4:	71 f1       	breq	.+92     	; 0x2e12 <turnOffPWM+0x6a>
    2db6:	85 30       	cpi	r24, 0x05	; 5
    2db8:	40 f4       	brcc	.+16     	; 0x2dca <turnOffPWM+0x22>
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	a1 f1       	breq	.+104    	; 0x2e26 <turnOffPWM+0x7e>
    2dbe:	83 30       	cpi	r24, 0x03	; 3
    2dc0:	10 f5       	brcc	.+68     	; 0x2e06 <turnOffPWM+0x5e>
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <turnOffPWM+0x20>
    2dc6:	74 c0       	rjmp	.+232    	; 0x2eb0 <turnOffPWM+0x108>
    2dc8:	2a c0       	rjmp	.+84     	; 0x2e1e <turnOffPWM+0x76>
    2dca:	87 30       	cpi	r24, 0x07	; 7
    2dcc:	b1 f1       	breq	.+108    	; 0x2e3a <turnOffPWM+0x92>
    2dce:	88 30       	cpi	r24, 0x08	; 8
    2dd0:	d0 f5       	brcc	.+116    	; 0x2e46 <turnOffPWM+0x9e>
    2dd2:	86 30       	cpi	r24, 0x06	; 6
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <turnOffPWM+0x30>
    2dd6:	6c c0       	rjmp	.+216    	; 0x2eb0 <turnOffPWM+0x108>
    2dd8:	2a c0       	rjmp	.+84     	; 0x2e2e <turnOffPWM+0x86>
    2dda:	8d 30       	cpi	r24, 0x0D	; 13
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <turnOffPWM+0x38>
    2dde:	51 c0       	rjmp	.+162    	; 0x2e82 <turnOffPWM+0xda>
    2de0:	8e 30       	cpi	r24, 0x0E	; 14
    2de2:	38 f4       	brcc	.+14     	; 0x2df2 <turnOffPWM+0x4a>
    2de4:	8b 30       	cpi	r24, 0x0B	; 11
    2de6:	09 f4       	brne	.+2      	; 0x2dea <turnOffPWM+0x42>
    2de8:	40 c0       	rjmp	.+128    	; 0x2e6a <turnOffPWM+0xc2>
    2dea:	8c 30       	cpi	r24, 0x0C	; 12
    2dec:	08 f0       	brcs	.+2      	; 0x2df0 <turnOffPWM+0x48>
    2dee:	43 c0       	rjmp	.+134    	; 0x2e76 <turnOffPWM+0xce>
    2df0:	36 c0       	rjmp	.+108    	; 0x2e5e <turnOffPWM+0xb6>
    2df2:	80 31       	cpi	r24, 0x10	; 16
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <turnOffPWM+0x50>
    2df6:	51 c0       	rjmp	.+162    	; 0x2e9a <turnOffPWM+0xf2>
    2df8:	81 31       	cpi	r24, 0x11	; 17
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <turnOffPWM+0x56>
    2dfc:	54 c0       	rjmp	.+168    	; 0x2ea6 <turnOffPWM+0xfe>
    2dfe:	8f 30       	cpi	r24, 0x0F	; 15
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <turnOffPWM+0x5c>
    2e02:	56 c0       	rjmp	.+172    	; 0x2eb0 <turnOffPWM+0x108>
    2e04:	44 c0       	rjmp	.+136    	; 0x2e8e <turnOffPWM+0xe6>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e06:	e0 e8       	ldi	r30, 0x80	; 128
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	80 83       	st	Z, r24
    2e10:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e12:	e0 e8       	ldi	r30, 0x80	; 128
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	8f 7d       	andi	r24, 0xDF	; 223
    2e1a:	80 83       	st	Z, r24
    2e1c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2e1e:	84 b5       	in	r24, 0x24	; 36
    2e20:	8f 77       	andi	r24, 0x7F	; 127
    2e22:	84 bd       	out	0x24, r24	; 36
    2e24:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e26:	84 b5       	in	r24, 0x24	; 36
    2e28:	8f 7d       	andi	r24, 0xDF	; 223
    2e2a:	84 bd       	out	0x24, r24	; 36
    2e2c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2e2e:	e0 eb       	ldi	r30, 0xB0	; 176
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	8f 77       	andi	r24, 0x7F	; 127
    2e36:	80 83       	st	Z, r24
    2e38:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e3a:	e0 eb       	ldi	r30, 0xB0	; 176
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	8f 7d       	andi	r24, 0xDF	; 223
    2e42:	80 83       	st	Z, r24
    2e44:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2e46:	e0 e9       	ldi	r30, 0x90	; 144
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8f 77       	andi	r24, 0x7F	; 127
    2e4e:	80 83       	st	Z, r24
    2e50:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2e52:	e0 e9       	ldi	r30, 0x90	; 144
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	8f 7d       	andi	r24, 0xDF	; 223
    2e5a:	80 83       	st	Z, r24
    2e5c:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2e5e:	e0 e9       	ldi	r30, 0x90	; 144
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	87 7f       	andi	r24, 0xF7	; 247
    2e66:	80 83       	st	Z, r24
    2e68:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2e6a:	e0 ea       	ldi	r30, 0xA0	; 160
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8f 77       	andi	r24, 0x7F	; 127
    2e72:	80 83       	st	Z, r24
    2e74:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2e76:	e0 ea       	ldi	r30, 0xA0	; 160
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	8f 7d       	andi	r24, 0xDF	; 223
    2e7e:	80 83       	st	Z, r24
    2e80:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2e82:	e0 ea       	ldi	r30, 0xA0	; 160
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	87 7f       	andi	r24, 0xF7	; 247
    2e8a:	80 83       	st	Z, r24
    2e8c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2e8e:	e0 e2       	ldi	r30, 0x20	; 32
    2e90:	f1 e0       	ldi	r31, 0x01	; 1
    2e92:	80 81       	ld	r24, Z
    2e94:	8f 77       	andi	r24, 0x7F	; 127
    2e96:	80 83       	st	Z, r24
    2e98:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2e9a:	e0 e2       	ldi	r30, 0x20	; 32
    2e9c:	f1 e0       	ldi	r31, 0x01	; 1
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8f 7d       	andi	r24, 0xDF	; 223
    2ea2:	80 83       	st	Z, r24
    2ea4:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2ea6:	e0 e2       	ldi	r30, 0x20	; 32
    2ea8:	f1 e0       	ldi	r31, 0x01	; 1
    2eaa:	80 81       	ld	r24, Z
    2eac:	87 7f       	andi	r24, 0xF7	; 247
    2eae:	80 83       	st	Z, r24
    2eb0:	08 95       	ret

00002eb2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e7 58       	subi	r30, 0x87	; 135
    2ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ebe:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    2ec0:	8d 5c       	subi	r24, 0xCD	; 205
    2ec2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f4       	brne	.+2      	; 0x2ece <pinMode+0x1c>
    2ecc:	35 c0       	rjmp	.+106    	; 0x2f38 <pinMode+0x86>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	eb 51       	subi	r30, 0x1B	; 27
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	25 91       	lpm	r18, Z+
    2edc:	34 91       	lpm	r19, Z+
    2ede:	a2 2f       	mov	r26, r18
    2ee0:	b3 2f       	mov	r27, r19
    2ee2:	ed 01       	movw	r28, r26
	out = portOutputRegister(port);
    2ee4:	81 50       	subi	r24, 0x01	; 1
    2ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee8:	fc 01       	movw	r30, r24
    2eea:	25 91       	lpm	r18, Z+
    2eec:	34 91       	lpm	r19, Z+
    2eee:	e2 2f       	mov	r30, r18
    2ef0:	f3 2f       	mov	r31, r19
    2ef2:	cf 01       	movw	r24, r30

	if (mode == INPUT) { 
    2ef4:	66 23       	and	r22, r22
    2ef6:	59 f4       	brne	.+22     	; 0x2f0e <pinMode+0x5c>
		uint8_t oldSREG = SREG;
    2ef8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2efa:	f8 94       	cli
		*reg &= ~bit;
    2efc:	9c 91       	ld	r25, X
    2efe:	40 95       	com	r20
    2f00:	94 23       	and	r25, r20
    2f02:	9c 93       	st	X, r25
		*out &= ~bit;
    2f04:	90 81       	ld	r25, Z
    2f06:	49 23       	and	r20, r25
    2f08:	40 83       	st	Z, r20
		SREG = oldSREG;
    2f0a:	8f bf       	out	0x3f, r24	; 63
    2f0c:	15 c0       	rjmp	.+42     	; 0x2f38 <pinMode+0x86>
	} else if (mode == INPUT_PULLUP) {
    2f0e:	62 30       	cpi	r22, 0x02	; 2
    2f10:	69 f4       	brne	.+26     	; 0x2f2c <pinMode+0x7a>
		uint8_t oldSREG = SREG;
    2f12:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2f14:	f8 94       	cli
		*reg &= ~bit;
    2f16:	58 81       	ld	r21, Y
    2f18:	34 2f       	mov	r19, r20
    2f1a:	30 95       	com	r19
    2f1c:	35 23       	and	r19, r21
    2f1e:	38 83       	st	Y, r19
		*out |= bit;
    2f20:	dc 01       	movw	r26, r24
    2f22:	ec 91       	ld	r30, X
    2f24:	4e 2b       	or	r20, r30
    2f26:	4c 93       	st	X, r20
		SREG = oldSREG;
    2f28:	2f bf       	out	0x3f, r18	; 63
    2f2a:	06 c0       	rjmp	.+12     	; 0x2f38 <pinMode+0x86>
	} else {
		uint8_t oldSREG = SREG;
    2f2c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f2e:	f8 94       	cli
		*reg |= bit;
    2f30:	e8 81       	ld	r30, Y
    2f32:	4e 2b       	or	r20, r30
    2f34:	48 83       	st	Y, r20
		SREG = oldSREG;
    2f36:	8f bf       	out	0x3f, r24	; 63
	}
}
    2f38:	df 91       	pop	r29
    2f3a:	cf 91       	pop	r28
    2f3c:	08 95       	ret

00002f3e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	06 2f       	mov	r16, r22
	uint8_t timer = digitalPinToTimer(pin);
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	f9 01       	movw	r30, r18
    2f4c:	e1 54       	subi	r30, 0x41	; 65
    2f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f50:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2f52:	f9 01       	movw	r30, r18
    2f54:	e7 58       	subi	r30, 0x87	; 135
    2f56:	fe 4f       	sbci	r31, 0xFE	; 254
    2f58:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2f5a:	2d 5c       	subi	r18, 0xCD	; 205
    2f5c:	3e 4f       	sbci	r19, 0xFE	; 254
    2f5e:	f9 01       	movw	r30, r18
    2f60:	f4 90       	lpm	r15, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f62:	ff 20       	and	r15, r15
    2f64:	d9 f0       	breq	.+54     	; 0x2f9c <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f66:	88 23       	and	r24, r24
    2f68:	11 f0       	breq	.+4      	; 0x2f6e <digitalWrite+0x30>
    2f6a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <turnOffPWM>

	out = portOutputRegister(port);
    2f6e:	ef 2d       	mov	r30, r15
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	ee 0f       	add	r30, r30
    2f74:	ff 1f       	adc	r31, r31
    2f76:	e1 50       	subi	r30, 0x01	; 1
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	85 91       	lpm	r24, Z+
    2f7c:	94 91       	lpm	r25, Z+
    2f7e:	e8 2f       	mov	r30, r24
    2f80:	f9 2f       	mov	r31, r25

	uint8_t oldSREG = SREG;
    2f82:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2f84:	f8 94       	cli

	if (val == LOW) {
    2f86:	00 23       	and	r16, r16
    2f88:	29 f4       	brne	.+10     	; 0x2f94 <digitalWrite+0x56>
		*out &= ~bit;
    2f8a:	90 81       	ld	r25, Z
    2f8c:	10 95       	com	r17
    2f8e:	19 23       	and	r17, r25
    2f90:	10 83       	st	Z, r17
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <digitalWrite+0x5c>
	} else {
		*out |= bit;
    2f94:	90 81       	ld	r25, Z
    2f96:	19 2b       	or	r17, r25
    2f98:	10 83       	st	Z, r17
	}

	SREG = oldSREG;
    2f9a:	8f bf       	out	0x3f, r24	; 63
}
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	08 95       	ret

00002fa4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	f9 01       	movw	r30, r18
    2fae:	e1 54       	subi	r30, 0x41	; 65
    2fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb2:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2fb4:	f9 01       	movw	r30, r18
    2fb6:	e7 58       	subi	r30, 0x87	; 135
    2fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fba:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2fbc:	2d 5c       	subi	r18, 0xCD	; 205
    2fbe:	3e 4f       	sbci	r19, 0xFE	; 254
    2fc0:	f9 01       	movw	r30, r18
    2fc2:	04 91       	lpm	r16, Z+

	if (port == NOT_A_PIN) return LOW;
    2fc4:	00 23       	and	r16, r16
    2fc6:	b1 f0       	breq	.+44     	; 0x2ff4 <digitalRead+0x50>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2fc8:	88 23       	and	r24, r24
    2fca:	11 f0       	breq	.+4      	; 0x2fd0 <digitalRead+0x2c>
    2fcc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2fd0:	e0 2f       	mov	r30, r16
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	e7 5e       	subi	r30, 0xE7	; 231
    2fda:	fe 4f       	sbci	r31, 0xFE	; 254
    2fdc:	85 91       	lpm	r24, Z+
    2fde:	94 91       	lpm	r25, Z+
    2fe0:	e8 2f       	mov	r30, r24
    2fe2:	f9 2f       	mov	r31, r25
    2fe4:	80 81       	ld	r24, Z
    2fe6:	18 23       	and	r17, r24
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2fe8:	21 e0       	ldi	r18, 0x01	; 1
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	29 f4       	brne	.+10     	; 0x2ff8 <digitalRead+0x54>
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <digitalRead+0x54>
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2ff8:	82 2f       	mov	r24, r18
    2ffa:	93 2f       	mov	r25, r19
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	08 95       	ret

00003002 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    3002:	7f 92       	push	r7
    3004:	8f 92       	push	r8
    3006:	9f 92       	push	r9
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	fc 01       	movw	r30, r24
    3020:	e7 58       	subi	r30, 0x87	; 135
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
    3024:	d4 90       	lpm	r13, Z+
	uint8_t port = digitalPinToPort(pin);
    3026:	8d 5c       	subi	r24, 0xCD	; 205
    3028:	9e 4f       	sbci	r25, 0xFE	; 254
    302a:	fc 01       	movw	r30, r24
    302c:	74 91       	lpm	r23, Z+
	uint8_t stateMask = (state ? bit : 0);
    302e:	66 23       	and	r22, r22
    3030:	11 f4       	brne	.+4      	; 0x3036 <pulseIn+0x34>
    3032:	cc 24       	eor	r12, r12
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <pulseIn+0x36>
    3036:	cd 2c       	mov	r12, r13
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    3038:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	dc 01       	movw	r26, r24
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    3040:	67 2f       	mov	r22, r23
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	66 0f       	add	r22, r22
    3046:	77 1f       	adc	r23, r23
    3048:	67 5e       	subi	r22, 0xE7	; 231
    304a:	7e 4f       	sbci	r23, 0xFE	; 254
    304c:	fb 01       	movw	r30, r22
    304e:	06 2f       	mov	r16, r22
    3050:	1f 2f       	mov	r17, r31
    3052:	c5 91       	lpm	r28, Z+
    3054:	d4 91       	lpm	r29, Z+
    3056:	09 c0       	rjmp	.+18     	; 0x306a <pulseIn+0x68>
		if (numloops++ == maxloops)
    3058:	82 17       	cp	r24, r18
    305a:	93 07       	cpc	r25, r19
    305c:	a4 07       	cpc	r26, r20
    305e:	b5 07       	cpc	r27, r21
    3060:	09 f4       	brne	.+2      	; 0x3064 <pulseIn+0x62>
    3062:	68 c0       	rjmp	.+208    	; 0x3134 <pulseIn+0x132>
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	a1 1d       	adc	r26, r1
    3068:	b1 1d       	adc	r27, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    306a:	5b 01       	movw	r10, r22
    306c:	e0 2e       	mov	r14, r16
    306e:	f1 2e       	mov	r15, r17
    3070:	4e 01       	movw	r8, r28
    3072:	ec 2f       	mov	r30, r28
    3074:	f9 2d       	mov	r31, r9
    3076:	e0 81       	ld	r30, Z
    3078:	ed 21       	and	r30, r13
    307a:	ce 16       	cp	r12, r30
    307c:	69 f3       	breq	.-38     	; 0x3058 <pulseIn+0x56>
    307e:	0a c0       	rjmp	.+20     	; 0x3094 <pulseIn+0x92>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    3080:	82 17       	cp	r24, r18
    3082:	93 07       	cpc	r25, r19
    3084:	a4 07       	cpc	r26, r20
    3086:	b5 07       	cpc	r27, r21
    3088:	09 f4       	brne	.+2      	; 0x308c <pulseIn+0x8a>
    308a:	58 c0       	rjmp	.+176    	; 0x313c <pulseIn+0x13a>
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	a1 1d       	adc	r26, r1
    3090:	b1 1d       	adc	r27, r1
    3092:	03 c0       	rjmp	.+6      	; 0x309a <pulseIn+0x98>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    3094:	f7 01       	movw	r30, r14
    3096:	65 91       	lpm	r22, Z+
    3098:	74 91       	lpm	r23, Z+
    309a:	e6 2f       	mov	r30, r22
    309c:	f7 2f       	mov	r31, r23
    309e:	e0 81       	ld	r30, Z
    30a0:	ed 21       	and	r30, r13
    30a2:	ce 16       	cp	r12, r30
    30a4:	69 f7       	brne	.-38     	; 0x3080 <pulseIn+0x7e>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    30a6:	f5 01       	movw	r30, r10
    30a8:	65 91       	lpm	r22, Z+
    30aa:	74 91       	lpm	r23, Z+
    30ac:	e6 2f       	mov	r30, r22
    30ae:	f7 2f       	mov	r31, r23
    30b0:	60 81       	ld	r22, Z
    30b2:	6d 21       	and	r22, r13
    30b4:	c6 16       	cp	r12, r22
    30b6:	21 f5       	brne	.+72     	; 0x3100 <pulseIn+0xfe>
		if (numloops++ == maxloops)
    30b8:	28 17       	cp	r18, r24
    30ba:	39 07       	cpc	r19, r25
    30bc:	4a 07       	cpc	r20, r26
    30be:	5b 07       	cpc	r21, r27
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <pulseIn+0xc2>
    30c2:	40 c0       	rjmp	.+128    	; 0x3144 <pulseIn+0x142>
    30c4:	88 24       	eor	r8, r8
    30c6:	99 24       	eor	r9, r9
    30c8:	54 01       	movw	r10, r8
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    30ca:	f7 01       	movw	r30, r14
    30cc:	65 91       	lpm	r22, Z+
    30ce:	74 91       	lpm	r23, Z+
    30d0:	0b c0       	rjmp	.+22     	; 0x30e8 <pulseIn+0xe6>
		if (numloops++ == maxloops)
    30d2:	85 01       	movw	r16, r10
    30d4:	74 01       	movw	r14, r8
    30d6:	e8 0e       	add	r14, r24
    30d8:	f9 1e       	adc	r15, r25
    30da:	0a 1f       	adc	r16, r26
    30dc:	1b 1f       	adc	r17, r27
    30de:	2e 15       	cp	r18, r14
    30e0:	3f 05       	cpc	r19, r15
    30e2:	40 07       	cpc	r20, r16
    30e4:	51 07       	cpc	r21, r17
    30e6:	91 f1       	breq	.+100    	; 0x314c <pulseIn+0x14a>
			return 0;
		width++;
    30e8:	08 94       	sec
    30ea:	81 1c       	adc	r8, r1
    30ec:	91 1c       	adc	r9, r1
    30ee:	a1 1c       	adc	r10, r1
    30f0:	b1 1c       	adc	r11, r1
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    30f2:	e6 2f       	mov	r30, r22
    30f4:	f7 2f       	mov	r31, r23
    30f6:	e0 81       	ld	r30, Z
    30f8:	ed 21       	and	r30, r13
    30fa:	ce 16       	cp	r12, r30
    30fc:	51 f3       	breq	.-44     	; 0x30d2 <pulseIn+0xd0>
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <pulseIn+0x104>
    3100:	88 24       	eor	r8, r8
    3102:	99 24       	eor	r9, r9
    3104:	54 01       	movw	r10, r8

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    3106:	c5 01       	movw	r24, r10
    3108:	b4 01       	movw	r22, r8
    310a:	25 e1       	ldi	r18, 0x15	; 21
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    3116:	9b 01       	movw	r18, r22
    3118:	ac 01       	movw	r20, r24
    311a:	20 5f       	subi	r18, 0xF0	; 240
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	4f 4f       	sbci	r20, 0xFF	; 255
    3120:	5f 4f       	sbci	r21, 0xFF	; 255
    3122:	68 94       	set
    3124:	13 f8       	bld	r1, 3
    3126:	56 95       	lsr	r21
    3128:	47 95       	ror	r20
    312a:	37 95       	ror	r19
    312c:	27 95       	ror	r18
    312e:	16 94       	lsr	r1
    3130:	d1 f7       	brne	.-12     	; 0x3126 <pulseIn+0x124>
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <pulseIn+0x150>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	a9 01       	movw	r20, r18
    313a:	0b c0       	rjmp	.+22     	; 0x3152 <pulseIn+0x150>
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	a9 01       	movw	r20, r18
    3142:	07 c0       	rjmp	.+14     	; 0x3152 <pulseIn+0x150>
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	a9 01       	movw	r20, r18
    314a:	03 c0       	rjmp	.+6      	; 0x3152 <pulseIn+0x150>
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	a9 01       	movw	r20, r18
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
    3152:	62 2f       	mov	r22, r18
    3154:	73 2f       	mov	r23, r19
    3156:	84 2f       	mov	r24, r20
    3158:	95 2f       	mov	r25, r21
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	bf 90       	pop	r11
    316c:	af 90       	pop	r10
    316e:	9f 90       	pop	r9
    3170:	8f 90       	pop	r8
    3172:	7f 90       	pop	r7
    3174:	08 95       	ret

00003176 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    3176:	cf 92       	push	r12
    3178:	df 92       	push	r13
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	f8 2e       	mov	r15, r24
    3188:	06 2f       	mov	r16, r22
    318a:	e4 2e       	mov	r14, r20
    318c:	c7 e0       	ldi	r28, 0x07	; 7
    318e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t value = 0;
    3190:	10 e0       	ldi	r17, 0x00	; 0
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    3192:	0f 2e       	mov	r0, r31
    3194:	f7 e0       	ldi	r31, 0x07	; 7
    3196:	cf 2e       	mov	r12, r31
    3198:	dd 24       	eor	r13, r13
    319a:	f0 2d       	mov	r31, r0
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    319c:	80 2f       	mov	r24, r16
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
		if (bitOrder == LSBFIRST)
    31a4:	ee 20       	and	r14, r14
    31a6:	71 f4       	brne	.+28     	; 0x31c4 <shiftIn+0x4e>
			value |= digitalRead(dataPin) << i;
    31a8:	8f 2d       	mov	r24, r15
    31aa:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <digitalRead>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    31ae:	96 01       	movw	r18, r12
    31b0:	2c 1b       	sub	r18, r28
    31b2:	3d 0b       	sbc	r19, r29
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    31b4:	ac 01       	movw	r20, r24
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <shiftIn+0x46>
    31b8:	44 0f       	add	r20, r20
    31ba:	55 1f       	adc	r21, r21
    31bc:	2a 95       	dec	r18
    31be:	e2 f7       	brpl	.-8      	; 0x31b8 <shiftIn+0x42>
    31c0:	14 2b       	or	r17, r20
    31c2:	0a c0       	rjmp	.+20     	; 0x31d8 <shiftIn+0x62>
		else
			value |= digitalRead(dataPin) << (7 - i);
    31c4:	8f 2d       	mov	r24, r15
    31c6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <digitalRead>
    31ca:	0c 2e       	mov	r0, r28
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <shiftIn+0x5c>
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	0a 94       	dec	r0
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <shiftIn+0x58>
    31d6:	18 2b       	or	r17, r24
		digitalWrite(clockPin, LOW);
    31d8:	80 2f       	mov	r24, r16
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    31e0:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    31e2:	3f ef       	ldi	r19, 0xFF	; 255
    31e4:	cf 3f       	cpi	r28, 0xFF	; 255
    31e6:	d3 07       	cpc	r29, r19
    31e8:	c9 f6       	brne	.-78     	; 0x319c <shiftIn+0x26>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
    31ea:	81 2f       	mov	r24, r17
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	df 90       	pop	r13
    31fa:	cf 90       	pop	r12
    31fc:	08 95       	ret

000031fe <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    31fe:	af 92       	push	r10
    3200:	bf 92       	push	r11
    3202:	df 92       	push	r13
    3204:	ef 92       	push	r14
    3206:	ff 92       	push	r15
    3208:	0f 93       	push	r16
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	08 2f       	mov	r16, r24
    3212:	16 2f       	mov	r17, r22
    3214:	d4 2e       	mov	r13, r20
    3216:	c7 e0       	ldi	r28, 0x07	; 7
    3218:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    321a:	e2 2e       	mov	r14, r18
    321c:	ff 24       	eor	r15, r15
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    321e:	0f 2e       	mov	r0, r31
    3220:	f7 e0       	ldi	r31, 0x07	; 7
    3222:	af 2e       	mov	r10, r31
    3224:	bb 24       	eor	r11, r11
    3226:	f0 2d       	mov	r31, r0
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    3228:	dd 20       	and	r13, r13
    322a:	79 f4       	brne	.+30     	; 0x324a <shiftOut+0x4c>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    322c:	b5 01       	movw	r22, r10
    322e:	6c 1b       	sub	r22, r28
    3230:	7d 0b       	sbc	r23, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    3232:	c7 01       	movw	r24, r14
    3234:	02 c0       	rjmp	.+4      	; 0x323a <shiftOut+0x3c>
    3236:	95 95       	asr	r25
    3238:	87 95       	ror	r24
    323a:	6a 95       	dec	r22
    323c:	e2 f7       	brpl	.-8      	; 0x3236 <shiftOut+0x38>
    323e:	bc 01       	movw	r22, r24
    3240:	61 70       	andi	r22, 0x01	; 1
    3242:	80 2f       	mov	r24, r16
    3244:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    3248:	0b c0       	rjmp	.+22     	; 0x3260 <shiftOut+0x62>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    324a:	b7 01       	movw	r22, r14
    324c:	0c 2e       	mov	r0, r28
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <shiftOut+0x56>
    3250:	75 95       	asr	r23
    3252:	67 95       	ror	r22
    3254:	0a 94       	dec	r0
    3256:	e2 f7       	brpl	.-8      	; 0x3250 <shiftOut+0x52>
    3258:	61 70       	andi	r22, 0x01	; 1
    325a:	80 2f       	mov	r24, r16
    325c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    3260:	81 2f       	mov	r24, r17
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
		digitalWrite(clockPin, LOW);		
    3268:	81 2f       	mov	r24, r17
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <digitalWrite>
    3270:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    3272:	9f ef       	ldi	r25, 0xFF	; 255
    3274:	cf 3f       	cpi	r28, 0xFF	; 255
    3276:	d9 07       	cpc	r29, r25
    3278:	b9 f6       	brne	.-82     	; 0x3228 <shiftOut+0x2a>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    327a:	df 91       	pop	r29
    327c:	cf 91       	pop	r28
    327e:	1f 91       	pop	r17
    3280:	0f 91       	pop	r16
    3282:	ff 90       	pop	r15
    3284:	ef 90       	pop	r14
    3286:	df 90       	pop	r13
    3288:	bf 90       	pop	r11
    328a:	af 90       	pop	r10
    328c:	08 95       	ret

0000328e <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	29 f0       	breq	.+10     	; 0x329c <_Z10randomSeedj+0xe>
    srandom(seed);
    3292:	bc 01       	movw	r22, r24
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <srandom>
    329c:	08 95       	ret

0000329e <_Z6randoml>:
  }
}

long random(long howbig)
{
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	7b 01       	movw	r14, r22
    32a8:	8c 01       	movw	r16, r24
  if (howbig == 0) {
    32aa:	61 15       	cp	r22, r1
    32ac:	71 05       	cpc	r23, r1
    32ae:	81 05       	cpc	r24, r1
    32b0:	91 05       	cpc	r25, r1
    32b2:	49 f0       	breq	.+18     	; 0x32c6 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
    32b4:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <random>
    32b8:	a8 01       	movw	r20, r16
    32ba:	97 01       	movw	r18, r14
    32bc:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <__divmodsi4>
    32c0:	9b 01       	movw	r18, r22
    32c2:	ac 01       	movw	r20, r24
    32c4:	03 c0       	rjmp	.+6      	; 0x32cc <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
    32cc:	62 2f       	mov	r22, r18
    32ce:	73 2f       	mov	r23, r19
    32d0:	84 2f       	mov	r24, r20
    32d2:	95 2f       	mov	r25, r21
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	08 95       	ret

000032de <_Z6randomll>:

long random(long howsmall, long howbig)
{
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	7b 01       	movw	r14, r22
    32e8:	8c 01       	movw	r16, r24
  if (howsmall >= howbig) {
    32ea:	62 17       	cp	r22, r18
    32ec:	73 07       	cpc	r23, r19
    32ee:	84 07       	cpc	r24, r20
    32f0:	95 07       	cpc	r25, r21
    32f2:	64 f4       	brge	.+24     	; 0x330c <_Z6randomll+0x2e>
    return howsmall;
  }
  long diff = howbig - howsmall;
    32f4:	ca 01       	movw	r24, r20
    32f6:	b9 01       	movw	r22, r18
    32f8:	6e 19       	sub	r22, r14
    32fa:	7f 09       	sbc	r23, r15
    32fc:	80 0b       	sbc	r24, r16
    32fe:	91 0b       	sbc	r25, r17
  return random(diff) + howsmall;
    3300:	0e 94 4f 19 	call	0x329e	; 0x329e <_Z6randoml>
    3304:	e6 0e       	add	r14, r22
    3306:	f7 1e       	adc	r15, r23
    3308:	08 1f       	adc	r16, r24
    330a:	19 1f       	adc	r17, r25
}
    330c:	6e 2d       	mov	r22, r14
    330e:	7f 2d       	mov	r23, r15
    3310:	80 2f       	mov	r24, r16
    3312:	91 2f       	mov	r25, r17
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	08 95       	ret

0000331e <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    331e:	2f 92       	push	r2
    3320:	3f 92       	push	r3
    3322:	4f 92       	push	r4
    3324:	5f 92       	push	r5
    3326:	6f 92       	push	r6
    3328:	7f 92       	push	r7
    332a:	8f 92       	push	r8
    332c:	9f 92       	push	r9
    332e:	af 92       	push	r10
    3330:	bf 92       	push	r11
    3332:	cf 92       	push	r12
    3334:	df 92       	push	r13
    3336:	ef 92       	push	r14
    3338:	ff 92       	push	r15
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	39 01       	movw	r6, r18
    334c:	4a 01       	movw	r8, r20
    334e:	17 01       	movw	r2, r14
    3350:	28 01       	movw	r4, r16
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3352:	ee 88       	ldd	r14, Y+22	; 0x16
    3354:	ff 88       	ldd	r15, Y+23	; 0x17
    3356:	08 8d       	ldd	r16, Y+24	; 0x18
    3358:	19 8d       	ldd	r17, Y+25	; 0x19
    335a:	ea 18       	sub	r14, r10
    335c:	fb 08       	sbc	r15, r11
    335e:	0c 09       	sbc	r16, r12
    3360:	1d 09       	sbc	r17, r13
    3362:	9c 01       	movw	r18, r24
    3364:	ad 01       	movw	r20, r26
    3366:	26 19       	sub	r18, r6
    3368:	37 09       	sbc	r19, r7
    336a:	48 09       	sbc	r20, r8
    336c:	59 09       	sbc	r21, r9
    336e:	c8 01       	movw	r24, r16
    3370:	b7 01       	movw	r22, r14
    3372:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    3376:	a2 01       	movw	r20, r4
    3378:	91 01       	movw	r18, r2
    337a:	26 19       	sub	r18, r6
    337c:	37 09       	sbc	r19, r7
    337e:	48 09       	sbc	r20, r8
    3380:	59 09       	sbc	r21, r9
    3382:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <__divmodsi4>
    3386:	2a 0d       	add	r18, r10
    3388:	3b 1d       	adc	r19, r11
    338a:	4c 1d       	adc	r20, r12
    338c:	5d 1d       	adc	r21, r13
}
    338e:	62 2f       	mov	r22, r18
    3390:	73 2f       	mov	r23, r19
    3392:	84 2f       	mov	r24, r20
    3394:	95 2f       	mov	r25, r21
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	9f 90       	pop	r9
    33ac:	8f 90       	pop	r8
    33ae:	7f 90       	pop	r7
    33b0:	6f 90       	pop	r6
    33b2:	5f 90       	pop	r5
    33b4:	4f 90       	pop	r4
    33b6:	3f 90       	pop	r3
    33b8:	2f 90       	pop	r2
    33ba:	08 95       	ret

000033bc <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    33bc:	08 95       	ret

000033be <_Z8makeWordhh>:
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	38 2f       	mov	r19, r24
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	26 2b       	or	r18, r22
    33c6:	37 2b       	or	r19, r23
    33c8:	82 2f       	mov	r24, r18
    33ca:	93 2f       	mov	r25, r19
    33cc:	08 95       	ret

000033ce <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    33ce:	fc 01       	movw	r30, r24
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
}
    33d8:	08 95       	ret

000033da <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    33e0:	88 81       	ld	r24, Y
    33e2:	99 81       	ldd	r25, Y+1	; 0x01
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	11 f0       	breq	.+4      	; 0x33ec <_ZN6String10invalidateEv+0x12>
    33e8:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
	buffer = NULL;
    33ec:	19 82       	std	Y+1, r1	; 0x01
    33ee:	18 82       	st	Y, r1
	capacity = len = 0;
    33f0:	1d 82       	std	Y+5, r1	; 0x05
    33f2:	1c 82       	std	Y+4, r1	; 0x04
    33f4:	1b 82       	std	Y+3, r1	; 0x03
    33f6:	1a 82       	std	Y+2, r1	; 0x02
}
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	08 95       	ret

000033fe <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	ec 01       	movw	r28, r24
    3408:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    340a:	6f 5f       	subi	r22, 0xFF	; 255
    340c:	7f 4f       	sbci	r23, 0xFF	; 255
    340e:	88 81       	ld	r24, Y
    3410:	99 81       	ldd	r25, Y+1	; 0x01
    3412:	0e 94 74 32 	call	0x64e8	; 0x64e8 <realloc>
    3416:	28 2f       	mov	r18, r24
    3418:	39 2f       	mov	r19, r25
	if (newbuffer) {
    341a:	21 15       	cp	r18, r1
    341c:	31 05       	cpc	r19, r1
    341e:	31 f0       	breq	.+12     	; 0x342c <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    3420:	39 83       	std	Y+1, r19	; 0x01
    3422:	28 83       	st	Y, r18
		capacity = maxStrLen;
    3424:	1b 83       	std	Y+3, r17	; 0x03
    3426:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	01 c0       	rjmp	.+2      	; 0x342e <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    342c:	80 e0       	ldi	r24, 0x00	; 0
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

00003438 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    343e:	88 81       	ld	r24, Y
    3440:	99 81       	ldd	r25, Y+1	; 0x01
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	29 f0       	breq	.+10     	; 0x3450 <_ZN6String7reserveEj+0x18>
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	9b 81       	ldd	r25, Y+3	; 0x03
    344a:	86 17       	cp	r24, r22
    344c:	97 07       	cpc	r25, r23
    344e:	70 f4       	brcc	.+28     	; 0x346c <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    3450:	ce 01       	movw	r24, r28
    3452:	0e 94 ff 19 	call	0x33fe	; 0x33fe <_ZN6String12changeBufferEj>
    3456:	88 23       	and	r24, r24
    3458:	59 f0       	breq	.+22     	; 0x3470 <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    345a:	8c 81       	ldd	r24, Y+4	; 0x04
    345c:	9d 81       	ldd	r25, Y+5	; 0x05
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	49 f4       	brne	.+18     	; 0x3474 <_ZN6String7reserveEj+0x3c>
    3462:	e8 81       	ld	r30, Y
    3464:	f9 81       	ldd	r31, Y+1	; 0x01
    3466:	10 82       	st	Z, r1
		return 1;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	05 c0       	rjmp	.+10     	; 0x3476 <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	03 c0       	rjmp	.+6      	; 0x3476 <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    3474:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	08 95       	ret

0000347c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    347c:	ef 92       	push	r14
    347e:	ff 92       	push	r15
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	ec 01       	movw	r28, r24
    348a:	7b 01       	movw	r14, r22
    348c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    348e:	ba 01       	movw	r22, r20
    3490:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN6String7reserveEj>
    3494:	88 23       	and	r24, r24
    3496:	21 f4       	brne	.+8      	; 0x34a0 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    3498:	ce 01       	movw	r24, r28
    349a:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
		return *this;
    349e:	07 c0       	rjmp	.+14     	; 0x34ae <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    34a0:	1d 83       	std	Y+5, r17	; 0x05
    34a2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    34a4:	88 81       	ld	r24, Y
    34a6:	99 81       	ldd	r25, Y+1	; 0x01
    34a8:	b7 01       	movw	r22, r14
    34aa:	0e 94 22 37 	call	0x6e44	; 0x6e44 <strcpy>
	return *this;
}
    34ae:	7e 01       	movw	r14, r28
    34b0:	8c 2f       	mov	r24, r28
    34b2:	9f 2d       	mov	r25, r15
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	ff 90       	pop	r15
    34be:	ef 90       	pop	r14
    34c0:	08 95       	ret

000034c2 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    34c8:	11 82       	std	Z+1, r1	; 0x01
    34ca:	10 82       	st	Z, r1
	capacity = 0;
    34cc:	13 82       	std	Z+3, r1	; 0x03
    34ce:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    34d0:	15 82       	std	Z+5, r1	; 0x05
    34d2:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    34d4:	61 15       	cp	r22, r1
    34d6:	71 05       	cpc	r23, r1
    34d8:	69 f0       	breq	.+26     	; 0x34f4 <_ZN6StringC1EPKc+0x32>
    34da:	a6 2f       	mov	r26, r22
    34dc:	b7 2f       	mov	r27, r23
    34de:	ed 01       	movw	r28, r26
    34e0:	09 90       	ld	r0, Y+
    34e2:	00 20       	and	r0, r0
    34e4:	e9 f7       	brne	.-6      	; 0x34e0 <_ZN6StringC1EPKc+0x1e>
    34e6:	ae 01       	movw	r20, r28
    34e8:	41 50       	subi	r20, 0x01	; 1
    34ea:	50 40       	sbci	r21, 0x00	; 0
    34ec:	4a 1b       	sub	r20, r26
    34ee:	5b 0b       	sbc	r21, r27
    34f0:	0e 94 3e 1a 	call	0x347c	; 0x347c <_ZN6String4copyEPKcj>
}
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret

000034fa <_ZN6String4copyEPK19__FlashStringHelperj>:
	strcpy(buffer, cstr);
	return *this;
}

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	ec 01       	movw	r28, r24
    3508:	7b 01       	movw	r14, r22
    350a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    350c:	ba 01       	movw	r22, r20
    350e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN6String7reserveEj>
    3512:	88 23       	and	r24, r24
    3514:	21 f4       	brne	.+8      	; 0x351e <_ZN6String4copyEPK19__FlashStringHelperj+0x24>
		invalidate();
    3516:	ce 01       	movw	r24, r28
    3518:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
		return *this;
    351c:	07 c0       	rjmp	.+14     	; 0x352c <_ZN6String4copyEPK19__FlashStringHelperj+0x32>
	}
	len = length;
    351e:	1d 83       	std	Y+5, r17	; 0x05
    3520:	0c 83       	std	Y+4, r16	; 0x04
	strcpy_P(buffer, (PGM_P)pstr);
    3522:	88 81       	ld	r24, Y
    3524:	99 81       	ldd	r25, Y+1	; 0x01
    3526:	b7 01       	movw	r22, r14
    3528:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strcpy_P>
	return *this;
}
    352c:	7e 01       	movw	r14, r28
    352e:	8c 2f       	mov	r24, r28
    3530:	9f 2d       	mov	r25, r15
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	ff 90       	pop	r15
    353c:	ef 90       	pop	r14
    353e:	08 95       	ret

00003540 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	ec 01       	movw	r28, r24
    354a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    354c:	86 17       	cp	r24, r22
    354e:	97 07       	cpc	r25, r23
    3550:	61 f0       	breq	.+24     	; 0x356a <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	61 15       	cp	r22, r1
    3558:	71 05       	cpc	r23, r1
    355a:	29 f0       	breq	.+10     	; 0x3566 <_ZN6StringaSERKS_+0x26>
    355c:	44 81       	ldd	r20, Z+4	; 0x04
    355e:	55 81       	ldd	r21, Z+5	; 0x05
    3560:	0e 94 3e 1a 	call	0x347c	; 0x347c <_ZN6String4copyEPKcj>
    3564:	02 c0       	rjmp	.+4      	; 0x356a <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    3566:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	
	return *this;
}
    356a:	7e 01       	movw	r14, r28
    356c:	8c 2f       	mov	r24, r28
    356e:	9f 2d       	mov	r25, r15
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	ff 90       	pop	r15
    3576:	ef 90       	pop	r14
    3578:	08 95       	ret

0000357a <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    357a:	fc 01       	movw	r30, r24
    357c:	11 82       	std	Z+1, r1	; 0x01
    357e:	10 82       	st	Z, r1
	capacity = 0;
    3580:	13 82       	std	Z+3, r1	; 0x03
    3582:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3584:	15 82       	std	Z+5, r1	; 0x05
    3586:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    3588:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN6StringaSERKS_>
}
    358c:	08 95       	ret

0000358e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	08 2f       	mov	r16, r24
    3594:	19 2f       	mov	r17, r25
	if (cstr) copy(cstr, strlen(cstr));
    3596:	61 15       	cp	r22, r1
    3598:	71 05       	cpc	r23, r1
    359a:	71 f0       	breq	.+28     	; 0x35b8 <_ZN6StringaSEPKc+0x2a>
    359c:	e6 2f       	mov	r30, r22
    359e:	f7 2f       	mov	r31, r23
    35a0:	df 01       	movw	r26, r30
    35a2:	0d 90       	ld	r0, X+
    35a4:	00 20       	and	r0, r0
    35a6:	e9 f7       	brne	.-6      	; 0x35a2 <_ZN6StringaSEPKc+0x14>
    35a8:	ad 01       	movw	r20, r26
    35aa:	41 50       	subi	r20, 0x01	; 1
    35ac:	50 40       	sbci	r21, 0x00	; 0
    35ae:	4e 1b       	sub	r20, r30
    35b0:	5f 0b       	sbc	r21, r31
    35b2:	0e 94 3e 1a 	call	0x347c	; 0x347c <_ZN6String4copyEPKcj>
    35b6:	02 c0       	rjmp	.+4      	; 0x35bc <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    35b8:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	
	return *this;
}
    35bc:	80 2f       	mov	r24, r16
    35be:	91 2f       	mov	r25, r17
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	08 95       	ret

000035c6 <_ZN6StringC1Edh>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::String(double value, unsigned char decimalPlaces)
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	a1 97       	sbiw	r28, 0x21	; 33
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	7c 01       	movw	r14, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    35e8:	f7 01       	movw	r30, r14
    35ea:	11 82       	std	Z+1, r1	; 0x01
    35ec:	10 82       	st	Z, r1
	capacity = 0;
    35ee:	13 82       	std	Z+3, r1	; 0x03
    35f0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    35f2:	15 82       	std	Z+5, r1	; 0x05
    35f4:	14 82       	std	Z+4, r1	; 0x04

String::String(double value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    35f6:	42 2f       	mov	r20, r18
    35f8:	4e 5f       	subi	r20, 0xFE	; 254
    35fa:	8e 01       	movw	r16, r28
    35fc:	0f 5f       	subi	r16, 0xFF	; 255
    35fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3600:	0e 94 12 36 	call	0x6c24	; 0x6c24 <dtostrf>
    3604:	bc 01       	movw	r22, r24
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    360c:	a1 96       	adiw	r28, 0x21	; 33
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	ff 90       	pop	r15
    3622:	ef 90       	pop	r14
    3624:	08 95       	ret

00003626 <_ZN6StringC1Efh>:
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, unsigned char decimalPlaces)
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	a1 97       	sbiw	r28, 0x21	; 33
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	7c 01       	movw	r14, r24
    3644:	cb 01       	movw	r24, r22
    3646:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3648:	f7 01       	movw	r30, r14
    364a:	11 82       	std	Z+1, r1	; 0x01
    364c:	10 82       	st	Z, r1
	capacity = 0;
    364e:	13 82       	std	Z+3, r1	; 0x03
    3650:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3652:	15 82       	std	Z+5, r1	; 0x05
    3654:	14 82       	std	Z+4, r1	; 0x04

String::String(float value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    3656:	42 2f       	mov	r20, r18
    3658:	4e 5f       	subi	r20, 0xFE	; 254
    365a:	8e 01       	movw	r16, r28
    365c:	0f 5f       	subi	r16, 0xFF	; 255
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	0e 94 12 36 	call	0x6c24	; 0x6c24 <dtostrf>
    3664:	bc 01       	movw	r22, r24
    3666:	c7 01       	movw	r24, r14
    3668:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    366c:	a1 96       	adiw	r28, 0x21	; 33
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	08 95       	ret

00003686 <_ZN6StringC1Emh>:
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	a1 97       	sbiw	r28, 0x21	; 33
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	7c 01       	movw	r14, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    36a8:	f7 01       	movw	r30, r14
    36aa:	11 82       	std	Z+1, r1	; 0x01
    36ac:	10 82       	st	Z, r1
	capacity = 0;
    36ae:	13 82       	std	Z+3, r1	; 0x03
    36b0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36b2:	15 82       	std	Z+5, r1	; 0x05
    36b4:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
    36b6:	8e 01       	movw	r16, r28
    36b8:	0f 5f       	subi	r16, 0xFF	; 255
    36ba:	1f 4f       	sbci	r17, 0xFF	; 255
    36bc:	a8 01       	movw	r20, r16
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ultoa>
	*this = buf;
    36c4:	c7 01       	movw	r24, r14
    36c6:	b8 01       	movw	r22, r16
    36c8:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    36cc:	a1 96       	adiw	r28, 0x21	; 33
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	ff 90       	pop	r15
    36e2:	ef 90       	pop	r14
    36e4:	08 95       	ret

000036e6 <_ZN6StringC1Elh>:
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	a2 97       	sbiw	r28, 0x22	; 34
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	7c 01       	movw	r14, r24
    3704:	cb 01       	movw	r24, r22
    3706:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3708:	f7 01       	movw	r30, r14
    370a:	11 82       	std	Z+1, r1	; 0x01
    370c:	10 82       	st	Z, r1
	capacity = 0;
    370e:	13 82       	std	Z+3, r1	; 0x03
    3710:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3712:	15 82       	std	Z+5, r1	; 0x05
    3714:	14 82       	std	Z+4, r1	; 0x04

String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
    3716:	8e 01       	movw	r16, r28
    3718:	0f 5f       	subi	r16, 0xFF	; 255
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	a8 01       	movw	r20, r16
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <ltoa>
	*this = buf;
    3724:	c7 01       	movw	r24, r14
    3726:	b8 01       	movw	r22, r16
    3728:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    372c:	a2 96       	adiw	r28, 0x22	; 34
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
    3744:	08 95       	ret

00003746 <_ZN6StringC1Ejh>:
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	61 97       	sbiw	r28, 0x11	; 17
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	7c 01       	movw	r14, r24
    3764:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3766:	f7 01       	movw	r30, r14
    3768:	11 82       	std	Z+1, r1	; 0x01
    376a:	10 82       	st	Z, r1
	capacity = 0;
    376c:	13 82       	std	Z+3, r1	; 0x03
    376e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3770:	15 82       	std	Z+5, r1	; 0x05
    3772:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
    3774:	8e 01       	movw	r16, r28
    3776:	0f 5f       	subi	r16, 0xFF	; 255
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	b8 01       	movw	r22, r16
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <utoa>
	*this = buf;
    3782:	c7 01       	movw	r24, r14
    3784:	b8 01       	movw	r22, r16
    3786:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    378a:	61 96       	adiw	r28, 0x11	; 17
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	08 95       	ret

000037a4 <_ZN6StringC1Eih>:
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	62 97       	sbiw	r28, 0x12	; 18
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	7c 01       	movw	r14, r24
    37c2:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    37c4:	f7 01       	movw	r30, r14
    37c6:	11 82       	std	Z+1, r1	; 0x01
    37c8:	10 82       	st	Z, r1
	capacity = 0;
    37ca:	13 82       	std	Z+3, r1	; 0x03
    37cc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    37ce:	15 82       	std	Z+5, r1	; 0x05
    37d0:	14 82       	std	Z+4, r1	; 0x04

String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    37d2:	8e 01       	movw	r16, r28
    37d4:	0f 5f       	subi	r16, 0xFF	; 255
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	b8 01       	movw	r22, r16
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <itoa>
	*this = buf;
    37e0:	c7 01       	movw	r24, r14
    37e2:	b8 01       	movw	r22, r16
    37e4:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    37e8:	62 96       	adiw	r28, 0x12	; 18
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	08 95       	ret

00003802 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	29 97       	sbiw	r28, 0x09	; 9
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	7c 01       	movw	r14, r24
    3820:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3822:	f7 01       	movw	r30, r14
    3824:	11 82       	std	Z+1, r1	; 0x01
    3826:	10 82       	st	Z, r1
	capacity = 0;
    3828:	13 82       	std	Z+3, r1	; 0x03
    382a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    382c:	15 82       	std	Z+5, r1	; 0x05
    382e:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	8e 01       	movw	r16, r28
    3834:	0f 5f       	subi	r16, 0xFF	; 255
    3836:	1f 4f       	sbci	r17, 0xFF	; 255
    3838:	b8 01       	movw	r22, r16
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <utoa>
	*this = buf;
    3840:	c7 01       	movw	r24, r14
    3842:	b8 01       	movw	r22, r16
    3844:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    3848:	29 96       	adiw	r28, 0x09	; 9
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	0f be       	out	0x3f, r0	; 63
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	ef 90       	pop	r14
    3860:	08 95       	ret

00003862 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	0f 92       	push	r0
    3868:	0f 92       	push	r0
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    386e:	fc 01       	movw	r30, r24
    3870:	11 82       	std	Z+1, r1	; 0x01
    3872:	10 82       	st	Z, r1
	capacity = 0;
    3874:	13 82       	std	Z+3, r1	; 0x03
    3876:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3878:	15 82       	std	Z+5, r1	; 0x05
    387a:	14 82       	std	Z+4, r1	; 0x04

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    387c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    387e:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    3880:	be 01       	movw	r22, r28
    3882:	6f 5f       	subi	r22, 0xFF	; 255
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <_ZN6StringaSEPK19__FlashStringHelper>:
	
	return *this;
}

String & String::operator = (const __FlashStringHelper *pstr)
{
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	08 2f       	mov	r16, r24
    389e:	19 2f       	mov	r17, r25
    38a0:	eb 01       	movw	r28, r22
	if (pstr) copy(pstr, strlen_P((PGM_P)pstr));
    38a2:	20 97       	sbiw	r28, 0x00	; 0
    38a4:	51 f0       	breq	.+20     	; 0x38ba <_ZN6StringaSEPK19__FlashStringHelper+0x26>
    38a6:	cb 01       	movw	r24, r22
    38a8:	0e 94 dd 36 	call	0x6dba	; 0x6dba <strlen_P>
    38ac:	ac 01       	movw	r20, r24
    38ae:	80 2f       	mov	r24, r16
    38b0:	91 2f       	mov	r25, r17
    38b2:	be 01       	movw	r22, r28
    38b4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN6String4copyEPK19__FlashStringHelperj>
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <_ZN6StringaSEPK19__FlashStringHelper+0x2a>
	else invalidate();
    38ba:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>

	return *this;
}
    38be:	80 2f       	mov	r24, r16
    38c0:	91 2f       	mov	r25, r17
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	08 95       	ret

000038cc <_ZN6StringC1EPK19__FlashStringHelper>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    38cc:	fc 01       	movw	r30, r24
    38ce:	11 82       	std	Z+1, r1	; 0x01
    38d0:	10 82       	st	Z, r1
	capacity = 0;
    38d2:	13 82       	std	Z+3, r1	; 0x03
    38d4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    38d6:	15 82       	std	Z+5, r1	; 0x05
    38d8:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const __FlashStringHelper *pstr)
{
	init();
	*this = pstr;
    38da:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZN6StringaSEPK19__FlashStringHelper>
}
    38de:	08 95       	ret

000038e0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    38e0:	ef 92       	push	r14
    38e2:	ff 92       	push	r15
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	ec 01       	movw	r28, r24
    38ee:	8b 01       	movw	r16, r22
	unsigned int newlen = len + length;
    38f0:	ec 80       	ldd	r14, Y+4	; 0x04
    38f2:	fd 80       	ldd	r15, Y+5	; 0x05
	if (!cstr) return 0;
    38f4:	61 15       	cp	r22, r1
    38f6:	71 05       	cpc	r23, r1
    38f8:	b9 f0       	breq	.+46     	; 0x3928 <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    38fa:	41 15       	cp	r20, r1
    38fc:	51 05       	cpc	r21, r1
    38fe:	b1 f0       	breq	.+44     	; 0x392c <_ZN6String6concatEPKcj+0x4c>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    3900:	e4 0e       	add	r14, r20
    3902:	f5 1e       	adc	r15, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    3904:	b7 01       	movw	r22, r14
    3906:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN6String7reserveEj>
    390a:	88 23       	and	r24, r24
    390c:	89 f0       	breq	.+34     	; 0x3930 <_ZN6String6concatEPKcj+0x50>
	strcpy(buffer + len, cstr);
    390e:	28 81       	ld	r18, Y
    3910:	39 81       	ldd	r19, Y+1	; 0x01
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	9d 81       	ldd	r25, Y+5	; 0x05
    3916:	82 0f       	add	r24, r18
    3918:	93 1f       	adc	r25, r19
    391a:	b8 01       	movw	r22, r16
    391c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <strcpy>
	len = newlen;
    3920:	fd 82       	std	Y+5, r15	; 0x05
    3922:	ec 82       	std	Y+4, r14	; 0x04
	return 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	05 c0       	rjmp	.+10     	; 0x3932 <_ZN6String6concatEPKcj+0x52>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	03 c0       	rjmp	.+6      	; 0x3932 <_ZN6String6concatEPKcj+0x52>
	if (length == 0) return 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <_ZN6String6concatEPKcj+0x52>
	if (!reserve(newlen)) return 0;
    3930:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	08 95       	ret

00003940 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    3940:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	44 81       	ldd	r20, Z+4	; 0x04
    3948:	55 81       	ldd	r21, Z+5	; 0x05
    394a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    394e:	08 95       	ret

00003950 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3950:	61 15       	cp	r22, r1
    3952:	71 05       	cpc	r23, r1
    3954:	71 f0       	breq	.+28     	; 0x3972 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    3956:	e6 2f       	mov	r30, r22
    3958:	f7 2f       	mov	r31, r23
    395a:	df 01       	movw	r26, r30
    395c:	0d 90       	ld	r0, X+
    395e:	00 20       	and	r0, r0
    3960:	e9 f7       	brne	.-6      	; 0x395c <_ZN6String6concatEPKc+0xc>
    3962:	ad 01       	movw	r20, r26
    3964:	41 50       	subi	r20, 0x01	; 1
    3966:	50 40       	sbci	r21, 0x00	; 0
    3968:	4e 1b       	sub	r20, r30
    396a:	5f 0b       	sbc	r21, r31
    396c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
    3970:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3972:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    3974:	08 95       	ret

00003976 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	0f 92       	push	r0
    397c:	0f 92       	push	r0
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    3982:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3984:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    3986:	be 01       	movw	r22, r28
    3988:	6f 5f       	subi	r22, 0xFF	; 255
    398a:	7f 4f       	sbci	r23, 0xFF	; 255
    398c:	41 e0       	ldi	r20, 0x01	; 1
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	08 95       	ret

0000399e <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <_ZN6String6concatEh+0xe>
    39ac:	0f 92       	push	r0
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	7c 01       	movw	r14, r24
    39b4:	86 2f       	mov	r24, r22
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	8e 01       	movw	r16, r28
    39ba:	0f 5f       	subi	r16, 0xFF	; 255
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	b8 01       	movw	r22, r16
    39c0:	4a e0       	ldi	r20, 0x0A	; 10
    39c2:	50 e0       	ldi	r21, 0x00	; 0
    39c4:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <itoa>
	return concat(buf, strlen(buf));
    39c8:	f8 01       	movw	r30, r16
    39ca:	01 90       	ld	r0, Z+
    39cc:	00 20       	and	r0, r0
    39ce:	e9 f7       	brne	.-6      	; 0x39ca <_ZN6String6concatEh+0x2c>
    39d0:	af 01       	movw	r20, r30
    39d2:	41 50       	subi	r20, 0x01	; 1
    39d4:	50 40       	sbci	r21, 0x00	; 0
    39d6:	40 1b       	sub	r20, r16
    39d8:	51 0b       	sbc	r21, r17
    39da:	c7 01       	movw	r24, r14
    39dc:	b8 01       	movw	r22, r16
    39de:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	ff 90       	pop	r15
    39f4:	ef 90       	pop	r14
    39f6:	08 95       	ret

000039f8 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    39f8:	ef 92       	push	r14
    39fa:	ff 92       	push	r15
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	28 97       	sbiw	r28, 0x08	; 8
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	7c 01       	movw	r14, r24
    3a16:	cb 01       	movw	r24, r22
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
    3a18:	8e 01       	movw	r16, r28
    3a1a:	0f 5f       	subi	r16, 0xFF	; 255
    3a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1e:	b8 01       	movw	r22, r16
    3a20:	4a e0       	ldi	r20, 0x0A	; 10
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <itoa>
	return concat(buf, strlen(buf));
    3a28:	f8 01       	movw	r30, r16
    3a2a:	01 90       	ld	r0, Z+
    3a2c:	00 20       	and	r0, r0
    3a2e:	e9 f7       	brne	.-6      	; 0x3a2a <_ZN6String6concatEi+0x32>
    3a30:	af 01       	movw	r20, r30
    3a32:	41 50       	subi	r20, 0x01	; 1
    3a34:	50 40       	sbci	r21, 0x00	; 0
    3a36:	40 1b       	sub	r20, r16
    3a38:	51 0b       	sbc	r21, r17
    3a3a:	c7 01       	movw	r24, r14
    3a3c:	b8 01       	movw	r22, r16
    3a3e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3a42:	28 96       	adiw	r28, 0x08	; 8
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	08 95       	ret

00003a5c <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    3a5c:	ef 92       	push	r14
    3a5e:	ff 92       	push	r15
    3a60:	0f 93       	push	r16
    3a62:	1f 93       	push	r17
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	27 97       	sbiw	r28, 0x07	; 7
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	7c 01       	movw	r14, r24
    3a7a:	cb 01       	movw	r24, r22
	char buf[1 + 3 * sizeof(unsigned int)];
	utoa(num, buf, 10);
    3a7c:	8e 01       	movw	r16, r28
    3a7e:	0f 5f       	subi	r16, 0xFF	; 255
    3a80:	1f 4f       	sbci	r17, 0xFF	; 255
    3a82:	b8 01       	movw	r22, r16
    3a84:	4a e0       	ldi	r20, 0x0A	; 10
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <utoa>
	return concat(buf, strlen(buf));
    3a8c:	f8 01       	movw	r30, r16
    3a8e:	01 90       	ld	r0, Z+
    3a90:	00 20       	and	r0, r0
    3a92:	e9 f7       	brne	.-6      	; 0x3a8e <_ZN6String6concatEj+0x32>
    3a94:	af 01       	movw	r20, r30
    3a96:	41 50       	subi	r20, 0x01	; 1
    3a98:	50 40       	sbci	r21, 0x00	; 0
    3a9a:	40 1b       	sub	r20, r16
    3a9c:	51 0b       	sbc	r21, r17
    3a9e:	c7 01       	movw	r24, r14
    3aa0:	b8 01       	movw	r22, r16
    3aa2:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3aa6:	27 96       	adiw	r28, 0x07	; 7
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	08 95       	ret

00003ac0 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    3ac0:	ef 92       	push	r14
    3ac2:	ff 92       	push	r15
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	2e 97       	sbiw	r28, 0x0e	; 14
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	7c 01       	movw	r14, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	ba 01       	movw	r22, r20
	char buf[2 + 3 * sizeof(long)];
	ltoa(num, buf, 10);
    3ae2:	8e 01       	movw	r16, r28
    3ae4:	0f 5f       	subi	r16, 0xFF	; 255
    3ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae8:	a8 01       	movw	r20, r16
    3aea:	2a e0       	ldi	r18, 0x0A	; 10
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <ltoa>
	return concat(buf, strlen(buf));
    3af2:	f8 01       	movw	r30, r16
    3af4:	01 90       	ld	r0, Z+
    3af6:	00 20       	and	r0, r0
    3af8:	e9 f7       	brne	.-6      	; 0x3af4 <_ZN6String6concatEl+0x34>
    3afa:	af 01       	movw	r20, r30
    3afc:	41 50       	subi	r20, 0x01	; 1
    3afe:	50 40       	sbci	r21, 0x00	; 0
    3b00:	40 1b       	sub	r20, r16
    3b02:	51 0b       	sbc	r21, r17
    3b04:	c7 01       	movw	r24, r14
    3b06:	b8 01       	movw	r22, r16
    3b08:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3b0c:	2e 96       	adiw	r28, 0x0e	; 14
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	08 95       	ret

00003b26 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    3b26:	ef 92       	push	r14
    3b28:	ff 92       	push	r15
    3b2a:	0f 93       	push	r16
    3b2c:	1f 93       	push	r17
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	2d 97       	sbiw	r28, 0x0d	; 13
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	f8 94       	cli
    3b3c:	de bf       	out	0x3e, r29	; 62
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	7c 01       	movw	r14, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	ba 01       	movw	r22, r20
	char buf[1 + 3 * sizeof(unsigned long)];
	ultoa(num, buf, 10);
    3b48:	8e 01       	movw	r16, r28
    3b4a:	0f 5f       	subi	r16, 0xFF	; 255
    3b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4e:	a8 01       	movw	r20, r16
    3b50:	2a e0       	ldi	r18, 0x0A	; 10
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	0e 94 d5 37 	call	0x6faa	; 0x6faa <ultoa>
	return concat(buf, strlen(buf));
    3b58:	f8 01       	movw	r30, r16
    3b5a:	01 90       	ld	r0, Z+
    3b5c:	00 20       	and	r0, r0
    3b5e:	e9 f7       	brne	.-6      	; 0x3b5a <_ZN6String6concatEm+0x34>
    3b60:	af 01       	movw	r20, r30
    3b62:	41 50       	subi	r20, 0x01	; 1
    3b64:	50 40       	sbci	r21, 0x00	; 0
    3b66:	40 1b       	sub	r20, r16
    3b68:	51 0b       	sbc	r21, r17
    3b6a:	c7 01       	movw	r24, r14
    3b6c:	b8 01       	movw	r22, r16
    3b6e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3b72:	2d 96       	adiw	r28, 0x0d	; 13
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	1f 91       	pop	r17
    3b84:	0f 91       	pop	r16
    3b86:	ff 90       	pop	r15
    3b88:	ef 90       	pop	r14
    3b8a:	08 95       	ret

00003b8c <_ZN6String6concatEf>:

unsigned char String::concat(float num)
{
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	64 97       	sbiw	r28, 0x14	; 20
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	7c 01       	movw	r14, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	ba 01       	movw	r22, r20
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    3bae:	44 e0       	ldi	r20, 0x04	; 4
    3bb0:	22 e0       	ldi	r18, 0x02	; 2
    3bb2:	8e 01       	movw	r16, r28
    3bb4:	0f 5f       	subi	r16, 0xFF	; 255
    3bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb8:	0e 94 12 36 	call	0x6c24	; 0x6c24 <dtostrf>
    3bbc:	68 2f       	mov	r22, r24
    3bbe:	79 2f       	mov	r23, r25
	return concat(string, strlen(string));
    3bc0:	e8 2f       	mov	r30, r24
    3bc2:	f9 2f       	mov	r31, r25
    3bc4:	df 01       	movw	r26, r30
    3bc6:	0d 90       	ld	r0, X+
    3bc8:	00 20       	and	r0, r0
    3bca:	e9 f7       	brne	.-6      	; 0x3bc6 <_ZN6String6concatEf+0x3a>
    3bcc:	ad 01       	movw	r20, r26
    3bce:	41 50       	subi	r20, 0x01	; 1
    3bd0:	50 40       	sbci	r21, 0x00	; 0
    3bd2:	4e 1b       	sub	r20, r30
    3bd4:	5f 0b       	sbc	r21, r31
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3bdc:	64 96       	adiw	r28, 0x14	; 20
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	08 95       	ret

00003bf6 <_ZN6String6concatEd>:

unsigned char String::concat(double num)
{
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	64 97       	sbiw	r28, 0x14	; 20
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	7c 01       	movw	r14, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	ba 01       	movw	r22, r20
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    3c18:	44 e0       	ldi	r20, 0x04	; 4
    3c1a:	22 e0       	ldi	r18, 0x02	; 2
    3c1c:	8e 01       	movw	r16, r28
    3c1e:	0f 5f       	subi	r16, 0xFF	; 255
    3c20:	1f 4f       	sbci	r17, 0xFF	; 255
    3c22:	0e 94 12 36 	call	0x6c24	; 0x6c24 <dtostrf>
    3c26:	68 2f       	mov	r22, r24
    3c28:	79 2f       	mov	r23, r25
	return concat(string, strlen(string));
    3c2a:	e8 2f       	mov	r30, r24
    3c2c:	f9 2f       	mov	r31, r25
    3c2e:	df 01       	movw	r26, r30
    3c30:	0d 90       	ld	r0, X+
    3c32:	00 20       	and	r0, r0
    3c34:	e9 f7       	brne	.-6      	; 0x3c30 <_ZN6String6concatEd+0x3a>
    3c36:	ad 01       	movw	r20, r26
    3c38:	41 50       	subi	r20, 0x01	; 1
    3c3a:	50 40       	sbci	r21, 0x00	; 0
    3c3c:	4e 1b       	sub	r20, r30
    3c3e:	5f 0b       	sbc	r21, r31
    3c40:	c7 01       	movw	r24, r14
    3c42:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
}
    3c46:	64 96       	adiw	r28, 0x14	; 20
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	08 95       	ret

00003c60 <_ZN6String6concatEPK19__FlashStringHelper>:

unsigned char String::concat(const __FlashStringHelper * str)
{
    3c60:	ef 92       	push	r14
    3c62:	ff 92       	push	r15
    3c64:	0f 93       	push	r16
    3c66:	1f 93       	push	r17
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	ec 01       	movw	r28, r24
	if (!str) return 0;
    3c6e:	61 15       	cp	r22, r1
    3c70:	71 05       	cpc	r23, r1
    3c72:	01 f1       	breq	.+64     	; 0x3cb4 <_ZN6String6concatEPK19__FlashStringHelper+0x54>
	int length = strlen_P((const char *) str);
    3c74:	06 2f       	mov	r16, r22
    3c76:	17 2f       	mov	r17, r23
    3c78:	86 2f       	mov	r24, r22
    3c7a:	97 2f       	mov	r25, r23
    3c7c:	0e 94 dd 36 	call	0x6dba	; 0x6dba <strlen_P>
	if (length == 0) return 1;
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	d1 f0       	breq	.+52     	; 0x3cb8 <_ZN6String6concatEPK19__FlashStringHelper+0x58>
	unsigned int newlen = len + length;
    3c84:	ec 80       	ldd	r14, Y+4	; 0x04
    3c86:	fd 80       	ldd	r15, Y+5	; 0x05
    3c88:	e8 0e       	add	r14, r24
    3c8a:	f9 1e       	adc	r15, r25
	if (!reserve(newlen)) return 0;
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	b7 01       	movw	r22, r14
    3c90:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN6String7reserveEj>
    3c94:	88 23       	and	r24, r24
    3c96:	91 f0       	breq	.+36     	; 0x3cbc <_ZN6String6concatEPK19__FlashStringHelper+0x5c>
	strcpy_P(buffer + len, (const char *) str);
    3c98:	28 81       	ld	r18, Y
    3c9a:	39 81       	ldd	r19, Y+1	; 0x01
    3c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca0:	82 0f       	add	r24, r18
    3ca2:	93 1f       	adc	r25, r19
    3ca4:	60 2f       	mov	r22, r16
    3ca6:	71 2f       	mov	r23, r17
    3ca8:	0e 94 d6 36 	call	0x6dac	; 0x6dac <strcpy_P>
	len = newlen;
    3cac:	fd 82       	std	Y+5, r15	; 0x05
    3cae:	ec 82       	std	Y+4, r14	; 0x04
	return 1;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	05 c0       	rjmp	.+10     	; 0x3cbe <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	return concat(string, strlen(string));
}

unsigned char String::concat(const __FlashStringHelper * str)
{
	if (!str) return 0;
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	03 c0       	rjmp	.+6      	; 0x3cbe <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	int length = strlen_P((const char *) str);
	if (length == 0) return 1;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	08 95       	ret

00003ccc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	08 2f       	mov	r16, r24
    3cd2:	19 2f       	mov	r17, r25
    3cd4:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	44 81       	ldd	r20, Z+4	; 0x04
    3cdc:	55 81       	ldd	r21, Z+5	; 0x05
    3cde:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
    3ce2:	88 23       	and	r24, r24
    3ce4:	21 f4       	brne	.+8      	; 0x3cee <_ZplRK15StringSumHelperRK6String+0x22>
    3ce6:	80 2f       	mov	r24, r16
    3ce8:	91 2f       	mov	r25, r17
    3cea:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3cee:	80 2f       	mov	r24, r16
    3cf0:	91 2f       	mov	r25, r17
    3cf2:	1f 91       	pop	r17
    3cf4:	0f 91       	pop	r16
    3cf6:	08 95       	ret

00003cf8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	08 2f       	mov	r16, r24
    3cfe:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3d00:	61 15       	cp	r22, r1
    3d02:	71 05       	cpc	r23, r1
    3d04:	79 f0       	breq	.+30     	; 0x3d24 <_ZplRK15StringSumHelperPKc+0x2c>
    3d06:	e6 2f       	mov	r30, r22
    3d08:	f7 2f       	mov	r31, r23
    3d0a:	df 01       	movw	r26, r30
    3d0c:	0d 90       	ld	r0, X+
    3d0e:	00 20       	and	r0, r0
    3d10:	e9 f7       	brne	.-6      	; 0x3d0c <_ZplRK15StringSumHelperPKc+0x14>
    3d12:	ad 01       	movw	r20, r26
    3d14:	41 50       	subi	r20, 0x01	; 1
    3d16:	50 40       	sbci	r21, 0x00	; 0
    3d18:	4e 1b       	sub	r20, r30
    3d1a:	5f 0b       	sbc	r21, r31
    3d1c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6String6concatEPKcj>
    3d20:	88 23       	and	r24, r24
    3d22:	21 f4       	brne	.+8      	; 0x3d2c <_ZplRK15StringSumHelperPKc+0x34>
    3d24:	80 2f       	mov	r24, r16
    3d26:	91 2f       	mov	r25, r17
    3d28:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3d2c:	80 2f       	mov	r24, r16
    3d2e:	91 2f       	mov	r25, r17
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	08 95       	ret

00003d36 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    3d36:	0f 93       	push	r16
    3d38:	1f 93       	push	r17
    3d3a:	08 2f       	mov	r16, r24
    3d3c:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    3d3e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <_ZN6String6concatEc>
    3d42:	88 23       	and	r24, r24
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <_ZplRK15StringSumHelperc+0x18>
    3d46:	80 2f       	mov	r24, r16
    3d48:	91 2f       	mov	r25, r17
    3d4a:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3d4e:	80 2f       	mov	r24, r16
    3d50:	91 2f       	mov	r25, r17
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	08 95       	ret

00003d58 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3d58:	0f 93       	push	r16
    3d5a:	1f 93       	push	r17
    3d5c:	08 2f       	mov	r16, r24
    3d5e:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3d60:	0e 94 cf 1c 	call	0x399e	; 0x399e <_ZN6String6concatEh>
    3d64:	88 23       	and	r24, r24
    3d66:	21 f4       	brne	.+8      	; 0x3d70 <_ZplRK15StringSumHelperh+0x18>
    3d68:	80 2f       	mov	r24, r16
    3d6a:	91 2f       	mov	r25, r17
    3d6c:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3d70:	80 2f       	mov	r24, r16
    3d72:	91 2f       	mov	r25, r17
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	08 95       	ret

00003d7a <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    3d7a:	0f 93       	push	r16
    3d7c:	1f 93       	push	r17
    3d7e:	08 2f       	mov	r16, r24
    3d80:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3d82:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN6String6concatEi>
    3d86:	88 23       	and	r24, r24
    3d88:	21 f4       	brne	.+8      	; 0x3d92 <_ZplRK15StringSumHelperi+0x18>
    3d8a:	80 2f       	mov	r24, r16
    3d8c:	91 2f       	mov	r25, r17
    3d8e:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3d92:	80 2f       	mov	r24, r16
    3d94:	91 2f       	mov	r25, r17
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	08 95       	ret

00003d9c <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	08 2f       	mov	r16, r24
    3da2:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3da4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN6String6concatEj>
    3da8:	88 23       	and	r24, r24
    3daa:	21 f4       	brne	.+8      	; 0x3db4 <_ZplRK15StringSumHelperj+0x18>
    3dac:	80 2f       	mov	r24, r16
    3dae:	91 2f       	mov	r25, r17
    3db0:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3db4:	80 2f       	mov	r24, r16
    3db6:	91 2f       	mov	r25, r17
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	08 95       	ret

00003dbe <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	08 2f       	mov	r16, r24
    3dc4:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3dc6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <_ZN6String6concatEl>
    3dca:	88 23       	and	r24, r24
    3dcc:	21 f4       	brne	.+8      	; 0x3dd6 <_ZplRK15StringSumHelperl+0x18>
    3dce:	80 2f       	mov	r24, r16
    3dd0:	91 2f       	mov	r25, r17
    3dd2:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3dd6:	80 2f       	mov	r24, r16
    3dd8:	91 2f       	mov	r25, r17
    3dda:	1f 91       	pop	r17
    3ddc:	0f 91       	pop	r16
    3dde:	08 95       	ret

00003de0 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3de0:	0f 93       	push	r16
    3de2:	1f 93       	push	r17
    3de4:	08 2f       	mov	r16, r24
    3de6:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3de8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN6String6concatEm>
    3dec:	88 23       	and	r24, r24
    3dee:	21 f4       	brne	.+8      	; 0x3df8 <_ZplRK15StringSumHelperm+0x18>
    3df0:	80 2f       	mov	r24, r16
    3df2:	91 2f       	mov	r25, r17
    3df4:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3df8:	80 2f       	mov	r24, r16
    3dfa:	91 2f       	mov	r25, r17
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	08 95       	ret

00003e02 <_ZplRK15StringSumHelperf>:

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
    3e06:	08 2f       	mov	r16, r24
    3e08:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e0a:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <_ZN6String6concatEf>
    3e0e:	88 23       	and	r24, r24
    3e10:	21 f4       	brne	.+8      	; 0x3e1a <_ZplRK15StringSumHelperf+0x18>
    3e12:	80 2f       	mov	r24, r16
    3e14:	91 2f       	mov	r25, r17
    3e16:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3e1a:	80 2f       	mov	r24, r16
    3e1c:	91 2f       	mov	r25, r17
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	08 95       	ret

00003e24 <_ZplRK15StringSumHelperd>:

StringSumHelper & operator + (const StringSumHelper &lhs, double num)
{
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	08 2f       	mov	r16, r24
    3e2a:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e2c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <_ZN6String6concatEd>
    3e30:	88 23       	and	r24, r24
    3e32:	21 f4       	brne	.+8      	; 0x3e3c <_ZplRK15StringSumHelperd+0x18>
    3e34:	80 2f       	mov	r24, r16
    3e36:	91 2f       	mov	r25, r17
    3e38:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3e3c:	80 2f       	mov	r24, r16
    3e3e:	91 2f       	mov	r25, r17
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	08 95       	ret

00003e46 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:

StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	08 2f       	mov	r16, r24
    3e4c:	19 2f       	mov	r17, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs))	a.invalidate();
    3e4e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_ZN6String6concatEPK19__FlashStringHelper>
    3e52:	88 23       	and	r24, r24
    3e54:	21 f4       	brne	.+8      	; 0x3e5e <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x18>
    3e56:	80 2f       	mov	r24, r16
    3e58:	91 2f       	mov	r25, r17
    3e5a:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN6String10invalidateEv>
	return a;
}
    3e5e:	80 2f       	mov	r24, r16
    3e60:	91 2f       	mov	r25, r17
    3e62:	1f 91       	pop	r17
    3e64:	0f 91       	pop	r16
    3e66:	08 95       	ret

00003e68 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3e68:	fc 01       	movw	r30, r24
    3e6a:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	39 f0       	breq	.+14     	; 0x3e82 <_ZNK6String9compareToERKS_+0x1a>
    3e74:	6d 91       	ld	r22, X+
    3e76:	7c 91       	ld	r23, X
    3e78:	11 97       	sbiw	r26, 0x01	; 1
    3e7a:	61 15       	cp	r22, r1
    3e7c:	71 05       	cpc	r23, r1
    3e7e:	d9 f4       	brne	.+54     	; 0x3eb6 <_ZNK6String9compareToERKS_+0x4e>
    3e80:	11 c0       	rjmp	.+34     	; 0x3ea4 <_ZNK6String9compareToERKS_+0x3c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    3e82:	ed 91       	ld	r30, X+
    3e84:	fc 91       	ld	r31, X
    3e86:	11 97       	sbiw	r26, 0x01	; 1
    3e88:	30 97       	sbiw	r30, 0x00	; 0
    3e8a:	d1 f0       	breq	.+52     	; 0x3ec0 <_ZNK6String9compareToERKS_+0x58>
    3e8c:	14 96       	adiw	r26, 0x04	; 4
    3e8e:	8d 91       	ld	r24, X+
    3e90:	9c 91       	ld	r25, X
    3e92:	15 97       	sbiw	r26, 0x05	; 5
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	b9 f0       	breq	.+46     	; 0x3ec6 <_ZNK6String9compareToERKS_+0x5e>
    3e98:	20 81       	ld	r18, Z
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	30 95       	com	r19
    3e9e:	21 95       	neg	r18
    3ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea2:	16 c0       	rjmp	.+44     	; 0x3ed0 <_ZNK6String9compareToERKS_+0x68>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3ea4:	24 81       	ldd	r18, Z+4	; 0x04
    3ea6:	35 81       	ldd	r19, Z+5	; 0x05
    3ea8:	21 15       	cp	r18, r1
    3eaa:	31 05       	cpc	r19, r1
    3eac:	79 f0       	breq	.+30     	; 0x3ecc <_ZNK6String9compareToERKS_+0x64>
    3eae:	fc 01       	movw	r30, r24
    3eb0:	20 81       	ld	r18, Z
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	0d c0       	rjmp	.+26     	; 0x3ed0 <_ZNK6String9compareToERKS_+0x68>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3eb6:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcmp>
    3eba:	28 2f       	mov	r18, r24
    3ebc:	39 2f       	mov	r19, r25
    3ebe:	08 c0       	rjmp	.+16     	; 0x3ed0 <_ZNK6String9compareToERKS_+0x68>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	05 c0       	rjmp	.+10     	; 0x3ed0 <_ZNK6String9compareToERKS_+0x68>
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <_ZNK6String9compareToERKS_+0x68>
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3ed0:	82 2f       	mov	r24, r18
    3ed2:	93 2f       	mov	r25, r19
    3ed4:	08 95       	ret

00003ed6 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	44 81       	ldd	r20, Z+4	; 0x04
    3eda:	55 81       	ldd	r21, Z+5	; 0x05
    3edc:	fb 01       	movw	r30, r22
    3ede:	24 81       	ldd	r18, Z+4	; 0x04
    3ee0:	35 81       	ldd	r19, Z+5	; 0x05
    3ee2:	42 17       	cp	r20, r18
    3ee4:	53 07       	cpc	r21, r19
    3ee6:	39 f4       	brne	.+14     	; 0x3ef6 <_ZNK6String6equalsERKS_+0x20>
    3ee8:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3eec:	21 e0       	ldi	r18, 0x01	; 1
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	19 f0       	breq	.+6      	; 0x3ef8 <_ZNK6String6equalsERKS_+0x22>
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	01 c0       	rjmp	.+2      	; 0x3ef8 <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
}
    3ef8:	82 2f       	mov	r24, r18
    3efa:	08 95       	ret

00003efc <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3efc:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3efe:	84 81       	ldd	r24, Z+4	; 0x04
    3f00:	95 81       	ldd	r25, Z+5	; 0x05
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	61 f4       	brne	.+24     	; 0x3f1e <_ZNK6String6equalsEPKc+0x22>
    3f06:	61 15       	cp	r22, r1
    3f08:	71 05       	cpc	r23, r1
    3f0a:	39 f0       	breq	.+14     	; 0x3f1a <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	fb 01       	movw	r30, r22
    3f10:	90 81       	ld	r25, Z
    3f12:	99 23       	and	r25, r25
    3f14:	d9 f0       	breq	.+54     	; 0x3f4c <_ZNK6String6equalsEPKc+0x50>
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    3f1e:	61 15       	cp	r22, r1
    3f20:	71 05       	cpc	r23, r1
    3f22:	49 f4       	brne	.+18     	; 0x3f36 <_ZNK6String6equalsEPKc+0x3a>
    3f24:	01 90       	ld	r0, Z+
    3f26:	f0 81       	ld	r31, Z
    3f28:	e0 2d       	mov	r30, r0
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	90 81       	ld	r25, Z
    3f2e:	99 23       	and	r25, r25
    3f30:	69 f0       	breq	.+26     	; 0x3f4c <_ZNK6String6equalsEPKc+0x50>
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    3f36:	80 81       	ld	r24, Z
    3f38:	91 81       	ldd	r25, Z+1	; 0x01
    3f3a:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcmp>
    3f3e:	28 2f       	mov	r18, r24
    3f40:	39 2f       	mov	r19, r25
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	21 15       	cp	r18, r1
    3f46:	31 05       	cpc	r19, r1
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <_ZNK6String6equalsEPKc+0x50>
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
}
    3f4c:	08 95       	ret

00003f4e <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3f4e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZNK6String9compareToERKS_>
}
    3f52:	89 2f       	mov	r24, r25
    3f54:	88 1f       	adc	r24, r24
    3f56:	88 27       	eor	r24, r24
    3f58:	88 1f       	adc	r24, r24
    3f5a:	08 95       	ret

00003f5c <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3f5c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZNK6String9compareToERKS_>
    3f60:	21 e0       	ldi	r18, 0x01	; 1
    3f62:	18 16       	cp	r1, r24
    3f64:	19 06       	cpc	r1, r25
    3f66:	0c f0       	brlt	.+2      	; 0x3f6a <_ZNK6StringgtERKS_+0xe>
    3f68:	20 e0       	ldi	r18, 0x00	; 0
}
    3f6a:	82 2f       	mov	r24, r18
    3f6c:	08 95       	ret

00003f6e <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3f6e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZNK6String9compareToERKS_>
    3f72:	21 e0       	ldi	r18, 0x01	; 1
    3f74:	18 16       	cp	r1, r24
    3f76:	19 06       	cpc	r1, r25
    3f78:	0c f4       	brge	.+2      	; 0x3f7c <_ZNK6StringleERKS_+0xe>
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
}
    3f7c:	82 2f       	mov	r24, r18
    3f7e:	08 95       	ret

00003f80 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3f80:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZNK6String9compareToERKS_>
    3f84:	89 2f       	mov	r24, r25
    3f86:	80 95       	com	r24
}
    3f88:	88 1f       	adc	r24, r24
    3f8a:	88 27       	eor	r24, r24
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	08 95       	ret

00003f90 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    3fa0:	86 17       	cp	r24, r22
    3fa2:	97 07       	cpc	r25, r23
    3fa4:	29 f1       	breq	.+74     	; 0x3ff0 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3fa6:	84 81       	ldd	r24, Z+4	; 0x04
    3fa8:	95 81       	ldd	r25, Z+5	; 0x05
    3faa:	14 96       	adiw	r26, 0x04	; 4
    3fac:	2d 91       	ld	r18, X+
    3fae:	3c 91       	ld	r19, X
    3fb0:	15 97       	sbiw	r26, 0x05	; 5
    3fb2:	82 17       	cp	r24, r18
    3fb4:	93 07       	cpc	r25, r19
    3fb6:	f1 f4       	brne	.+60     	; 0x3ff4 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	f1 f0       	breq	.+60     	; 0x3ff8 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    3fbc:	00 81       	ld	r16, Z
    3fbe:	11 81       	ldd	r17, Z+1	; 0x01
    3fc0:	ed 90       	ld	r14, X+
    3fc2:	fc 90       	ld	r15, X
    3fc4:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3fc6:	0d c0       	rjmp	.+26     	; 0x3fe2 <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <tolower>
    3fce:	ec 01       	movw	r28, r24
    3fd0:	f7 01       	movw	r30, r14
    3fd2:	81 91       	ld	r24, Z+
    3fd4:	7f 01       	movw	r14, r30
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <tolower>
    3fdc:	c8 17       	cp	r28, r24
    3fde:	d9 07       	cpc	r29, r25
    3fe0:	69 f4       	brne	.+26     	; 0x3ffc <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	81 91       	ld	r24, Z+
    3fe6:	8f 01       	movw	r16, r30
    3fe8:	88 23       	and	r24, r24
    3fea:	71 f7       	brne	.-36     	; 0x3fc8 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	07 c0       	rjmp	.+14     	; 0x3ffe <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	05 c0       	rjmp	.+10     	; 0x3ffe <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	03 c0       	rjmp	.+6      	; 0x3ffe <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	01 c0       	rjmp	.+2      	; 0x3ffe <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	08 95       	ret

0000400c <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    400c:	fc 01       	movw	r30, r24
    400e:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    4010:	14 96       	adiw	r26, 0x04	; 4
    4012:	2d 91       	ld	r18, X+
    4014:	3c 91       	ld	r19, X
    4016:	15 97       	sbiw	r26, 0x05	; 5
    4018:	84 81       	ldd	r24, Z+4	; 0x04
    401a:	95 81       	ldd	r25, Z+5	; 0x05
    401c:	82 1b       	sub	r24, r18
    401e:	93 0b       	sbc	r25, r19
    4020:	84 17       	cp	r24, r20
    4022:	95 07       	cpc	r25, r21
    4024:	b8 f0       	brcs	.+46     	; 0x4054 <_ZNK6String10startsWithERKS_j+0x48>
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	a9 f0       	breq	.+42     	; 0x4058 <_ZNK6String10startsWithERKS_j+0x4c>
    402e:	6d 91       	ld	r22, X+
    4030:	7c 91       	ld	r23, X
    4032:	11 97       	sbiw	r26, 0x01	; 1
    4034:	61 15       	cp	r22, r1
    4036:	71 05       	cpc	r23, r1
    4038:	89 f0       	breq	.+34     	; 0x405c <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    403a:	84 0f       	add	r24, r20
    403c:	95 1f       	adc	r25, r21
    403e:	a9 01       	movw	r20, r18
    4040:	0e 94 29 37 	call	0x6e52	; 0x6e52 <strncmp>
    4044:	28 2f       	mov	r18, r24
    4046:	39 2f       	mov	r19, r25
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	21 15       	cp	r18, r1
    404c:	31 05       	cpc	r19, r1
    404e:	39 f0       	breq	.+14     	; 0x405e <_ZNK6String10startsWithERKS_j+0x52>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	08 95       	ret
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	08 95       	ret
    405c:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    405e:	08 95       	ret

00004060 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    4060:	fc 01       	movw	r30, r24
    4062:	44 81       	ldd	r20, Z+4	; 0x04
    4064:	55 81       	ldd	r21, Z+5	; 0x05
    4066:	fb 01       	movw	r30, r22
    4068:	24 81       	ldd	r18, Z+4	; 0x04
    406a:	35 81       	ldd	r19, Z+5	; 0x05
    406c:	42 17       	cp	r20, r18
    406e:	53 07       	cpc	r21, r19
    4070:	28 f0       	brcs	.+10     	; 0x407c <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    4072:	40 e0       	ldi	r20, 0x00	; 0
    4074:	50 e0       	ldi	r21, 0x00	; 0
    4076:	0e 94 06 20 	call	0x400c	; 0x400c <_ZNK6String10startsWithERKS_j>
    407a:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    407c:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    407e:	08 95       	ret

00004080 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    4080:	fc 01       	movw	r30, r24
    4082:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    4084:	44 81       	ldd	r20, Z+4	; 0x04
    4086:	55 81       	ldd	r21, Z+5	; 0x05
    4088:	14 96       	adiw	r26, 0x04	; 4
    408a:	2d 91       	ld	r18, X+
    408c:	3c 91       	ld	r19, X
    408e:	15 97       	sbiw	r26, 0x05	; 5
    4090:	42 17       	cp	r20, r18
    4092:	53 07       	cpc	r21, r19
    4094:	c0 f0       	brcs	.+48     	; 0x40c6 <_ZNK6String8endsWithERKS_+0x46>
    4096:	80 81       	ld	r24, Z
    4098:	91 81       	ldd	r25, Z+1	; 0x01
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	b1 f0       	breq	.+44     	; 0x40ca <_ZNK6String8endsWithERKS_+0x4a>
    409e:	6d 91       	ld	r22, X+
    40a0:	7c 91       	ld	r23, X
    40a2:	11 97       	sbiw	r26, 0x01	; 1
    40a4:	61 15       	cp	r22, r1
    40a6:	71 05       	cpc	r23, r1
    40a8:	91 f0       	breq	.+36     	; 0x40ce <_ZNK6String8endsWithERKS_+0x4e>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    40aa:	42 1b       	sub	r20, r18
    40ac:	53 0b       	sbc	r21, r19
    40ae:	84 0f       	add	r24, r20
    40b0:	95 1f       	adc	r25, r21
    40b2:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcmp>
    40b6:	28 2f       	mov	r18, r24
    40b8:	39 2f       	mov	r19, r25
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	21 15       	cp	r18, r1
    40be:	31 05       	cpc	r19, r1
    40c0:	39 f0       	breq	.+14     	; 0x40d0 <_ZNK6String8endsWithERKS_+0x50>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	08 95       	ret
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	08 95       	ret
    40ce:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    40d0:	08 95       	ret

000040d2 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    40d2:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    40d4:	84 81       	ldd	r24, Z+4	; 0x04
    40d6:	95 81       	ldd	r25, Z+5	; 0x05
    40d8:	68 17       	cp	r22, r24
    40da:	79 07       	cpc	r23, r25
    40dc:	30 f4       	brcc	.+12     	; 0x40ea <_ZN6String9setCharAtEjc+0x18>
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	68 0f       	add	r22, r24
    40e4:	79 1f       	adc	r23, r25
    40e6:	fb 01       	movw	r30, r22
    40e8:	40 83       	st	Z, r20
    40ea:	08 95       	ret

000040ec <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    40ec:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    40ee:	84 81       	ldd	r24, Z+4	; 0x04
    40f0:	95 81       	ldd	r25, Z+5	; 0x05
    40f2:	68 17       	cp	r22, r24
    40f4:	79 07       	cpc	r23, r25
    40f6:	20 f4       	brcc	.+8      	; 0x4100 <_ZN6StringixEj+0x14>
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	00 97       	sbiw	r24, 0x00	; 0
    40fe:	29 f4       	brne	.+10     	; 0x410a <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    4100:	10 92 5f 05 	sts	0x055F, r1
		return dummy_writable_char;
    4104:	6f e5       	ldi	r22, 0x5F	; 95
    4106:	75 e0       	ldi	r23, 0x05	; 5
    4108:	02 c0       	rjmp	.+4      	; 0x410e <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    410a:	68 0f       	add	r22, r24
    410c:	79 1f       	adc	r23, r25
}
    410e:	86 2f       	mov	r24, r22
    4110:	97 2f       	mov	r25, r23
    4112:	08 95       	ret

00004114 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    4114:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    4116:	84 81       	ldd	r24, Z+4	; 0x04
    4118:	95 81       	ldd	r25, Z+5	; 0x05
    411a:	68 17       	cp	r22, r24
    411c:	79 07       	cpc	r23, r25
    411e:	48 f4       	brcc	.+18     	; 0x4132 <_ZNK6StringixEj+0x1e>
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	00 97       	sbiw	r24, 0x00	; 0
    4126:	39 f0       	breq	.+14     	; 0x4136 <_ZNK6StringixEj+0x22>
	return buffer[index];
    4128:	68 0f       	add	r22, r24
    412a:	79 1f       	adc	r23, r25
    412c:	fb 01       	movw	r30, r22
    412e:	80 81       	ld	r24, Z
    4130:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	08 95       	ret
    4136:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    4138:	08 95       	ret

0000413a <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    413a:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZNK6StringixEj>
}
    413e:	08 95       	ret

00004140 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    4140:	0f 93       	push	r16
    4142:	1f 93       	push	r17
    4144:	cf 93       	push	r28
    4146:	df 93       	push	r29
    4148:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    414a:	41 15       	cp	r20, r1
    414c:	51 05       	cpc	r21, r1
    414e:	f1 f0       	breq	.+60     	; 0x418c <_ZNK6String8getBytesEPhjj+0x4c>
    4150:	20 97       	sbiw	r28, 0x00	; 0
    4152:	e1 f0       	breq	.+56     	; 0x418c <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    4154:	fc 01       	movw	r30, r24
    4156:	04 81       	ldd	r16, Z+4	; 0x04
    4158:	15 81       	ldd	r17, Z+5	; 0x05
    415a:	20 17       	cp	r18, r16
    415c:	31 07       	cpc	r19, r17
    415e:	10 f0       	brcs	.+4      	; 0x4164 <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    4160:	18 82       	st	Y, r1
		return;
    4162:	14 c0       	rjmp	.+40     	; 0x418c <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    4164:	41 50       	subi	r20, 0x01	; 1
    4166:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    4168:	02 1b       	sub	r16, r18
    416a:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    416c:	40 17       	cp	r20, r16
    416e:	51 07       	cpc	r21, r17
    4170:	08 f4       	brcc	.+2      	; 0x4174 <_ZNK6String8getBytesEPhjj+0x34>
    4172:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    4174:	fc 01       	movw	r30, r24
    4176:	60 81       	ld	r22, Z
    4178:	71 81       	ldd	r23, Z+1	; 0x01
    417a:	62 0f       	add	r22, r18
    417c:	73 1f       	adc	r23, r19
    417e:	ce 01       	movw	r24, r28
    4180:	a8 01       	movw	r20, r16
    4182:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <strncpy>
	buf[n] = 0;
    4186:	c0 0f       	add	r28, r16
    4188:	d1 1f       	adc	r29, r17
    418a:	18 82       	st	Y, r1
}
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    419c:	84 81       	ldd	r24, Z+4	; 0x04
    419e:	95 81       	ldd	r25, Z+5	; 0x05
    41a0:	48 17       	cp	r20, r24
    41a2:	59 07       	cpc	r21, r25
    41a4:	70 f4       	brcc	.+28     	; 0x41c2 <_ZNK6String7indexOfEcj+0x2c>
	const char* temp = strchr(buffer + fromIndex, ch);
    41a6:	c0 81       	ld	r28, Z
    41a8:	d1 81       	ldd	r29, Z+1	; 0x01
    41aa:	ce 01       	movw	r24, r28
    41ac:	84 0f       	add	r24, r20
    41ae:	95 1f       	adc	r25, r21
    41b0:	70 e0       	ldi	r23, 0x00	; 0
    41b2:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <strchr>
	if (temp == NULL) return -1;
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	39 f0       	breq	.+14     	; 0x41c8 <_ZNK6String7indexOfEcj+0x32>
	return temp - buffer;
    41ba:	9c 01       	movw	r18, r24
    41bc:	2c 1b       	sub	r18, r28
    41be:	3d 0b       	sbc	r19, r29
    41c0:	05 c0       	rjmp	.+10     	; 0x41cc <_ZNK6String7indexOfEcj+0x36>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    41c2:	2f ef       	ldi	r18, 0xFF	; 255
    41c4:	3f ef       	ldi	r19, 0xFF	; 255
    41c6:	02 c0       	rjmp	.+4      	; 0x41cc <_ZNK6String7indexOfEcj+0x36>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    41c8:	2f ef       	ldi	r18, 0xFF	; 255
    41ca:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    41cc:	82 2f       	mov	r24, r18
    41ce:	93 2f       	mov	r25, r19
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret

000041d6 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZNK6String7indexOfEcj>
}
    41de:	08 95       	ret

000041e0 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    41e6:	84 81       	ldd	r24, Z+4	; 0x04
    41e8:	95 81       	ldd	r25, Z+5	; 0x05
    41ea:	48 17       	cp	r20, r24
    41ec:	59 07       	cpc	r21, r25
    41ee:	80 f4       	brcc	.+32     	; 0x4210 <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    41f0:	c0 81       	ld	r28, Z
    41f2:	d1 81       	ldd	r29, Z+1	; 0x01
    41f4:	fb 01       	movw	r30, r22
    41f6:	60 81       	ld	r22, Z
    41f8:	71 81       	ldd	r23, Z+1	; 0x01
    41fa:	ce 01       	movw	r24, r28
    41fc:	84 0f       	add	r24, r20
    41fe:	95 1f       	adc	r25, r21
    4200:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <strstr>
	if (found == NULL) return -1;
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	39 f0       	breq	.+14     	; 0x4216 <_ZNK6String7indexOfERKS_j+0x36>
	return found - buffer;
    4208:	9c 01       	movw	r18, r24
    420a:	2c 1b       	sub	r18, r28
    420c:	3d 0b       	sbc	r19, r29
    420e:	05 c0       	rjmp	.+10     	; 0x421a <_ZNK6String7indexOfERKS_j+0x3a>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    4210:	2f ef       	ldi	r18, 0xFF	; 255
    4212:	3f ef       	ldi	r19, 0xFF	; 255
    4214:	02 c0       	rjmp	.+4      	; 0x421a <_ZNK6String7indexOfERKS_j+0x3a>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    4216:	2f ef       	ldi	r18, 0xFF	; 255
    4218:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    421a:	82 2f       	mov	r24, r18
    421c:	93 2f       	mov	r25, r19
    421e:	df 91       	pop	r29
    4220:	cf 91       	pop	r28
    4222:	08 95       	ret

00004224 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    4224:	40 e0       	ldi	r20, 0x00	; 0
    4226:	50 e0       	ldi	r21, 0x00	; 0
    4228:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_ZNK6String7indexOfERKS_j>
}
    422c:	08 95       	ret

0000422e <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    422e:	df 92       	push	r13
    4230:	ef 92       	push	r14
    4232:	ff 92       	push	r15
    4234:	0f 93       	push	r16
    4236:	1f 93       	push	r17
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	ec 01       	movw	r28, r24
	if (fromIndex >= len) return -1;
    423e:	8c 81       	ldd	r24, Y+4	; 0x04
    4240:	9d 81       	ldd	r25, Y+5	; 0x05
    4242:	48 17       	cp	r20, r24
    4244:	59 07       	cpc	r21, r25
    4246:	e8 f4       	brcc	.+58     	; 0x4282 <_ZNK6String11lastIndexOfEcj+0x54>
	char tempchar = buffer[fromIndex + 1];
    4248:	7a 01       	movw	r14, r20
    424a:	08 94       	sec
    424c:	e1 1c       	adc	r14, r1
    424e:	f1 1c       	adc	r15, r1
    4250:	e8 81       	ld	r30, Y
    4252:	f9 81       	ldd	r31, Y+1	; 0x01
    4254:	ee 0d       	add	r30, r14
    4256:	ff 1d       	adc	r31, r15
    4258:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    425a:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    425c:	08 81       	ld	r16, Y
    425e:	19 81       	ldd	r17, Y+1	; 0x01
    4260:	c8 01       	movw	r24, r16
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <strrchr>
	buffer[fromIndex + 1] = tempchar;
    4268:	0e 0d       	add	r16, r14
    426a:	1f 1d       	adc	r17, r15
    426c:	f8 01       	movw	r30, r16
    426e:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    4270:	00 97       	sbiw	r24, 0x00	; 0
    4272:	51 f0       	breq	.+20     	; 0x4288 <_ZNK6String11lastIndexOfEcj+0x5a>
	return temp - buffer;
    4274:	28 81       	ld	r18, Y
    4276:	39 81       	ldd	r19, Y+1	; 0x01
    4278:	ac 01       	movw	r20, r24
    427a:	42 1b       	sub	r20, r18
    427c:	53 0b       	sbc	r21, r19
    427e:	9a 01       	movw	r18, r20
    4280:	05 c0       	rjmp	.+10     	; 0x428c <_ZNK6String11lastIndexOfEcj+0x5e>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    4282:	2f ef       	ldi	r18, 0xFF	; 255
    4284:	3f ef       	ldi	r19, 0xFF	; 255
    4286:	02 c0       	rjmp	.+4      	; 0x428c <_ZNK6String11lastIndexOfEcj+0x5e>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    4288:	2f ef       	ldi	r18, 0xFF	; 255
    428a:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    428c:	82 2f       	mov	r24, r18
    428e:	93 2f       	mov	r25, r19
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	df 90       	pop	r13
    429e:	08 95       	ret

000042a0 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    42a0:	fc 01       	movw	r30, r24
    42a2:	44 81       	ldd	r20, Z+4	; 0x04
    42a4:	55 81       	ldd	r21, Z+5	; 0x05
    42a6:	41 50       	subi	r20, 0x01	; 1
    42a8:	50 40       	sbci	r21, 0x00	; 0
    42aa:	0e 94 17 21 	call	0x422e	; 0x422e <_ZNK6String11lastIndexOfEcj>
}
    42ae:	08 95       	ret

000042b0 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    42b0:	af 92       	push	r10
    42b2:	bf 92       	push	r11
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	8b 01       	movw	r16, r22
    42c6:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    42c8:	fb 01       	movw	r30, r22
    42ca:	24 81       	ldd	r18, Z+4	; 0x04
    42cc:	35 81       	ldd	r19, Z+5	; 0x05
    42ce:	21 15       	cp	r18, r1
    42d0:	31 05       	cpc	r19, r1
    42d2:	79 f1       	breq	.+94     	; 0x4332 <_ZNK6String11lastIndexOfERKS_j+0x82>
    42d4:	fc 01       	movw	r30, r24
    42d6:	44 81       	ldd	r20, Z+4	; 0x04
    42d8:	55 81       	ldd	r21, Z+5	; 0x05
    42da:	41 15       	cp	r20, r1
    42dc:	51 05       	cpc	r21, r1
    42de:	61 f1       	breq	.+88     	; 0x4338 <_ZNK6String11lastIndexOfERKS_j+0x88>
    42e0:	42 17       	cp	r20, r18
    42e2:	53 07       	cpc	r21, r19
    42e4:	60 f1       	brcs	.+88     	; 0x433e <_ZNK6String11lastIndexOfERKS_j+0x8e>
	if (fromIndex >= len) fromIndex = len - 1;
    42e6:	e4 16       	cp	r14, r20
    42e8:	f5 06       	cpc	r15, r21
    42ea:	20 f0       	brcs	.+8      	; 0x42f4 <_ZNK6String11lastIndexOfERKS_j+0x44>
    42ec:	7a 01       	movw	r14, r20
    42ee:	08 94       	sec
    42f0:	e1 08       	sbc	r14, r1
    42f2:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    42f4:	fc 01       	movw	r30, r24
    42f6:	c0 80       	ld	r12, Z
    42f8:	d1 80       	ldd	r13, Z+1	; 0x01
    42fa:	56 01       	movw	r10, r12
    42fc:	ae 0c       	add	r10, r14
    42fe:	bf 1c       	adc	r11, r15
    4300:	ac 14       	cp	r10, r12
    4302:	bd 04       	cpc	r11, r13
    4304:	f8 f0       	brcs	.+62     	; 0x4344 <_ZNK6String11lastIndexOfERKS_j+0x94>
    4306:	c6 01       	movw	r24, r12

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    4308:	cf ef       	ldi	r28, 0xFF	; 255
    430a:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    430c:	f8 01       	movw	r30, r16
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <strstr>
		if (!p) break;
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	b9 f0       	breq	.+46     	; 0x4348 <_ZNK6String11lastIndexOfERKS_j+0x98>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    431a:	9c 01       	movw	r18, r24
    431c:	2c 19       	sub	r18, r12
    431e:	3d 09       	sbc	r19, r13
    4320:	e2 16       	cp	r14, r18
    4322:	f3 06       	cpc	r15, r19
    4324:	08 f0       	brcs	.+2      	; 0x4328 <_ZNK6String11lastIndexOfERKS_j+0x78>
    4326:	e9 01       	movw	r28, r18
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    4328:	01 96       	adiw	r24, 0x01	; 1
    432a:	a8 16       	cp	r10, r24
    432c:	b9 06       	cpc	r11, r25
    432e:	70 f7       	brcc	.-36     	; 0x430c <_ZNK6String11lastIndexOfERKS_j+0x5c>
    4330:	0b c0       	rjmp	.+22     	; 0x4348 <_ZNK6String11lastIndexOfERKS_j+0x98>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    4332:	cf ef       	ldi	r28, 0xFF	; 255
    4334:	df ef       	ldi	r29, 0xFF	; 255
    4336:	08 c0       	rjmp	.+16     	; 0x4348 <_ZNK6String11lastIndexOfERKS_j+0x98>
    4338:	cf ef       	ldi	r28, 0xFF	; 255
    433a:	df ef       	ldi	r29, 0xFF	; 255
    433c:	05 c0       	rjmp	.+10     	; 0x4348 <_ZNK6String11lastIndexOfERKS_j+0x98>
    433e:	cf ef       	ldi	r28, 0xFF	; 255
    4340:	df ef       	ldi	r29, 0xFF	; 255
    4342:	02 c0       	rjmp	.+4      	; 0x4348 <_ZNK6String11lastIndexOfERKS_j+0x98>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    4344:	cf ef       	ldi	r28, 0xFF	; 255
    4346:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    4348:	7e 01       	movw	r14, r28
    434a:	8c 2f       	mov	r24, r28
    434c:	9f 2d       	mov	r25, r15
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
    435a:	df 90       	pop	r13
    435c:	cf 90       	pop	r12
    435e:	bf 90       	pop	r11
    4360:	af 90       	pop	r10
    4362:	08 95       	ret

00004364 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    4364:	fc 01       	movw	r30, r24
    4366:	44 81       	ldd	r20, Z+4	; 0x04
    4368:	55 81       	ldd	r21, Z+5	; 0x05
    436a:	fb 01       	movw	r30, r22
    436c:	24 81       	ldd	r18, Z+4	; 0x04
    436e:	35 81       	ldd	r19, Z+5	; 0x05
    4370:	42 1b       	sub	r20, r18
    4372:	53 0b       	sbc	r21, r19
    4374:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZNK6String11lastIndexOfERKS_j>
}
    4378:	08 95       	ret

0000437a <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    437a:	af 92       	push	r10
    437c:	bf 92       	push	r11
    437e:	cf 92       	push	r12
    4380:	df 92       	push	r13
    4382:	ef 92       	push	r14
    4384:	ff 92       	push	r15
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	08 2f       	mov	r16, r24
    4390:	19 2f       	mov	r17, r25
    4392:	7b 01       	movw	r14, r22
    4394:	ea 01       	movw	r28, r20
    4396:	69 01       	movw	r12, r18
	if (left > right) {
    4398:	24 17       	cp	r18, r20
    439a:	35 07       	cpc	r19, r21
    439c:	20 f4       	brcc	.+8      	; 0x43a6 <_ZNK6String9substringEjj+0x2c>
    439e:	5a 01       	movw	r10, r20
		unsigned int temp = right;
		right = left;
		left = temp;
    43a0:	e6 01       	movw	r28, r12

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    43a2:	c4 2e       	mov	r12, r20
    43a4:	db 2c       	mov	r13, r11
		left = temp;
	}
	String out;
    43a6:	80 2f       	mov	r24, r16
    43a8:	91 2f       	mov	r25, r17
    43aa:	6b e4       	ldi	r22, 0x4B	; 75
    43ac:	72 e0       	ldi	r23, 0x02	; 2
    43ae:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <_ZN6StringC1EPKc>
	if (left > len) return out;
    43b2:	d7 01       	movw	r26, r14
    43b4:	14 96       	adiw	r26, 0x04	; 4
    43b6:	8d 91       	ld	r24, X+
    43b8:	9c 91       	ld	r25, X
    43ba:	15 97       	sbiw	r26, 0x05	; 5
    43bc:	8c 17       	cp	r24, r28
    43be:	9d 07       	cpc	r25, r29
    43c0:	d8 f0       	brcs	.+54     	; 0x43f8 <_ZNK6String9substringEjj+0x7e>
    43c2:	8c 15       	cp	r24, r12
    43c4:	9d 05       	cpc	r25, r13
    43c6:	08 f4       	brcc	.+2      	; 0x43ca <_ZNK6String9substringEjj+0x50>
    43c8:	6c 01       	movw	r12, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    43ca:	d7 01       	movw	r26, r14
    43cc:	ed 91       	ld	r30, X+
    43ce:	fc 91       	ld	r31, X
    43d0:	11 97       	sbiw	r26, 0x01	; 1
    43d2:	ec 0d       	add	r30, r12
    43d4:	fd 1d       	adc	r31, r13
    43d6:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    43d8:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    43da:	6d 91       	ld	r22, X+
    43dc:	7c 91       	ld	r23, X
    43de:	6c 0f       	add	r22, r28
    43e0:	7d 1f       	adc	r23, r29
    43e2:	80 2f       	mov	r24, r16
    43e4:	91 2f       	mov	r25, r17
    43e6:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    43ea:	f7 01       	movw	r30, r14
    43ec:	80 81       	ld	r24, Z
    43ee:	91 81       	ldd	r25, Z+1	; 0x01
    43f0:	c8 0e       	add	r12, r24
    43f2:	d9 1e       	adc	r13, r25
    43f4:	d6 01       	movw	r26, r12
    43f6:	bc 92       	st	X, r11
	return out;
}
    43f8:	80 2f       	mov	r24, r16
    43fa:	91 2f       	mov	r25, r17
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
    4408:	df 90       	pop	r13
    440a:	cf 90       	pop	r12
    440c:	bf 90       	pop	r11
    440e:	af 90       	pop	r10
    4410:	08 95       	ret

00004412 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    4412:	dc 01       	movw	r26, r24
    4414:	ed 91       	ld	r30, X+
    4416:	fc 91       	ld	r31, X
    4418:	11 97       	sbiw	r26, 0x01	; 1
    441a:	30 97       	sbiw	r30, 0x00	; 0
    441c:	51 f0       	breq	.+20     	; 0x4432 <_ZN6String7replaceEcc+0x20>
	for (char *p = buffer; *p; p++) {
    441e:	80 81       	ld	r24, Z
    4420:	88 23       	and	r24, r24
    4422:	39 f0       	breq	.+14     	; 0x4432 <_ZN6String7replaceEcc+0x20>
		if (*p == find) *p = replace;
    4424:	86 17       	cp	r24, r22
    4426:	09 f4       	brne	.+2      	; 0x442a <_ZN6String7replaceEcc+0x18>
    4428:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    442a:	31 96       	adiw	r30, 0x01	; 1
    442c:	80 81       	ld	r24, Z
    442e:	88 23       	and	r24, r24
    4430:	c9 f7       	brne	.-14     	; 0x4424 <_ZN6String7replaceEcc+0x12>
    4432:	08 95       	ret

00004434 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    4434:	2f 92       	push	r2
    4436:	3f 92       	push	r3
    4438:	4f 92       	push	r4
    443a:	5f 92       	push	r5
    443c:	6f 92       	push	r6
    443e:	7f 92       	push	r7
    4440:	8f 92       	push	r8
    4442:	9f 92       	push	r9
    4444:	af 92       	push	r10
    4446:	bf 92       	push	r11
    4448:	cf 92       	push	r12
    444a:	df 92       	push	r13
    444c:	ef 92       	push	r14
    444e:	ff 92       	push	r15
    4450:	0f 93       	push	r16
    4452:	1f 93       	push	r17
    4454:	cf 93       	push	r28
    4456:	df 93       	push	r29
    4458:	5c 01       	movw	r10, r24
    445a:	6b 01       	movw	r12, r22
    445c:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    445e:	fc 01       	movw	r30, r24
    4460:	44 80       	ldd	r4, Z+4	; 0x04
    4462:	55 80       	ldd	r5, Z+5	; 0x05
    4464:	41 14       	cp	r4, r1
    4466:	51 04       	cpc	r5, r1
    4468:	09 f4       	brne	.+2      	; 0x446c <_ZN6String7replaceERKS_S1_+0x38>
    446a:	cf c0       	rjmp	.+414    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
    446c:	fb 01       	movw	r30, r22
    446e:	84 80       	ldd	r8, Z+4	; 0x04
    4470:	95 80       	ldd	r9, Z+5	; 0x05
    4472:	81 14       	cp	r8, r1
    4474:	91 04       	cpc	r9, r1
    4476:	09 f4       	brne	.+2      	; 0x447a <_ZN6String7replaceERKS_S1_+0x46>
    4478:	c8 c0       	rjmp	.+400    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
	int diff = replace.len - find.len;
    447a:	fa 01       	movw	r30, r20
    447c:	64 80       	ldd	r6, Z+4	; 0x04
    447e:	75 80       	ldd	r7, Z+5	; 0x05
    4480:	68 18       	sub	r6, r8
    4482:	79 08       	sbc	r7, r9
    4484:	c3 01       	movw	r24, r6
	char *readFrom = buffer;
    4486:	f5 01       	movw	r30, r10
    4488:	00 81       	ld	r16, Z
    448a:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    448c:	61 14       	cp	r6, r1
    448e:	71 04       	cpc	r7, r1
    4490:	81 f0       	breq	.+32     	; 0x44b2 <_ZN6String7replaceERKS_S1_+0x7e>
    4492:	19 c0       	rjmp	.+50     	; 0x44c6 <_ZN6String7replaceERKS_S1_+0x92>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    4494:	f7 01       	movw	r30, r14
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	44 81       	ldd	r20, Z+4	; 0x04
    449c:	55 81       	ldd	r21, Z+5	; 0x05
    449e:	1e 01       	movw	r2, r28
    44a0:	8c 2f       	mov	r24, r28
    44a2:	93 2d       	mov	r25, r3
    44a4:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
			readFrom = foundAt + replace.len;
    44a8:	f7 01       	movw	r30, r14
    44aa:	04 81       	ldd	r16, Z+4	; 0x04
    44ac:	15 81       	ldd	r17, Z+5	; 0x05
    44ae:	0c 0f       	add	r16, r28
    44b0:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    44b2:	f6 01       	movw	r30, r12
    44b4:	60 81       	ld	r22, Z
    44b6:	71 81       	ldd	r23, Z+1	; 0x01
    44b8:	c8 01       	movw	r24, r16
    44ba:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <strstr>
    44be:	ec 01       	movw	r28, r24
    44c0:	00 97       	sbiw	r24, 0x00	; 0
    44c2:	41 f7       	brne	.-48     	; 0x4494 <_ZN6String7replaceERKS_S1_+0x60>
    44c4:	a2 c0       	rjmp	.+324    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    44c6:	99 23       	and	r25, r25
    44c8:	64 f1       	brlt	.+88     	; 0x4522 <_ZN6String7replaceERKS_S1_+0xee>
    44ca:	e2 01       	movw	r28, r4
    44cc:	3e c0       	rjmp	.+124    	; 0x454a <_ZN6String7replaceERKS_S1_+0x116>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    44ce:	e4 01       	movw	r28, r8
    44d0:	c0 1b       	sub	r28, r16
    44d2:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    44d4:	84 2d       	mov	r24, r4
    44d6:	95 2d       	mov	r25, r5
    44d8:	60 2f       	mov	r22, r16
    44da:	71 2f       	mov	r23, r17
    44dc:	1e 01       	movw	r2, r28
    44de:	4c 2f       	mov	r20, r28
    44e0:	53 2d       	mov	r21, r3
    44e2:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
			writeTo += n;
    44e6:	c4 0d       	add	r28, r4
    44e8:	d5 1d       	adc	r29, r5
			memcpy(writeTo, replace.buffer, replace.len);
    44ea:	f7 01       	movw	r30, r14
    44ec:	60 81       	ld	r22, Z
    44ee:	71 81       	ldd	r23, Z+1	; 0x01
    44f0:	44 81       	ldd	r20, Z+4	; 0x04
    44f2:	55 81       	ldd	r21, Z+5	; 0x05
    44f4:	1e 01       	movw	r2, r28
    44f6:	8c 2f       	mov	r24, r28
    44f8:	93 2d       	mov	r25, r3
    44fa:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
			writeTo += replace.len;
    44fe:	f7 01       	movw	r30, r14
    4500:	44 80       	ldd	r4, Z+4	; 0x04
    4502:	55 80       	ldd	r5, Z+5	; 0x05
    4504:	4c 0e       	add	r4, r28
    4506:	5d 1e       	adc	r5, r29
			readFrom = foundAt + find.len;
    4508:	f6 01       	movw	r30, r12
    450a:	04 81       	ldd	r16, Z+4	; 0x04
    450c:	15 81       	ldd	r17, Z+5	; 0x05
    450e:	08 0d       	add	r16, r8
    4510:	19 1d       	adc	r17, r9
			len += diff;
    4512:	f5 01       	movw	r30, r10
    4514:	84 81       	ldd	r24, Z+4	; 0x04
    4516:	95 81       	ldd	r25, Z+5	; 0x05
    4518:	86 0d       	add	r24, r6
    451a:	97 1d       	adc	r25, r7
    451c:	95 83       	std	Z+5, r25	; 0x05
    451e:	84 83       	std	Z+4, r24	; 0x04
    4520:	01 c0       	rjmp	.+2      	; 0x4524 <_ZN6String7replaceERKS_S1_+0xf0>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    4522:	28 01       	movw	r4, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    4524:	f6 01       	movw	r30, r12
    4526:	60 81       	ld	r22, Z
    4528:	71 81       	ldd	r23, Z+1	; 0x01
    452a:	c8 01       	movw	r24, r16
    452c:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <strstr>
    4530:	4c 01       	movw	r8, r24
    4532:	00 97       	sbiw	r24, 0x00	; 0
    4534:	61 f6       	brne	.-104    	; 0x44ce <_ZN6String7replaceERKS_S1_+0x9a>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    4536:	c2 01       	movw	r24, r4
    4538:	b8 01       	movw	r22, r16
    453a:	0e 94 22 37 	call	0x6e44	; 0x6e44 <strcpy>
    453e:	65 c0       	rjmp	.+202    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    4540:	8c 01       	movw	r16, r24
    4542:	08 0d       	add	r16, r8
    4544:	19 1d       	adc	r17, r9
			size += diff;
    4546:	c6 0d       	add	r28, r6
    4548:	d7 1d       	adc	r29, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    454a:	f6 01       	movw	r30, r12
    454c:	60 81       	ld	r22, Z
    454e:	71 81       	ldd	r23, Z+1	; 0x01
    4550:	c8 01       	movw	r24, r16
    4552:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <strstr>
    4556:	00 97       	sbiw	r24, 0x00	; 0
    4558:	99 f7       	brne	.-26     	; 0x4540 <_ZN6String7replaceERKS_S1_+0x10c>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    455a:	c4 15       	cp	r28, r4
    455c:	d5 05       	cpc	r29, r5
    455e:	09 f4       	brne	.+2      	; 0x4562 <_ZN6String7replaceERKS_S1_+0x12e>
    4560:	54 c0       	rjmp	.+168    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    4562:	f5 01       	movw	r30, r10
    4564:	82 81       	ldd	r24, Z+2	; 0x02
    4566:	93 81       	ldd	r25, Z+3	; 0x03
    4568:	8c 17       	cp	r24, r28
    456a:	9d 07       	cpc	r25, r29
    456c:	08 f0       	brcs	.+2      	; 0x4570 <_ZN6String7replaceERKS_S1_+0x13c>
    456e:	47 c0       	rjmp	.+142    	; 0x45fe <_ZN6String7replaceERKS_S1_+0x1ca>
    4570:	c5 01       	movw	r24, r10
    4572:	be 01       	movw	r22, r28
    4574:	0e 94 ff 19 	call	0x33fe	; 0x33fe <_ZN6String12changeBufferEj>
    4578:	88 23       	and	r24, r24
    457a:	09 f4       	brne	.+2      	; 0x457e <_ZN6String7replaceERKS_S1_+0x14a>
    457c:	46 c0       	rjmp	.+140    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
    457e:	3f c0       	rjmp	.+126    	; 0x45fe <_ZN6String7replaceERKS_S1_+0x1ca>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    4580:	33 23       	and	r19, r19
    4582:	0c f4       	brge	.+2      	; 0x4586 <_ZN6String7replaceERKS_S1_+0x152>
    4584:	42 c0       	rjmp	.+132    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
    4586:	c5 01       	movw	r24, r10
    4588:	b6 01       	movw	r22, r12
    458a:	42 2f       	mov	r20, r18
    458c:	53 2f       	mov	r21, r19
    458e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZNK6String11lastIndexOfERKS_j>
    4592:	ec 01       	movw	r28, r24
    4594:	99 23       	and	r25, r25
    4596:	cc f1       	brlt	.+114    	; 0x460a <_ZN6String7replaceERKS_S1_+0x1d6>
			readFrom = buffer + index + find.len;
    4598:	f5 01       	movw	r30, r10
    459a:	60 81       	ld	r22, Z
    459c:	71 81       	ldd	r23, Z+1	; 0x01
    459e:	f6 01       	movw	r30, r12
    45a0:	84 81       	ldd	r24, Z+4	; 0x04
    45a2:	95 81       	ldd	r25, Z+5	; 0x05
    45a4:	8c 0f       	add	r24, r28
    45a6:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    45a8:	68 0f       	add	r22, r24
    45aa:	79 1f       	adc	r23, r25
    45ac:	f5 01       	movw	r30, r10
    45ae:	44 81       	ldd	r20, Z+4	; 0x04
    45b0:	55 81       	ldd	r21, Z+5	; 0x05
    45b2:	48 1b       	sub	r20, r24
    45b4:	59 0b       	sbc	r21, r25
    45b6:	cb 01       	movw	r24, r22
    45b8:	86 0d       	add	r24, r6
    45ba:	97 1d       	adc	r25, r7
    45bc:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <memmove>
			len += diff;
    45c0:	f5 01       	movw	r30, r10
    45c2:	84 81       	ldd	r24, Z+4	; 0x04
    45c4:	95 81       	ldd	r25, Z+5	; 0x05
    45c6:	86 0d       	add	r24, r6
    45c8:	97 1d       	adc	r25, r7
    45ca:	95 83       	std	Z+5, r25	; 0x05
    45cc:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    45ce:	20 81       	ld	r18, Z
    45d0:	31 81       	ldd	r19, Z+1	; 0x01
    45d2:	82 0f       	add	r24, r18
    45d4:	93 1f       	adc	r25, r19
    45d6:	fc 01       	movw	r30, r24
    45d8:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    45da:	f5 01       	movw	r30, r10
    45dc:	20 81       	ld	r18, Z
    45de:	31 81       	ldd	r19, Z+1	; 0x01
    45e0:	2c 0f       	add	r18, r28
    45e2:	3d 1f       	adc	r19, r29
    45e4:	f7 01       	movw	r30, r14
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	44 81       	ldd	r20, Z+4	; 0x04
    45ec:	55 81       	ldd	r21, Z+5	; 0x05
    45ee:	82 2f       	mov	r24, r18
    45f0:	93 2f       	mov	r25, r19
    45f2:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
			index--;
    45f6:	9e 01       	movw	r18, r28
    45f8:	21 50       	subi	r18, 0x01	; 1
    45fa:	30 40       	sbci	r19, 0x00	; 0
    45fc:	c1 cf       	rjmp	.-126    	; 0x4580 <_ZN6String7replaceERKS_S1_+0x14c>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    45fe:	f5 01       	movw	r30, r10
    4600:	24 81       	ldd	r18, Z+4	; 0x04
    4602:	35 81       	ldd	r19, Z+5	; 0x05
    4604:	21 50       	subi	r18, 0x01	; 1
    4606:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    4608:	bb cf       	rjmp	.-138    	; 0x4580 <_ZN6String7replaceERKS_S1_+0x14c>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	9f 90       	pop	r9
    4620:	8f 90       	pop	r8
    4622:	7f 90       	pop	r7
    4624:	6f 90       	pop	r6
    4626:	5f 90       	pop	r5
    4628:	4f 90       	pop	r4
    462a:	3f 90       	pop	r3
    462c:	2f 90       	pop	r2
    462e:	08 95       	ret

00004630 <_ZN6String6removeEjj>:
	if (index >= len) { return; }
	int count = len - index;
	remove(index, count);
}

void String::remove(unsigned int index, unsigned int count){
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
	if (index >= len) { return; }
    4636:	ec 81       	ldd	r30, Y+4	; 0x04
    4638:	fd 81       	ldd	r31, Y+5	; 0x05
    463a:	6e 17       	cp	r22, r30
    463c:	7f 07       	cpc	r23, r31
    463e:	30 f5       	brcc	.+76     	; 0x468c <_ZN6String6removeEjj+0x5c>
	if (count <= 0) { return; }
    4640:	41 15       	cp	r20, r1
    4642:	51 05       	cpc	r21, r1
    4644:	19 f1       	breq	.+70     	; 0x468c <_ZN6String6removeEjj+0x5c>
	if (index + count > len) { count = len - index; }
    4646:	ca 01       	movw	r24, r20
    4648:	86 0f       	add	r24, r22
    464a:	97 1f       	adc	r25, r23
    464c:	e8 17       	cp	r30, r24
    464e:	f9 07       	cpc	r31, r25
    4650:	18 f4       	brcc	.+6      	; 0x4658 <_ZN6String6removeEjj+0x28>
    4652:	af 01       	movw	r20, r30
    4654:	46 1b       	sub	r20, r22
    4656:	57 0b       	sbc	r21, r23
	char *writeTo = buffer + index;
    4658:	88 81       	ld	r24, Y
    465a:	99 81       	ldd	r25, Y+1	; 0x01
	len = len - count;
    465c:	e4 1b       	sub	r30, r20
    465e:	f5 0b       	sbc	r31, r21
    4660:	fd 83       	std	Y+5, r31	; 0x05
    4662:	ec 83       	std	Y+4, r30	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    4664:	9a 01       	movw	r18, r20
    4666:	26 0f       	add	r18, r22
    4668:	37 1f       	adc	r19, r23
    466a:	28 0f       	add	r18, r24
    466c:	39 1f       	adc	r19, r25
    466e:	af 01       	movw	r20, r30
    4670:	46 1b       	sub	r20, r22
    4672:	57 0b       	sbc	r21, r23
    4674:	86 0f       	add	r24, r22
    4676:	97 1f       	adc	r25, r23
    4678:	b9 01       	movw	r22, r18
    467a:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <strncpy>
	buffer[len] = 0;
    467e:	e8 81       	ld	r30, Y
    4680:	f9 81       	ldd	r31, Y+1	; 0x01
    4682:	8c 81       	ldd	r24, Y+4	; 0x04
    4684:	9d 81       	ldd	r25, Y+5	; 0x05
    4686:	e8 0f       	add	r30, r24
    4688:	f9 1f       	adc	r31, r25
    468a:	10 82       	st	Z, r1
}
    468c:	df 91       	pop	r29
    468e:	cf 91       	pop	r28
    4690:	08 95       	ret

00004692 <_ZN6String6removeEj>:
		}
	}
}

void String::remove(unsigned int index){
	if (index >= len) { return; }
    4692:	fc 01       	movw	r30, r24
    4694:	44 81       	ldd	r20, Z+4	; 0x04
    4696:	55 81       	ldd	r21, Z+5	; 0x05
    4698:	64 17       	cp	r22, r20
    469a:	75 07       	cpc	r23, r21
    469c:	20 f4       	brcc	.+8      	; 0x46a6 <_ZN6String6removeEj+0x14>
	int count = len - index;
    469e:	46 1b       	sub	r20, r22
    46a0:	57 0b       	sbc	r21, r23
	remove(index, count);
    46a2:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN6String6removeEjj>
    46a6:	08 95       	ret

000046a8 <_ZN6String11toLowerCaseEv>:
	strncpy(writeTo, buffer + index + count,len - index);
	buffer[len] = 0;
}

void String::toLowerCase(void)
{
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
	if (!buffer) return;
    46ac:	fc 01       	movw	r30, r24
    46ae:	c0 81       	ld	r28, Z
    46b0:	d1 81       	ldd	r29, Z+1	; 0x01
    46b2:	20 97       	sbiw	r28, 0x00	; 0
    46b4:	51 f0       	breq	.+20     	; 0x46ca <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
    46b6:	88 81       	ld	r24, Y
    46b8:	88 23       	and	r24, r24
    46ba:	39 f0       	breq	.+14     	; 0x46ca <_ZN6String11toLowerCaseEv+0x22>
		*p = tolower(*p);
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <tolower>
    46c2:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    46c4:	88 81       	ld	r24, Y
    46c6:	88 23       	and	r24, r24
    46c8:	c9 f7       	brne	.-14     	; 0x46bc <_ZN6String11toLowerCaseEv+0x14>
		*p = tolower(*p);
	}
}
    46ca:	df 91       	pop	r29
    46cc:	cf 91       	pop	r28
    46ce:	08 95       	ret

000046d0 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
	if (!buffer) return;
    46d4:	fc 01       	movw	r30, r24
    46d6:	c0 81       	ld	r28, Z
    46d8:	d1 81       	ldd	r29, Z+1	; 0x01
    46da:	20 97       	sbiw	r28, 0x00	; 0
    46dc:	51 f0       	breq	.+20     	; 0x46f2 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
    46de:	88 81       	ld	r24, Y
    46e0:	88 23       	and	r24, r24
    46e2:	39 f0       	breq	.+14     	; 0x46f2 <_ZN6String11toUpperCaseEv+0x22>
		*p = toupper(*p);
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <toupper>
    46ea:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    46ec:	88 81       	ld	r24, Y
    46ee:	88 23       	and	r24, r24
    46f0:	c9 f7       	brne	.-14     	; 0x46e4 <_ZN6String11toUpperCaseEv+0x14>
		*p = toupper(*p);
	}
}
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	08 95       	ret

000046f8 <_ZN6String4trimEv>:

void String::trim(void)
{
    46f8:	af 92       	push	r10
    46fa:	bf 92       	push	r11
    46fc:	cf 92       	push	r12
    46fe:	df 92       	push	r13
    4700:	ef 92       	push	r14
    4702:	ff 92       	push	r15
    4704:	0f 93       	push	r16
    4706:	1f 93       	push	r17
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    470e:	dc 01       	movw	r26, r24
    4710:	cd 90       	ld	r12, X+
    4712:	dc 90       	ld	r13, X
    4714:	11 97       	sbiw	r26, 0x01	; 1
    4716:	c1 14       	cp	r12, r1
    4718:	d1 04       	cpc	r13, r1
    471a:	e9 f1       	breq	.+122    	; 0x4796 <_ZN6String4trimEv+0x9e>
    471c:	14 96       	adiw	r26, 0x04	; 4
    471e:	ad 90       	ld	r10, X+
    4720:	bc 90       	ld	r11, X
    4722:	15 97       	sbiw	r26, 0x05	; 5
    4724:	a1 14       	cp	r10, r1
    4726:	b1 04       	cpc	r11, r1
    4728:	b1 f1       	breq	.+108    	; 0x4796 <_ZN6String4trimEv+0x9e>
    472a:	e6 01       	movw	r28, r12
    472c:	8e 01       	movw	r16, r28
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    472e:	89 91       	ld	r24, Y+
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <isspace>
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	c9 f7       	brne	.-14     	; 0x472c <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    473a:	e5 01       	movw	r28, r10
    473c:	21 97       	sbiw	r28, 0x01	; 1
    473e:	cc 0d       	add	r28, r12
    4740:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    4742:	88 81       	ld	r24, Y
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <isspace>
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	d1 f0       	breq	.+52     	; 0x4782 <_ZN6String4trimEv+0x8a>
    474e:	c0 17       	cp	r28, r16
    4750:	d1 07       	cpc	r29, r17
    4752:	b8 f0       	brcs	.+46     	; 0x4782 <_ZN6String4trimEv+0x8a>
    4754:	21 97       	sbiw	r28, 0x01	; 1
    4756:	f5 cf       	rjmp	.-22     	; 0x4742 <_ZN6String4trimEv+0x4a>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    4758:	8c 2d       	mov	r24, r12
    475a:	9d 2d       	mov	r25, r13
    475c:	60 2f       	mov	r22, r16
    475e:	71 2f       	mov	r23, r17
    4760:	fe 01       	movw	r30, r28
    4762:	4c 2f       	mov	r20, r28
    4764:	5f 2f       	mov	r21, r31
    4766:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
	buffer[len] = 0;
    476a:	d7 01       	movw	r26, r14
    476c:	ed 91       	ld	r30, X+
    476e:	fc 91       	ld	r31, X
    4770:	11 97       	sbiw	r26, 0x01	; 1
    4772:	14 96       	adiw	r26, 0x04	; 4
    4774:	8d 91       	ld	r24, X+
    4776:	9c 91       	ld	r25, X
    4778:	15 97       	sbiw	r26, 0x05	; 5
    477a:	e8 0f       	add	r30, r24
    477c:	f9 1f       	adc	r31, r25
    477e:	10 82       	st	Z, r1
    4780:	0a c0       	rjmp	.+20     	; 0x4796 <_ZN6String4trimEv+0x9e>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    4782:	21 96       	adiw	r28, 0x01	; 1
    4784:	c0 1b       	sub	r28, r16
    4786:	d1 0b       	sbc	r29, r17
    4788:	f7 01       	movw	r30, r14
    478a:	d5 83       	std	Z+5, r29	; 0x05
    478c:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    478e:	c0 16       	cp	r12, r16
    4790:	d1 06       	cpc	r13, r17
    4792:	58 f7       	brcc	.-42     	; 0x476a <_ZN6String4trimEv+0x72>
    4794:	e1 cf       	rjmp	.-62     	; 0x4758 <_ZN6String4trimEv+0x60>
	buffer[len] = 0;
}
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	1f 91       	pop	r17
    479c:	0f 91       	pop	r16
    479e:	ff 90       	pop	r15
    47a0:	ef 90       	pop	r14
    47a2:	df 90       	pop	r13
    47a4:	cf 90       	pop	r12
    47a6:	bf 90       	pop	r11
    47a8:	af 90       	pop	r10
    47aa:	08 95       	ret

000047ac <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    47ac:	fc 01       	movw	r30, r24
    47ae:	80 81       	ld	r24, Z
    47b0:	91 81       	ldd	r25, Z+1	; 0x01
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	29 f0       	breq	.+10     	; 0x47c0 <_ZNK6String5toIntEv+0x14>
    47b6:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <atol>
    47ba:	9b 01       	movw	r18, r22
    47bc:	ac 01       	movw	r20, r24
    47be:	03 c0       	rjmp	.+6      	; 0x47c6 <_ZNK6String5toIntEv+0x1a>
	return 0;
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	a9 01       	movw	r20, r18
}
    47c6:	62 2f       	mov	r22, r18
    47c8:	73 2f       	mov	r23, r19
    47ca:	84 2f       	mov	r24, r20
    47cc:	95 2f       	mov	r25, r21
    47ce:	08 95       	ret

000047d0 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    47d0:	fc 01       	movw	r30, r24
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <_ZNK6String7toFloatEv+0x10>
    47da:	0e 94 93 36 	call	0x6d26	; 0x6d26 <atof>
    47de:	04 c0       	rjmp	.+8      	; 0x47e8 <_ZNK6String7toFloatEv+0x18>
	return 0;
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0
}
    47e8:	08 95       	ret

000047ea <_Z12positive_dirv>:
Example Call	:	positive_dir();
***********************************/

void positive_dir()
{
	_LeftEncoderTicks+=1;
    47ea:	80 91 6d 05 	lds	r24, 0x056D
    47ee:	90 91 6e 05 	lds	r25, 0x056E
    47f2:	01 96       	adiw	r24, 0x01	; 1
    47f4:	90 93 6e 05 	sts	0x056E, r25
    47f8:	80 93 6d 05 	sts	0x056D, r24
}
    47fc:	08 95       	ret

000047fe <_Z9port_initv>:
#include <avr/interrupt.h>
#include <util/delay.h>

void port_init()
{
	DDRB = DDRB | 0x20; //making PORTB 5 pin output
    47fe:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    4800:	2d 9a       	sbi	0x05, 5	; 5
	DDRB = DDRB | 0x40; //making PORTB 6 pin output
    4802:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    4804:	2e 9a       	sbi	0x05, 6	; 5
	DDRB = DDRB | 0x80; //making PORTB 7 pin output
    4806:	27 9a       	sbi	0x04, 7	; 4
	PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    4808:	2f 9a       	sbi	0x05, 7	; 5
	DDRH = DDRH | 0x08; //ph3
    480a:	e1 e0       	ldi	r30, 0x01	; 1
    480c:	f1 e0       	ldi	r31, 0x01	; 1
    480e:	80 81       	ld	r24, Z
    4810:	88 60       	ori	r24, 0x08	; 8
    4812:	80 83       	st	Z, r24
	PORTH = PORTH | 0x08;
    4814:	e2 e0       	ldi	r30, 0x02	; 2
    4816:	f1 e0       	ldi	r31, 0x01	; 1
    4818:	80 81       	ld	r24, Z
    481a:	88 60       	ori	r24, 0x08	; 8
    481c:	80 83       	st	Z, r24
}
    481e:	08 95       	ret

00004820 <_Z15lcd_port_configv>:
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    4820:	87 b1       	in	r24, 0x07	; 7
    4822:	87 6f       	ori	r24, 0xF7	; 247
    4824:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    4826:	88 b1       	in	r24, 0x08	; 8
    4828:	80 78       	andi	r24, 0x80	; 128
    482a:	88 b9       	out	0x08, r24	; 8
}
    482c:	08 95       	ret

0000482e <_Z11timer1_initv>:

void timer1_init()
{
	TCCR1A = 0x00;
    482e:	e0 e8       	ldi	r30, 0x80	; 128
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	10 82       	st	Z, r1
	
	ICR1 = 1023; //TOP = 1023
    4834:	8f ef       	ldi	r24, 0xFF	; 255
    4836:	93 e0       	ldi	r25, 0x03	; 3
    4838:	90 93 87 00 	sts	0x0087, r25
    483c:	80 93 86 00 	sts	0x0086, r24
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    4840:	2c ef       	ldi	r18, 0xFC	; 252
    4842:	20 93 85 00 	sts	0x0085, r18
	TCNT1L = 0x01; //Counter low value to which OCR1xH value is to be compared with
    4846:	21 e0       	ldi	r18, 0x01	; 1
    4848:	20 93 84 00 	sts	0x0084, r18
	OCR1A = 1023;
    484c:	90 93 89 00 	sts	0x0089, r25
    4850:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 1023;
    4854:	90 93 8b 00 	sts	0x008B, r25
    4858:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = 1023;
    485c:	90 93 8d 00 	sts	0x008D, r25
    4860:	80 93 8c 00 	sts	0x008C, r24
	TCCR1A = 0xAB;
    4864:	8b ea       	ldi	r24, 0xAB	; 171
    4866:	80 83       	st	Z, r24
	//COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0
	//For Overriding normal port functionality to OCRnA outputs. WGM11=1, WGM10=1. Along With
	//WGM12 in TCCR1B for Selecting FAST PWM Mode

	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    4868:	8c e0       	ldi	r24, 0x0C	; 12
    486a:	80 93 81 00 	sts	0x0081, r24
}
    486e:	08 95       	ret

00004870 <_Z11timer4_initv>:
void timer4_init()
{
	TCCR4A = 0x00;
    4870:	e0 ea       	ldi	r30, 0xA0	; 160
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	10 82       	st	Z, r1
	
	ICR4 = 1023; //TOP = 1023
    4876:	8f ef       	ldi	r24, 0xFF	; 255
    4878:	93 e0       	ldi	r25, 0x03	; 3
    487a:	90 93 a7 00 	sts	0x00A7, r25
    487e:	80 93 a6 00 	sts	0x00A6, r24
	TCNT4H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    4882:	2c ef       	ldi	r18, 0xFC	; 252
    4884:	20 93 a5 00 	sts	0x00A5, r18
	TCNT4L = 0x01; //Counter low value to which OCR1xH value is to be compared with
    4888:	21 e0       	ldi	r18, 0x01	; 1
    488a:	20 93 a4 00 	sts	0x00A4, r18
	OCR4A = 1023;
    488e:	90 93 a9 00 	sts	0x00A9, r25
    4892:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 1023;
    4896:	90 93 ab 00 	sts	0x00AB, r25
    489a:	80 93 aa 00 	sts	0x00AA, r24
	OCR4C = 1023;
    489e:	90 93 ad 00 	sts	0x00AD, r25
    48a2:	80 93 ac 00 	sts	0x00AC, r24
	TCCR4A = 0xAB;
    48a6:	8b ea       	ldi	r24, 0xAB	; 171
    48a8:	80 83       	st	Z, r24
	//COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0
	//For Overriding normal port functionality to OCRnA outputs. WGM11=1, WGM10=1. Along With
	//WGM12 in TCCR1B for Selecting FAST PWM Mode

	TCCR4B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    48aa:	8c e0       	ldi	r24, 0x0C	; 12
    48ac:	80 93 a1 00 	sts	0x00A1, r24
}
    48b0:	08 95       	ret

000048b2 <_Z7servo_1h>:
//Sets servo 1 to the specified angle in degrees
void servo_1(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    48b2:	68 2f       	mov	r22, r24
    48b4:	70 e0       	ldi	r23, 0x00	; 0
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    48be:	2f e6       	ldi	r18, 0x6F	; 111
    48c0:	32 e1       	ldi	r19, 0x12	; 18
    48c2:	43 e0       	ldi	r20, 0x03	; 3
    48c4:	5f e3       	ldi	r21, 0x3F	; 63
    48c6:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    48ca:	21 e7       	ldi	r18, 0x71	; 113
    48cc:	3d e3       	ldi	r19, 0x3D	; 61
    48ce:	4a e0       	ldi	r20, 0x0A	; 10
    48d0:	52 e4       	ldi	r21, 0x42	; 66
    48d2:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>
	OCR1A = (uint16_t) regval;
    48d6:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    48da:	70 93 89 00 	sts	0x0089, r23
    48de:	60 93 88 00 	sts	0x0088, r22
}
    48e2:	08 95       	ret

000048e4 <_Z7servo_2h>:

//Sets servo 2 to the specified angle in degrees
void servo_2(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    48e4:	68 2f       	mov	r22, r24
    48e6:	70 e0       	ldi	r23, 0x00	; 0
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    48f0:	2f e6       	ldi	r18, 0x6F	; 111
    48f2:	32 e1       	ldi	r19, 0x12	; 18
    48f4:	43 e0       	ldi	r20, 0x03	; 3
    48f6:	5f e3       	ldi	r21, 0x3F	; 63
    48f8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    48fc:	21 e7       	ldi	r18, 0x71	; 113
    48fe:	3d e3       	ldi	r19, 0x3D	; 61
    4900:	4a e0       	ldi	r20, 0x0A	; 10
    4902:	52 e4       	ldi	r21, 0x42	; 66
    4904:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>
	OCR1B = (uint16_t) regval;
    4908:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    490c:	70 93 8b 00 	sts	0x008B, r23
    4910:	60 93 8a 00 	sts	0x008A, r22
}
    4914:	08 95       	ret

00004916 <_Z7servo_3h>:

//Sets servo 3 to the specified angle in degrees
void servo_3(unsigned char degrees)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    4916:	68 2f       	mov	r22, r24
    4918:	70 e0       	ldi	r23, 0x00	; 0
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    4922:	2f e6       	ldi	r18, 0x6F	; 111
    4924:	32 e1       	ldi	r19, 0x12	; 18
    4926:	43 e0       	ldi	r20, 0x03	; 3
    4928:	5f e3       	ldi	r21, 0x3F	; 63
    492a:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    492e:	21 e7       	ldi	r18, 0x71	; 113
    4930:	3d e3       	ldi	r19, 0x3D	; 61
    4932:	4a e0       	ldi	r20, 0x0A	; 10
    4934:	52 e4       	ldi	r21, 0x42	; 66
    4936:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>
	OCR1C = (uint16_t) regval;
    493a:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    493e:	70 93 8d 00 	sts	0x008D, r23
    4942:	60 93 8c 00 	sts	0x008C, r22
}
    4946:	08 95       	ret

00004948 <_Z7servo_4h>:
void servo_4(unsigned char degrees) ///ph3(6)
{
	float regval = ((float)degrees * 0.512) + 34.56;
    4948:	68 2f       	mov	r22, r24
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	80 e0       	ldi	r24, 0x00	; 0
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    4954:	2f e6       	ldi	r18, 0x6F	; 111
    4956:	32 e1       	ldi	r19, 0x12	; 18
    4958:	43 e0       	ldi	r20, 0x03	; 3
    495a:	5f e3       	ldi	r21, 0x3F	; 63
    495c:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    4960:	21 e7       	ldi	r18, 0x71	; 113
    4962:	3d e3       	ldi	r19, 0x3D	; 61
    4964:	4a e0       	ldi	r20, 0x0A	; 10
    4966:	52 e4       	ldi	r21, 0x42	; 66
    4968:	0e 94 6d 33 	call	0x66da	; 0x66da <__addsf3>
	OCR4A = (uint16_t) regval;
    496c:	0e 94 42 34 	call	0x6884	; 0x6884 <__fixunssfsi>
    4970:	70 93 a9 00 	sts	0x00A9, r23
    4974:	60 93 a8 00 	sts	0x00A8, r22
}
    4978:	08 95       	ret

0000497a <_Z12servo_1_freev>:

//Frees (relaxes) servo 1 by sending a continuous on signal
void servo_1_free (void)
{
	OCR1A = 1023;
    497a:	8f ef       	ldi	r24, 0xFF	; 255
    497c:	93 e0       	ldi	r25, 0x03	; 3
    497e:	90 93 89 00 	sts	0x0089, r25
    4982:	80 93 88 00 	sts	0x0088, r24
}
    4986:	08 95       	ret

00004988 <_Z12servo_2_freev>:

//Frees (relaxes) servo 2 by sending a continuous on signal
void servo_2_free (void)
{
	OCR1B = 1023;
    4988:	8f ef       	ldi	r24, 0xFF	; 255
    498a:	93 e0       	ldi	r25, 0x03	; 3
    498c:	90 93 8b 00 	sts	0x008B, r25
    4990:	80 93 8a 00 	sts	0x008A, r24
}
    4994:	08 95       	ret

00004996 <_Z12servo_3_freev>:

//Frees (relaxes) servo 3 by sending a continuous on signal
void servo_3_free (void)
{
	OCR1C = 1023;
    4996:	8f ef       	ldi	r24, 0xFF	; 255
    4998:	93 e0       	ldi	r25, 0x03	; 3
    499a:	90 93 8d 00 	sts	0x008D, r25
    499e:	80 93 8c 00 	sts	0x008C, r24
}
    49a2:	08 95       	ret

000049a4 <_Z12servo_4_freev>:
void servo_4_free(void)
{
	OCR4A = 1023;
    49a4:	8f ef       	ldi	r24, 0xFF	; 255
    49a6:	93 e0       	ldi	r25, 0x03	; 3
    49a8:	90 93 a9 00 	sts	0x00A9, r25
    49ac:	80 93 a8 00 	sts	0x00A8, r24
}
    49b0:	08 95       	ret

000049b2 <_Z9rotationfv>:
Example Call	:	rotationf();
***********************************/

void rotationf()
{
	_LeftEncoderTicks = 0;
    49b2:	10 92 6e 05 	sts	0x056E, r1
    49b6:	10 92 6d 05 	sts	0x056D, r1
	while(_LeftEncoderTicks<=30)
	{
		PORTH = 0x01;
    49ba:	e2 e0       	ldi	r30, 0x02	; 2
    49bc:	f1 e0       	ldi	r31, 0x01	; 1
    49be:	21 e0       	ldi	r18, 0x01	; 1
    49c0:	20 83       	st	Z, r18
***********************************/

void rotationf()
{
	_LeftEncoderTicks = 0;
	while(_LeftEncoderTicks<=30)
    49c2:	80 91 6d 05 	lds	r24, 0x056D
    49c6:	90 91 6e 05 	lds	r25, 0x056E
    49ca:	8f 31       	cpi	r24, 0x1F	; 31
    49cc:	91 05       	cpc	r25, r1
    49ce:	c4 f3       	brlt	.-16     	; 0x49c0 <_Z9rotationfv+0xe>
	{
		PORTH = 0x01;
	}
}
    49d0:	08 95       	ret

000049d2 <_Z9rotationbv>:
Example Call	:	rotationb();
***********************************/

void rotationb()
{
	_LeftEncoderTicks = 0;
    49d2:	10 92 6e 05 	sts	0x056E, r1
    49d6:	10 92 6d 05 	sts	0x056D, r1
	while(_LeftEncoderTicks<=31)
	{
		PORTH = 0x02;
    49da:	e2 e0       	ldi	r30, 0x02	; 2
    49dc:	f1 e0       	ldi	r31, 0x01	; 1
    49de:	22 e0       	ldi	r18, 0x02	; 2
    49e0:	20 83       	st	Z, r18
***********************************/

void rotationb()
{
	_LeftEncoderTicks = 0;
	while(_LeftEncoderTicks<=31)
    49e2:	80 91 6d 05 	lds	r24, 0x056D
    49e6:	90 91 6e 05 	lds	r25, 0x056E
    49ea:	80 32       	cpi	r24, 0x20	; 32
    49ec:	91 05       	cpc	r25, r1
    49ee:	c4 f3       	brlt	.-16     	; 0x49e0 <_Z9rotationbv+0xe>
	{
		PORTH = 0x02;
	}
}
    49f0:	08 95       	ret

000049f2 <_Z8stop_udfi>:
Example Call	:	stop_udf();
***********************************/

void stop_udf(int delay_udf)
{
	PORTH = 0x00;
    49f2:	10 92 02 01 	sts	0x0102, r1
	delay(delay_udf);
    49f6:	9c 01       	movw	r18, r24
    49f8:	b9 01       	movw	r22, r18
    49fa:	88 27       	eor	r24, r24
    49fc:	77 fd       	sbrc	r23, 7
    49fe:	80 95       	com	r24
    4a00:	98 2f       	mov	r25, r24
    4a02:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
}
    4a06:	08 95       	ret

00004a08 <_Z11calculationii>:
Functionality	:	Analyzes the note to be played and calculates difference between current note and next note
Example Call	:	var=calculation(x,y);
***********************************/

int calculation(int curr_note ,int next_note)
{
    4a08:	0f 93       	push	r16
    4a0a:	1f 93       	push	r17
    4a0c:	cf 93       	push	r28
    4a0e:	df 93       	push	r29
    4a10:	8b 01       	movw	r16, r22
	int diff=0;
	diff = next_note - curr_note;
    4a12:	eb 01       	movw	r28, r22
    4a14:	c8 1b       	sub	r28, r24
    4a16:	d9 0b       	sbc	r29, r25
	if(diff > 0)
    4a18:	1c 16       	cp	r1, r28
    4a1a:	1d 06       	cpc	r1, r29
    4a1c:	9c f4       	brge	.+38     	; 0x4a44 <_Z11calculationii+0x3c>
	{
		for(j= 0 ; j <diff ; j++)
    4a1e:	10 92 7e 06 	sts	0x067E, r1
    4a22:	10 92 7d 06 	sts	0x067D, r1
		{
			rotationf();
    4a26:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <_Z9rotationfv>
{
	int diff=0;
	diff = next_note - curr_note;
	if(diff > 0)
	{
		for(j= 0 ; j <diff ; j++)
    4a2a:	80 91 7d 06 	lds	r24, 0x067D
    4a2e:	90 91 7e 06 	lds	r25, 0x067E
    4a32:	01 96       	adiw	r24, 0x01	; 1
    4a34:	90 93 7e 06 	sts	0x067E, r25
    4a38:	80 93 7d 06 	sts	0x067D, r24
    4a3c:	8c 17       	cp	r24, r28
    4a3e:	9d 07       	cpc	r25, r29
    4a40:	94 f3       	brlt	.-28     	; 0x4a26 <_Z11calculationii+0x1e>
    4a42:	24 c0       	rjmp	.+72     	; 0x4a8c <_Z11calculationii+0x84>
		{
			rotationf();
		}
	}
	else if(diff < 0)
    4a44:	dd 23       	and	r29, r29
    4a46:	f4 f4       	brge	.+60     	; 0x4a84 <_Z11calculationii+0x7c>
	{
		for(j = 0 ; j <abs(diff) ; j++)
    4a48:	10 92 7e 06 	sts	0x067E, r1
    4a4c:	10 92 7d 06 	sts	0x067D, r1
    4a50:	ce 01       	movw	r24, r28
    4a52:	dd 23       	and	r29, r29
    4a54:	24 f4       	brge	.+8      	; 0x4a5e <_Z11calculationii+0x56>
    4a56:	88 27       	eor	r24, r24
    4a58:	99 27       	eor	r25, r25
    4a5a:	8c 1b       	sub	r24, r28
    4a5c:	9d 0b       	sbc	r25, r29
    4a5e:	ec 01       	movw	r28, r24
    4a60:	18 16       	cp	r1, r24
    4a62:	19 06       	cpc	r1, r25
    4a64:	9c f4       	brge	.+38     	; 0x4a8c <_Z11calculationii+0x84>
		{
			rotationb();
    4a66:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <_Z9rotationbv>
			rotationf();
		}
	}
	else if(diff < 0)
	{
		for(j = 0 ; j <abs(diff) ; j++)
    4a6a:	80 91 7d 06 	lds	r24, 0x067D
    4a6e:	90 91 7e 06 	lds	r25, 0x067E
    4a72:	01 96       	adiw	r24, 0x01	; 1
    4a74:	90 93 7e 06 	sts	0x067E, r25
    4a78:	80 93 7d 06 	sts	0x067D, r24
    4a7c:	8c 17       	cp	r24, r28
    4a7e:	9d 07       	cpc	r25, r29
    4a80:	94 f3       	brlt	.-28     	; 0x4a66 <_Z11calculationii+0x5e>
    4a82:	04 c0       	rjmp	.+8      	; 0x4a8c <_Z11calculationii+0x84>
			rotationb();
		}
	}
	else
	{
		stop_udf(5000);
    4a84:	88 e8       	ldi	r24, 0x88	; 136
    4a86:	93 e1       	ldi	r25, 0x13	; 19
    4a88:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
	}
	curr_note = next_note;
	return curr_note;
}
    4a8c:	80 2f       	mov	r24, r16
    4a8e:	91 2f       	mov	r25, r17
    4a90:	df 91       	pop	r29
    4a92:	cf 91       	pop	r28
    4a94:	1f 91       	pop	r17
    4a96:	0f 91       	pop	r16
    4a98:	08 95       	ret

00004a9a <_Z5hitmev>:
Example Call	:	hitme();
***********************************/

void hitme()
{
	for(pos = 19; pos >= 10; pos -= 3)
    4a9a:	83 e1       	ldi	r24, 0x13	; 19
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	90 93 68 05 	sts	0x0568, r25
    4aa2:	80 93 67 05 	sts	0x0567, r24
	{
		servo_1(pos);
    4aa6:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_Z7servo_1h>
		delay(5);
    4aaa:	65 e0       	ldi	r22, 0x05	; 5
    4aac:	70 e0       	ldi	r23, 0x00	; 0
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
Example Call	:	hitme();
***********************************/

void hitme()
{
	for(pos = 19; pos >= 10; pos -= 3)
    4ab6:	80 91 67 05 	lds	r24, 0x0567
    4aba:	90 91 68 05 	lds	r25, 0x0568
    4abe:	03 97       	sbiw	r24, 0x03	; 3
    4ac0:	90 93 68 05 	sts	0x0568, r25
    4ac4:	80 93 67 05 	sts	0x0567, r24
    4ac8:	8a 30       	cpi	r24, 0x0A	; 10
    4aca:	91 05       	cpc	r25, r1
    4acc:	64 f7       	brge	.-40     	; 0x4aa6 <_Z5hitmev+0xc>
	{
		servo_1(pos);
		delay(5);
	}
	delay(600);
    4ace:	68 e5       	ldi	r22, 0x58	; 88
    4ad0:	72 e0       	ldi	r23, 0x02	; 2
    4ad2:	80 e0       	ldi	r24, 0x00	; 0
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
	for(pos = 10; pos <= 19; pos +=3)
    4ada:	8a e0       	ldi	r24, 0x0A	; 10
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	90 93 68 05 	sts	0x0568, r25
    4ae2:	80 93 67 05 	sts	0x0567, r24
	{
		servo_1(pos);
    4ae6:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_Z7servo_1h>
		delay(5);
    4aea:	65 e0       	ldi	r22, 0x05	; 5
    4aec:	70 e0       	ldi	r23, 0x00	; 0
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
	{
		servo_1(pos);
		delay(5);
	}
	delay(600);
	for(pos = 10; pos <= 19; pos +=3)
    4af6:	80 91 67 05 	lds	r24, 0x0567
    4afa:	90 91 68 05 	lds	r25, 0x0568
    4afe:	03 96       	adiw	r24, 0x03	; 3
    4b00:	90 93 68 05 	sts	0x0568, r25
    4b04:	80 93 67 05 	sts	0x0567, r24
    4b08:	84 31       	cpi	r24, 0x14	; 20
    4b0a:	91 05       	cpc	r25, r1
    4b0c:	64 f3       	brlt	.-40     	; 0x4ae6 <_Z5hitmev+0x4c>
	{
		servo_1(pos);
		delay(5);
	}
}
    4b0e:	08 95       	ret

00004b10 <_Z11hit_trumpetiii>:
Functionality	:	Controls the rotation of the servos for striking the trumpet key 
Example Call	:	hit_trumpet();
***********************************/

void hit_trumpet(int l,int m,int r)
{
    4b10:	cf 92       	push	r12
    4b12:	df 92       	push	r13
    4b14:	ef 92       	push	r14
    4b16:	ff 92       	push	r15
    4b18:	0f 93       	push	r16
    4b1a:	1f 93       	push	r17
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
	// Variables l, m, r can take values 0 or 1 thus representing the keys to be struck or not 
	
	if (l==1 && m==0 && r==0)// note "C"
    4b20:	81 30       	cpi	r24, 0x01	; 1
    4b22:	91 05       	cpc	r25, r1
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <_Z11hit_trumpetiii+0x18>
    4b26:	8a c0       	rjmp	.+276    	; 0x4c3c <_Z11hit_trumpetiii+0x12c>
    4b28:	61 15       	cp	r22, r1
    4b2a:	71 05       	cpc	r23, r1
    4b2c:	09 f0       	breq	.+2      	; 0x4b30 <_Z11hit_trumpetiii+0x20>
    4b2e:	86 c0       	rjmp	.+268    	; 0x4c3c <_Z11hit_trumpetiii+0x12c>
    4b30:	41 15       	cp	r20, r1
    4b32:	51 05       	cpc	r21, r1
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <_Z11hit_trumpetiii+0x28>
    4b36:	82 c0       	rjmp	.+260    	; 0x4c3c <_Z11hit_trumpetiii+0x12c>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4b38:	80 91 64 02 	lds	r24, 0x0264
    4b3c:	90 91 65 02 	lds	r25, 0x0265
    4b40:	90 93 68 05 	sts	0x0568, r25
    4b44:	80 93 67 05 	sts	0x0567, r24
    4b48:	20 91 66 02 	lds	r18, 0x0266
    4b4c:	30 91 67 02 	lds	r19, 0x0267
    4b50:	28 17       	cp	r18, r24
    4b52:	39 07       	cpc	r19, r25
    4b54:	74 f1       	brlt	.+92     	; 0x4bb2 <_Z11hit_trumpetiii+0xa2>
		{
			servo_2(pos);
			servo_3(error2-tpos);
    4b56:	00 e5       	ldi	r16, 0x50	; 80
    4b58:	12 e0       	ldi	r17, 0x02	; 2
    4b5a:	cc e4       	ldi	r28, 0x4C	; 76
    4b5c:	d2 e0       	ldi	r29, 0x02	; 2
			servo_4(tpos-error3);
    4b5e:	0f 2e       	mov	r0, r31
    4b60:	fe e4       	ldi	r31, 0x4E	; 78
    4b62:	ef 2e       	mov	r14, r31
    4b64:	f2 e0       	ldi	r31, 0x02	; 2
    4b66:	ff 2e       	mov	r15, r31
    4b68:	f0 2d       	mov	r31, r0
	
	if (l==1 && m==0 && r==0)// note "C"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(pos);
    4b6a:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    4b6e:	f8 01       	movw	r30, r16
    4b70:	80 81       	ld	r24, Z
    4b72:	98 81       	ld	r25, Y
    4b74:	89 1b       	sub	r24, r25
    4b76:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3);
    4b7a:	88 81       	ld	r24, Y
    4b7c:	f7 01       	movw	r30, r14
    4b7e:	90 81       	ld	r25, Z
    4b80:	89 1b       	sub	r24, r25
    4b82:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4b86:	6a e0       	ldi	r22, 0x0A	; 10
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
{
	// Variables l, m, r can take values 0 or 1 thus representing the keys to be struck or not 
	
	if (l==1 && m==0 && r==0)// note "C"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4b92:	80 91 67 05 	lds	r24, 0x0567
    4b96:	90 91 68 05 	lds	r25, 0x0568
    4b9a:	02 96       	adiw	r24, 0x02	; 2
    4b9c:	90 93 68 05 	sts	0x0568, r25
    4ba0:	80 93 67 05 	sts	0x0567, r24
    4ba4:	20 91 66 02 	lds	r18, 0x0266
    4ba8:	30 91 67 02 	lds	r19, 0x0267
    4bac:	28 17       	cp	r18, r24
    4bae:	39 07       	cpc	r19, r25
    4bb0:	e4 f6       	brge	.-72     	; 0x4b6a <_Z11hit_trumpetiii+0x5a>
			servo_2(pos);
			servo_3(error2-tpos);
			servo_4(tpos-error3);
			delay(10);
		}
		delay(350);
    4bb2:	6e e5       	ldi	r22, 0x5E	; 94
    4bb4:	71 e0       	ldi	r23, 0x01	; 1
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4bbe:	80 91 66 02 	lds	r24, 0x0266
    4bc2:	90 91 67 02 	lds	r25, 0x0267
    4bc6:	90 93 68 05 	sts	0x0568, r25
    4bca:	80 93 67 05 	sts	0x0567, r24
    4bce:	20 91 64 02 	lds	r18, 0x0264
    4bd2:	30 91 65 02 	lds	r19, 0x0265
    4bd6:	82 17       	cp	r24, r18
    4bd8:	93 07       	cpc	r25, r19
    4bda:	0c f4       	brge	.+2      	; 0x4bde <_Z11hit_trumpetiii+0xce>
    4bdc:	bb c3       	rjmp	.+1910   	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(pos);
			servo_3(error2-tpos);
    4bde:	00 e5       	ldi	r16, 0x50	; 80
    4be0:	12 e0       	ldi	r17, 0x02	; 2
    4be2:	cc e4       	ldi	r28, 0x4C	; 76
    4be4:	d2 e0       	ldi	r29, 0x02	; 2
			servo_4(tpos-error3); 
    4be6:	0f 2e       	mov	r0, r31
    4be8:	fe e4       	ldi	r31, 0x4E	; 78
    4bea:	ef 2e       	mov	r14, r31
    4bec:	f2 e0       	ldi	r31, 0x02	; 2
    4bee:	ff 2e       	mov	r15, r31
    4bf0:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(pos);
    4bf2:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    4bf6:	f8 01       	movw	r30, r16
    4bf8:	80 81       	ld	r24, Z
    4bfa:	98 81       	ld	r25, Y
    4bfc:	89 1b       	sub	r24, r25
    4bfe:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3); 
    4c02:	88 81       	ld	r24, Y
    4c04:	f7 01       	movw	r30, r14
    4c06:	90 81       	ld	r25, Z
    4c08:	89 1b       	sub	r24, r25
    4c0a:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4c0e:	6a e0       	ldi	r22, 0x0A	; 10
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-tpos);
			servo_4(tpos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4c1a:	80 91 67 05 	lds	r24, 0x0567
    4c1e:	90 91 68 05 	lds	r25, 0x0568
    4c22:	02 97       	sbiw	r24, 0x02	; 2
    4c24:	90 93 68 05 	sts	0x0568, r25
    4c28:	80 93 67 05 	sts	0x0567, r24
    4c2c:	20 91 64 02 	lds	r18, 0x0264
    4c30:	30 91 65 02 	lds	r19, 0x0265
    4c34:	82 17       	cp	r24, r18
    4c36:	93 07       	cpc	r25, r19
    4c38:	e4 f6       	brge	.-72     	; 0x4bf2 <_Z11hit_trumpetiii+0xe2>
    4c3a:	8c c3       	rjmp	.+1816   	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-tpos);
			servo_4(tpos-error3); 
			delay(10);
		}
	}
	else if (l==0 && m==1 && r==0)// note "D"
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	09 f0       	breq	.+2      	; 0x4c42 <_Z11hit_trumpetiii+0x132>
    4c40:	34 c1       	rjmp	.+616    	; 0x4eaa <_Z11hit_trumpetiii+0x39a>
    4c42:	61 30       	cpi	r22, 0x01	; 1
    4c44:	71 05       	cpc	r23, r1
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <_Z11hit_trumpetiii+0x13a>
    4c48:	96 c0       	rjmp	.+300    	; 0x4d76 <_Z11hit_trumpetiii+0x266>
    4c4a:	41 15       	cp	r20, r1
    4c4c:	51 05       	cpc	r21, r1
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <_Z11hit_trumpetiii+0x142>
    4c50:	92 c0       	rjmp	.+292    	; 0x4d76 <_Z11hit_trumpetiii+0x266>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4c52:	80 91 64 02 	lds	r24, 0x0264
    4c56:	90 91 65 02 	lds	r25, 0x0265
    4c5a:	90 93 68 05 	sts	0x0568, r25
    4c5e:	80 93 67 05 	sts	0x0567, r24
    4c62:	20 91 66 02 	lds	r18, 0x0266
    4c66:	30 91 67 02 	lds	r19, 0x0267
    4c6a:	28 17       	cp	r18, r24
    4c6c:	39 07       	cpc	r19, r25
    4c6e:	b4 f1       	brlt	.+108    	; 0x4cdc <_Z11hit_trumpetiii+0x1cc>
		{
			servo_2(tpos);
    4c70:	cc e4       	ldi	r28, 0x4C	; 76
    4c72:	d2 e0       	ldi	r29, 0x02	; 2
			servo_3(error2-pos);
    4c74:	00 e5       	ldi	r16, 0x50	; 80
    4c76:	12 e0       	ldi	r17, 0x02	; 2
    4c78:	0f 2e       	mov	r0, r31
    4c7a:	f7 e6       	ldi	r31, 0x67	; 103
    4c7c:	ef 2e       	mov	r14, r31
    4c7e:	f5 e0       	ldi	r31, 0x05	; 5
    4c80:	ff 2e       	mov	r15, r31
    4c82:	f0 2d       	mov	r31, r0
			servo_4(tpos-error3);
    4c84:	0f 2e       	mov	r0, r31
    4c86:	fe e4       	ldi	r31, 0x4E	; 78
    4c88:	cf 2e       	mov	r12, r31
    4c8a:	f2 e0       	ldi	r31, 0x02	; 2
    4c8c:	df 2e       	mov	r13, r31
    4c8e:	f0 2d       	mov	r31, r0
	}
	else if (l==0 && m==1 && r==0)// note "D"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(tpos);
    4c90:	88 81       	ld	r24, Y
    4c92:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    4c96:	f8 01       	movw	r30, r16
    4c98:	80 81       	ld	r24, Z
    4c9a:	f7 01       	movw	r30, r14
    4c9c:	90 81       	ld	r25, Z
    4c9e:	89 1b       	sub	r24, r25
    4ca0:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3);
    4ca4:	88 81       	ld	r24, Y
    4ca6:	f6 01       	movw	r30, r12
    4ca8:	90 81       	ld	r25, Z
    4caa:	89 1b       	sub	r24, r25
    4cac:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			
			delay(10);
    4cb0:	6a e0       	ldi	r22, 0x0A	; 10
    4cb2:	70 e0       	ldi	r23, 0x00	; 0
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if (l==0 && m==1 && r==0)// note "D"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4cbc:	80 91 67 05 	lds	r24, 0x0567
    4cc0:	90 91 68 05 	lds	r25, 0x0568
    4cc4:	02 96       	adiw	r24, 0x02	; 2
    4cc6:	90 93 68 05 	sts	0x0568, r25
    4cca:	80 93 67 05 	sts	0x0567, r24
    4cce:	20 91 66 02 	lds	r18, 0x0266
    4cd2:	30 91 67 02 	lds	r19, 0x0267
    4cd6:	28 17       	cp	r18, r24
    4cd8:	39 07       	cpc	r19, r25
    4cda:	d4 f6       	brge	.-76     	; 0x4c90 <_Z11hit_trumpetiii+0x180>
			servo_3(error2-pos);
			servo_4(tpos-error3);
			
			delay(10);
		}
		delay(400);
    4cdc:	60 e9       	ldi	r22, 0x90	; 144
    4cde:	71 e0       	ldi	r23, 0x01	; 1
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4ce8:	80 91 66 02 	lds	r24, 0x0266
    4cec:	90 91 67 02 	lds	r25, 0x0267
    4cf0:	90 93 68 05 	sts	0x0568, r25
    4cf4:	80 93 67 05 	sts	0x0567, r24
    4cf8:	20 91 64 02 	lds	r18, 0x0264
    4cfc:	30 91 65 02 	lds	r19, 0x0265
    4d00:	82 17       	cp	r24, r18
    4d02:	93 07       	cpc	r25, r19
    4d04:	0c f4       	brge	.+2      	; 0x4d08 <_Z11hit_trumpetiii+0x1f8>
    4d06:	26 c3       	rjmp	.+1612   	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(tpos);
    4d08:	cc e4       	ldi	r28, 0x4C	; 76
    4d0a:	d2 e0       	ldi	r29, 0x02	; 2
			servo_3(error2-pos);
    4d0c:	00 e5       	ldi	r16, 0x50	; 80
    4d0e:	12 e0       	ldi	r17, 0x02	; 2
    4d10:	0f 2e       	mov	r0, r31
    4d12:	f7 e6       	ldi	r31, 0x67	; 103
    4d14:	ef 2e       	mov	r14, r31
    4d16:	f5 e0       	ldi	r31, 0x05	; 5
    4d18:	ff 2e       	mov	r15, r31
    4d1a:	f0 2d       	mov	r31, r0
			servo_4(tpos-error3); 
    4d1c:	0f 2e       	mov	r0, r31
    4d1e:	fe e4       	ldi	r31, 0x4E	; 78
    4d20:	cf 2e       	mov	r12, r31
    4d22:	f2 e0       	ldi	r31, 0x02	; 2
    4d24:	df 2e       	mov	r13, r31
    4d26:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(400);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(tpos);
    4d28:	88 81       	ld	r24, Y
    4d2a:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    4d2e:	f8 01       	movw	r30, r16
    4d30:	80 81       	ld	r24, Z
    4d32:	f7 01       	movw	r30, r14
    4d34:	90 81       	ld	r25, Z
    4d36:	89 1b       	sub	r24, r25
    4d38:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3); 
    4d3c:	88 81       	ld	r24, Y
    4d3e:	f6 01       	movw	r30, r12
    4d40:	90 81       	ld	r25, Z
    4d42:	89 1b       	sub	r24, r25
    4d44:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4d48:	6a e0       	ldi	r22, 0x0A	; 10
    4d4a:	70 e0       	ldi	r23, 0x00	; 0
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_4(tpos-error3);
			
			delay(10);
		}
		delay(400);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4d54:	80 91 67 05 	lds	r24, 0x0567
    4d58:	90 91 68 05 	lds	r25, 0x0568
    4d5c:	02 97       	sbiw	r24, 0x02	; 2
    4d5e:	90 93 68 05 	sts	0x0568, r25
    4d62:	80 93 67 05 	sts	0x0567, r24
    4d66:	20 91 64 02 	lds	r18, 0x0264
    4d6a:	30 91 65 02 	lds	r19, 0x0265
    4d6e:	82 17       	cp	r24, r18
    4d70:	93 07       	cpc	r25, r19
    4d72:	d4 f6       	brge	.-76     	; 0x4d28 <_Z11hit_trumpetiii+0x218>
    4d74:	ef c2       	rjmp	.+1502   	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-pos);
			servo_4(tpos-error3); 
			delay(10);
		}
	}
	else if(l==0 && m==0 && r==1)// note "E"
    4d76:	61 15       	cp	r22, r1
    4d78:	71 05       	cpc	r23, r1
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <_Z11hit_trumpetiii+0x26e>
    4d7c:	96 c0       	rjmp	.+300    	; 0x4eaa <_Z11hit_trumpetiii+0x39a>
    4d7e:	41 30       	cpi	r20, 0x01	; 1
    4d80:	51 05       	cpc	r21, r1
    4d82:	09 f0       	breq	.+2      	; 0x4d86 <_Z11hit_trumpetiii+0x276>
    4d84:	92 c0       	rjmp	.+292    	; 0x4eaa <_Z11hit_trumpetiii+0x39a>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4d86:	80 91 64 02 	lds	r24, 0x0264
    4d8a:	90 91 65 02 	lds	r25, 0x0265
    4d8e:	90 93 68 05 	sts	0x0568, r25
    4d92:	80 93 67 05 	sts	0x0567, r24
    4d96:	20 91 66 02 	lds	r18, 0x0266
    4d9a:	30 91 67 02 	lds	r19, 0x0267
    4d9e:	28 17       	cp	r18, r24
    4da0:	39 07       	cpc	r19, r25
    4da2:	b4 f1       	brlt	.+108    	; 0x4e10 <_Z11hit_trumpetiii+0x300>
		{
			servo_2(tpos);
    4da4:	cc e4       	ldi	r28, 0x4C	; 76
    4da6:	d2 e0       	ldi	r29, 0x02	; 2
			servo_3(error2-tpos);
    4da8:	00 e5       	ldi	r16, 0x50	; 80
    4daa:	12 e0       	ldi	r17, 0x02	; 2
			servo_4(pos-error3);
    4dac:	0f 2e       	mov	r0, r31
    4dae:	f7 e6       	ldi	r31, 0x67	; 103
    4db0:	ef 2e       	mov	r14, r31
    4db2:	f5 e0       	ldi	r31, 0x05	; 5
    4db4:	ff 2e       	mov	r15, r31
    4db6:	f0 2d       	mov	r31, r0
    4db8:	0f 2e       	mov	r0, r31
    4dba:	fe e4       	ldi	r31, 0x4E	; 78
    4dbc:	cf 2e       	mov	r12, r31
    4dbe:	f2 e0       	ldi	r31, 0x02	; 2
    4dc0:	df 2e       	mov	r13, r31
    4dc2:	f0 2d       	mov	r31, r0
	}
	else if(l==0 && m==0 && r==1)// note "E"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(tpos);
    4dc4:	88 81       	ld	r24, Y
    4dc6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    4dca:	f8 01       	movw	r30, r16
    4dcc:	80 81       	ld	r24, Z
    4dce:	98 81       	ld	r25, Y
    4dd0:	89 1b       	sub	r24, r25
    4dd2:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3);
    4dd6:	f7 01       	movw	r30, r14
    4dd8:	80 81       	ld	r24, Z
    4dda:	f6 01       	movw	r30, r12
    4ddc:	90 81       	ld	r25, Z
    4dde:	89 1b       	sub	r24, r25
    4de0:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4de4:	6a e0       	ldi	r22, 0x0A	; 10
    4de6:	70 e0       	ldi	r23, 0x00	; 0
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if(l==0 && m==0 && r==1)// note "E"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4df0:	80 91 67 05 	lds	r24, 0x0567
    4df4:	90 91 68 05 	lds	r25, 0x0568
    4df8:	02 96       	adiw	r24, 0x02	; 2
    4dfa:	90 93 68 05 	sts	0x0568, r25
    4dfe:	80 93 67 05 	sts	0x0567, r24
    4e02:	20 91 66 02 	lds	r18, 0x0266
    4e06:	30 91 67 02 	lds	r19, 0x0267
    4e0a:	28 17       	cp	r18, r24
    4e0c:	39 07       	cpc	r19, r25
    4e0e:	d4 f6       	brge	.-76     	; 0x4dc4 <_Z11hit_trumpetiii+0x2b4>
			servo_2(tpos);
			servo_3(error2-tpos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
    4e10:	6e e5       	ldi	r22, 0x5E	; 94
    4e12:	71 e0       	ldi	r23, 0x01	; 1
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4e1c:	80 91 66 02 	lds	r24, 0x0266
    4e20:	90 91 67 02 	lds	r25, 0x0267
    4e24:	90 93 68 05 	sts	0x0568, r25
    4e28:	80 93 67 05 	sts	0x0567, r24
    4e2c:	20 91 64 02 	lds	r18, 0x0264
    4e30:	30 91 65 02 	lds	r19, 0x0265
    4e34:	82 17       	cp	r24, r18
    4e36:	93 07       	cpc	r25, r19
    4e38:	0c f4       	brge	.+2      	; 0x4e3c <_Z11hit_trumpetiii+0x32c>
    4e3a:	8c c2       	rjmp	.+1304   	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(tpos);
    4e3c:	cc e4       	ldi	r28, 0x4C	; 76
    4e3e:	d2 e0       	ldi	r29, 0x02	; 2
			servo_3(error2-tpos);
    4e40:	00 e5       	ldi	r16, 0x50	; 80
    4e42:	12 e0       	ldi	r17, 0x02	; 2
			servo_4(pos-error3); 
    4e44:	0f 2e       	mov	r0, r31
    4e46:	f7 e6       	ldi	r31, 0x67	; 103
    4e48:	ef 2e       	mov	r14, r31
    4e4a:	f5 e0       	ldi	r31, 0x05	; 5
    4e4c:	ff 2e       	mov	r15, r31
    4e4e:	f0 2d       	mov	r31, r0
    4e50:	0f 2e       	mov	r0, r31
    4e52:	fe e4       	ldi	r31, 0x4E	; 78
    4e54:	cf 2e       	mov	r12, r31
    4e56:	f2 e0       	ldi	r31, 0x02	; 2
    4e58:	df 2e       	mov	r13, r31
    4e5a:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(tpos);
    4e5c:	88 81       	ld	r24, Y
    4e5e:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    4e62:	f8 01       	movw	r30, r16
    4e64:	80 81       	ld	r24, Z
    4e66:	98 81       	ld	r25, Y
    4e68:	89 1b       	sub	r24, r25
    4e6a:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3); 
    4e6e:	f7 01       	movw	r30, r14
    4e70:	80 81       	ld	r24, Z
    4e72:	f6 01       	movw	r30, r12
    4e74:	90 81       	ld	r25, Z
    4e76:	89 1b       	sub	r24, r25
    4e78:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4e7c:	6a e0       	ldi	r22, 0x0A	; 10
    4e7e:	70 e0       	ldi	r23, 0x00	; 0
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-tpos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4e88:	80 91 67 05 	lds	r24, 0x0567
    4e8c:	90 91 68 05 	lds	r25, 0x0568
    4e90:	02 97       	sbiw	r24, 0x02	; 2
    4e92:	90 93 68 05 	sts	0x0568, r25
    4e96:	80 93 67 05 	sts	0x0567, r24
    4e9a:	20 91 64 02 	lds	r18, 0x0264
    4e9e:	30 91 65 02 	lds	r19, 0x0265
    4ea2:	82 17       	cp	r24, r18
    4ea4:	93 07       	cpc	r25, r19
    4ea6:	d4 f6       	brge	.-76     	; 0x4e5c <_Z11hit_trumpetiii+0x34c>
    4ea8:	55 c2       	rjmp	.+1194   	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-tpos);
			servo_4(pos-error3); 
			delay(10);
		}
	}
	else if(l==1 && m==1 && r==0)// note "F"
    4eaa:	81 30       	cpi	r24, 0x01	; 1
    4eac:	91 05       	cpc	r25, r1
    4eae:	09 f0       	breq	.+2      	; 0x4eb2 <_Z11hit_trumpetiii+0x3a2>
    4eb0:	98 c0       	rjmp	.+304    	; 0x4fe2 <_Z11hit_trumpetiii+0x4d2>
    4eb2:	61 30       	cpi	r22, 0x01	; 1
    4eb4:	71 05       	cpc	r23, r1
    4eb6:	09 f0       	breq	.+2      	; 0x4eba <_Z11hit_trumpetiii+0x3aa>
    4eb8:	94 c0       	rjmp	.+296    	; 0x4fe2 <_Z11hit_trumpetiii+0x4d2>
    4eba:	41 15       	cp	r20, r1
    4ebc:	51 05       	cpc	r21, r1
    4ebe:	09 f0       	breq	.+2      	; 0x4ec2 <_Z11hit_trumpetiii+0x3b2>
    4ec0:	90 c0       	rjmp	.+288    	; 0x4fe2 <_Z11hit_trumpetiii+0x4d2>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4ec2:	80 91 64 02 	lds	r24, 0x0264
    4ec6:	90 91 65 02 	lds	r25, 0x0265
    4eca:	90 93 68 05 	sts	0x0568, r25
    4ece:	80 93 67 05 	sts	0x0567, r24
    4ed2:	20 91 66 02 	lds	r18, 0x0266
    4ed6:	30 91 67 02 	lds	r19, 0x0267
    4eda:	28 17       	cp	r18, r24
    4edc:	39 07       	cpc	r19, r25
    4ede:	ac f1       	brlt	.+106    	; 0x4f4a <_Z11hit_trumpetiii+0x43a>
		{
			servo_2(pos);
			servo_3(error2-pos);
    4ee0:	c0 e5       	ldi	r28, 0x50	; 80
    4ee2:	d2 e0       	ldi	r29, 0x02	; 2
    4ee4:	07 e6       	ldi	r16, 0x67	; 103
    4ee6:	15 e0       	ldi	r17, 0x05	; 5
			servo_4(tpos-error3);
    4ee8:	0f 2e       	mov	r0, r31
    4eea:	fc e4       	ldi	r31, 0x4C	; 76
    4eec:	ef 2e       	mov	r14, r31
    4eee:	f2 e0       	ldi	r31, 0x02	; 2
    4ef0:	ff 2e       	mov	r15, r31
    4ef2:	f0 2d       	mov	r31, r0
    4ef4:	0f 2e       	mov	r0, r31
    4ef6:	fe e4       	ldi	r31, 0x4E	; 78
    4ef8:	cf 2e       	mov	r12, r31
    4efa:	f2 e0       	ldi	r31, 0x02	; 2
    4efc:	df 2e       	mov	r13, r31
    4efe:	f0 2d       	mov	r31, r0
	}
	else if(l==1 && m==1 && r==0)// note "F"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(pos);
    4f00:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    4f04:	88 81       	ld	r24, Y
    4f06:	f8 01       	movw	r30, r16
    4f08:	90 81       	ld	r25, Z
    4f0a:	89 1b       	sub	r24, r25
    4f0c:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3);
    4f10:	f7 01       	movw	r30, r14
    4f12:	80 81       	ld	r24, Z
    4f14:	f6 01       	movw	r30, r12
    4f16:	90 81       	ld	r25, Z
    4f18:	89 1b       	sub	r24, r25
    4f1a:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4f1e:	6a e0       	ldi	r22, 0x0A	; 10
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if(l==1 && m==1 && r==0)// note "F"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4f2a:	80 91 67 05 	lds	r24, 0x0567
    4f2e:	90 91 68 05 	lds	r25, 0x0568
    4f32:	02 96       	adiw	r24, 0x02	; 2
    4f34:	90 93 68 05 	sts	0x0568, r25
    4f38:	80 93 67 05 	sts	0x0567, r24
    4f3c:	20 91 66 02 	lds	r18, 0x0266
    4f40:	30 91 67 02 	lds	r19, 0x0267
    4f44:	28 17       	cp	r18, r24
    4f46:	39 07       	cpc	r19, r25
    4f48:	dc f6       	brge	.-74     	; 0x4f00 <_Z11hit_trumpetiii+0x3f0>
			servo_2(pos);
			servo_3(error2-pos);
			servo_4(tpos-error3);
			delay(10);
		}
		delay(350);
    4f4a:	6e e5       	ldi	r22, 0x5E	; 94
    4f4c:	71 e0       	ldi	r23, 0x01	; 1
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4f56:	80 91 66 02 	lds	r24, 0x0266
    4f5a:	90 91 67 02 	lds	r25, 0x0267
    4f5e:	90 93 68 05 	sts	0x0568, r25
    4f62:	80 93 67 05 	sts	0x0567, r24
    4f66:	20 91 64 02 	lds	r18, 0x0264
    4f6a:	30 91 65 02 	lds	r19, 0x0265
    4f6e:	82 17       	cp	r24, r18
    4f70:	93 07       	cpc	r25, r19
    4f72:	0c f4       	brge	.+2      	; 0x4f76 <_Z11hit_trumpetiii+0x466>
    4f74:	ef c1       	rjmp	.+990    	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(pos);
			servo_3(error2-pos);
    4f76:	c0 e5       	ldi	r28, 0x50	; 80
    4f78:	d2 e0       	ldi	r29, 0x02	; 2
    4f7a:	07 e6       	ldi	r16, 0x67	; 103
    4f7c:	15 e0       	ldi	r17, 0x05	; 5
			servo_4(tpos-error3); 
    4f7e:	0f 2e       	mov	r0, r31
    4f80:	fc e4       	ldi	r31, 0x4C	; 76
    4f82:	ef 2e       	mov	r14, r31
    4f84:	f2 e0       	ldi	r31, 0x02	; 2
    4f86:	ff 2e       	mov	r15, r31
    4f88:	f0 2d       	mov	r31, r0
    4f8a:	0f 2e       	mov	r0, r31
    4f8c:	fe e4       	ldi	r31, 0x4E	; 78
    4f8e:	cf 2e       	mov	r12, r31
    4f90:	f2 e0       	ldi	r31, 0x02	; 2
    4f92:	df 2e       	mov	r13, r31
    4f94:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(pos);
    4f96:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    4f9a:	88 81       	ld	r24, Y
    4f9c:	f8 01       	movw	r30, r16
    4f9e:	90 81       	ld	r25, Z
    4fa0:	89 1b       	sub	r24, r25
    4fa2:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(tpos-error3); 
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	80 81       	ld	r24, Z
    4faa:	f6 01       	movw	r30, r12
    4fac:	90 81       	ld	r25, Z
    4fae:	89 1b       	sub	r24, r25
    4fb0:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    4fb4:	6a e0       	ldi	r22, 0x0A	; 10
    4fb6:	70 e0       	ldi	r23, 0x00	; 0
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-pos);
			servo_4(tpos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    4fc0:	80 91 67 05 	lds	r24, 0x0567
    4fc4:	90 91 68 05 	lds	r25, 0x0568
    4fc8:	02 97       	sbiw	r24, 0x02	; 2
    4fca:	90 93 68 05 	sts	0x0568, r25
    4fce:	80 93 67 05 	sts	0x0567, r24
    4fd2:	20 91 64 02 	lds	r18, 0x0264
    4fd6:	30 91 65 02 	lds	r19, 0x0265
    4fda:	82 17       	cp	r24, r18
    4fdc:	93 07       	cpc	r25, r19
    4fde:	dc f6       	brge	.-74     	; 0x4f96 <_Z11hit_trumpetiii+0x486>
    4fe0:	b9 c1       	rjmp	.+882    	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-pos);
			servo_4(tpos-error3); 
			delay(10);
		}
	}
	else if(l==0 && m==1 && r==1)// note "G"
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	09 f0       	breq	.+2      	; 0x4fe8 <_Z11hit_trumpetiii+0x4d8>
    4fe6:	9a c0       	rjmp	.+308    	; 0x511c <_Z11hit_trumpetiii+0x60c>
    4fe8:	61 30       	cpi	r22, 0x01	; 1
    4fea:	71 05       	cpc	r23, r1
    4fec:	09 f0       	breq	.+2      	; 0x4ff0 <_Z11hit_trumpetiii+0x4e0>
    4fee:	96 c0       	rjmp	.+300    	; 0x511c <_Z11hit_trumpetiii+0x60c>
    4ff0:	41 30       	cpi	r20, 0x01	; 1
    4ff2:	51 05       	cpc	r21, r1
    4ff4:	09 f0       	breq	.+2      	; 0x4ff8 <_Z11hit_trumpetiii+0x4e8>
    4ff6:	92 c0       	rjmp	.+292    	; 0x511c <_Z11hit_trumpetiii+0x60c>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    4ff8:	80 91 64 02 	lds	r24, 0x0264
    4ffc:	90 91 65 02 	lds	r25, 0x0265
    5000:	90 93 68 05 	sts	0x0568, r25
    5004:	80 93 67 05 	sts	0x0567, r24
    5008:	20 91 66 02 	lds	r18, 0x0266
    500c:	30 91 67 02 	lds	r19, 0x0267
    5010:	28 17       	cp	r18, r24
    5012:	39 07       	cpc	r19, r25
    5014:	b4 f1       	brlt	.+108    	; 0x5082 <_Z11hit_trumpetiii+0x572>
		{
			servo_2(tpos);
    5016:	0c e4       	ldi	r16, 0x4C	; 76
    5018:	12 e0       	ldi	r17, 0x02	; 2
			servo_3(error2-pos);
    501a:	0f 2e       	mov	r0, r31
    501c:	f0 e5       	ldi	r31, 0x50	; 80
    501e:	ef 2e       	mov	r14, r31
    5020:	f2 e0       	ldi	r31, 0x02	; 2
    5022:	ff 2e       	mov	r15, r31
    5024:	f0 2d       	mov	r31, r0
    5026:	c7 e6       	ldi	r28, 0x67	; 103
    5028:	d5 e0       	ldi	r29, 0x05	; 5
			servo_4(pos-error3);
    502a:	0f 2e       	mov	r0, r31
    502c:	fe e4       	ldi	r31, 0x4E	; 78
    502e:	cf 2e       	mov	r12, r31
    5030:	f2 e0       	ldi	r31, 0x02	; 2
    5032:	df 2e       	mov	r13, r31
    5034:	f0 2d       	mov	r31, r0
	}
	else if(l==0 && m==1 && r==1)// note "G"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(tpos);
    5036:	f8 01       	movw	r30, r16
    5038:	80 81       	ld	r24, Z
    503a:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    503e:	f7 01       	movw	r30, r14
    5040:	80 81       	ld	r24, Z
    5042:	98 81       	ld	r25, Y
    5044:	89 1b       	sub	r24, r25
    5046:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3);
    504a:	88 81       	ld	r24, Y
    504c:	f6 01       	movw	r30, r12
    504e:	90 81       	ld	r25, Z
    5050:	89 1b       	sub	r24, r25
    5052:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    5056:	6a e0       	ldi	r22, 0x0A	; 10
    5058:	70 e0       	ldi	r23, 0x00	; 0
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if(l==0 && m==1 && r==1)// note "G"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    5062:	80 91 67 05 	lds	r24, 0x0567
    5066:	90 91 68 05 	lds	r25, 0x0568
    506a:	02 96       	adiw	r24, 0x02	; 2
    506c:	90 93 68 05 	sts	0x0568, r25
    5070:	80 93 67 05 	sts	0x0567, r24
    5074:	20 91 66 02 	lds	r18, 0x0266
    5078:	30 91 67 02 	lds	r19, 0x0267
    507c:	28 17       	cp	r18, r24
    507e:	39 07       	cpc	r19, r25
    5080:	d4 f6       	brge	.-76     	; 0x5036 <_Z11hit_trumpetiii+0x526>
			servo_2(tpos);
			servo_3(error2-pos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
    5082:	6e e5       	ldi	r22, 0x5E	; 94
    5084:	71 e0       	ldi	r23, 0x01	; 1
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    508e:	80 91 66 02 	lds	r24, 0x0266
    5092:	90 91 67 02 	lds	r25, 0x0267
    5096:	90 93 68 05 	sts	0x0568, r25
    509a:	80 93 67 05 	sts	0x0567, r24
    509e:	20 91 64 02 	lds	r18, 0x0264
    50a2:	30 91 65 02 	lds	r19, 0x0265
    50a6:	82 17       	cp	r24, r18
    50a8:	93 07       	cpc	r25, r19
    50aa:	0c f4       	brge	.+2      	; 0x50ae <_Z11hit_trumpetiii+0x59e>
    50ac:	53 c1       	rjmp	.+678    	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(tpos);
    50ae:	0c e4       	ldi	r16, 0x4C	; 76
    50b0:	12 e0       	ldi	r17, 0x02	; 2
			servo_3(error2-pos);
    50b2:	0f 2e       	mov	r0, r31
    50b4:	f0 e5       	ldi	r31, 0x50	; 80
    50b6:	ef 2e       	mov	r14, r31
    50b8:	f2 e0       	ldi	r31, 0x02	; 2
    50ba:	ff 2e       	mov	r15, r31
    50bc:	f0 2d       	mov	r31, r0
    50be:	c7 e6       	ldi	r28, 0x67	; 103
    50c0:	d5 e0       	ldi	r29, 0x05	; 5
			servo_4(pos-error3); 
    50c2:	0f 2e       	mov	r0, r31
    50c4:	fe e4       	ldi	r31, 0x4E	; 78
    50c6:	cf 2e       	mov	r12, r31
    50c8:	f2 e0       	ldi	r31, 0x02	; 2
    50ca:	df 2e       	mov	r13, r31
    50cc:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(tpos);
    50ce:	f8 01       	movw	r30, r16
    50d0:	80 81       	ld	r24, Z
    50d2:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    50d6:	f7 01       	movw	r30, r14
    50d8:	80 81       	ld	r24, Z
    50da:	98 81       	ld	r25, Y
    50dc:	89 1b       	sub	r24, r25
    50de:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3); 
    50e2:	88 81       	ld	r24, Y
    50e4:	f6 01       	movw	r30, r12
    50e6:	90 81       	ld	r25, Z
    50e8:	89 1b       	sub	r24, r25
    50ea:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    50ee:	6a e0       	ldi	r22, 0x0A	; 10
    50f0:	70 e0       	ldi	r23, 0x00	; 0
    50f2:	80 e0       	ldi	r24, 0x00	; 0
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-pos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    50fa:	80 91 67 05 	lds	r24, 0x0567
    50fe:	90 91 68 05 	lds	r25, 0x0568
    5102:	02 97       	sbiw	r24, 0x02	; 2
    5104:	90 93 68 05 	sts	0x0568, r25
    5108:	80 93 67 05 	sts	0x0567, r24
    510c:	20 91 64 02 	lds	r18, 0x0264
    5110:	30 91 65 02 	lds	r19, 0x0265
    5114:	82 17       	cp	r24, r18
    5116:	93 07       	cpc	r25, r19
    5118:	d4 f6       	brge	.-76     	; 0x50ce <_Z11hit_trumpetiii+0x5be>
    511a:	1c c1       	rjmp	.+568    	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-pos);
			servo_4(pos-error3); 
			delay(10);
		}
	}
	else if(l==1 && m==0 && r==1)// note "A"
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	91 05       	cpc	r25, r1
    5120:	09 f0       	breq	.+2      	; 0x5124 <_Z11hit_trumpetiii+0x614>
    5122:	18 c1       	rjmp	.+560    	; 0x5354 <_Z11hit_trumpetiii+0x844>
    5124:	61 15       	cp	r22, r1
    5126:	71 05       	cpc	r23, r1
    5128:	09 f0       	breq	.+2      	; 0x512c <_Z11hit_trumpetiii+0x61c>
    512a:	94 c0       	rjmp	.+296    	; 0x5254 <_Z11hit_trumpetiii+0x744>
    512c:	41 30       	cpi	r20, 0x01	; 1
    512e:	51 05       	cpc	r21, r1
    5130:	09 f0       	breq	.+2      	; 0x5134 <_Z11hit_trumpetiii+0x624>
    5132:	90 c0       	rjmp	.+288    	; 0x5254 <_Z11hit_trumpetiii+0x744>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    5134:	80 91 64 02 	lds	r24, 0x0264
    5138:	90 91 65 02 	lds	r25, 0x0265
    513c:	90 93 68 05 	sts	0x0568, r25
    5140:	80 93 67 05 	sts	0x0567, r24
    5144:	20 91 66 02 	lds	r18, 0x0266
    5148:	30 91 67 02 	lds	r19, 0x0267
    514c:	28 17       	cp	r18, r24
    514e:	39 07       	cpc	r19, r25
    5150:	ac f1       	brlt	.+106    	; 0x51bc <_Z11hit_trumpetiii+0x6ac>
		{
			servo_2(pos);
			servo_3(error2-tpos);
    5152:	c0 e5       	ldi	r28, 0x50	; 80
    5154:	d2 e0       	ldi	r29, 0x02	; 2
    5156:	0c e4       	ldi	r16, 0x4C	; 76
    5158:	12 e0       	ldi	r17, 0x02	; 2
			servo_4(pos-error3);
    515a:	0f 2e       	mov	r0, r31
    515c:	f7 e6       	ldi	r31, 0x67	; 103
    515e:	ef 2e       	mov	r14, r31
    5160:	f5 e0       	ldi	r31, 0x05	; 5
    5162:	ff 2e       	mov	r15, r31
    5164:	f0 2d       	mov	r31, r0
    5166:	0f 2e       	mov	r0, r31
    5168:	fe e4       	ldi	r31, 0x4E	; 78
    516a:	cf 2e       	mov	r12, r31
    516c:	f2 e0       	ldi	r31, 0x02	; 2
    516e:	df 2e       	mov	r13, r31
    5170:	f0 2d       	mov	r31, r0
	}
	else if(l==1 && m==0 && r==1)// note "A"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(pos);
    5172:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    5176:	88 81       	ld	r24, Y
    5178:	f8 01       	movw	r30, r16
    517a:	90 81       	ld	r25, Z
    517c:	89 1b       	sub	r24, r25
    517e:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3);
    5182:	f7 01       	movw	r30, r14
    5184:	80 81       	ld	r24, Z
    5186:	f6 01       	movw	r30, r12
    5188:	90 81       	ld	r25, Z
    518a:	89 1b       	sub	r24, r25
    518c:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    5190:	6a e0       	ldi	r22, 0x0A	; 10
    5192:	70 e0       	ldi	r23, 0x00	; 0
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if(l==1 && m==0 && r==1)// note "A"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    519c:	80 91 67 05 	lds	r24, 0x0567
    51a0:	90 91 68 05 	lds	r25, 0x0568
    51a4:	02 96       	adiw	r24, 0x02	; 2
    51a6:	90 93 68 05 	sts	0x0568, r25
    51aa:	80 93 67 05 	sts	0x0567, r24
    51ae:	20 91 66 02 	lds	r18, 0x0266
    51b2:	30 91 67 02 	lds	r19, 0x0267
    51b6:	28 17       	cp	r18, r24
    51b8:	39 07       	cpc	r19, r25
    51ba:	dc f6       	brge	.-74     	; 0x5172 <_Z11hit_trumpetiii+0x662>
			servo_2(pos);
			servo_3(error2-tpos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
    51bc:	6e e5       	ldi	r22, 0x5E	; 94
    51be:	71 e0       	ldi	r23, 0x01	; 1
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    51c8:	80 91 66 02 	lds	r24, 0x0266
    51cc:	90 91 67 02 	lds	r25, 0x0267
    51d0:	90 93 68 05 	sts	0x0568, r25
    51d4:	80 93 67 05 	sts	0x0567, r24
    51d8:	20 91 64 02 	lds	r18, 0x0264
    51dc:	30 91 65 02 	lds	r19, 0x0265
    51e0:	82 17       	cp	r24, r18
    51e2:	93 07       	cpc	r25, r19
    51e4:	0c f4       	brge	.+2      	; 0x51e8 <_Z11hit_trumpetiii+0x6d8>
    51e6:	b6 c0       	rjmp	.+364    	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(pos);
			servo_3(error2-tpos);
    51e8:	c0 e5       	ldi	r28, 0x50	; 80
    51ea:	d2 e0       	ldi	r29, 0x02	; 2
    51ec:	0c e4       	ldi	r16, 0x4C	; 76
    51ee:	12 e0       	ldi	r17, 0x02	; 2
			servo_4(pos-error3);
    51f0:	0f 2e       	mov	r0, r31
    51f2:	f7 e6       	ldi	r31, 0x67	; 103
    51f4:	ef 2e       	mov	r14, r31
    51f6:	f5 e0       	ldi	r31, 0x05	; 5
    51f8:	ff 2e       	mov	r15, r31
    51fa:	f0 2d       	mov	r31, r0
    51fc:	0f 2e       	mov	r0, r31
    51fe:	fe e4       	ldi	r31, 0x4E	; 78
    5200:	cf 2e       	mov	r12, r31
    5202:	f2 e0       	ldi	r31, 0x02	; 2
    5204:	df 2e       	mov	r13, r31
    5206:	f0 2d       	mov	r31, r0
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(pos);
    5208:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-tpos);
    520c:	88 81       	ld	r24, Y
    520e:	f8 01       	movw	r30, r16
    5210:	90 81       	ld	r25, Z
    5212:	89 1b       	sub	r24, r25
    5214:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3);
    5218:	f7 01       	movw	r30, r14
    521a:	80 81       	ld	r24, Z
    521c:	f6 01       	movw	r30, r12
    521e:	90 81       	ld	r25, Z
    5220:	89 1b       	sub	r24, r25
    5222:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    5226:	6a e0       	ldi	r22, 0x0A	; 10
    5228:	70 e0       	ldi	r23, 0x00	; 0
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-tpos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    5232:	80 91 67 05 	lds	r24, 0x0567
    5236:	90 91 68 05 	lds	r25, 0x0568
    523a:	02 97       	sbiw	r24, 0x02	; 2
    523c:	90 93 68 05 	sts	0x0568, r25
    5240:	80 93 67 05 	sts	0x0567, r24
    5244:	20 91 64 02 	lds	r18, 0x0264
    5248:	30 91 65 02 	lds	r19, 0x0265
    524c:	82 17       	cp	r24, r18
    524e:	93 07       	cpc	r25, r19
    5250:	dc f6       	brge	.-74     	; 0x5208 <_Z11hit_trumpetiii+0x6f8>
    5252:	80 c0       	rjmp	.+256    	; 0x5354 <_Z11hit_trumpetiii+0x844>
			servo_3(error2-tpos);
			servo_4(pos-error3);
			delay(10);
		}
	}
	else if(l==1 && m==1 && r==1)// note "B"
    5254:	61 30       	cpi	r22, 0x01	; 1
    5256:	71 05       	cpc	r23, r1
    5258:	09 f0       	breq	.+2      	; 0x525c <_Z11hit_trumpetiii+0x74c>
    525a:	7c c0       	rjmp	.+248    	; 0x5354 <_Z11hit_trumpetiii+0x844>
    525c:	41 30       	cpi	r20, 0x01	; 1
    525e:	51 05       	cpc	r21, r1
    5260:	09 f0       	breq	.+2      	; 0x5264 <_Z11hit_trumpetiii+0x754>
    5262:	78 c0       	rjmp	.+240    	; 0x5354 <_Z11hit_trumpetiii+0x844>
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    5264:	80 91 64 02 	lds	r24, 0x0264
    5268:	90 91 65 02 	lds	r25, 0x0265
    526c:	90 93 68 05 	sts	0x0568, r25
    5270:	80 93 67 05 	sts	0x0567, r24
    5274:	20 91 66 02 	lds	r18, 0x0266
    5278:	30 91 67 02 	lds	r19, 0x0267
    527c:	28 17       	cp	r18, r24
    527e:	39 07       	cpc	r19, r25
    5280:	74 f1       	brlt	.+92     	; 0x52de <_Z11hit_trumpetiii+0x7ce>
		{
			servo_2(pos);
			servo_3(error2-pos);
    5282:	00 e5       	ldi	r16, 0x50	; 80
    5284:	12 e0       	ldi	r17, 0x02	; 2
    5286:	c7 e6       	ldi	r28, 0x67	; 103
    5288:	d5 e0       	ldi	r29, 0x05	; 5
			servo_4(pos-error3);
    528a:	0f 2e       	mov	r0, r31
    528c:	fe e4       	ldi	r31, 0x4E	; 78
    528e:	ef 2e       	mov	r14, r31
    5290:	f2 e0       	ldi	r31, 0x02	; 2
    5292:	ff 2e       	mov	r15, r31
    5294:	f0 2d       	mov	r31, r0
	}
	else if(l==1 && m==1 && r==1)// note "B"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
		{
			servo_2(pos);
    5296:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    529a:	f8 01       	movw	r30, r16
    529c:	80 81       	ld	r24, Z
    529e:	98 81       	ld	r25, Y
    52a0:	89 1b       	sub	r24, r25
    52a2:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-error3);
    52a6:	88 81       	ld	r24, Y
    52a8:	f7 01       	movw	r30, r14
    52aa:	90 81       	ld	r25, Z
    52ac:	89 1b       	sub	r24, r25
    52ae:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    52b2:	6a e0       	ldi	r22, 0x0A	; 10
    52b4:	70 e0       	ldi	r23, 0x00	; 0
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			delay(10);
		}
	}
	else if(l==1 && m==1 && r==1)// note "B"
	{
		for (pos = start_position; pos <=stop_position; pos += 2)
    52be:	80 91 67 05 	lds	r24, 0x0567
    52c2:	90 91 68 05 	lds	r25, 0x0568
    52c6:	02 96       	adiw	r24, 0x02	; 2
    52c8:	90 93 68 05 	sts	0x0568, r25
    52cc:	80 93 67 05 	sts	0x0567, r24
    52d0:	20 91 66 02 	lds	r18, 0x0266
    52d4:	30 91 67 02 	lds	r19, 0x0267
    52d8:	28 17       	cp	r18, r24
    52da:	39 07       	cpc	r19, r25
    52dc:	e4 f6       	brge	.-72     	; 0x5296 <_Z11hit_trumpetiii+0x786>
			servo_2(pos);
			servo_3(error2-pos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
    52de:	6e e5       	ldi	r22, 0x5E	; 94
    52e0:	71 e0       	ldi	r23, 0x01	; 1
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
		for (pos =stop_position; pos >=start_position; pos -= 2)
    52ea:	80 91 66 02 	lds	r24, 0x0266
    52ee:	90 91 67 02 	lds	r25, 0x0267
    52f2:	90 93 68 05 	sts	0x0568, r25
    52f6:	80 93 67 05 	sts	0x0567, r24
    52fa:	20 91 64 02 	lds	r18, 0x0264
    52fe:	30 91 65 02 	lds	r19, 0x0265
    5302:	82 17       	cp	r24, r18
    5304:	93 07       	cpc	r25, r19
    5306:	34 f1       	brlt	.+76     	; 0x5354 <_Z11hit_trumpetiii+0x844>
		{ 
			servo_2(pos);
			servo_3(error2-pos);
    5308:	00 e5       	ldi	r16, 0x50	; 80
    530a:	12 e0       	ldi	r17, 0x02	; 2
    530c:	c7 e6       	ldi	r28, 0x67	; 103
    530e:	d5 e0       	ldi	r29, 0x05	; 5
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
		{ 
			servo_2(pos);
    5310:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
			servo_3(error2-pos);
    5314:	f8 01       	movw	r30, r16
    5316:	80 81       	ld	r24, Z
    5318:	98 81       	ld	r25, Y
    531a:	89 1b       	sub	r24, r25
    531c:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
			servo_4(pos-6); 
    5320:	88 81       	ld	r24, Y
    5322:	86 50       	subi	r24, 0x06	; 6
    5324:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
			delay(10);
    5328:	6a e0       	ldi	r22, 0x0A	; 10
    532a:	70 e0       	ldi	r23, 0x00	; 0
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
			servo_3(error2-pos);
			servo_4(pos-error3);
			delay(10);
		}
		delay(350);
		for (pos =stop_position; pos >=start_position; pos -= 2)
    5334:	80 91 67 05 	lds	r24, 0x0567
    5338:	90 91 68 05 	lds	r25, 0x0568
    533c:	02 97       	sbiw	r24, 0x02	; 2
    533e:	90 93 68 05 	sts	0x0568, r25
    5342:	80 93 67 05 	sts	0x0567, r24
    5346:	20 91 64 02 	lds	r18, 0x0264
    534a:	30 91 65 02 	lds	r19, 0x0265
    534e:	82 17       	cp	r24, r18
    5350:	93 07       	cpc	r25, r19
    5352:	f4 f6       	brge	.-68     	; 0x5310 <_Z11hit_trumpetiii+0x800>
			servo_3(error2-pos);
			servo_4(pos-6); 
			delay(10);
		}
	}
}
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	df 90       	pop	r13
    5362:	cf 90       	pop	r12
    5364:	08 95       	ret

00005366 <_Z10uart0_initv>:
Example Call	:	uart0_init();
***********************************/

void uart0_init()
{
	UCSR0B = 0x00;							//disable while setting baud rate
    5366:	e1 ec       	ldi	r30, 0xC1	; 193
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    536c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
    5370:	a2 ec       	ldi	r26, 0xC2	; 194
    5372:	b0 e0       	ldi	r27, 0x00	; 0
    5374:	86 e0       	ldi	r24, 0x06	; 6
    5376:	8c 93       	st	X, r24
	UBRR0L = 0x5F; 							//9600BPS at 14745600Hz
    5378:	9f e5       	ldi	r25, 0x5F	; 95
    537a:	90 93 c4 00 	sts	0x00C4, r25
	UBRR0H = 0x00;
    537e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
    5382:	98 e9       	ldi	r25, 0x98	; 152
    5384:	90 83       	st	Z, r25
	UCSR0C = 3<<1;							//setting 8-bit character and 1 stop bit
    5386:	8c 93       	st	X, r24
	UCSR0B = RX | TX;
    5388:	88 e1       	ldi	r24, 0x18	; 24
    538a:	80 83       	st	Z, r24
}
    538c:	08 95       	ret

0000538e <_Z7uart_txc>:
Example Call	:	uart_tx(data);
***********************************/

void uart_tx(char data)
{
	while(!(UCSR0A & TE));						//waiting to transmit
    538e:	e0 ec       	ldi	r30, 0xC0	; 192
    5390:	f0 e0       	ldi	r31, 0x00	; 0
    5392:	90 81       	ld	r25, Z
    5394:	95 ff       	sbrs	r25, 5
    5396:	fd cf       	rjmp	.-6      	; 0x5392 <_Z7uart_txc+0x4>
	UDR0 = data;
    5398:	80 93 c6 00 	sts	0x00C6, r24
}
    539c:	08 95       	ret

0000539e <__vector_25>:
Functionality	:	The interrupt is called when the data is received in the UDR register
Example Call	:	Called automatically
***********************************/

ISR(USART0_RX_vect)
{
    539e:	1f 92       	push	r1
    53a0:	0f 92       	push	r0
    53a2:	0f b6       	in	r0, 0x3f	; 63
    53a4:	0f 92       	push	r0
    53a6:	11 24       	eor	r1, r1
    53a8:	8f 93       	push	r24
	data = UDR0;
    53aa:	80 91 c6 00 	lds	r24, 0x00C6
    53ae:	80 93 60 05 	sts	0x0560, r24
}
    53b2:	8f 91       	pop	r24
    53b4:	0f 90       	pop	r0
    53b6:	0f be       	out	0x3f, r0	; 63
    53b8:	0f 90       	pop	r0
    53ba:	1f 90       	pop	r1
    53bc:	18 95       	reti

000053be <_Z7uart_rxv>:
Example Call	:	uart_rx();
***********************************/

char uart_rx()
{
	while(!(UCSR0A & RE));						//waiting to receive
    53be:	e0 ec       	ldi	r30, 0xC0	; 192
    53c0:	f0 e0       	ldi	r31, 0x00	; 0
    53c2:	80 81       	ld	r24, Z
    53c4:	88 23       	and	r24, r24
    53c6:	ec f7       	brge	.-6      	; 0x53c2 <_Z7uart_rxv+0x4>
	return UDR0;
    53c8:	80 91 c6 00 	lds	r24, 0x00C6
}
    53cc:	08 95       	ret

000053ce <_Z20serial_communicationv>:
Functionality	:	Communicates between Atmega 2560 and serial port 
Example Call	:	serial_communication();
***********************************/

void serial_communication()
{
    53ce:	ef 92       	push	r14
    53d0:	ff 92       	push	r15
    53d2:	0f 93       	push	r16
    53d4:	1f 93       	push	r17
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
	uart0_init();
    53da:	0e 94 b3 29 	call	0x5366	; 0x5366 <_Z10uart0_initv>
    53de:	0f e9       	ldi	r16, 0x9F	; 159
    53e0:	15 e0       	ldi	r17, 0x05	; 5
Output			:	None
Functionality	:	Communicates between Atmega 2560 and serial port 
Example Call	:	serial_communication();
***********************************/

void serial_communication()
    53e2:	e8 01       	movw	r28, r16
    53e4:	60 96       	adiw	r28, 0x10	; 16
    53e6:	78 01       	movw	r14, r16
	char data2;
	char data3;
	int i=0;

	for(i=0;i<16;i++){
		data1=uart_rx();	//Receives type of instrument from Serial port and stores in data1 
    53e8:	0e 94 df 29 	call	0x53be	; 0x53be <_Z7uart_rxv>
		instruments[i] = data1;
    53ec:	f7 01       	movw	r30, r14
    53ee:	81 93       	st	Z+, r24
    53f0:	7f 01       	movw	r14, r30
	char data1;
	char data2;
	char data3;
	int i=0;

	for(i=0;i<16;i++){
    53f2:	ec 17       	cp	r30, r28
    53f4:	fd 07       	cpc	r31, r29
    53f6:	c1 f7       	brne	.-16     	; 0x53e8 <_Z20serial_communicationv+0x1a>
		instruments[i] = data1;
	}

	for(i=0 ; i<16;i++)
	{
		uart_tx(instruments[i]);	//Transmits data from Atmega 2560 to Serial port for verification
    53f8:	f8 01       	movw	r30, r16
    53fa:	81 91       	ld	r24, Z+
    53fc:	8f 01       	movw	r16, r30
    53fe:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
	for(i=0;i<16;i++){
		data1=uart_rx();	//Receives type of instrument from Serial port and stores in data1 
		instruments[i] = data1;
	}

	for(i=0 ; i<16;i++)
    5402:	0c 17       	cp	r16, r28
    5404:	1d 07       	cpc	r17, r29
    5406:	c1 f7       	brne	.-16     	; 0x53f8 <_Z20serial_communicationv+0x2a>
    5408:	0f eb       	ldi	r16, 0xBF	; 191
    540a:	15 e0       	ldi	r17, 0x05	; 5
Output			:	None
Functionality	:	Communicates between Atmega 2560 and serial port 
Example Call	:	serial_communication();
***********************************/

void serial_communication()
    540c:	e8 01       	movw	r28, r16
    540e:	a8 96       	adiw	r28, 0x28	; 40
    5410:	78 01       	movw	r14, r16
	for(i=0 ; i<16;i++)
	{
		uart_tx(instruments[i]);	//Transmits data from Atmega 2560 to Serial port for verification
	}
	for(i=0;i<40;i++){
		data2=uart_rx();
    5412:	0e 94 df 29 	call	0x53be	; 0x53be <_Z7uart_rxv>
		received_onsets[i] = data2;	//Receives the onsets of audio file and stores in data2
    5416:	f7 01       	movw	r30, r14
    5418:	81 93       	st	Z+, r24
    541a:	7f 01       	movw	r14, r30

	for(i=0 ; i<16;i++)
	{
		uart_tx(instruments[i]);	//Transmits data from Atmega 2560 to Serial port for verification
	}
	for(i=0;i<40;i++){
    541c:	ec 17       	cp	r30, r28
    541e:	fd 07       	cpc	r31, r29
    5420:	c1 f7       	brne	.-16     	; 0x5412 <_Z20serial_communicationv+0x44>
		data2=uart_rx();
		received_onsets[i] = data2;	//Receives the onsets of audio file and stores in data2
	}
	for(i=0 ; i<40;i++)
	{
		uart_tx(received_onsets[i]);	//Transmits data from Atmega 2560 to Serial port for verification
    5422:	f8 01       	movw	r30, r16
    5424:	81 91       	ld	r24, Z+
    5426:	8f 01       	movw	r16, r30
    5428:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
	}
	for(i=0;i<40;i++){
		data2=uart_rx();
		received_onsets[i] = data2;	//Receives the onsets of audio file and stores in data2
	}
	for(i=0 ; i<40;i++)
    542c:	0c 17       	cp	r16, r28
    542e:	1d 07       	cpc	r17, r29
    5430:	c1 f7       	brne	.-16     	; 0x5422 <_Z20serial_communicationv+0x54>
    5432:	0f ea       	ldi	r16, 0xAF	; 175
    5434:	15 e0       	ldi	r17, 0x05	; 5
Output			:	None
Functionality	:	Communicates between Atmega 2560 and serial port 
Example Call	:	serial_communication();
***********************************/

void serial_communication()
    5436:	e8 01       	movw	r28, r16
    5438:	60 96       	adiw	r28, 0x10	; 16
    543a:	78 01       	movw	r14, r16
	for(i=0 ; i<40;i++)
	{
		uart_tx(received_onsets[i]);	//Transmits data from Atmega 2560 to Serial port for verification
	}
	for(i=0;i<16;i++){
		data3=uart_rx();	//Receives the notes of audio file and stores in data3
    543c:	0e 94 df 29 	call	0x53be	; 0x53be <_Z7uart_rxv>
		notes[i] = data3;
    5440:	f7 01       	movw	r30, r14
    5442:	81 93       	st	Z+, r24
    5444:	7f 01       	movw	r14, r30
	}
	for(i=0 ; i<40;i++)
	{
		uart_tx(received_onsets[i]);	//Transmits data from Atmega 2560 to Serial port for verification
	}
	for(i=0;i<16;i++){
    5446:	ec 17       	cp	r30, r28
    5448:	fd 07       	cpc	r31, r29
    544a:	c1 f7       	brne	.-16     	; 0x543c <_Z20serial_communicationv+0x6e>
		data3=uart_rx();	//Receives the notes of audio file and stores in data3
		notes[i] = data3;
	}
	for(i=0 ; i<16;i++)
	{
		uart_tx(notes[i]);	//Transmits data from Atmega 2560 to Serial port for verification
    544c:	f8 01       	movw	r30, r16
    544e:	81 91       	ld	r24, Z+
    5450:	8f 01       	movw	r16, r30
    5452:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
	}
	for(i=0;i<16;i++){
		data3=uart_rx();	//Receives the notes of audio file and stores in data3
		notes[i] = data3;
	}
	for(i=0 ; i<16;i++)
    5456:	0c 17       	cp	r16, r28
    5458:	1d 07       	cpc	r17, r29
    545a:	c1 f7       	brne	.-16     	; 0x544c <_Z20serial_communicationv+0x7e>
	{
		uart_tx(notes[i]);	//Transmits data from Atmega 2560 to Serial port for verification
	}
	PORTA = 0X00;
    545c:	12 b8       	out	0x02, r1	; 2
	flag = 1;
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	90 93 64 05 	sts	0x0564, r25
    5466:	80 93 63 05 	sts	0x0563, r24
}
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	0f 91       	pop	r16
    5472:	ff 90       	pop	r15
    5474:	ef 90       	pop	r14
    5476:	08 95       	ret

00005478 <_Z18array_segmentationv>:
Output			:	None
Functionality	:	Conversion of the received string to the desired format
Example Call	:	array_segmentation();
***********************************/

void array_segmentation(){
    5478:	2f 92       	push	r2
    547a:	3f 92       	push	r3
    547c:	4f 92       	push	r4
    547e:	5f 92       	push	r5
    5480:	6f 92       	push	r6
    5482:	7f 92       	push	r7
    5484:	8f 92       	push	r8
    5486:	9f 92       	push	r9
    5488:	af 92       	push	r10
    548a:	bf 92       	push	r11
    548c:	cf 92       	push	r12
    548e:	df 92       	push	r13
    5490:	ef 92       	push	r14
    5492:	ff 92       	push	r15
    5494:	0f 93       	push	r16
    5496:	1f 93       	push	r17
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	00 d0       	rcall	.+0      	; 0x549e <_Z18array_segmentationv+0x26>
    549e:	0f 92       	push	r0
    54a0:	0f 92       	push	r0
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	0f 2e       	mov	r0, r31
    54a8:	ff e9       	ldi	r31, 0x9F	; 159
    54aa:	cf 2e       	mov	r12, r31
    54ac:	f5 e0       	ldi	r31, 0x05	; 5
    54ae:	df 2e       	mov	r13, r31
    54b0:	f0 2d       	mov	r31, r0
	int i=0,j=0,k=0,l=0,m=0;
    54b2:	aa 24       	eor	r10, r10
    54b4:	bb 24       	eor	r11, r11
    54b6:	00 e0       	ldi	r16, 0x00	; 0
    54b8:	10 e0       	ldi	r17, 0x00	; 0
	char sig_onset[5];
	char result[5];

	while(i < strlen(instruments)){
    54ba:	76 01       	movw	r14, r12
		if(instruments[i] != ','){
			instr[j] = instruments[i];	//The instrument string received is converted and individual data is stored in the array.
    54bc:	0f 2e       	mov	r0, r31
    54be:	ff e6       	ldi	r31, 0x6F	; 111
    54c0:	8f 2e       	mov	r8, r31
    54c2:	f5 e0       	ldi	r31, 0x05	; 5
    54c4:	9f 2e       	mov	r9, r31
    54c6:	f0 2d       	mov	r31, r0
void array_segmentation(){
	int i=0,j=0,k=0,l=0,m=0;
	char sig_onset[5];
	char result[5];

	while(i < strlen(instruments)){
    54c8:	10 c0       	rjmp	.+32     	; 0x54ea <_Z18array_segmentationv+0x72>
		if(instruments[i] != ','){
    54ca:	d6 01       	movw	r26, r12
    54cc:	8d 91       	ld	r24, X+
    54ce:	6d 01       	movw	r12, r26
    54d0:	8c 32       	cpi	r24, 0x2C	; 44
    54d2:	49 f0       	breq	.+18     	; 0x54e6 <_Z18array_segmentationv+0x6e>
			instr[j] = instruments[i];	//The instrument string received is converted and individual data is stored in the array.
    54d4:	f4 01       	movw	r30, r8
    54d6:	ea 0d       	add	r30, r10
    54d8:	fb 1d       	adc	r31, r11
    54da:	80 83       	st	Z, r24
			uart_tx(instr[j]);
    54dc:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
			j++;
    54e0:	08 94       	sec
    54e2:	a1 1c       	adc	r10, r1
    54e4:	b1 1c       	adc	r11, r1
		}
		i++;
    54e6:	0f 5f       	subi	r16, 0xFF	; 255
    54e8:	1f 4f       	sbci	r17, 0xFF	; 255
    54ea:	c8 01       	movw	r24, r16
void array_segmentation(){
	int i=0,j=0,k=0,l=0,m=0;
	char sig_onset[5];
	char result[5];

	while(i < strlen(instruments)){
    54ec:	f7 01       	movw	r30, r14
    54ee:	01 90       	ld	r0, Z+
    54f0:	00 20       	and	r0, r0
    54f2:	e9 f7       	brne	.-6      	; 0x54ee <_Z18array_segmentationv+0x76>
    54f4:	31 97       	sbiw	r30, 0x01	; 1
    54f6:	ee 19       	sub	r30, r14
    54f8:	ff 09       	sbc	r31, r15
    54fa:	0e 17       	cp	r16, r30
    54fc:	1f 07       	cpc	r17, r31
    54fe:	28 f3       	brcs	.-54     	; 0x54ca <_Z18array_segmentationv+0x52>
    5500:	05 c0       	rjmp	.+10     	; 0x550c <_Z18array_segmentationv+0x94>
			j++;
		}
		i++;
	}
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
    5502:	f8 01       	movw	r30, r16
    5504:	40 81       	ld	r20, Z
    5506:	f9 01       	movw	r30, r18
    5508:	40 83       	st	Z, r20
    550a:	07 c0       	rjmp	.+14     	; 0x551a <_Z18array_segmentationv+0xa2>
			uart_tx(instr[j]);
			j++;
		}
		i++;
	}
	while(i<strlen(instr)){
    550c:	af e6       	ldi	r26, 0x6F	; 111
    550e:	b5 e0       	ldi	r27, 0x05	; 5
		instr_1[i] = instr[i];
    5510:	98 01       	movw	r18, r16
    5512:	21 57       	subi	r18, 0x71	; 113
    5514:	3a 4f       	sbci	r19, 0xFA	; 250
    5516:	0a 0f       	add	r16, r26
    5518:	1b 1f       	adc	r17, r27
			uart_tx(instr[j]);
			j++;
		}
		i++;
	}
	while(i<strlen(instr)){
    551a:	fd 01       	movw	r30, r26
    551c:	01 90       	ld	r0, Z+
    551e:	00 20       	and	r0, r0
    5520:	e9 f7       	brne	.-6      	; 0x551c <_Z18array_segmentationv+0xa4>
    5522:	31 97       	sbiw	r30, 0x01	; 1
    5524:	ea 1b       	sub	r30, r26
    5526:	fb 0b       	sbc	r31, r27
    5528:	8e 17       	cp	r24, r30
    552a:	9f 07       	cpc	r25, r31
    552c:	50 f3       	brcs	.-44     	; 0x5502 <_Z18array_segmentationv+0x8a>
    552e:	4f ea       	ldi	r20, 0xAF	; 175
    5530:	55 e0       	ldi	r21, 0x05	; 5
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	80 e0       	ldi	r24, 0x00	; 0
    5538:	90 e0       	ldi	r25, 0x00	; 0
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
    553a:	da 01       	movw	r26, r20
		if(notes[i] != ','){
			notes_[j] = notes[i];	//The note string received is converted and individual data is stored in the array.
    553c:	6f e7       	ldi	r22, 0x7F	; 127
    553e:	75 e0       	ldi	r23, 0x05	; 5
    5540:	0c c0       	rjmp	.+24     	; 0x555a <_Z18array_segmentationv+0xe2>
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
		if(notes[i] != ','){
    5542:	fa 01       	movw	r30, r20
    5544:	01 91       	ld	r16, Z+
    5546:	af 01       	movw	r20, r30
    5548:	0c 32       	cpi	r16, 0x2C	; 44
    554a:	31 f0       	breq	.+12     	; 0x5558 <_Z18array_segmentationv+0xe0>
			notes_[j] = notes[i];	//The note string received is converted and individual data is stored in the array.
    554c:	fb 01       	movw	r30, r22
    554e:	e2 0f       	add	r30, r18
    5550:	f3 1f       	adc	r31, r19
    5552:	00 83       	st	Z, r16
			j++;
    5554:	2f 5f       	subi	r18, 0xFF	; 255
    5556:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		i++;
    5558:	01 96       	adiw	r24, 0x01	; 1
	}
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
    555a:	fd 01       	movw	r30, r26
    555c:	01 90       	ld	r0, Z+
    555e:	00 20       	and	r0, r0
    5560:	e9 f7       	brne	.-6      	; 0x555c <_Z18array_segmentationv+0xe4>
    5562:	31 97       	sbiw	r30, 0x01	; 1
    5564:	ea 1b       	sub	r30, r26
    5566:	fb 0b       	sbc	r31, r27
    5568:	8e 17       	cp	r24, r30
    556a:	9f 07       	cpc	r25, r31
    556c:	50 f3       	brcs	.-44     	; 0x5542 <_Z18array_segmentationv+0xca>
    556e:	19 c0       	rjmp	.+50     	; 0x55a2 <_Z18array_segmentationv+0x12a>
Output			:	None
Functionality	:	Conversion of the received string to the desired format
Example Call	:	array_segmentation();
***********************************/

void array_segmentation(){
    5570:	d8 01       	movw	r26, r16
    5572:	a1 54       	subi	r26, 0x41	; 65
    5574:	ba 4f       	sbci	r27, 0xFA	; 250
	}
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
    5576:	c5 01       	movw	r24, r10
	}
	i=0;j=0;
	while(i < strlen(received_onsets))
	{
		j=0;
		while(received_onsets[i] != ',' && i < strlen(received_onsets))
    5578:	2d 91       	ld	r18, X+
    557a:	2c 32       	cpi	r18, 0x2C	; 44
    557c:	09 f4       	brne	.+2      	; 0x5580 <_Z18array_segmentationv+0x108>
    557e:	d4 c0       	rjmp	.+424    	; 0x5728 <_Z18array_segmentationv+0x2b0>
    5580:	f7 01       	movw	r30, r14
    5582:	01 90       	ld	r0, Z+
    5584:	00 20       	and	r0, r0
    5586:	e9 f7       	brne	.-6      	; 0x5582 <_Z18array_segmentationv+0x10a>
    5588:	31 97       	sbiw	r30, 0x01	; 1
    558a:	ee 19       	sub	r30, r14
    558c:	ff 09       	sbc	r31, r15
    558e:	0e 17       	cp	r16, r30
    5590:	1f 07       	cpc	r17, r31
    5592:	08 f0       	brcs	.+2      	; 0x5596 <_Z18array_segmentationv+0x11e>
    5594:	c9 c0       	rjmp	.+402    	; 0x5728 <_Z18array_segmentationv+0x2b0>
		{
			sig_onset[j] = received_onsets[i];	//The string received is converted and individual data is stored in the array.
    5596:	fc 01       	movw	r30, r24
    5598:	21 93       	st	Z+, r18
    559a:	cf 01       	movw	r24, r30
			j++;
			i++;
    559c:	0f 5f       	subi	r16, 0xFF	; 255
    559e:	1f 4f       	sbci	r17, 0xFF	; 255
    55a0:	eb cf       	rjmp	.-42     	; 0x5578 <_Z18array_segmentationv+0x100>
    55a2:	0f 2e       	mov	r0, r31
    55a4:	f1 ef       	ldi	r31, 0xF1	; 241
    55a6:	8f 2e       	mov	r8, r31
    55a8:	f5 e0       	ldi	r31, 0x05	; 5
    55aa:	9f 2e       	mov	r9, r31
    55ac:	f0 2d       	mov	r31, r0
	}
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
    55ae:	64 01       	movw	r12, r8
    55b0:	00 e0       	ldi	r16, 0x00	; 0
    55b2:	10 e0       	ldi	r17, 0x00	; 0
			j++;
		}
		i++;
	}
	i=0;j=0;
	while(i < strlen(received_onsets))
    55b4:	0f 2e       	mov	r0, r31
    55b6:	ff eb       	ldi	r31, 0xBF	; 191
    55b8:	ef 2e       	mov	r14, r31
    55ba:	f5 e0       	ldi	r31, 0x05	; 5
    55bc:	ff 2e       	mov	r15, r31
    55be:	f0 2d       	mov	r31, r0
	}
	while(i<strlen(instr)){
		instr_1[i] = instr[i];
	}
	i=0;j=0;
	while(i < strlen(notes)){
    55c0:	5e 01       	movw	r10, r28
    55c2:	08 94       	sec
    55c4:	a1 1c       	adc	r10, r1
    55c6:	b1 1c       	adc	r11, r1
			j++;
		}
		i++;
	}
	i=0;j=0;
	while(i < strlen(received_onsets))
    55c8:	f7 01       	movw	r30, r14
    55ca:	01 90       	ld	r0, Z+
    55cc:	00 20       	and	r0, r0
    55ce:	e9 f7       	brne	.-6      	; 0x55ca <_Z18array_segmentationv+0x152>
    55d0:	31 97       	sbiw	r30, 0x01	; 1
    55d2:	ee 19       	sub	r30, r14
    55d4:	ff 09       	sbc	r31, r15
    55d6:	0e 17       	cp	r16, r30
    55d8:	1f 07       	cpc	r17, r31
    55da:	50 f2       	brcs	.-108    	; 0x5570 <_Z18array_segmentationv+0xf8>
    55dc:	0f e8       	ldi	r16, 0x8F	; 143
    55de:	15 e0       	ldi	r17, 0x05	; 5
Output			:	None
Functionality	:	Conversion of the received string to the desired format
Example Call	:	array_segmentation();
***********************************/

void array_segmentation(){
    55e0:	ee 24       	eor	r14, r14
    55e2:	ff 24       	eor	r15, r15
    55e4:	68 94       	set
    55e6:	e3 f8       	bld	r14, 3
    55e8:	e0 0e       	add	r14, r16
    55ea:	f1 1e       	adc	r15, r17
		i++;
		onset[k] = atof(sig_onset);	// The individual onsets present in the character data type are stored as float in the onset array 
		k++;
	}
	for(k=0;k<8;k++){
		uart_tx(instr_1[k]);
    55ec:	d8 01       	movw	r26, r16
    55ee:	8d 91       	ld	r24, X+
    55f0:	8d 01       	movw	r16, r26
    55f2:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
		}
		i++;
		onset[k] = atof(sig_onset);	// The individual onsets present in the character data type are stored as float in the onset array 
		k++;
	}
	for(k=0;k<8;k++){
    55f6:	0e 15       	cp	r16, r14
    55f8:	1f 05       	cpc	r17, r15
    55fa:	c1 f7       	brne	.-16     	; 0x55ec <_Z18array_segmentationv+0x174>
    55fc:	0f e6       	ldi	r16, 0x6F	; 111
    55fe:	15 e0       	ldi	r17, 0x05	; 5
    5600:	0f 2e       	mov	r0, r31
    5602:	ff e7       	ldi	r31, 0x7F	; 127
    5604:	ef 2e       	mov	r14, r31
    5606:	f5 e0       	ldi	r31, 0x05	; 5
    5608:	ff 2e       	mov	r15, r31
    560a:	f0 2d       	mov	r31, r0
Output			:	None
Functionality	:	Conversion of the received string to the desired format
Example Call	:	array_segmentation();
***********************************/

void array_segmentation(){
    560c:	aa 24       	eor	r10, r10
    560e:	bb 24       	eor	r11, r11
    5610:	68 94       	set
    5612:	a4 f8       	bld	r10, 4
    5614:	a0 0e       	add	r10, r16
    5616:	b1 1e       	adc	r11, r17
    5618:	44 24       	eor	r4, r4
    561a:	55 24       	eor	r5, r5
    561c:	66 24       	eor	r6, r6
    561e:	77 24       	eor	r7, r7
	j=0;i=0,k=0;
	
	while(i<16){
		if(instr[i] =='P'){		//Detects whether the instrument is piano or trumpet 
			uart_tx('p');
			piano_note[j] = notes_[i];
    5620:	0f 2e       	mov	r0, r31
    5622:	f1 e1       	ldi	r31, 0x11	; 17
    5624:	2f 2e       	mov	r2, r31
    5626:	f6 e0       	ldi	r31, 0x06	; 6
    5628:	3f 2e       	mov	r3, r31
    562a:	f0 2d       	mov	r31, r0
Output			:	None
Functionality	:	Conversion of the received string to the desired format
Example Call	:	array_segmentation();
***********************************/

void array_segmentation(){
    562c:	68 01       	movw	r12, r16
		uart_tx(instr_1[k]);
	}
	j=0;i=0,k=0;
	
	while(i<16){
		if(instr[i] =='P'){		//Detects whether the instrument is piano or trumpet 
    562e:	f8 01       	movw	r30, r16
    5630:	80 81       	ld	r24, Z
    5632:	80 35       	cpi	r24, 0x50	; 80
    5634:	f1 f4       	brne	.+60     	; 0x5672 <_Z18array_segmentationv+0x1fa>
			uart_tx('p');
    5636:	80 e7       	ldi	r24, 0x70	; 112
    5638:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
			piano_note[j] = notes_[i];
    563c:	f1 01       	movw	r30, r2
    563e:	e6 0d       	add	r30, r6
    5640:	f7 1d       	adc	r31, r7
    5642:	d7 01       	movw	r26, r14
    5644:	8c 91       	ld	r24, X
    5646:	80 83       	st	Z, r24
			piano_onset[j] = onset[i];
    5648:	c3 01       	movw	r24, r6
    564a:	88 0f       	add	r24, r24
    564c:	99 1f       	adc	r25, r25
    564e:	88 0f       	add	r24, r24
    5650:	99 1f       	adc	r25, r25
    5652:	9c 01       	movw	r18, r24
    5654:	25 5e       	subi	r18, 0xE5	; 229
    5656:	39 4f       	sbci	r19, 0xF9	; 249
    5658:	f4 01       	movw	r30, r8
    565a:	80 81       	ld	r24, Z
    565c:	91 81       	ldd	r25, Z+1	; 0x01
    565e:	a2 81       	ldd	r26, Z+2	; 0x02
    5660:	b3 81       	ldd	r27, Z+3	; 0x03
    5662:	f9 01       	movw	r30, r18
    5664:	80 83       	st	Z, r24
    5666:	91 83       	std	Z+1, r25	; 0x01
    5668:	a2 83       	std	Z+2, r26	; 0x02
    566a:	b3 83       	std	Z+3, r27	; 0x03
			j++;
    566c:	08 94       	sec
    566e:	61 1c       	adc	r6, r1
    5670:	71 1c       	adc	r7, r1
    5672:	0f 5f       	subi	r16, 0xFF	; 255
    5674:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(instr[i] == 'T'){
    5676:	d6 01       	movw	r26, r12
    5678:	8c 91       	ld	r24, X
    567a:	84 35       	cpi	r24, 0x54	; 84
    567c:	f1 f4       	brne	.+60     	; 0x56ba <_Z18array_segmentationv+0x242>
			uart_tx('t');
    567e:	84 e7       	ldi	r24, 0x74	; 116
    5680:	0e 94 c7 29 	call	0x538e	; 0x538e <_Z7uart_txc>
			trumpet_note[k] = notes_[i];
    5684:	f2 01       	movw	r30, r4
    5686:	ed 5b       	subi	r30, 0xBD	; 189
    5688:	f9 4f       	sbci	r31, 0xF9	; 249
    568a:	d7 01       	movw	r26, r14
    568c:	8c 91       	ld	r24, X
    568e:	80 83       	st	Z, r24
			trumpet_onset[k] = onset[i];
    5690:	f2 01       	movw	r30, r4
    5692:	ee 0f       	add	r30, r30
    5694:	ff 1f       	adc	r31, r31
    5696:	ee 0f       	add	r30, r30
    5698:	ff 1f       	adc	r31, r31
    569a:	9f 01       	movw	r18, r30
    569c:	23 5b       	subi	r18, 0xB3	; 179
    569e:	39 4f       	sbci	r19, 0xF9	; 249
    56a0:	f4 01       	movw	r30, r8
    56a2:	80 81       	ld	r24, Z
    56a4:	91 81       	ldd	r25, Z+1	; 0x01
    56a6:	a2 81       	ldd	r26, Z+2	; 0x02
    56a8:	b3 81       	ldd	r27, Z+3	; 0x03
    56aa:	f9 01       	movw	r30, r18
    56ac:	80 83       	st	Z, r24
    56ae:	91 83       	std	Z+1, r25	; 0x01
    56b0:	a2 83       	std	Z+2, r26	; 0x02
    56b2:	b3 83       	std	Z+3, r27	; 0x03
			k++;
    56b4:	08 94       	sec
    56b6:	41 1c       	adc	r4, r1
    56b8:	51 1c       	adc	r5, r1
    56ba:	08 94       	sec
    56bc:	e1 1c       	adc	r14, r1
    56be:	f1 1c       	adc	r15, r1
    56c0:	84 e0       	ldi	r24, 0x04	; 4
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	88 0e       	add	r8, r24
    56c6:	99 1e       	adc	r9, r25
	for(k=0;k<8;k++){
		uart_tx(instr_1[k]);
	}
	j=0;i=0,k=0;
	
	while(i<16){
    56c8:	0a 15       	cp	r16, r10
    56ca:	1b 05       	cpc	r17, r11
    56cc:	09 f0       	breq	.+2      	; 0x56d0 <_Z18array_segmentationv+0x258>
    56ce:	ae cf       	rjmp	.-164    	; 0x562c <_Z18array_segmentationv+0x1b4>
			trumpet_onset[k] = onset[i];
			k++;
		}
		i++;
	}
	piano_onset[j] = 12.0 ;		//Onset of the end key which changes according to audio file
    56d0:	f3 01       	movw	r30, r6
    56d2:	ee 0f       	add	r30, r30
    56d4:	ff 1f       	adc	r31, r31
    56d6:	ee 0f       	add	r30, r30
    56d8:	ff 1f       	adc	r31, r31
    56da:	e5 5e       	subi	r30, 0xE5	; 229
    56dc:	f9 4f       	sbci	r31, 0xF9	; 249
    56de:	80 e0       	ldi	r24, 0x00	; 0
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	a0 e4       	ldi	r26, 0x40	; 64
    56e4:	b1 e4       	ldi	r27, 0x41	; 65
    56e6:	80 83       	st	Z, r24
    56e8:	91 83       	std	Z+1, r25	; 0x01
    56ea:	a2 83       	std	Z+2, r26	; 0x02
    56ec:	b3 83       	std	Z+3, r27	; 0x03
	piano_note[j] = '1';
    56ee:	f3 01       	movw	r30, r6
    56f0:	ef 5e       	subi	r30, 0xEF	; 239
    56f2:	f9 4f       	sbci	r31, 0xF9	; 249
    56f4:	81 e3       	ldi	r24, 0x31	; 49
    56f6:	80 83       	st	Z, r24
	
}
    56f8:	0f 90       	pop	r0
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	0f 90       	pop	r0
    5702:	cf 91       	pop	r28
    5704:	df 91       	pop	r29
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	df 90       	pop	r13
    5710:	cf 90       	pop	r12
    5712:	bf 90       	pop	r11
    5714:	af 90       	pop	r10
    5716:	9f 90       	pop	r9
    5718:	8f 90       	pop	r8
    571a:	7f 90       	pop	r7
    571c:	6f 90       	pop	r6
    571e:	5f 90       	pop	r5
    5720:	4f 90       	pop	r4
    5722:	3f 90       	pop	r3
    5724:	2f 90       	pop	r2
    5726:	08 95       	ret
		{
			sig_onset[j] = received_onsets[i];	//The string received is converted and individual data is stored in the array.
			j++;
			i++;
		}
		i++;
    5728:	0f 5f       	subi	r16, 0xFF	; 255
    572a:	1f 4f       	sbci	r17, 0xFF	; 255
		onset[k] = atof(sig_onset);	// The individual onsets present in the character data type are stored as float in the onset array 
    572c:	c5 01       	movw	r24, r10
    572e:	0e 94 93 36 	call	0x6d26	; 0x6d26 <atof>
    5732:	d6 01       	movw	r26, r12
    5734:	6d 93       	st	X+, r22
    5736:	7d 93       	st	X+, r23
    5738:	8d 93       	st	X+, r24
    573a:	9d 93       	st	X+, r25
    573c:	6d 01       	movw	r12, r26
    573e:	44 cf       	rjmp	.-376    	; 0x55c8 <_Z18array_segmentationv+0x150>

00005740 <_Z19onset_calculation_pf>:
Output			:	None
Functionality	:	Calculate the waiting time for the striking mechanism of piano to strike at a given onset time
Example Call	:	onset_calculation_p();
***********************************/

void onset_calculation_p(float onset_p){
    5740:	af 92       	push	r10
    5742:	bf 92       	push	r11
    5744:	cf 92       	push	r12
    5746:	df 92       	push	r13
    5748:	ef 92       	push	r14
    574a:	ff 92       	push	r15
    574c:	0f 93       	push	r16
    574e:	1f 93       	push	r17
    5750:	5b 01       	movw	r10, r22
    5752:	6c 01       	movw	r12, r24
	if (onset_p>(reaching_time/1000))
    5754:	60 91 84 06 	lds	r22, 0x0684
    5758:	70 91 85 06 	lds	r23, 0x0685
    575c:	80 91 86 06 	lds	r24, 0x0686
    5760:	90 91 87 06 	lds	r25, 0x0687
    5764:	28 ee       	ldi	r18, 0xE8	; 232
    5766:	33 e0       	ldi	r19, 0x03	; 3
    5768:	40 e0       	ldi	r20, 0x00	; 0
    576a:	50 e0       	ldi	r21, 0x00	; 0
    576c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    5770:	ca 01       	movw	r24, r20
    5772:	b9 01       	movw	r22, r18
    5774:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    5778:	7b 01       	movw	r14, r22
    577a:	8c 01       	movw	r16, r24
    577c:	a6 01       	movw	r20, r12
    577e:	95 01       	movw	r18, r10
    5780:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    5784:	88 23       	and	r24, r24
    5786:	0c f0       	brlt	.+2      	; 0x578a <_Z19onset_calculation_pf+0x4a>
    5788:	43 c0       	rjmp	.+134    	; 0x5810 <_Z19onset_calculation_pf+0xd0>
	{
		hold_value = 1000 * abs(onset_p- reaching_time/1000) - 1500;	//Calculates the difference between the actual onset and the present time of arrival and provides a delay accordingly
    578a:	c6 01       	movw	r24, r12
    578c:	b5 01       	movw	r22, r10
    578e:	a8 01       	movw	r20, r16
    5790:	97 01       	movw	r18, r14
    5792:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    5796:	e6 2e       	mov	r14, r22
    5798:	f7 2e       	mov	r15, r23
    579a:	08 2f       	mov	r16, r24
    579c:	19 2f       	mov	r17, r25
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	a9 01       	movw	r20, r18
    57a4:	0e 94 20 35 	call	0x6a40	; 0x6a40 <__gesf2>
    57a8:	18 16       	cp	r1, r24
    57aa:	8c f4       	brge	.+34     	; 0x57ce <_Z19onset_calculation_pf+0x8e>
    57ac:	c8 01       	movw	r24, r16
    57ae:	b7 01       	movw	r22, r14
    57b0:	20 e0       	ldi	r18, 0x00	; 0
    57b2:	30 e0       	ldi	r19, 0x00	; 0
    57b4:	4a e7       	ldi	r20, 0x7A	; 122
    57b6:	54 e4       	ldi	r21, 0x44	; 68
    57b8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    57bc:	20 e0       	ldi	r18, 0x00	; 0
    57be:	30 e8       	ldi	r19, 0x80	; 128
    57c0:	4b eb       	ldi	r20, 0xBB	; 187
    57c2:	54 e4       	ldi	r21, 0x44	; 68
    57c4:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    57c8:	0e 94 3d 34 	call	0x687a	; 0x687a <__fixsfsi>
    57cc:	11 c0       	rjmp	.+34     	; 0x57f0 <_Z19onset_calculation_pf+0xb0>
    57ce:	c8 01       	movw	r24, r16
    57d0:	b7 01       	movw	r22, r14
    57d2:	90 58       	subi	r25, 0x80	; 128
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	4a e7       	ldi	r20, 0x7A	; 122
    57da:	54 e4       	ldi	r21, 0x44	; 68
    57dc:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e8       	ldi	r19, 0x80	; 128
    57e4:	4b eb       	ldi	r20, 0xBB	; 187
    57e6:	54 e4       	ldi	r21, 0x44	; 68
    57e8:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    57ec:	0e 94 3d 34 	call	0x687a	; 0x687a <__fixsfsi>
    57f0:	70 93 7a 06 	sts	0x067A, r23
    57f4:	60 93 79 06 	sts	0x0679, r22
		if(hold_value<0)
    57f8:	77 23       	and	r23, r23
    57fa:	24 f4       	brge	.+8      	; 0x5804 <_Z19onset_calculation_pf+0xc4>
		hold_value=0;
    57fc:	10 92 7a 06 	sts	0x067A, r1
    5800:	10 92 79 06 	sts	0x0679, r1
		stop_udf(hold_value);
    5804:	80 91 79 06 	lds	r24, 0x0679
    5808:	90 91 7a 06 	lds	r25, 0x067A
    580c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
		
	}
}
    5810:	1f 91       	pop	r17
    5812:	0f 91       	pop	r16
    5814:	ff 90       	pop	r15
    5816:	ef 90       	pop	r14
    5818:	df 90       	pop	r13
    581a:	cf 90       	pop	r12
    581c:	bf 90       	pop	r11
    581e:	af 90       	pop	r10
    5820:	08 95       	ret

00005822 <_Z7controlci>:
Functionality	:	Contains the overall working of the striking mechanism
Example Call	:	var = control(x,y);
***********************************/

int control(char n, int curr_note)
{
    5822:	cf 92       	push	r12
    5824:	df 92       	push	r13
    5826:	ef 92       	push	r14
    5828:	ff 92       	push	r15
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	06 2f       	mov	r16, r22
    5830:	17 2f       	mov	r17, r23
	switch(n)
    5832:	83 34       	cpi	r24, 0x43	; 67
    5834:	09 f4       	brne	.+2      	; 0x5838 <_Z7controlci+0x16>
    5836:	b0 c0       	rjmp	.+352    	; 0x5998 <_Z7controlci+0x176>
    5838:	84 34       	cpi	r24, 0x44	; 68
    583a:	48 f4       	brcc	.+18     	; 0x584e <_Z7controlci+0x2c>
    583c:	81 34       	cpi	r24, 0x41	; 65
    583e:	a1 f0       	breq	.+40     	; 0x5868 <_Z7controlci+0x46>
    5840:	82 34       	cpi	r24, 0x42	; 66
    5842:	08 f0       	brcs	.+2      	; 0x5846 <_Z7controlci+0x24>
    5844:	5d c0       	rjmp	.+186    	; 0x5900 <_Z7controlci+0xde>
    5846:	81 33       	cpi	r24, 0x31	; 49
    5848:	09 f0       	breq	.+2      	; 0x584c <_Z7controlci+0x2a>
    584a:	6e c2       	rjmp	.+1244   	; 0x5d28 <_Z7controlci+0x506>
    584c:	21 c2       	rjmp	.+1090   	; 0x5c90 <_Z7controlci+0x46e>
    584e:	85 34       	cpi	r24, 0x45	; 69
    5850:	09 f4       	brne	.+2      	; 0x5854 <_Z7controlci+0x32>
    5852:	3a c1       	rjmp	.+628    	; 0x5ac8 <_Z7controlci+0x2a6>
    5854:	85 34       	cpi	r24, 0x45	; 69
    5856:	08 f4       	brcc	.+2      	; 0x585a <_Z7controlci+0x38>
    5858:	eb c0       	rjmp	.+470    	; 0x5a30 <_Z7controlci+0x20e>
    585a:	86 34       	cpi	r24, 0x46	; 70
    585c:	09 f4       	brne	.+2      	; 0x5860 <_Z7controlci+0x3e>
    585e:	80 c1       	rjmp	.+768    	; 0x5b60 <_Z7controlci+0x33e>
    5860:	87 34       	cpi	r24, 0x47	; 71
    5862:	09 f0       	breq	.+2      	; 0x5866 <_Z7controlci+0x44>
    5864:	61 c2       	rjmp	.+1218   	; 0x5d28 <_Z7controlci+0x506>
    5866:	c8 c1       	rjmp	.+912    	; 0x5bf8 <_Z7controlci+0x3d6>
	{
		case 'A':
		{
			next_note = A;
    5868:	60 91 5c 02 	lds	r22, 0x025C
    586c:	70 91 5d 02 	lds	r23, 0x025D
    5870:	70 93 78 06 	sts	0x0678, r23
    5874:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5878:	80 2f       	mov	r24, r16
    587a:	91 2f       	mov	r25, r17
    587c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5880:	08 2f       	mov	r16, r24
    5882:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    5884:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5888:	9b 01       	movw	r18, r22
    588a:	ac 01       	movw	r20, r24
    588c:	80 91 88 06 	lds	r24, 0x0688
    5890:	90 91 89 06 	lds	r25, 0x0689
    5894:	a0 91 8a 06 	lds	r26, 0x068A
    5898:	b0 91 8b 06 	lds	r27, 0x068B
    589c:	69 01       	movw	r12, r18
    589e:	7a 01       	movw	r14, r20
    58a0:	c8 1a       	sub	r12, r24
    58a2:	d9 0a       	sbc	r13, r25
    58a4:	ea 0a       	sbc	r14, r26
    58a6:	fb 0a       	sbc	r15, r27
    58a8:	c0 92 84 06 	sts	0x0684, r12
    58ac:	d0 92 85 06 	sts	0x0685, r13
    58b0:	e0 92 86 06 	sts	0x0686, r14
    58b4:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    58b8:	82 e3       	ldi	r24, 0x32	; 50
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    58c0:	e0 91 7f 06 	lds	r30, 0x067F
    58c4:	f0 91 80 06 	lds	r31, 0x0680
    58c8:	ee 0f       	add	r30, r30
    58ca:	ff 1f       	adc	r31, r31
    58cc:	ee 0f       	add	r30, r30
    58ce:	ff 1f       	adc	r31, r31
    58d0:	e5 5e       	subi	r30, 0xE5	; 229
    58d2:	f9 4f       	sbci	r31, 0xF9	; 249
    58d4:	60 81       	ld	r22, Z
    58d6:	71 81       	ldd	r23, Z+1	; 0x01
    58d8:	82 81       	ldd	r24, Z+2	; 0x02
    58da:	93 81       	ldd	r25, Z+3	; 0x03
    58dc:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    58e0:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    58e4:	80 91 7f 06 	lds	r24, 0x067F
    58e8:	90 91 80 06 	lds	r25, 0x0680
    58ec:	01 96       	adiw	r24, 0x01	; 1
    58ee:	90 93 80 06 	sts	0x0680, r25
    58f2:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    58f6:	82 e3       	ldi	r24, 0x32	; 50
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    58fe:	16 c2       	rjmp	.+1068   	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'B':
		{
			next_note = B;
    5900:	60 91 5e 02 	lds	r22, 0x025E
    5904:	70 91 5f 02 	lds	r23, 0x025F
    5908:	70 93 78 06 	sts	0x0678, r23
    590c:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5910:	80 2f       	mov	r24, r16
    5912:	91 2f       	mov	r25, r17
    5914:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5918:	08 2f       	mov	r16, r24
    591a:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    591c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5920:	9b 01       	movw	r18, r22
    5922:	ac 01       	movw	r20, r24
    5924:	80 91 88 06 	lds	r24, 0x0688
    5928:	90 91 89 06 	lds	r25, 0x0689
    592c:	a0 91 8a 06 	lds	r26, 0x068A
    5930:	b0 91 8b 06 	lds	r27, 0x068B
    5934:	69 01       	movw	r12, r18
    5936:	7a 01       	movw	r14, r20
    5938:	c8 1a       	sub	r12, r24
    593a:	d9 0a       	sbc	r13, r25
    593c:	ea 0a       	sbc	r14, r26
    593e:	fb 0a       	sbc	r15, r27
    5940:	c0 92 84 06 	sts	0x0684, r12
    5944:	d0 92 85 06 	sts	0x0685, r13
    5948:	e0 92 86 06 	sts	0x0686, r14
    594c:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5950:	82 e3       	ldi	r24, 0x32	; 50
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5958:	e0 91 7f 06 	lds	r30, 0x067F
    595c:	f0 91 80 06 	lds	r31, 0x0680
    5960:	ee 0f       	add	r30, r30
    5962:	ff 1f       	adc	r31, r31
    5964:	ee 0f       	add	r30, r30
    5966:	ff 1f       	adc	r31, r31
    5968:	e5 5e       	subi	r30, 0xE5	; 229
    596a:	f9 4f       	sbci	r31, 0xF9	; 249
    596c:	60 81       	ld	r22, Z
    596e:	71 81       	ldd	r23, Z+1	; 0x01
    5970:	82 81       	ldd	r24, Z+2	; 0x02
    5972:	93 81       	ldd	r25, Z+3	; 0x03
    5974:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5978:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    597c:	80 91 7f 06 	lds	r24, 0x067F
    5980:	90 91 80 06 	lds	r25, 0x0680
    5984:	01 96       	adiw	r24, 0x01	; 1
    5986:	90 93 80 06 	sts	0x0680, r25
    598a:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    598e:	82 e3       	ldi	r24, 0x32	; 50
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5996:	ca c1       	rjmp	.+916    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'C':
		{
			next_note = C;
    5998:	60 91 52 02 	lds	r22, 0x0252
    599c:	70 91 53 02 	lds	r23, 0x0253
    59a0:	70 93 78 06 	sts	0x0678, r23
    59a4:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    59a8:	80 2f       	mov	r24, r16
    59aa:	91 2f       	mov	r25, r17
    59ac:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    59b0:	08 2f       	mov	r16, r24
    59b2:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    59b4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    59b8:	9b 01       	movw	r18, r22
    59ba:	ac 01       	movw	r20, r24
    59bc:	80 91 88 06 	lds	r24, 0x0688
    59c0:	90 91 89 06 	lds	r25, 0x0689
    59c4:	a0 91 8a 06 	lds	r26, 0x068A
    59c8:	b0 91 8b 06 	lds	r27, 0x068B
    59cc:	69 01       	movw	r12, r18
    59ce:	7a 01       	movw	r14, r20
    59d0:	c8 1a       	sub	r12, r24
    59d2:	d9 0a       	sbc	r13, r25
    59d4:	ea 0a       	sbc	r14, r26
    59d6:	fb 0a       	sbc	r15, r27
    59d8:	c0 92 84 06 	sts	0x0684, r12
    59dc:	d0 92 85 06 	sts	0x0685, r13
    59e0:	e0 92 86 06 	sts	0x0686, r14
    59e4:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    59e8:	82 e3       	ldi	r24, 0x32	; 50
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    59f0:	e0 91 7f 06 	lds	r30, 0x067F
    59f4:	f0 91 80 06 	lds	r31, 0x0680
    59f8:	ee 0f       	add	r30, r30
    59fa:	ff 1f       	adc	r31, r31
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	e5 5e       	subi	r30, 0xE5	; 229
    5a02:	f9 4f       	sbci	r31, 0xF9	; 249
    5a04:	60 81       	ld	r22, Z
    5a06:	71 81       	ldd	r23, Z+1	; 0x01
    5a08:	82 81       	ldd	r24, Z+2	; 0x02
    5a0a:	93 81       	ldd	r25, Z+3	; 0x03
    5a0c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5a10:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5a14:	80 91 7f 06 	lds	r24, 0x067F
    5a18:	90 91 80 06 	lds	r25, 0x0680
    5a1c:	01 96       	adiw	r24, 0x01	; 1
    5a1e:	90 93 80 06 	sts	0x0680, r25
    5a22:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    5a26:	82 e3       	ldi	r24, 0x32	; 50
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5a2e:	7e c1       	rjmp	.+764    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'D':
		{
			next_note = D;
    5a30:	60 91 54 02 	lds	r22, 0x0254
    5a34:	70 91 55 02 	lds	r23, 0x0255
    5a38:	70 93 78 06 	sts	0x0678, r23
    5a3c:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5a40:	80 2f       	mov	r24, r16
    5a42:	91 2f       	mov	r25, r17
    5a44:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5a48:	08 2f       	mov	r16, r24
    5a4a:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev ;
    5a4c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5a50:	9b 01       	movw	r18, r22
    5a52:	ac 01       	movw	r20, r24
    5a54:	80 91 88 06 	lds	r24, 0x0688
    5a58:	90 91 89 06 	lds	r25, 0x0689
    5a5c:	a0 91 8a 06 	lds	r26, 0x068A
    5a60:	b0 91 8b 06 	lds	r27, 0x068B
    5a64:	69 01       	movw	r12, r18
    5a66:	7a 01       	movw	r14, r20
    5a68:	c8 1a       	sub	r12, r24
    5a6a:	d9 0a       	sbc	r13, r25
    5a6c:	ea 0a       	sbc	r14, r26
    5a6e:	fb 0a       	sbc	r15, r27
    5a70:	c0 92 84 06 	sts	0x0684, r12
    5a74:	d0 92 85 06 	sts	0x0685, r13
    5a78:	e0 92 86 06 	sts	0x0686, r14
    5a7c:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5a80:	82 e3       	ldi	r24, 0x32	; 50
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5a88:	e0 91 7f 06 	lds	r30, 0x067F
    5a8c:	f0 91 80 06 	lds	r31, 0x0680
    5a90:	ee 0f       	add	r30, r30
    5a92:	ff 1f       	adc	r31, r31
    5a94:	ee 0f       	add	r30, r30
    5a96:	ff 1f       	adc	r31, r31
    5a98:	e5 5e       	subi	r30, 0xE5	; 229
    5a9a:	f9 4f       	sbci	r31, 0xF9	; 249
    5a9c:	60 81       	ld	r22, Z
    5a9e:	71 81       	ldd	r23, Z+1	; 0x01
    5aa0:	82 81       	ldd	r24, Z+2	; 0x02
    5aa2:	93 81       	ldd	r25, Z+3	; 0x03
    5aa4:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5aa8:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5aac:	80 91 7f 06 	lds	r24, 0x067F
    5ab0:	90 91 80 06 	lds	r25, 0x0680
    5ab4:	01 96       	adiw	r24, 0x01	; 1
    5ab6:	90 93 80 06 	sts	0x0680, r25
    5aba:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    5abe:	82 e3       	ldi	r24, 0x32	; 50
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5ac6:	32 c1       	rjmp	.+612    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'E':
		{
			next_note = E;
    5ac8:	60 91 56 02 	lds	r22, 0x0256
    5acc:	70 91 57 02 	lds	r23, 0x0257
    5ad0:	70 93 78 06 	sts	0x0678, r23
    5ad4:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5ad8:	80 2f       	mov	r24, r16
    5ada:	91 2f       	mov	r25, r17
    5adc:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5ae0:	08 2f       	mov	r16, r24
    5ae2:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    5ae4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5ae8:	9b 01       	movw	r18, r22
    5aea:	ac 01       	movw	r20, r24
    5aec:	80 91 88 06 	lds	r24, 0x0688
    5af0:	90 91 89 06 	lds	r25, 0x0689
    5af4:	a0 91 8a 06 	lds	r26, 0x068A
    5af8:	b0 91 8b 06 	lds	r27, 0x068B
    5afc:	69 01       	movw	r12, r18
    5afe:	7a 01       	movw	r14, r20
    5b00:	c8 1a       	sub	r12, r24
    5b02:	d9 0a       	sbc	r13, r25
    5b04:	ea 0a       	sbc	r14, r26
    5b06:	fb 0a       	sbc	r15, r27
    5b08:	c0 92 84 06 	sts	0x0684, r12
    5b0c:	d0 92 85 06 	sts	0x0685, r13
    5b10:	e0 92 86 06 	sts	0x0686, r14
    5b14:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5b18:	82 e3       	ldi	r24, 0x32	; 50
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5b20:	e0 91 7f 06 	lds	r30, 0x067F
    5b24:	f0 91 80 06 	lds	r31, 0x0680
    5b28:	ee 0f       	add	r30, r30
    5b2a:	ff 1f       	adc	r31, r31
    5b2c:	ee 0f       	add	r30, r30
    5b2e:	ff 1f       	adc	r31, r31
    5b30:	e5 5e       	subi	r30, 0xE5	; 229
    5b32:	f9 4f       	sbci	r31, 0xF9	; 249
    5b34:	60 81       	ld	r22, Z
    5b36:	71 81       	ldd	r23, Z+1	; 0x01
    5b38:	82 81       	ldd	r24, Z+2	; 0x02
    5b3a:	93 81       	ldd	r25, Z+3	; 0x03
    5b3c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5b40:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5b44:	80 91 7f 06 	lds	r24, 0x067F
    5b48:	90 91 80 06 	lds	r25, 0x0680
    5b4c:	01 96       	adiw	r24, 0x01	; 1
    5b4e:	90 93 80 06 	sts	0x0680, r25
    5b52:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    5b56:	82 e3       	ldi	r24, 0x32	; 50
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5b5e:	e6 c0       	rjmp	.+460    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'F':
		{
			next_note = F;
    5b60:	60 91 58 02 	lds	r22, 0x0258
    5b64:	70 91 59 02 	lds	r23, 0x0259
    5b68:	70 93 78 06 	sts	0x0678, r23
    5b6c:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5b70:	80 2f       	mov	r24, r16
    5b72:	91 2f       	mov	r25, r17
    5b74:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5b78:	08 2f       	mov	r16, r24
    5b7a:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    5b7c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5b80:	9b 01       	movw	r18, r22
    5b82:	ac 01       	movw	r20, r24
    5b84:	80 91 88 06 	lds	r24, 0x0688
    5b88:	90 91 89 06 	lds	r25, 0x0689
    5b8c:	a0 91 8a 06 	lds	r26, 0x068A
    5b90:	b0 91 8b 06 	lds	r27, 0x068B
    5b94:	69 01       	movw	r12, r18
    5b96:	7a 01       	movw	r14, r20
    5b98:	c8 1a       	sub	r12, r24
    5b9a:	d9 0a       	sbc	r13, r25
    5b9c:	ea 0a       	sbc	r14, r26
    5b9e:	fb 0a       	sbc	r15, r27
    5ba0:	c0 92 84 06 	sts	0x0684, r12
    5ba4:	d0 92 85 06 	sts	0x0685, r13
    5ba8:	e0 92 86 06 	sts	0x0686, r14
    5bac:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5bb0:	82 e3       	ldi	r24, 0x32	; 50
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5bb8:	e0 91 7f 06 	lds	r30, 0x067F
    5bbc:	f0 91 80 06 	lds	r31, 0x0680
    5bc0:	ee 0f       	add	r30, r30
    5bc2:	ff 1f       	adc	r31, r31
    5bc4:	ee 0f       	add	r30, r30
    5bc6:	ff 1f       	adc	r31, r31
    5bc8:	e5 5e       	subi	r30, 0xE5	; 229
    5bca:	f9 4f       	sbci	r31, 0xF9	; 249
    5bcc:	60 81       	ld	r22, Z
    5bce:	71 81       	ldd	r23, Z+1	; 0x01
    5bd0:	82 81       	ldd	r24, Z+2	; 0x02
    5bd2:	93 81       	ldd	r25, Z+3	; 0x03
    5bd4:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5bd8:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5bdc:	80 91 7f 06 	lds	r24, 0x067F
    5be0:	90 91 80 06 	lds	r25, 0x0680
    5be4:	01 96       	adiw	r24, 0x01	; 1
    5be6:	90 93 80 06 	sts	0x0680, r25
    5bea:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    5bee:	82 e3       	ldi	r24, 0x32	; 50
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5bf6:	9a c0       	rjmp	.+308    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case 'G':
		{
			next_note = G;
    5bf8:	60 91 5a 02 	lds	r22, 0x025A
    5bfc:	70 91 5b 02 	lds	r23, 0x025B
    5c00:	70 93 78 06 	sts	0x0678, r23
    5c04:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5c08:	80 2f       	mov	r24, r16
    5c0a:	91 2f       	mov	r25, r17
    5c0c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5c10:	08 2f       	mov	r16, r24
    5c12:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    5c14:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5c18:	9b 01       	movw	r18, r22
    5c1a:	ac 01       	movw	r20, r24
    5c1c:	80 91 88 06 	lds	r24, 0x0688
    5c20:	90 91 89 06 	lds	r25, 0x0689
    5c24:	a0 91 8a 06 	lds	r26, 0x068A
    5c28:	b0 91 8b 06 	lds	r27, 0x068B
    5c2c:	69 01       	movw	r12, r18
    5c2e:	7a 01       	movw	r14, r20
    5c30:	c8 1a       	sub	r12, r24
    5c32:	d9 0a       	sbc	r13, r25
    5c34:	ea 0a       	sbc	r14, r26
    5c36:	fb 0a       	sbc	r15, r27
    5c38:	c0 92 84 06 	sts	0x0684, r12
    5c3c:	d0 92 85 06 	sts	0x0685, r13
    5c40:	e0 92 86 06 	sts	0x0686, r14
    5c44:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5c48:	82 e3       	ldi	r24, 0x32	; 50
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5c50:	e0 91 7f 06 	lds	r30, 0x067F
    5c54:	f0 91 80 06 	lds	r31, 0x0680
    5c58:	ee 0f       	add	r30, r30
    5c5a:	ff 1f       	adc	r31, r31
    5c5c:	ee 0f       	add	r30, r30
    5c5e:	ff 1f       	adc	r31, r31
    5c60:	e5 5e       	subi	r30, 0xE5	; 229
    5c62:	f9 4f       	sbci	r31, 0xF9	; 249
    5c64:	60 81       	ld	r22, Z
    5c66:	71 81       	ldd	r23, Z+1	; 0x01
    5c68:	82 81       	ldd	r24, Z+2	; 0x02
    5c6a:	93 81       	ldd	r25, Z+3	; 0x03
    5c6c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5c70:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5c74:	80 91 7f 06 	lds	r24, 0x067F
    5c78:	90 91 80 06 	lds	r25, 0x0680
    5c7c:	01 96       	adiw	r24, 0x01	; 1
    5c7e:	90 93 80 06 	sts	0x0680, r25
    5c82:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(50);
    5c86:	82 e3       	ldi	r24, 0x32	; 50
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5c8e:	4e c0       	rjmp	.+156    	; 0x5d2c <_Z7controlci+0x50a>
		}
		case '1':
		{
			next_note = _1stKey;
    5c90:	60 91 69 05 	lds	r22, 0x0569
    5c94:	70 91 6a 05 	lds	r23, 0x056A
    5c98:	70 93 78 06 	sts	0x0678, r23
    5c9c:	60 93 77 06 	sts	0x0677, r22
			curr_note = calculation(curr_note,next_note);
    5ca0:	80 2f       	mov	r24, r16
    5ca2:	91 2f       	mov	r25, r17
    5ca4:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_Z11calculationii>
    5ca8:	08 2f       	mov	r16, r24
    5caa:	19 2f       	mov	r17, r25
			reaching_time=millis() - prev;
    5cac:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5cb0:	9b 01       	movw	r18, r22
    5cb2:	ac 01       	movw	r20, r24
    5cb4:	80 91 88 06 	lds	r24, 0x0688
    5cb8:	90 91 89 06 	lds	r25, 0x0689
    5cbc:	a0 91 8a 06 	lds	r26, 0x068A
    5cc0:	b0 91 8b 06 	lds	r27, 0x068B
    5cc4:	69 01       	movw	r12, r18
    5cc6:	7a 01       	movw	r14, r20
    5cc8:	c8 1a       	sub	r12, r24
    5cca:	d9 0a       	sbc	r13, r25
    5ccc:	ea 0a       	sbc	r14, r26
    5cce:	fb 0a       	sbc	r15, r27
    5cd0:	c0 92 84 06 	sts	0x0684, r12
    5cd4:	d0 92 85 06 	sts	0x0685, r13
    5cd8:	e0 92 86 06 	sts	0x0686, r14
    5cdc:	f0 92 87 06 	sts	0x0687, r15
			stop_udf(50);
    5ce0:	82 e3       	ldi	r24, 0x32	; 50
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			onset_calculation_p(piano_onset[k]);
    5ce8:	e0 91 7f 06 	lds	r30, 0x067F
    5cec:	f0 91 80 06 	lds	r31, 0x0680
    5cf0:	ee 0f       	add	r30, r30
    5cf2:	ff 1f       	adc	r31, r31
    5cf4:	ee 0f       	add	r30, r30
    5cf6:	ff 1f       	adc	r31, r31
    5cf8:	e5 5e       	subi	r30, 0xE5	; 229
    5cfa:	f9 4f       	sbci	r31, 0xF9	; 249
    5cfc:	60 81       	ld	r22, Z
    5cfe:	71 81       	ldd	r23, Z+1	; 0x01
    5d00:	82 81       	ldd	r24, Z+2	; 0x02
    5d02:	93 81       	ldd	r25, Z+3	; 0x03
    5d04:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z19onset_calculation_pf>
			hitme();
    5d08:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_Z5hitmev>
			k++;
    5d0c:	80 91 7f 06 	lds	r24, 0x067F
    5d10:	90 91 80 06 	lds	r25, 0x0680
    5d14:	01 96       	adiw	r24, 0x01	; 1
    5d16:	90 93 80 06 	sts	0x0680, r25
    5d1a:	80 93 7f 06 	sts	0x067F, r24
			stop_udf(30000);
    5d1e:	80 e3       	ldi	r24, 0x30	; 48
    5d20:	95 e7       	ldi	r25, 0x75	; 117
    5d22:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
			break;
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <_Z7controlci+0x50a>
		}
		default :
		{
			PORTH = 0x00;
    5d28:	10 92 02 01 	sts	0x0102, r1
			break;
		}
	}
	return curr_note;
}
    5d2c:	80 2f       	mov	r24, r16
    5d2e:	91 2f       	mov	r25, r17
    5d30:	1f 91       	pop	r17
    5d32:	0f 91       	pop	r16
    5d34:	ff 90       	pop	r15
    5d36:	ef 90       	pop	r14
    5d38:	df 90       	pop	r13
    5d3a:	cf 90       	pop	r12
    5d3c:	08 95       	ret

00005d3e <_Z19onset_calculation_tf>:
Output			:	None
Functionality	:	Calculate the waiting time for the striking mechanism of trumpet to strike at a given onset time
Example Call	:	onset_calculation_t();
***********************************/

void onset_calculation_t(float onset_t){
    5d3e:	af 92       	push	r10
    5d40:	bf 92       	push	r11
    5d42:	cf 92       	push	r12
    5d44:	df 92       	push	r13
    5d46:	ef 92       	push	r14
    5d48:	ff 92       	push	r15
    5d4a:	0f 93       	push	r16
    5d4c:	1f 93       	push	r17
    5d4e:	5b 01       	movw	r10, r22
    5d50:	6c 01       	movw	r12, r24
	if (onset_t>(reaching_time/1000))
    5d52:	60 91 84 06 	lds	r22, 0x0684
    5d56:	70 91 85 06 	lds	r23, 0x0685
    5d5a:	80 91 86 06 	lds	r24, 0x0686
    5d5e:	90 91 87 06 	lds	r25, 0x0687
    5d62:	28 ee       	ldi	r18, 0xE8	; 232
    5d64:	33 e0       	ldi	r19, 0x03	; 3
    5d66:	40 e0       	ldi	r20, 0x00	; 0
    5d68:	50 e0       	ldi	r21, 0x00	; 0
    5d6a:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    5d6e:	ca 01       	movw	r24, r20
    5d70:	b9 01       	movw	r22, r18
    5d72:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    5d76:	7b 01       	movw	r14, r22
    5d78:	8c 01       	movw	r16, r24
    5d7a:	a6 01       	movw	r20, r12
    5d7c:	95 01       	movw	r18, r10
    5d7e:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    5d82:	88 23       	and	r24, r24
    5d84:	0c f0       	brlt	.+2      	; 0x5d88 <_Z19onset_calculation_tf+0x4a>
    5d86:	43 c0       	rjmp	.+134    	; 0x5e0e <_Z19onset_calculation_tf+0xd0>
	{
		hold_value = 1000 * abs(onset_t- reaching_time/1000)-500;		//Calculates the difference between the actual onset and the present time of arrival and provides a delay accordingly
    5d88:	c6 01       	movw	r24, r12
    5d8a:	b5 01       	movw	r22, r10
    5d8c:	a8 01       	movw	r20, r16
    5d8e:	97 01       	movw	r18, r14
    5d90:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    5d94:	e6 2e       	mov	r14, r22
    5d96:	f7 2e       	mov	r15, r23
    5d98:	08 2f       	mov	r16, r24
    5d9a:	19 2f       	mov	r17, r25
    5d9c:	20 e0       	ldi	r18, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	a9 01       	movw	r20, r18
    5da2:	0e 94 20 35 	call	0x6a40	; 0x6a40 <__gesf2>
    5da6:	18 16       	cp	r1, r24
    5da8:	8c f4       	brge	.+34     	; 0x5dcc <_Z19onset_calculation_tf+0x8e>
    5daa:	c8 01       	movw	r24, r16
    5dac:	b7 01       	movw	r22, r14
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	30 e0       	ldi	r19, 0x00	; 0
    5db2:	4a e7       	ldi	r20, 0x7A	; 122
    5db4:	54 e4       	ldi	r21, 0x44	; 68
    5db6:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	4a ef       	ldi	r20, 0xFA	; 250
    5dc0:	53 e4       	ldi	r21, 0x43	; 67
    5dc2:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    5dc6:	0e 94 3d 34 	call	0x687a	; 0x687a <__fixsfsi>
    5dca:	11 c0       	rjmp	.+34     	; 0x5dee <_Z19onset_calculation_tf+0xb0>
    5dcc:	c8 01       	movw	r24, r16
    5dce:	b7 01       	movw	r22, r14
    5dd0:	90 58       	subi	r25, 0x80	; 128
    5dd2:	20 e0       	ldi	r18, 0x00	; 0
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	4a e7       	ldi	r20, 0x7A	; 122
    5dd8:	54 e4       	ldi	r21, 0x44	; 68
    5dda:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    5dde:	20 e0       	ldi	r18, 0x00	; 0
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	4a ef       	ldi	r20, 0xFA	; 250
    5de4:	53 e4       	ldi	r21, 0x43	; 67
    5de6:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__subsf3>
    5dea:	0e 94 3d 34 	call	0x687a	; 0x687a <__fixsfsi>
    5dee:	70 93 7a 06 	sts	0x067A, r23
    5df2:	60 93 79 06 	sts	0x0679, r22
		if(hold_value<0)
    5df6:	77 23       	and	r23, r23
    5df8:	24 f4       	brge	.+8      	; 0x5e02 <_Z19onset_calculation_tf+0xc4>
		hold_value=0;
    5dfa:	10 92 7a 06 	sts	0x067A, r1
    5dfe:	10 92 79 06 	sts	0x0679, r1
		stop_udf(hold_value);
    5e02:	80 91 79 06 	lds	r24, 0x0679
    5e06:	90 91 7a 06 	lds	r25, 0x067A
    5e0a:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_Z8stop_udfi>
		
	}
}
    5e0e:	1f 91       	pop	r17
    5e10:	0f 91       	pop	r16
    5e12:	ff 90       	pop	r15
    5e14:	ef 90       	pop	r14
    5e16:	df 90       	pop	r13
    5e18:	cf 90       	pop	r12
    5e1a:	bf 90       	pop	r11
    5e1c:	af 90       	pop	r10
    5e1e:	08 95       	ret

00005e20 <_Z16trumpet_strikingv>:
Output			:	None
Functionality	:	Overall striking of the trumpet keys
Example Call	:	trumpet_striking();
***********************************/

void trumpet_striking(){
    5e20:	ef 92       	push	r14
    5e22:	ff 92       	push	r15
    5e24:	0f 93       	push	r16
    5e26:	1f 93       	push	r17
	reaching_time=millis() - prev;
    5e28:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	80 91 88 06 	lds	r24, 0x0688
    5e34:	90 91 89 06 	lds	r25, 0x0689
    5e38:	a0 91 8a 06 	lds	r26, 0x068A
    5e3c:	b0 91 8b 06 	lds	r27, 0x068B
    5e40:	79 01       	movw	r14, r18
    5e42:	8a 01       	movw	r16, r20
    5e44:	e8 1a       	sub	r14, r24
    5e46:	f9 0a       	sbc	r15, r25
    5e48:	0a 0b       	sbc	r16, r26
    5e4a:	1b 0b       	sbc	r17, r27
    5e4c:	e0 92 84 06 	sts	0x0684, r14
    5e50:	f0 92 85 06 	sts	0x0685, r15
    5e54:	00 93 86 06 	sts	0x0686, r16
    5e58:	10 93 87 06 	sts	0x0687, r17
	switch (trumpet_note[a])
    5e5c:	e0 91 65 05 	lds	r30, 0x0565
    5e60:	f0 91 66 05 	lds	r31, 0x0566
    5e64:	ed 5b       	subi	r30, 0xBD	; 189
    5e66:	f9 4f       	sbci	r31, 0xF9	; 249
    5e68:	80 81       	ld	r24, Z
    5e6a:	84 34       	cpi	r24, 0x44	; 68
    5e6c:	b9 f1       	breq	.+110    	; 0x5edc <_Z16trumpet_strikingv+0xbc>
    5e6e:	85 34       	cpi	r24, 0x45	; 69
    5e70:	48 f4       	brcc	.+18     	; 0x5e84 <_Z16trumpet_strikingv+0x64>
    5e72:	82 34       	cpi	r24, 0x42	; 66
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <_Z16trumpet_strikingv+0x58>
    5e76:	dc c0       	rjmp	.+440    	; 0x6030 <_Z16trumpet_strikingv+0x210>
    5e78:	83 34       	cpi	r24, 0x43	; 67
    5e7a:	70 f4       	brcc	.+28     	; 0x5e98 <_Z16trumpet_strikingv+0x78>
    5e7c:	81 34       	cpi	r24, 0x41	; 65
    5e7e:	09 f0       	breq	.+2      	; 0x5e82 <_Z16trumpet_strikingv+0x62>
    5e80:	f8 c0       	rjmp	.+496    	; 0x6072 <_Z16trumpet_strikingv+0x252>
    5e82:	b4 c0       	rjmp	.+360    	; 0x5fec <_Z16trumpet_strikingv+0x1cc>
    5e84:	86 34       	cpi	r24, 0x46	; 70
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <_Z16trumpet_strikingv+0x6a>
    5e88:	6d c0       	rjmp	.+218    	; 0x5f64 <_Z16trumpet_strikingv+0x144>
    5e8a:	86 34       	cpi	r24, 0x46	; 70
    5e8c:	08 f4       	brcc	.+2      	; 0x5e90 <_Z16trumpet_strikingv+0x70>
    5e8e:	48 c0       	rjmp	.+144    	; 0x5f20 <_Z16trumpet_strikingv+0x100>
    5e90:	87 34       	cpi	r24, 0x47	; 71
    5e92:	09 f0       	breq	.+2      	; 0x5e96 <_Z16trumpet_strikingv+0x76>
    5e94:	ee c0       	rjmp	.+476    	; 0x6072 <_Z16trumpet_strikingv+0x252>
    5e96:	88 c0       	rjmp	.+272    	; 0x5fa8 <_Z16trumpet_strikingv+0x188>
	{
		case 'C' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5e98:	e0 91 81 06 	lds	r30, 0x0681
    5e9c:	f0 91 82 06 	lds	r31, 0x0682
    5ea0:	ee 0f       	add	r30, r30
    5ea2:	ff 1f       	adc	r31, r31
    5ea4:	ee 0f       	add	r30, r30
    5ea6:	ff 1f       	adc	r31, r31
    5ea8:	e3 5b       	subi	r30, 0xB3	; 179
    5eaa:	f9 4f       	sbci	r31, 0xF9	; 249
    5eac:	60 81       	ld	r22, Z
    5eae:	71 81       	ldd	r23, Z+1	; 0x01
    5eb0:	82 81       	ldd	r24, Z+2	; 0x02
    5eb2:	93 81       	ldd	r25, Z+3	; 0x03
    5eb4:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(1,0,0);
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	60 e0       	ldi	r22, 0x00	; 0
    5ebe:	70 e0       	ldi	r23, 0x00	; 0
    5ec0:	40 e0       	ldi	r20, 0x00	; 0
    5ec2:	50 e0       	ldi	r21, 0x00	; 0
    5ec4:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    5ec8:	80 91 81 06 	lds	r24, 0x0681
    5ecc:	90 91 82 06 	lds	r25, 0x0682
    5ed0:	01 96       	adiw	r24, 0x01	; 1
    5ed2:	90 93 82 06 	sts	0x0682, r25
    5ed6:	80 93 81 06 	sts	0x0681, r24
			break;
    5eda:	cb c0       	rjmp	.+406    	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'D' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5edc:	e0 91 81 06 	lds	r30, 0x0681
    5ee0:	f0 91 82 06 	lds	r31, 0x0682
    5ee4:	ee 0f       	add	r30, r30
    5ee6:	ff 1f       	adc	r31, r31
    5ee8:	ee 0f       	add	r30, r30
    5eea:	ff 1f       	adc	r31, r31
    5eec:	e3 5b       	subi	r30, 0xB3	; 179
    5eee:	f9 4f       	sbci	r31, 0xF9	; 249
    5ef0:	60 81       	ld	r22, Z
    5ef2:	71 81       	ldd	r23, Z+1	; 0x01
    5ef4:	82 81       	ldd	r24, Z+2	; 0x02
    5ef6:	93 81       	ldd	r25, Z+3	; 0x03
    5ef8:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(0,1,0);
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	61 e0       	ldi	r22, 0x01	; 1
    5f02:	70 e0       	ldi	r23, 0x00	; 0
    5f04:	40 e0       	ldi	r20, 0x00	; 0
    5f06:	50 e0       	ldi	r21, 0x00	; 0
    5f08:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    5f0c:	80 91 81 06 	lds	r24, 0x0681
    5f10:	90 91 82 06 	lds	r25, 0x0682
    5f14:	01 96       	adiw	r24, 0x01	; 1
    5f16:	90 93 82 06 	sts	0x0682, r25
    5f1a:	80 93 81 06 	sts	0x0681, r24
			break;
    5f1e:	a9 c0       	rjmp	.+338    	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'E' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5f20:	e0 91 81 06 	lds	r30, 0x0681
    5f24:	f0 91 82 06 	lds	r31, 0x0682
    5f28:	ee 0f       	add	r30, r30
    5f2a:	ff 1f       	adc	r31, r31
    5f2c:	ee 0f       	add	r30, r30
    5f2e:	ff 1f       	adc	r31, r31
    5f30:	e3 5b       	subi	r30, 0xB3	; 179
    5f32:	f9 4f       	sbci	r31, 0xF9	; 249
    5f34:	60 81       	ld	r22, Z
    5f36:	71 81       	ldd	r23, Z+1	; 0x01
    5f38:	82 81       	ldd	r24, Z+2	; 0x02
    5f3a:	93 81       	ldd	r25, Z+3	; 0x03
    5f3c:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(0,0,1);
    5f40:	80 e0       	ldi	r24, 0x00	; 0
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	60 e0       	ldi	r22, 0x00	; 0
    5f46:	70 e0       	ldi	r23, 0x00	; 0
    5f48:	41 e0       	ldi	r20, 0x01	; 1
    5f4a:	50 e0       	ldi	r21, 0x00	; 0
    5f4c:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    5f50:	80 91 81 06 	lds	r24, 0x0681
    5f54:	90 91 82 06 	lds	r25, 0x0682
    5f58:	01 96       	adiw	r24, 0x01	; 1
    5f5a:	90 93 82 06 	sts	0x0682, r25
    5f5e:	80 93 81 06 	sts	0x0681, r24
			break;
    5f62:	87 c0       	rjmp	.+270    	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'F' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5f64:	e0 91 81 06 	lds	r30, 0x0681
    5f68:	f0 91 82 06 	lds	r31, 0x0682
    5f6c:	ee 0f       	add	r30, r30
    5f6e:	ff 1f       	adc	r31, r31
    5f70:	ee 0f       	add	r30, r30
    5f72:	ff 1f       	adc	r31, r31
    5f74:	e3 5b       	subi	r30, 0xB3	; 179
    5f76:	f9 4f       	sbci	r31, 0xF9	; 249
    5f78:	60 81       	ld	r22, Z
    5f7a:	71 81       	ldd	r23, Z+1	; 0x01
    5f7c:	82 81       	ldd	r24, Z+2	; 0x02
    5f7e:	93 81       	ldd	r25, Z+3	; 0x03
    5f80:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(1,1,0);
    5f84:	81 e0       	ldi	r24, 0x01	; 1
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	61 e0       	ldi	r22, 0x01	; 1
    5f8a:	70 e0       	ldi	r23, 0x00	; 0
    5f8c:	40 e0       	ldi	r20, 0x00	; 0
    5f8e:	50 e0       	ldi	r21, 0x00	; 0
    5f90:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    5f94:	80 91 81 06 	lds	r24, 0x0681
    5f98:	90 91 82 06 	lds	r25, 0x0682
    5f9c:	01 96       	adiw	r24, 0x01	; 1
    5f9e:	90 93 82 06 	sts	0x0682, r25
    5fa2:	80 93 81 06 	sts	0x0681, r24
			break;
    5fa6:	65 c0       	rjmp	.+202    	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'G' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5fa8:	e0 91 81 06 	lds	r30, 0x0681
    5fac:	f0 91 82 06 	lds	r31, 0x0682
    5fb0:	ee 0f       	add	r30, r30
    5fb2:	ff 1f       	adc	r31, r31
    5fb4:	ee 0f       	add	r30, r30
    5fb6:	ff 1f       	adc	r31, r31
    5fb8:	e3 5b       	subi	r30, 0xB3	; 179
    5fba:	f9 4f       	sbci	r31, 0xF9	; 249
    5fbc:	60 81       	ld	r22, Z
    5fbe:	71 81       	ldd	r23, Z+1	; 0x01
    5fc0:	82 81       	ldd	r24, Z+2	; 0x02
    5fc2:	93 81       	ldd	r25, Z+3	; 0x03
    5fc4:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(0,1,1);
    5fc8:	80 e0       	ldi	r24, 0x00	; 0
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	61 e0       	ldi	r22, 0x01	; 1
    5fce:	70 e0       	ldi	r23, 0x00	; 0
    5fd0:	41 e0       	ldi	r20, 0x01	; 1
    5fd2:	50 e0       	ldi	r21, 0x00	; 0
    5fd4:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    5fd8:	80 91 81 06 	lds	r24, 0x0681
    5fdc:	90 91 82 06 	lds	r25, 0x0682
    5fe0:	01 96       	adiw	r24, 0x01	; 1
    5fe2:	90 93 82 06 	sts	0x0682, r25
    5fe6:	80 93 81 06 	sts	0x0681, r24
			break;
    5fea:	43 c0       	rjmp	.+134    	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'A' :
		{
			onset_calculation_t(trumpet_onset[h]);
    5fec:	e0 91 81 06 	lds	r30, 0x0681
    5ff0:	f0 91 82 06 	lds	r31, 0x0682
    5ff4:	ee 0f       	add	r30, r30
    5ff6:	ff 1f       	adc	r31, r31
    5ff8:	ee 0f       	add	r30, r30
    5ffa:	ff 1f       	adc	r31, r31
    5ffc:	e3 5b       	subi	r30, 0xB3	; 179
    5ffe:	f9 4f       	sbci	r31, 0xF9	; 249
    6000:	60 81       	ld	r22, Z
    6002:	71 81       	ldd	r23, Z+1	; 0x01
    6004:	82 81       	ldd	r24, Z+2	; 0x02
    6006:	93 81       	ldd	r25, Z+3	; 0x03
    6008:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(1,0,1);
    600c:	81 e0       	ldi	r24, 0x01	; 1
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	60 e0       	ldi	r22, 0x00	; 0
    6012:	70 e0       	ldi	r23, 0x00	; 0
    6014:	41 e0       	ldi	r20, 0x01	; 1
    6016:	50 e0       	ldi	r21, 0x00	; 0
    6018:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    601c:	80 91 81 06 	lds	r24, 0x0681
    6020:	90 91 82 06 	lds	r25, 0x0682
    6024:	01 96       	adiw	r24, 0x01	; 1
    6026:	90 93 82 06 	sts	0x0682, r25
    602a:	80 93 81 06 	sts	0x0681, r24
			break;
    602e:	21 c0       	rjmp	.+66     	; 0x6072 <_Z16trumpet_strikingv+0x252>
		}
		case 'B' :
		{
			onset_calculation_t(trumpet_onset[h]);
    6030:	e0 91 81 06 	lds	r30, 0x0681
    6034:	f0 91 82 06 	lds	r31, 0x0682
    6038:	ee 0f       	add	r30, r30
    603a:	ff 1f       	adc	r31, r31
    603c:	ee 0f       	add	r30, r30
    603e:	ff 1f       	adc	r31, r31
    6040:	e3 5b       	subi	r30, 0xB3	; 179
    6042:	f9 4f       	sbci	r31, 0xF9	; 249
    6044:	60 81       	ld	r22, Z
    6046:	71 81       	ldd	r23, Z+1	; 0x01
    6048:	82 81       	ldd	r24, Z+2	; 0x02
    604a:	93 81       	ldd	r25, Z+3	; 0x03
    604c:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <_Z19onset_calculation_tf>
			hit_trumpet(1,1,1);
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	61 e0       	ldi	r22, 0x01	; 1
    6056:	70 e0       	ldi	r23, 0x00	; 0
    6058:	41 e0       	ldi	r20, 0x01	; 1
    605a:	50 e0       	ldi	r21, 0x00	; 0
    605c:	0e 94 88 25 	call	0x4b10	; 0x4b10 <_Z11hit_trumpetiii>
			h++;
    6060:	80 91 81 06 	lds	r24, 0x0681
    6064:	90 91 82 06 	lds	r25, 0x0682
    6068:	01 96       	adiw	r24, 0x01	; 1
    606a:	90 93 82 06 	sts	0x0682, r25
    606e:	80 93 81 06 	sts	0x0681, r24
			break;
		}
	}
	a++;
    6072:	80 91 65 05 	lds	r24, 0x0565
    6076:	90 91 66 05 	lds	r25, 0x0566
    607a:	01 96       	adiw	r24, 0x01	; 1
    607c:	90 93 66 05 	sts	0x0566, r25
    6080:	80 93 65 05 	sts	0x0565, r24
}
    6084:	1f 91       	pop	r17
    6086:	0f 91       	pop	r16
    6088:	ff 90       	pop	r15
    608a:	ef 90       	pop	r14
    608c:	08 95       	ret

0000608e <_Z22boot_switch_pin_configv>:
Example Call	:	boot_switch_pin_config();
***********************************/

void boot_switch_pin_config()
{
	DDRD  = DDRD & 0xBF;		// set PD.6 as input
    608e:	56 98       	cbi	0x0a, 6	; 10
	PORTD = PORTD | 0x40;		// set PD.6 HIGH to enable the internal pull-up
    6090:	5e 9a       	sbi	0x0b, 6	; 11
}
    6092:	08 95       	ret

00006094 <_Z16check_boot_pressv>:
***********************************/

void check_boot_press()
{
	//Initially boot switch not pressed
	if ((PIND & 0x40) == 0x40)
    6094:	4e 9b       	sbis	0x09, 6	; 9
    6096:	05 c0       	rjmp	.+10     	; 0x60a2 <_Z16check_boot_pressv+0xe>
	{
		switch_flag = 0;
    6098:	10 92 62 05 	sts	0x0562, r1
    609c:	10 92 61 05 	sts	0x0561, r1
    60a0:	08 95       	ret
	// if boot switch pressed
	// send '#' to Python script
	// this is indicated as Start of Task
	else
	{
		switch_flag = 1;
    60a2:	81 e0       	ldi	r24, 0x01	; 1
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	90 93 62 05 	sts	0x0562, r25
    60aa:	80 93 61 05 	sts	0x0561, r24
    60ae:	08 95       	ret

000060b0 <setup>:
Functionality	:	Declaration of the pins as input or output
Example Call	:	Called automatically
***********************************/

void setup() {
  DDRE  = DDRE & 0XEF;  //pe4
    60b0:	6c 98       	cbi	0x0d, 4	; 13
  DDRH = DDRE | 0x03;  // pin ph0 and ph1 motor   servo 4 ph3
    60b2:	8d b1       	in	r24, 0x0d	; 13
    60b4:	83 60       	ori	r24, 0x03	; 3
    60b6:	80 93 01 01 	sts	0x0101, r24
  DDRA = 0xFF;
    60ba:	8f ef       	ldi	r24, 0xFF	; 255
    60bc:	81 b9       	out	0x01, r24	; 1
  PORTA = 0X00;
    60be:	12 b8       	out	0x02, r1	; 2
  delay(500);
    60c0:	64 ef       	ldi	r22, 0xF4	; 244
    60c2:	71 e0       	ldi	r23, 0x01	; 1
    60c4:	80 e0       	ldi	r24, 0x00	; 0
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <delay>
  attachInterrupt(0,positive_dir,RISING);
    60cc:	80 e0       	ldi	r24, 0x00	; 0
    60ce:	65 ef       	ldi	r22, 0xF5	; 245
    60d0:	73 e2       	ldi	r23, 0x23	; 35
    60d2:	43 e0       	ldi	r20, 0x03	; 3
    60d4:	50 e0       	ldi	r21, 0x00	; 0
    60d6:	0e 94 66 12 	call	0x24cc	; 0x24cc <attachInterrupt>
  port_init();
    60da:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_Z9port_initv>
  timer1_init();
    60de:	0e 94 17 24 	call	0x482e	; 0x482e <_Z11timer1_initv>
  timer4_init();
    60e2:	0e 94 38 24 	call	0x4870	; 0x4870 <_Z11timer4_initv>
  curr_note = 0;
    60e6:	10 92 76 06 	sts	0x0676, r1
    60ea:	10 92 75 06 	sts	0x0675, r1
  servo_1(s_pos);
    60ee:	80 91 68 02 	lds	r24, 0x0268
    60f2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_Z7servo_1h>
  servo_2(tpos);
    60f6:	80 91 4c 02 	lds	r24, 0x024C
    60fa:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_Z7servo_2h>
  servo_3(error2 - tpos);
    60fe:	80 91 50 02 	lds	r24, 0x0250
    6102:	90 91 4c 02 	lds	r25, 0x024C
    6106:	89 1b       	sub	r24, r25
    6108:	0e 94 8b 24 	call	0x4916	; 0x4916 <_Z7servo_3h>
  servo_4(tpos - error3);
    610c:	80 91 4c 02 	lds	r24, 0x024C
    6110:	90 91 4e 02 	lds	r25, 0x024E
    6114:	89 1b       	sub	r24, r25
    6116:	0e 94 a4 24 	call	0x4948	; 0x4948 <_Z7servo_4h>
  boot_switch_pin_config();
    611a:	0e 94 47 30 	call	0x608e	; 0x608e <_Z22boot_switch_pin_configv>
 PORTA = 0x02;
    611e:	82 e0       	ldi	r24, 0x02	; 2
    6120:	82 b9       	out	0x02, r24	; 2
 while(flag == 0){
    6122:	80 91 63 05 	lds	r24, 0x0563
    6126:	90 91 64 05 	lds	r25, 0x0564
    612a:	00 97       	sbiw	r24, 0x00	; 0
    612c:	41 f4       	brne	.+16     	; 0x613e <setup+0x8e>
 serial_communication();
    612e:	0e 94 e7 29 	call	0x53ce	; 0x53ce <_Z20serial_communicationv>
  servo_2(tpos);
  servo_3(error2 - tpos);
  servo_4(tpos - error3);
  boot_switch_pin_config();
 PORTA = 0x02;
 while(flag == 0){
    6132:	80 91 63 05 	lds	r24, 0x0563
    6136:	90 91 64 05 	lds	r25, 0x0564
    613a:	00 97       	sbiw	r24, 0x00	; 0
    613c:	c1 f3       	breq	.-16     	; 0x612e <setup+0x7e>
 serial_communication();
 }
array_segmentation();
    613e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <_Z18array_segmentationv>
}
    6142:	08 95       	ret

00006144 <loop>:
Output			:	None
Functionality	:	Striking of the piano key
Example Call	:	Called automatically
***********************************/

void loop(){
    6144:	8f 92       	push	r8
    6146:	9f 92       	push	r9
    6148:	af 92       	push	r10
    614a:	bf 92       	push	r11
    614c:	df 92       	push	r13
    614e:	ef 92       	push	r14
    6150:	ff 92       	push	r15
    6152:	0f 93       	push	r16
    6154:	1f 93       	push	r17
    6156:	cf 93       	push	r28
    6158:	df 93       	push	r29
	int i=0,j=0,k=0;
	
	check_boot_press();
    615a:	0e 94 4a 30 	call	0x6094	; 0x6094 <_Z16check_boot_pressv>
	
	if(switch_flag == 1)
    615e:	80 91 61 05 	lds	r24, 0x0561
    6162:	90 91 62 05 	lds	r25, 0x0562
    6166:	81 30       	cpi	r24, 0x01	; 1
    6168:	91 05       	cpc	r25, r1
    616a:	09 f0       	breq	.+2      	; 0x616e <loop+0x2a>
    616c:	65 c0       	rjmp	.+202    	; 0x6238 <loop+0xf4>
	{
		prev =millis();
    616e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    6172:	60 93 88 06 	sts	0x0688, r22
    6176:	70 93 89 06 	sts	0x0689, r23
    617a:	80 93 8a 06 	sts	0x068A, r24
    617e:	90 93 8b 06 	sts	0x068B, r25
		PORTA = 0x00;
    6182:	12 b8       	out	0x02, r1	; 2
Functionality	:	Striking of the piano key
Example Call	:	Called automatically
***********************************/

void loop(){
	int i=0,j=0,k=0;
    6184:	ee 24       	eor	r14, r14
    6186:	ff 24       	eor	r15, r15
	if(switch_flag == 1)
	{
		prev =millis();
		PORTA = 0x00;
		while(1){
			reaching_time=millis() - prev;
    6188:	0f 2e       	mov	r0, r31
    618a:	ff e6       	ldi	r31, 0x6F	; 111
    618c:	8f 2e       	mov	r8, r31
    618e:	f5 e0       	ldi	r31, 0x05	; 5
    6190:	9f 2e       	mov	r9, r31
    6192:	f0 2d       	mov	r31, r0
Output			:	None
Functionality	:	Striking of the piano key
Example Call	:	Called automatically
***********************************/

void loop(){
    6194:	84 01       	movw	r16, r8
    6196:	08 5f       	subi	r16, 0xF8	; 248
    6198:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1){
			reaching_time=millis() - prev;
			for (i=0;i<8;i++)
			{
				if(instr[i] == 'P'){
				n= piano_note[j];
    619a:	0f 2e       	mov	r0, r31
    619c:	f1 e1       	ldi	r31, 0x11	; 17
    619e:	af 2e       	mov	r10, r31
    61a0:	f6 e0       	ldi	r31, 0x06	; 6
    61a2:	bf 2e       	mov	r11, r31
    61a4:	f0 2d       	mov	r31, r0
				}
				else if(instr[i] == 'T'){
					trumpet_striking();
				}
			}
			n= '1';
    61a6:	0f 2e       	mov	r0, r31
    61a8:	f1 e3       	ldi	r31, 0x31	; 49
    61aa:	df 2e       	mov	r13, r31
    61ac:	f0 2d       	mov	r31, r0
	if(switch_flag == 1)
	{
		prev =millis();
		PORTA = 0x00;
		while(1){
			reaching_time=millis() - prev;
    61ae:	0e 94 e5 14 	call	0x29ca	; 0x29ca <millis>
    61b2:	9b 01       	movw	r18, r22
    61b4:	ac 01       	movw	r20, r24
    61b6:	80 91 88 06 	lds	r24, 0x0688
    61ba:	90 91 89 06 	lds	r25, 0x0689
    61be:	a0 91 8a 06 	lds	r26, 0x068A
    61c2:	b0 91 8b 06 	lds	r27, 0x068B
    61c6:	28 1b       	sub	r18, r24
    61c8:	39 0b       	sbc	r19, r25
    61ca:	4a 0b       	sbc	r20, r26
    61cc:	5b 0b       	sbc	r21, r27
    61ce:	20 93 84 06 	sts	0x0684, r18
    61d2:	30 93 85 06 	sts	0x0685, r19
    61d6:	40 93 86 06 	sts	0x0686, r20
    61da:	50 93 87 06 	sts	0x0687, r21
    61de:	e4 01       	movw	r28, r8
			for (i=0;i<8;i++)
			{
				if(instr[i] == 'P'){
    61e0:	89 91       	ld	r24, Y+
    61e2:	80 35       	cpi	r24, 0x50	; 80
    61e4:	a1 f4       	brne	.+40     	; 0x620e <loop+0xca>
				n= piano_note[j];
    61e6:	f5 01       	movw	r30, r10
    61e8:	ee 0d       	add	r30, r14
    61ea:	ff 1d       	adc	r31, r15
    61ec:	80 81       	ld	r24, Z
    61ee:	80 93 83 06 	sts	0x0683, r24
				curr_note = control(n,curr_note);
    61f2:	60 91 75 06 	lds	r22, 0x0675
    61f6:	70 91 76 06 	lds	r23, 0x0676
    61fa:	0e 94 11 2c 	call	0x5822	; 0x5822 <_Z7controlci>
    61fe:	90 93 76 06 	sts	0x0676, r25
    6202:	80 93 75 06 	sts	0x0675, r24
				j++;
    6206:	08 94       	sec
    6208:	e1 1c       	adc	r14, r1
    620a:	f1 1c       	adc	r15, r1
    620c:	04 c0       	rjmp	.+8      	; 0x6216 <loop+0xd2>
				}
				else if(instr[i] == 'T'){
    620e:	84 35       	cpi	r24, 0x54	; 84
    6210:	11 f4       	brne	.+4      	; 0x6216 <loop+0xd2>
					trumpet_striking();
    6212:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <_Z16trumpet_strikingv>
	{
		prev =millis();
		PORTA = 0x00;
		while(1){
			reaching_time=millis() - prev;
			for (i=0;i<8;i++)
    6216:	c0 17       	cp	r28, r16
    6218:	d1 07       	cpc	r29, r17
    621a:	11 f7       	brne	.-60     	; 0x61e0 <loop+0x9c>
				}
				else if(instr[i] == 'T'){
					trumpet_striking();
				}
			}
			n= '1';
    621c:	d0 92 83 06 	sts	0x0683, r13
			curr_note = control(n,curr_note);
    6220:	60 91 75 06 	lds	r22, 0x0675
    6224:	70 91 76 06 	lds	r23, 0x0676
    6228:	8d 2d       	mov	r24, r13
    622a:	0e 94 11 2c 	call	0x5822	; 0x5822 <_Z7controlci>
    622e:	90 93 76 06 	sts	0x0676, r25
    6232:	80 93 75 06 	sts	0x0675, r24
	
	if(switch_flag == 1)
	{
		prev =millis();
		PORTA = 0x00;
		while(1){
    6236:	bb cf       	rjmp	.-138    	; 0x61ae <loop+0x6a>
			}
			n= '1';
			curr_note = control(n,curr_note);
		}
	}
}
    6238:	df 91       	pop	r29
    623a:	cf 91       	pop	r28
    623c:	1f 91       	pop	r17
    623e:	0f 91       	pop	r16
    6240:	ff 90       	pop	r15
    6242:	ef 90       	pop	r14
    6244:	df 90       	pop	r13
    6246:	bf 90       	pop	r11
    6248:	af 90       	pop	r10
    624a:	9f 90       	pop	r9
    624c:	8f 90       	pop	r8
    624e:	08 95       	ret

00006250 <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
    6250:	cf 93       	push	r28
    6252:	df 93       	push	r29
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    6254:	82 30       	cpi	r24, 0x02	; 2
    6256:	91 05       	cpc	r25, r1
    6258:	10 f4       	brcc	.+4      	; 0x625e <malloc+0xe>
		len = sizeof(struct __freelist) - sizeof(size_t);
    625a:	82 e0       	ldi	r24, 0x02	; 2
    625c:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    625e:	c0 91 8e 06 	lds	r28, 0x068E
    6262:	d0 91 8f 06 	lds	r29, 0x068F
    6266:	20 97       	sbiw	r28, 0x00	; 0
    6268:	09 f4       	brne	.+2      	; 0x626c <malloc+0x1c>
    626a:	58 c0       	rjmp	.+176    	; 0x631c <malloc+0xcc>
    626c:	60 e0       	ldi	r22, 0x00	; 0
    626e:	70 e0       	ldi	r23, 0x00	; 0
    6270:	40 e0       	ldi	r20, 0x00	; 0
    6272:	50 e0       	ldi	r21, 0x00	; 0
    6274:	02 c0       	rjmp	.+4      	; 0x627a <malloc+0x2a>
    6276:	ae 01       	movw	r20, r28
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    6278:	e9 01       	movw	r28, r18
		if (fp1->sz < len)
    627a:	28 81       	ld	r18, Y
    627c:	39 81       	ldd	r19, Y+1	; 0x01
    627e:	28 17       	cp	r18, r24
    6280:	39 07       	cpc	r19, r25
    6282:	18 f1       	brcs	.+70     	; 0x62ca <malloc+0x7a>
			continue;
		if (fp1->sz == len) {
    6284:	82 17       	cp	r24, r18
    6286:	93 07       	cpc	r25, r19
    6288:	91 f4       	brne	.+36     	; 0x62ae <malloc+0x5e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    628a:	41 15       	cp	r20, r1
    628c:	51 05       	cpc	r21, r1
    628e:	31 f0       	breq	.+12     	; 0x629c <malloc+0x4c>
				fp2->nx = fp1->nx;
    6290:	8a 81       	ldd	r24, Y+2	; 0x02
    6292:	9b 81       	ldd	r25, Y+3	; 0x03
    6294:	fa 01       	movw	r30, r20
    6296:	93 83       	std	Z+3, r25	; 0x03
    6298:	82 83       	std	Z+2, r24	; 0x02
    629a:	06 c0       	rjmp	.+12     	; 0x62a8 <malloc+0x58>
			else
				__flp = fp1->nx;
    629c:	8a 81       	ldd	r24, Y+2	; 0x02
    629e:	9b 81       	ldd	r25, Y+3	; 0x03
    62a0:	90 93 8f 06 	sts	0x068F, r25
    62a4:	80 93 8e 06 	sts	0x068E, r24
			return &(fp1->nx);
    62a8:	de 01       	movw	r26, r28
    62aa:	12 96       	adiw	r26, 0x02	; 2
    62ac:	78 c0       	rjmp	.+240    	; 0x639e <malloc+0x14e>
		}
		else {
			if (s == 0 || fp1->sz < s) {
    62ae:	61 15       	cp	r22, r1
    62b0:	71 05       	cpc	r23, r1
    62b2:	21 f0       	breq	.+8      	; 0x62bc <malloc+0x6c>
    62b4:	26 17       	cp	r18, r22
    62b6:	37 07       	cpc	r19, r23
    62b8:	28 f0       	brcs	.+10     	; 0x62c4 <malloc+0x74>
    62ba:	07 c0       	rjmp	.+14     	; 0x62ca <malloc+0x7a>
				/* this is the smallest chunk found so far */
				s = fp1->sz;
    62bc:	b9 01       	movw	r22, r18
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    62be:	da 01       	movw	r26, r20
    62c0:	fe 01       	movw	r30, r28
    62c2:	03 c0       	rjmp	.+6      	; 0x62ca <malloc+0x7a>
				/* this is the smallest chunk found so far */
				s = fp1->sz;
    62c4:	b9 01       	movw	r22, r18
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    62c6:	da 01       	movw	r26, r20
    62c8:	fe 01       	movw	r30, r28
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    62ca:	2a 81       	ldd	r18, Y+2	; 0x02
    62cc:	3b 81       	ldd	r19, Y+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    62ce:	21 15       	cp	r18, r1
    62d0:	31 05       	cpc	r19, r1
    62d2:	89 f6       	brne	.-94     	; 0x6276 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    62d4:	61 15       	cp	r22, r1
    62d6:	71 05       	cpc	r23, r1
    62d8:	09 f1       	breq	.+66     	; 0x631c <malloc+0xcc>
		if (s - len < sizeof(struct __freelist)) {
    62da:	68 1b       	sub	r22, r24
    62dc:	79 0b       	sbc	r23, r25
    62de:	64 30       	cpi	r22, 0x04	; 4
    62e0:	71 05       	cpc	r23, r1
    62e2:	90 f4       	brcc	.+36     	; 0x6308 <malloc+0xb8>
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    62e4:	10 97       	sbiw	r26, 0x00	; 0
    62e6:	39 f0       	breq	.+14     	; 0x62f6 <malloc+0xa6>
				sfp2->nx = sfp1->nx;
    62e8:	82 81       	ldd	r24, Z+2	; 0x02
    62ea:	93 81       	ldd	r25, Z+3	; 0x03
    62ec:	13 96       	adiw	r26, 0x03	; 3
    62ee:	9c 93       	st	X, r25
    62f0:	8e 93       	st	-X, r24
    62f2:	12 97       	sbiw	r26, 0x02	; 2
    62f4:	06 c0       	rjmp	.+12     	; 0x6302 <malloc+0xb2>
			else
				__flp = sfp1->nx;
    62f6:	82 81       	ldd	r24, Z+2	; 0x02
    62f8:	93 81       	ldd	r25, Z+3	; 0x03
    62fa:	90 93 8f 06 	sts	0x068F, r25
    62fe:	80 93 8e 06 	sts	0x068E, r24
			return &(sfp1->nx);
    6302:	df 01       	movw	r26, r30
    6304:	12 96       	adiw	r26, 0x02	; 2
    6306:	4b c0       	rjmp	.+150    	; 0x639e <malloc+0x14e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    6308:	df 01       	movw	r26, r30
    630a:	a6 0f       	add	r26, r22
    630c:	b7 1f       	adc	r27, r23
    630e:	8d 93       	st	X+, r24
    6310:	9d 93       	st	X+, r25
		sfp1->sz = s - sizeof(size_t);
    6312:	62 50       	subi	r22, 0x02	; 2
    6314:	70 40       	sbci	r23, 0x00	; 0
    6316:	71 83       	std	Z+1, r23	; 0x01
    6318:	60 83       	st	Z, r22
		return &(sfp2->nx);
    631a:	41 c0       	rjmp	.+130    	; 0x639e <malloc+0x14e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    631c:	20 91 8c 06 	lds	r18, 0x068C
    6320:	30 91 8d 06 	lds	r19, 0x068D
    6324:	21 15       	cp	r18, r1
    6326:	31 05       	cpc	r19, r1
    6328:	41 f4       	brne	.+16     	; 0x633a <malloc+0xea>
		__brkval = __malloc_heap_start;
    632a:	20 91 02 02 	lds	r18, 0x0202
    632e:	30 91 03 02 	lds	r19, 0x0203
    6332:	30 93 8d 06 	sts	0x068D, r19
    6336:	20 93 8c 06 	sts	0x068C, r18
	cp = __malloc_heap_end;
    633a:	20 91 04 02 	lds	r18, 0x0204
    633e:	30 91 05 02 	lds	r19, 0x0205
	if (cp == 0)
    6342:	21 15       	cp	r18, r1
    6344:	31 05       	cpc	r19, r1
    6346:	41 f4       	brne	.+16     	; 0x6358 <malloc+0x108>
		cp = STACK_POINTER() - __malloc_margin;
    6348:	2d b7       	in	r18, 0x3d	; 61
    634a:	3e b7       	in	r19, 0x3e	; 62
    634c:	40 91 00 02 	lds	r20, 0x0200
    6350:	50 91 01 02 	lds	r21, 0x0201
    6354:	24 1b       	sub	r18, r20
    6356:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    6358:	a0 91 8c 06 	lds	r26, 0x068C
    635c:	b0 91 8d 06 	lds	r27, 0x068D
    6360:	a2 17       	cp	r26, r18
    6362:	b3 07       	cpc	r27, r19
    6364:	a0 f4       	brcc	.+40     	; 0x638e <malloc+0x13e>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    6366:	2a 1b       	sub	r18, r26
    6368:	3b 0b       	sbc	r19, r27
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    636a:	28 17       	cp	r18, r24
    636c:	39 07       	cpc	r19, r25
    636e:	90 f0       	brcs	.+36     	; 0x6394 <malloc+0x144>
    6370:	ac 01       	movw	r20, r24
    6372:	4e 5f       	subi	r20, 0xFE	; 254
    6374:	5f 4f       	sbci	r21, 0xFF	; 255
    6376:	24 17       	cp	r18, r20
    6378:	35 07       	cpc	r19, r21
    637a:	78 f0       	brcs	.+30     	; 0x639a <malloc+0x14a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    637c:	4a 0f       	add	r20, r26
    637e:	5b 1f       	adc	r21, r27
    6380:	50 93 8d 06 	sts	0x068D, r21
    6384:	40 93 8c 06 	sts	0x068C, r20
		fp1->sz = len;
    6388:	8d 93       	st	X+, r24
    638a:	9d 93       	st	X+, r25
		return &(fp1->nx);
    638c:	08 c0       	rjmp	.+16     	; 0x639e <malloc+0x14e>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    638e:	a0 e0       	ldi	r26, 0x00	; 0
    6390:	b0 e0       	ldi	r27, 0x00	; 0
    6392:	05 c0       	rjmp	.+10     	; 0x639e <malloc+0x14e>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
    6394:	a0 e0       	ldi	r26, 0x00	; 0
    6396:	b0 e0       	ldi	r27, 0x00	; 0
    6398:	02 c0       	rjmp	.+4      	; 0x639e <malloc+0x14e>
    639a:	a0 e0       	ldi	r26, 0x00	; 0
    639c:	b0 e0       	ldi	r27, 0x00	; 0
}
    639e:	8a 2f       	mov	r24, r26
    63a0:	9b 2f       	mov	r25, r27
    63a2:	df 91       	pop	r29
    63a4:	cf 91       	pop	r28
    63a6:	08 95       	ret

000063a8 <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
    63a8:	cf 93       	push	r28
    63aa:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    63ac:	00 97       	sbiw	r24, 0x00	; 0
    63ae:	09 f4       	brne	.+2      	; 0x63b2 <free+0xa>
    63b0:	98 c0       	rjmp	.+304    	; 0x64e2 <free+0x13a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    63b2:	fc 01       	movw	r30, r24
    63b4:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
    63b6:	9f 01       	movw	r18, r30
	fpnew->nx = 0;
    63b8:	13 82       	std	Z+3, r1	; 0x03
    63ba:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    63bc:	a0 91 8e 06 	lds	r26, 0x068E
    63c0:	b0 91 8f 06 	lds	r27, 0x068F
    63c4:	10 97       	sbiw	r26, 0x00	; 0
    63c6:	31 f0       	breq	.+12     	; 0x63d4 <free+0x2c>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    63c8:	ae 17       	cp	r26, r30
    63ca:	bf 07       	cpc	r27, r31
    63cc:	e0 f0       	brcs	.+56     	; 0x6406 <free+0x5e>
    63ce:	40 e0       	ldi	r20, 0x00	; 0
    63d0:	50 e0       	ldi	r21, 0x00	; 0
    63d2:	23 c0       	rjmp	.+70     	; 0x641a <free+0x72>
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
		if ((char *)p + fpnew->sz == __brkval)
    63d4:	20 81       	ld	r18, Z
    63d6:	31 81       	ldd	r19, Z+1	; 0x01
    63d8:	82 0f       	add	r24, r18
    63da:	93 1f       	adc	r25, r19
    63dc:	20 91 8c 06 	lds	r18, 0x068C
    63e0:	30 91 8d 06 	lds	r19, 0x068D
    63e4:	28 17       	cp	r18, r24
    63e6:	39 07       	cpc	r19, r25
    63e8:	29 f4       	brne	.+10     	; 0x63f4 <free+0x4c>
			__brkval = cpnew;
    63ea:	f0 93 8d 06 	sts	0x068D, r31
    63ee:	e0 93 8c 06 	sts	0x068C, r30
    63f2:	77 c0       	rjmp	.+238    	; 0x64e2 <free+0x13a>
		else
			__flp = fpnew;
    63f4:	f0 93 8f 06 	sts	0x068F, r31
    63f8:	e0 93 8e 06 	sts	0x068E, r30
    63fc:	72 c0       	rjmp	.+228    	; 0x64e2 <free+0x13a>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    63fe:	82 17       	cp	r24, r18
    6400:	93 07       	cpc	r25, r19
    6402:	48 f4       	brcc	.+18     	; 0x6416 <free+0x6e>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    6404:	dc 01       	movw	r26, r24
    6406:	12 96       	adiw	r26, 0x02	; 2
    6408:	8d 91       	ld	r24, X+
    640a:	9c 91       	ld	r25, X
    640c:	13 97       	sbiw	r26, 0x03	; 3
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    640e:	00 97       	sbiw	r24, 0x00	; 0
    6410:	b1 f7       	brne	.-20     	; 0x63fe <free+0x56>
    6412:	ad 01       	movw	r20, r26
    6414:	24 c0       	rjmp	.+72     	; 0x645e <free+0xb6>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    6416:	ad 01       	movw	r20, r26
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    6418:	dc 01       	movw	r26, r24
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    641a:	b3 83       	std	Z+3, r27	; 0x03
    641c:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    641e:	ef 01       	movw	r28, r30
    6420:	29 91       	ld	r18, Y+
    6422:	39 91       	ld	r19, Y+
    6424:	ce 01       	movw	r24, r28
    6426:	82 0f       	add	r24, r18
    6428:	93 1f       	adc	r25, r19
    642a:	a8 17       	cp	r26, r24
    642c:	b9 07       	cpc	r27, r25
    642e:	79 f4       	brne	.+30     	; 0x644e <free+0xa6>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    6430:	8d 91       	ld	r24, X+
    6432:	9c 91       	ld	r25, X
    6434:	11 97       	sbiw	r26, 0x01	; 1
    6436:	28 0f       	add	r18, r24
    6438:	39 1f       	adc	r19, r25
    643a:	2e 5f       	subi	r18, 0xFE	; 254
    643c:	3f 4f       	sbci	r19, 0xFF	; 255
    643e:	31 83       	std	Z+1, r19	; 0x01
    6440:	20 83       	st	Z, r18
			fpnew->nx = fp1->nx;
    6442:	12 96       	adiw	r26, 0x02	; 2
    6444:	8d 91       	ld	r24, X+
    6446:	9c 91       	ld	r25, X
    6448:	13 97       	sbiw	r26, 0x03	; 3
    644a:	93 83       	std	Z+3, r25	; 0x03
    644c:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    644e:	41 15       	cp	r20, r1
    6450:	51 05       	cpc	r21, r1
    6452:	29 f4       	brne	.+10     	; 0x645e <free+0xb6>
			/* new head of freelist */
			__flp = fpnew;
    6454:	f0 93 8f 06 	sts	0x068F, r31
    6458:	e0 93 8e 06 	sts	0x068E, r30
			return;
    645c:	42 c0       	rjmp	.+132    	; 0x64e2 <free+0x13a>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    645e:	da 01       	movw	r26, r20
    6460:	13 96       	adiw	r26, 0x03	; 3
    6462:	fc 93       	st	X, r31
    6464:	ee 93       	st	-X, r30
    6466:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    6468:	8d 91       	ld	r24, X+
    646a:	9d 91       	ld	r25, X+
    646c:	a8 0f       	add	r26, r24
    646e:	b9 1f       	adc	r27, r25
    6470:	ea 17       	cp	r30, r26
    6472:	fb 07       	cpc	r31, r27
    6474:	61 f4       	brne	.+24     	; 0x648e <free+0xe6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    6476:	20 81       	ld	r18, Z
    6478:	31 81       	ldd	r19, Z+1	; 0x01
    647a:	82 0f       	add	r24, r18
    647c:	93 1f       	adc	r25, r19
    647e:	02 96       	adiw	r24, 0x02	; 2
    6480:	ea 01       	movw	r28, r20
    6482:	99 83       	std	Y+1, r25	; 0x01
    6484:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    6486:	82 81       	ldd	r24, Z+2	; 0x02
    6488:	93 81       	ldd	r25, Z+3	; 0x03
    648a:	9b 83       	std	Y+3, r25	; 0x03
    648c:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    648e:	e0 91 8e 06 	lds	r30, 0x068E
    6492:	f0 91 8f 06 	lds	r31, 0x068F
    6496:	a0 e0       	ldi	r26, 0x00	; 0
    6498:	b0 e0       	ldi	r27, 0x00	; 0
    649a:	02 c0       	rjmp	.+4      	; 0x64a0 <free+0xf8>
    649c:	df 01       	movw	r26, r30
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
    649e:	fc 01       	movw	r30, r24
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    64a0:	82 81       	ldd	r24, Z+2	; 0x02
    64a2:	93 81       	ldd	r25, Z+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    64a4:	00 97       	sbiw	r24, 0x00	; 0
    64a6:	d1 f7       	brne	.-12     	; 0x649c <free+0xf4>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    64a8:	cf 01       	movw	r24, r30
    64aa:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
    64ac:	20 81       	ld	r18, Z
    64ae:	31 81       	ldd	r19, Z+1	; 0x01
    64b0:	28 0f       	add	r18, r24
    64b2:	39 1f       	adc	r19, r25
    64b4:	40 91 8c 06 	lds	r20, 0x068C
    64b8:	50 91 8d 06 	lds	r21, 0x068D
    64bc:	42 17       	cp	r20, r18
    64be:	53 07       	cpc	r21, r19
    64c0:	81 f4       	brne	.+32     	; 0x64e2 <free+0x13a>
		if (fp2 == NULL)
    64c2:	10 97       	sbiw	r26, 0x00	; 0
    64c4:	29 f4       	brne	.+10     	; 0x64d0 <free+0x128>
			/* Freelist is empty now. */
			__flp = NULL;
    64c6:	10 92 8f 06 	sts	0x068F, r1
    64ca:	10 92 8e 06 	sts	0x068E, r1
    64ce:	04 c0       	rjmp	.+8      	; 0x64d8 <free+0x130>
		else
			fp2->nx = NULL;
    64d0:	13 96       	adiw	r26, 0x03	; 3
    64d2:	1c 92       	st	X, r1
    64d4:	1e 92       	st	-X, r1
    64d6:	12 97       	sbiw	r26, 0x02	; 2
		__brkval = cp2 - sizeof(size_t);
    64d8:	02 97       	sbiw	r24, 0x02	; 2
    64da:	90 93 8d 06 	sts	0x068D, r25
    64de:	80 93 8c 06 	sts	0x068C, r24
	}
}
    64e2:	df 91       	pop	r29
    64e4:	cf 91       	pop	r28
    64e6:	08 95       	ret

000064e8 <realloc>:
#include <avr/io.h>

ATTRIBUTE_CLIB_SECTION
void *
realloc(void *ptr, size_t len)
{
    64e8:	6f 92       	push	r6
    64ea:	7f 92       	push	r7
    64ec:	8f 92       	push	r8
    64ee:	9f 92       	push	r9
    64f0:	af 92       	push	r10
    64f2:	bf 92       	push	r11
    64f4:	cf 92       	push	r12
    64f6:	df 92       	push	r13
    64f8:	ef 92       	push	r14
    64fa:	ff 92       	push	r15
    64fc:	0f 93       	push	r16
    64fe:	1f 93       	push	r17
    6500:	cf 93       	push	r28
    6502:	df 93       	push	r29
    6504:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    6506:	00 97       	sbiw	r24, 0x00	; 0
    6508:	31 f4       	brne	.+12     	; 0x6516 <realloc+0x2e>
		return malloc(len);
    650a:	cb 01       	movw	r24, r22
    650c:	0e 94 28 31 	call	0x6250	; 0x6250 <malloc>
    6510:	08 2f       	mov	r16, r24
    6512:	19 2f       	mov	r17, r25
    6514:	d0 c0       	rjmp	.+416    	; 0x66b6 <realloc+0x1ce>

	cp1 = (char *)ptr;
    6516:	3c 01       	movw	r6, r24
	cp1 -= sizeof(size_t);
    6518:	0f 2e       	mov	r0, r31
    651a:	fe ef       	ldi	r31, 0xFE	; 254
    651c:	ef 2e       	mov	r14, r31
    651e:	ff ef       	ldi	r31, 0xFF	; 255
    6520:	ff 2e       	mov	r15, r31
    6522:	f0 2d       	mov	r31, r0
    6524:	e8 0e       	add	r14, r24
    6526:	f9 1e       	adc	r15, r25
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    6528:	6c 01       	movw	r12, r24
    652a:	c6 0e       	add	r12, r22
    652c:	d7 1e       	adc	r13, r23
	if (cp < cp1)
    652e:	ce 14       	cp	r12, r14
    6530:	df 04       	cpc	r13, r15
    6532:	08 f4       	brcc	.+2      	; 0x6536 <realloc+0x4e>
    6534:	b8 c0       	rjmp	.+368    	; 0x66a6 <realloc+0x1be>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    6536:	f7 01       	movw	r30, r14
    6538:	a0 80       	ld	r10, Z
    653a:	b1 80       	ldd	r11, Z+1	; 0x01
    653c:	a6 16       	cp	r10, r22
    653e:	b7 06       	cpc	r11, r23
    6540:	d8 f0       	brcs	.+54     	; 0x6578 <realloc+0x90>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    6542:	f5 e0       	ldi	r31, 0x05	; 5
    6544:	af 16       	cp	r10, r31
    6546:	b1 04       	cpc	r11, r1
    6548:	08 f4       	brcc	.+2      	; 0x654c <realloc+0x64>
    654a:	b5 c0       	rjmp	.+362    	; 0x66b6 <realloc+0x1ce>
		    len > fp1->sz - sizeof(struct __freelist))
    654c:	c5 01       	movw	r24, r10
    654e:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    6550:	86 17       	cp	r24, r22
    6552:	97 07       	cpc	r25, r23
    6554:	08 f4       	brcc	.+2      	; 0x6558 <realloc+0x70>
    6556:	af c0       	rjmp	.+350    	; 0x66b6 <realloc+0x1ce>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    6558:	2e ef       	ldi	r18, 0xFE	; 254
    655a:	3f ef       	ldi	r19, 0xFF	; 255
    655c:	a2 0e       	add	r10, r18
    655e:	b3 1e       	adc	r11, r19
    6560:	a6 1a       	sub	r10, r22
    6562:	b7 0a       	sbc	r11, r23
    6564:	f6 01       	movw	r30, r12
    6566:	a1 92       	st	Z+, r10
    6568:	b1 92       	st	Z+, r11
    656a:	cf 01       	movw	r24, r30
		fp1->sz = len;
    656c:	f7 01       	movw	r30, r14
    656e:	71 83       	std	Z+1, r23	; 0x01
    6570:	60 83       	st	Z, r22
		free(&(fp2->nx));
    6572:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
		return ptr;
    6576:	9f c0       	rjmp	.+318    	; 0x66b6 <realloc+0x1ce>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    6578:	4b 01       	movw	r8, r22
    657a:	8a 18       	sub	r8, r10
    657c:	9b 08       	sbc	r9, r11
	cp = (char *)ptr + fp1->sz;
    657e:	6a 0c       	add	r6, r10
    6580:	7b 1c       	adc	r7, r11
	fp2 = (struct __freelist *)cp;
    6582:	d3 01       	movw	r26, r6
	for (s = 0, ofp3 = 0, fp3 = __flp;
    6584:	e0 91 8e 06 	lds	r30, 0x068E
    6588:	f0 91 8f 06 	lds	r31, 0x068F
    658c:	30 97       	sbiw	r30, 0x00	; 0
    658e:	09 f4       	brne	.+2      	; 0x6592 <realloc+0xaa>
    6590:	4f c0       	rjmp	.+158    	; 0x6630 <realloc+0x148>
    6592:	40 e0       	ldi	r20, 0x00	; 0
    6594:	50 e0       	ldi	r21, 0x00	; 0
    6596:	c0 e0       	ldi	r28, 0x00	; 0
    6598:	d0 e0       	ldi	r29, 0x00	; 0
    659a:	02 c0       	rjmp	.+4      	; 0x65a0 <realloc+0xb8>
    659c:	ef 01       	movw	r28, r30
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    659e:	f9 01       	movw	r30, r18
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    65a0:	ea 17       	cp	r30, r26
    65a2:	fb 07       	cpc	r31, r27
    65a4:	c1 f5       	brne	.+112    	; 0x6616 <realloc+0x12e>
    65a6:	2d 91       	ld	r18, X+
    65a8:	3c 91       	ld	r19, X
    65aa:	11 97       	sbiw	r26, 0x01	; 1
    65ac:	c9 01       	movw	r24, r18
    65ae:	02 96       	adiw	r24, 0x02	; 2
    65b0:	88 15       	cp	r24, r8
    65b2:	99 05       	cpc	r25, r9
    65b4:	80 f1       	brcs	.+96     	; 0x6616 <realloc+0x12e>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    65b6:	c9 01       	movw	r24, r18
    65b8:	88 19       	sub	r24, r8
    65ba:	99 09       	sbc	r25, r9
    65bc:	02 96       	adiw	r24, 0x02	; 2
    65be:	85 30       	cpi	r24, 0x05	; 5
    65c0:	91 05       	cpc	r25, r1
    65c2:	a8 f0       	brcs	.+42     	; 0x65ee <realloc+0x106>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    65c4:	c6 01       	movw	r24, r12
    65c6:	3c 2d       	mov	r19, r12
    65c8:	29 2f       	mov	r18, r25
				fp2->nx = fp3->nx;
    65ca:	f3 01       	movw	r30, r6
    65cc:	82 81       	ldd	r24, Z+2	; 0x02
    65ce:	93 81       	ldd	r25, Z+3	; 0x03
    65d0:	f6 01       	movw	r30, r12
    65d2:	93 83       	std	Z+3, r25	; 0x03
    65d4:	82 83       	std	Z+2, r24	; 0x02
				fp2->sz = fp3->sz - incr;
    65d6:	f3 01       	movw	r30, r6
    65d8:	80 81       	ld	r24, Z
    65da:	91 81       	ldd	r25, Z+1	; 0x01
    65dc:	88 19       	sub	r24, r8
    65de:	99 09       	sbc	r25, r9
    65e0:	f6 01       	movw	r30, r12
    65e2:	91 83       	std	Z+1, r25	; 0x01
    65e4:	80 83       	st	Z, r24
				fp1->sz = len;
    65e6:	f7 01       	movw	r30, r14
    65e8:	71 83       	std	Z+1, r23	; 0x01
    65ea:	60 83       	st	Z, r22
    65ec:	0a c0       	rjmp	.+20     	; 0x6602 <realloc+0x11a>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    65ee:	c5 01       	movw	r24, r10
    65f0:	02 96       	adiw	r24, 0x02	; 2
    65f2:	28 0f       	add	r18, r24
    65f4:	39 1f       	adc	r19, r25
    65f6:	f7 01       	movw	r30, r14
    65f8:	31 83       	std	Z+1, r19	; 0x01
    65fa:	20 83       	st	Z, r18
				fp2 = fp3->nx;
    65fc:	f3 01       	movw	r30, r6
    65fe:	32 81       	ldd	r19, Z+2	; 0x02
    6600:	23 81       	ldd	r18, Z+3	; 0x03
			}
			if (ofp3)
    6602:	20 97       	sbiw	r28, 0x00	; 0
    6604:	19 f0       	breq	.+6      	; 0x660c <realloc+0x124>
				ofp3->nx = fp2;
    6606:	3a 83       	std	Y+2, r19	; 0x02
    6608:	2b 83       	std	Y+3, r18	; 0x03
    660a:	55 c0       	rjmp	.+170    	; 0x66b6 <realloc+0x1ce>
			else
				__flp = fp2;
    660c:	30 93 8e 06 	sts	0x068E, r19
    6610:	20 93 8f 06 	sts	0x068F, r18
    6614:	50 c0       	rjmp	.+160    	; 0x66b6 <realloc+0x1ce>
    6616:	80 81       	ld	r24, Z
    6618:	91 81       	ldd	r25, Z+1	; 0x01
    661a:	48 17       	cp	r20, r24
    661c:	59 07       	cpc	r21, r25
    661e:	08 f4       	brcc	.+2      	; 0x6622 <realloc+0x13a>
    6620:	ac 01       	movw	r20, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    6622:	22 81       	ldd	r18, Z+2	; 0x02
    6624:	33 81       	ldd	r19, Z+3	; 0x03
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    6626:	21 15       	cp	r18, r1
    6628:	31 05       	cpc	r19, r1
    662a:	09 f0       	breq	.+2      	; 0x662e <realloc+0x146>
    662c:	b7 cf       	rjmp	.-146    	; 0x659c <realloc+0xb4>
    662e:	02 c0       	rjmp	.+4      	; 0x6634 <realloc+0x14c>
    6630:	40 e0       	ldi	r20, 0x00	; 0
    6632:	50 e0       	ldi	r21, 0x00	; 0
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    6634:	80 91 8c 06 	lds	r24, 0x068C
    6638:	90 91 8d 06 	lds	r25, 0x068D
    663c:	68 16       	cp	r6, r24
    663e:	79 06       	cpc	r7, r25
    6640:	e1 f4       	brne	.+56     	; 0x667a <realloc+0x192>
    6642:	46 17       	cp	r20, r22
    6644:	57 07       	cpc	r21, r23
    6646:	c8 f4       	brcc	.+50     	; 0x667a <realloc+0x192>
		cp1 = __malloc_heap_end;
    6648:	80 91 04 02 	lds	r24, 0x0204
    664c:	90 91 05 02 	lds	r25, 0x0205
		cp = (char *)ptr + len;
		if (cp1 == 0)
    6650:	00 97       	sbiw	r24, 0x00	; 0
    6652:	41 f4       	brne	.+16     	; 0x6664 <realloc+0x17c>
			cp1 = STACK_POINTER() - __malloc_margin;
    6654:	8d b7       	in	r24, 0x3d	; 61
    6656:	9e b7       	in	r25, 0x3e	; 62
    6658:	20 91 00 02 	lds	r18, 0x0200
    665c:	30 91 01 02 	lds	r19, 0x0201
    6660:	82 1b       	sub	r24, r18
    6662:	93 0b       	sbc	r25, r19
		if (cp < cp1) {
    6664:	c8 16       	cp	r12, r24
    6666:	d9 06       	cpc	r13, r25
    6668:	08 f5       	brcc	.+66     	; 0x66ac <realloc+0x1c4>
			__brkval = cp;
    666a:	d0 92 8d 06 	sts	0x068D, r13
    666e:	c0 92 8c 06 	sts	0x068C, r12
			fp1->sz = len;
    6672:	f7 01       	movw	r30, r14
    6674:	71 83       	std	Z+1, r23	; 0x01
    6676:	60 83       	st	Z, r22
			return ptr;
    6678:	1e c0       	rjmp	.+60     	; 0x66b6 <realloc+0x1ce>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    667a:	cb 01       	movw	r24, r22
    667c:	0e 94 28 31 	call	0x6250	; 0x6250 <malloc>
    6680:	e8 2e       	mov	r14, r24
    6682:	e7 01       	movw	r28, r14
    6684:	7e 01       	movw	r14, r28
    6686:	f9 2e       	mov	r15, r25
    6688:	e7 01       	movw	r28, r14
    668a:	20 97       	sbiw	r28, 0x00	; 0
    668c:	91 f0       	breq	.+36     	; 0x66b2 <realloc+0x1ca>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    668e:	8e 2d       	mov	r24, r14
    6690:	60 2f       	mov	r22, r16
    6692:	71 2f       	mov	r23, r17
    6694:	4a 2d       	mov	r20, r10
    6696:	5b 2d       	mov	r21, r11
    6698:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memcpy>
	free(ptr);
    669c:	c8 01       	movw	r24, r16
    669e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <free>
	return memp;
    66a2:	87 01       	movw	r16, r14
    66a4:	08 c0       	rjmp	.+16     	; 0x66b6 <realloc+0x1ce>
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
		/* Pointer wrapped across top of RAM, fail. */
		return 0;
    66a6:	00 e0       	ldi	r16, 0x00	; 0
    66a8:	10 e0       	ldi	r17, 0x00	; 0
    66aa:	05 c0       	rjmp	.+10     	; 0x66b6 <realloc+0x1ce>
			__brkval = cp;
			fp1->sz = len;
			return ptr;
		}
		/* If that failed, we are out of luck. */
		return 0;
    66ac:	00 e0       	ldi	r16, 0x00	; 0
    66ae:	10 e0       	ldi	r17, 0x00	; 0
    66b0:	02 c0       	rjmp	.+4      	; 0x66b6 <realloc+0x1ce>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    66b2:	00 e0       	ldi	r16, 0x00	; 0
    66b4:	10 e0       	ldi	r17, 0x00	; 0
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    66b6:	80 2f       	mov	r24, r16
    66b8:	91 2f       	mov	r25, r17
    66ba:	df 91       	pop	r29
    66bc:	cf 91       	pop	r28
    66be:	1f 91       	pop	r17
    66c0:	0f 91       	pop	r16
    66c2:	ff 90       	pop	r15
    66c4:	ef 90       	pop	r14
    66c6:	df 90       	pop	r13
    66c8:	cf 90       	pop	r12
    66ca:	bf 90       	pop	r11
    66cc:	af 90       	pop	r10
    66ce:	9f 90       	pop	r9
    66d0:	8f 90       	pop	r8
    66d2:	7f 90       	pop	r7
    66d4:	6f 90       	pop	r6
    66d6:	08 95       	ret

000066d8 <__subsf3>:
    66d8:	50 58       	subi	r21, 0x80	; 128

000066da <__addsf3>:
    66da:	bb 27       	eor	r27, r27
    66dc:	aa 27       	eor	r26, r26
    66de:	0e d0       	rcall	.+28     	; 0x66fc <__addsf3x>
    66e0:	75 c1       	rjmp	.+746    	; 0x69cc <__fp_round>
    66e2:	66 d1       	rcall	.+716    	; 0x69b0 <__fp_pscA>
    66e4:	30 f0       	brcs	.+12     	; 0x66f2 <__addsf3+0x18>
    66e6:	6b d1       	rcall	.+726    	; 0x69be <__fp_pscB>
    66e8:	20 f0       	brcs	.+8      	; 0x66f2 <__addsf3+0x18>
    66ea:	31 f4       	brne	.+12     	; 0x66f8 <__addsf3+0x1e>
    66ec:	9f 3f       	cpi	r25, 0xFF	; 255
    66ee:	11 f4       	brne	.+4      	; 0x66f4 <__addsf3+0x1a>
    66f0:	1e f4       	brtc	.+6      	; 0x66f8 <__addsf3+0x1e>
    66f2:	5b c1       	rjmp	.+694    	; 0x69aa <__fp_nan>
    66f4:	0e f4       	brtc	.+2      	; 0x66f8 <__addsf3+0x1e>
    66f6:	e0 95       	com	r30
    66f8:	e7 fb       	bst	r30, 7
    66fa:	51 c1       	rjmp	.+674    	; 0x699e <__fp_inf>

000066fc <__addsf3x>:
    66fc:	e9 2f       	mov	r30, r25
    66fe:	77 d1       	rcall	.+750    	; 0x69ee <__fp_split3>
    6700:	80 f3       	brcs	.-32     	; 0x66e2 <__addsf3+0x8>
    6702:	ba 17       	cp	r27, r26
    6704:	62 07       	cpc	r22, r18
    6706:	73 07       	cpc	r23, r19
    6708:	84 07       	cpc	r24, r20
    670a:	95 07       	cpc	r25, r21
    670c:	18 f0       	brcs	.+6      	; 0x6714 <__addsf3x+0x18>
    670e:	71 f4       	brne	.+28     	; 0x672c <__addsf3x+0x30>
    6710:	9e f5       	brtc	.+102    	; 0x6778 <__addsf3x+0x7c>
    6712:	8f c1       	rjmp	.+798    	; 0x6a32 <__fp_zero>
    6714:	0e f4       	brtc	.+2      	; 0x6718 <__addsf3x+0x1c>
    6716:	e0 95       	com	r30
    6718:	0b 2e       	mov	r0, r27
    671a:	ba 2f       	mov	r27, r26
    671c:	a0 2d       	mov	r26, r0
    671e:	0b 01       	movw	r0, r22
    6720:	b9 01       	movw	r22, r18
    6722:	90 01       	movw	r18, r0
    6724:	0c 01       	movw	r0, r24
    6726:	ca 01       	movw	r24, r20
    6728:	a0 01       	movw	r20, r0
    672a:	11 24       	eor	r1, r1
    672c:	ff 27       	eor	r31, r31
    672e:	59 1b       	sub	r21, r25
    6730:	99 f0       	breq	.+38     	; 0x6758 <__addsf3x+0x5c>
    6732:	59 3f       	cpi	r21, 0xF9	; 249
    6734:	50 f4       	brcc	.+20     	; 0x674a <__addsf3x+0x4e>
    6736:	50 3e       	cpi	r21, 0xE0	; 224
    6738:	68 f1       	brcs	.+90     	; 0x6794 <__addsf3x+0x98>
    673a:	1a 16       	cp	r1, r26
    673c:	f0 40       	sbci	r31, 0x00	; 0
    673e:	a2 2f       	mov	r26, r18
    6740:	23 2f       	mov	r18, r19
    6742:	34 2f       	mov	r19, r20
    6744:	44 27       	eor	r20, r20
    6746:	58 5f       	subi	r21, 0xF8	; 248
    6748:	f3 cf       	rjmp	.-26     	; 0x6730 <__addsf3x+0x34>
    674a:	46 95       	lsr	r20
    674c:	37 95       	ror	r19
    674e:	27 95       	ror	r18
    6750:	a7 95       	ror	r26
    6752:	f0 40       	sbci	r31, 0x00	; 0
    6754:	53 95       	inc	r21
    6756:	c9 f7       	brne	.-14     	; 0x674a <__addsf3x+0x4e>
    6758:	7e f4       	brtc	.+30     	; 0x6778 <__addsf3x+0x7c>
    675a:	1f 16       	cp	r1, r31
    675c:	ba 0b       	sbc	r27, r26
    675e:	62 0b       	sbc	r22, r18
    6760:	73 0b       	sbc	r23, r19
    6762:	84 0b       	sbc	r24, r20
    6764:	ba f0       	brmi	.+46     	; 0x6794 <__addsf3x+0x98>
    6766:	91 50       	subi	r25, 0x01	; 1
    6768:	a1 f0       	breq	.+40     	; 0x6792 <__addsf3x+0x96>
    676a:	ff 0f       	add	r31, r31
    676c:	bb 1f       	adc	r27, r27
    676e:	66 1f       	adc	r22, r22
    6770:	77 1f       	adc	r23, r23
    6772:	88 1f       	adc	r24, r24
    6774:	c2 f7       	brpl	.-16     	; 0x6766 <__addsf3x+0x6a>
    6776:	0e c0       	rjmp	.+28     	; 0x6794 <__addsf3x+0x98>
    6778:	ba 0f       	add	r27, r26
    677a:	62 1f       	adc	r22, r18
    677c:	73 1f       	adc	r23, r19
    677e:	84 1f       	adc	r24, r20
    6780:	48 f4       	brcc	.+18     	; 0x6794 <__addsf3x+0x98>
    6782:	87 95       	ror	r24
    6784:	77 95       	ror	r23
    6786:	67 95       	ror	r22
    6788:	b7 95       	ror	r27
    678a:	f7 95       	ror	r31
    678c:	9e 3f       	cpi	r25, 0xFE	; 254
    678e:	08 f0       	brcs	.+2      	; 0x6792 <__addsf3x+0x96>
    6790:	b3 cf       	rjmp	.-154    	; 0x66f8 <__addsf3+0x1e>
    6792:	93 95       	inc	r25
    6794:	88 0f       	add	r24, r24
    6796:	08 f0       	brcs	.+2      	; 0x679a <__addsf3x+0x9e>
    6798:	99 27       	eor	r25, r25
    679a:	ee 0f       	add	r30, r30
    679c:	97 95       	ror	r25
    679e:	87 95       	ror	r24
    67a0:	08 95       	ret

000067a2 <__cmpsf2>:
    67a2:	d9 d0       	rcall	.+434    	; 0x6956 <__fp_cmp>
    67a4:	08 f4       	brcc	.+2      	; 0x67a8 <__cmpsf2+0x6>
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	08 95       	ret

000067aa <__divsf3>:
    67aa:	0c d0       	rcall	.+24     	; 0x67c4 <__divsf3x>
    67ac:	0f c1       	rjmp	.+542    	; 0x69cc <__fp_round>
    67ae:	07 d1       	rcall	.+526    	; 0x69be <__fp_pscB>
    67b0:	40 f0       	brcs	.+16     	; 0x67c2 <__divsf3+0x18>
    67b2:	fe d0       	rcall	.+508    	; 0x69b0 <__fp_pscA>
    67b4:	30 f0       	brcs	.+12     	; 0x67c2 <__divsf3+0x18>
    67b6:	21 f4       	brne	.+8      	; 0x67c0 <__divsf3+0x16>
    67b8:	5f 3f       	cpi	r21, 0xFF	; 255
    67ba:	19 f0       	breq	.+6      	; 0x67c2 <__divsf3+0x18>
    67bc:	f0 c0       	rjmp	.+480    	; 0x699e <__fp_inf>
    67be:	51 11       	cpse	r21, r1
    67c0:	39 c1       	rjmp	.+626    	; 0x6a34 <__fp_szero>
    67c2:	f3 c0       	rjmp	.+486    	; 0x69aa <__fp_nan>

000067c4 <__divsf3x>:
    67c4:	14 d1       	rcall	.+552    	; 0x69ee <__fp_split3>
    67c6:	98 f3       	brcs	.-26     	; 0x67ae <__divsf3+0x4>

000067c8 <__divsf3_pse>:
    67c8:	99 23       	and	r25, r25
    67ca:	c9 f3       	breq	.-14     	; 0x67be <__divsf3+0x14>
    67cc:	55 23       	and	r21, r21
    67ce:	b1 f3       	breq	.-20     	; 0x67bc <__divsf3+0x12>
    67d0:	95 1b       	sub	r25, r21
    67d2:	55 0b       	sbc	r21, r21
    67d4:	bb 27       	eor	r27, r27
    67d6:	aa 27       	eor	r26, r26
    67d8:	62 17       	cp	r22, r18
    67da:	73 07       	cpc	r23, r19
    67dc:	84 07       	cpc	r24, r20
    67de:	38 f0       	brcs	.+14     	; 0x67ee <__divsf3_pse+0x26>
    67e0:	9f 5f       	subi	r25, 0xFF	; 255
    67e2:	5f 4f       	sbci	r21, 0xFF	; 255
    67e4:	22 0f       	add	r18, r18
    67e6:	33 1f       	adc	r19, r19
    67e8:	44 1f       	adc	r20, r20
    67ea:	aa 1f       	adc	r26, r26
    67ec:	a9 f3       	breq	.-22     	; 0x67d8 <__divsf3_pse+0x10>
    67ee:	33 d0       	rcall	.+102    	; 0x6856 <__divsf3_pse+0x8e>
    67f0:	0e 2e       	mov	r0, r30
    67f2:	3a f0       	brmi	.+14     	; 0x6802 <__divsf3_pse+0x3a>
    67f4:	e0 e8       	ldi	r30, 0x80	; 128
    67f6:	30 d0       	rcall	.+96     	; 0x6858 <__divsf3_pse+0x90>
    67f8:	91 50       	subi	r25, 0x01	; 1
    67fa:	50 40       	sbci	r21, 0x00	; 0
    67fc:	e6 95       	lsr	r30
    67fe:	00 1c       	adc	r0, r0
    6800:	ca f7       	brpl	.-14     	; 0x67f4 <__divsf3_pse+0x2c>
    6802:	29 d0       	rcall	.+82     	; 0x6856 <__divsf3_pse+0x8e>
    6804:	fe 2f       	mov	r31, r30
    6806:	27 d0       	rcall	.+78     	; 0x6856 <__divsf3_pse+0x8e>
    6808:	66 0f       	add	r22, r22
    680a:	77 1f       	adc	r23, r23
    680c:	88 1f       	adc	r24, r24
    680e:	bb 1f       	adc	r27, r27
    6810:	26 17       	cp	r18, r22
    6812:	37 07       	cpc	r19, r23
    6814:	48 07       	cpc	r20, r24
    6816:	ab 07       	cpc	r26, r27
    6818:	b0 e8       	ldi	r27, 0x80	; 128
    681a:	09 f0       	breq	.+2      	; 0x681e <__divsf3_pse+0x56>
    681c:	bb 0b       	sbc	r27, r27
    681e:	80 2d       	mov	r24, r0
    6820:	bf 01       	movw	r22, r30
    6822:	ff 27       	eor	r31, r31
    6824:	93 58       	subi	r25, 0x83	; 131
    6826:	5f 4f       	sbci	r21, 0xFF	; 255
    6828:	2a f0       	brmi	.+10     	; 0x6834 <__divsf3_pse+0x6c>
    682a:	9e 3f       	cpi	r25, 0xFE	; 254
    682c:	51 05       	cpc	r21, r1
    682e:	68 f0       	brcs	.+26     	; 0x684a <__divsf3_pse+0x82>
    6830:	b6 c0       	rjmp	.+364    	; 0x699e <__fp_inf>
    6832:	00 c1       	rjmp	.+512    	; 0x6a34 <__fp_szero>
    6834:	5f 3f       	cpi	r21, 0xFF	; 255
    6836:	ec f3       	brlt	.-6      	; 0x6832 <__divsf3_pse+0x6a>
    6838:	98 3e       	cpi	r25, 0xE8	; 232
    683a:	dc f3       	brlt	.-10     	; 0x6832 <__divsf3_pse+0x6a>
    683c:	86 95       	lsr	r24
    683e:	77 95       	ror	r23
    6840:	67 95       	ror	r22
    6842:	b7 95       	ror	r27
    6844:	f7 95       	ror	r31
    6846:	9f 5f       	subi	r25, 0xFF	; 255
    6848:	c9 f7       	brne	.-14     	; 0x683c <__divsf3_pse+0x74>
    684a:	88 0f       	add	r24, r24
    684c:	91 1d       	adc	r25, r1
    684e:	96 95       	lsr	r25
    6850:	87 95       	ror	r24
    6852:	97 f9       	bld	r25, 7
    6854:	08 95       	ret
    6856:	e1 e0       	ldi	r30, 0x01	; 1
    6858:	66 0f       	add	r22, r22
    685a:	77 1f       	adc	r23, r23
    685c:	88 1f       	adc	r24, r24
    685e:	bb 1f       	adc	r27, r27
    6860:	62 17       	cp	r22, r18
    6862:	73 07       	cpc	r23, r19
    6864:	84 07       	cpc	r24, r20
    6866:	ba 07       	cpc	r27, r26
    6868:	20 f0       	brcs	.+8      	; 0x6872 <__divsf3_pse+0xaa>
    686a:	62 1b       	sub	r22, r18
    686c:	73 0b       	sbc	r23, r19
    686e:	84 0b       	sbc	r24, r20
    6870:	ba 0b       	sbc	r27, r26
    6872:	ee 1f       	adc	r30, r30
    6874:	88 f7       	brcc	.-30     	; 0x6858 <__divsf3_pse+0x90>
    6876:	e0 95       	com	r30
    6878:	08 95       	ret

0000687a <__fixsfsi>:
    687a:	04 d0       	rcall	.+8      	; 0x6884 <__fixunssfsi>
    687c:	68 94       	set
    687e:	b1 11       	cpse	r27, r1
    6880:	d9 c0       	rjmp	.+434    	; 0x6a34 <__fp_szero>
    6882:	08 95       	ret

00006884 <__fixunssfsi>:
    6884:	bc d0       	rcall	.+376    	; 0x69fe <__fp_splitA>
    6886:	88 f0       	brcs	.+34     	; 0x68aa <__fixunssfsi+0x26>
    6888:	9f 57       	subi	r25, 0x7F	; 127
    688a:	90 f0       	brcs	.+36     	; 0x68b0 <__fixunssfsi+0x2c>
    688c:	b9 2f       	mov	r27, r25
    688e:	99 27       	eor	r25, r25
    6890:	b7 51       	subi	r27, 0x17	; 23
    6892:	a0 f0       	brcs	.+40     	; 0x68bc <__fixunssfsi+0x38>
    6894:	d1 f0       	breq	.+52     	; 0x68ca <__fixunssfsi+0x46>
    6896:	66 0f       	add	r22, r22
    6898:	77 1f       	adc	r23, r23
    689a:	88 1f       	adc	r24, r24
    689c:	99 1f       	adc	r25, r25
    689e:	1a f0       	brmi	.+6      	; 0x68a6 <__fixunssfsi+0x22>
    68a0:	ba 95       	dec	r27
    68a2:	c9 f7       	brne	.-14     	; 0x6896 <__fixunssfsi+0x12>
    68a4:	12 c0       	rjmp	.+36     	; 0x68ca <__fixunssfsi+0x46>
    68a6:	b1 30       	cpi	r27, 0x01	; 1
    68a8:	81 f0       	breq	.+32     	; 0x68ca <__fixunssfsi+0x46>
    68aa:	c3 d0       	rcall	.+390    	; 0x6a32 <__fp_zero>
    68ac:	b1 e0       	ldi	r27, 0x01	; 1
    68ae:	08 95       	ret
    68b0:	c0 c0       	rjmp	.+384    	; 0x6a32 <__fp_zero>
    68b2:	67 2f       	mov	r22, r23
    68b4:	78 2f       	mov	r23, r24
    68b6:	88 27       	eor	r24, r24
    68b8:	b8 5f       	subi	r27, 0xF8	; 248
    68ba:	39 f0       	breq	.+14     	; 0x68ca <__fixunssfsi+0x46>
    68bc:	b9 3f       	cpi	r27, 0xF9	; 249
    68be:	cc f3       	brlt	.-14     	; 0x68b2 <__fixunssfsi+0x2e>
    68c0:	86 95       	lsr	r24
    68c2:	77 95       	ror	r23
    68c4:	67 95       	ror	r22
    68c6:	b3 95       	inc	r27
    68c8:	d9 f7       	brne	.-10     	; 0x68c0 <__fixunssfsi+0x3c>
    68ca:	3e f4       	brtc	.+14     	; 0x68da <__fixunssfsi+0x56>
    68cc:	90 95       	com	r25
    68ce:	80 95       	com	r24
    68d0:	70 95       	com	r23
    68d2:	61 95       	neg	r22
    68d4:	7f 4f       	sbci	r23, 0xFF	; 255
    68d6:	8f 4f       	sbci	r24, 0xFF	; 255
    68d8:	9f 4f       	sbci	r25, 0xFF	; 255
    68da:	08 95       	ret

000068dc <__floatunsisf>:
    68dc:	e8 94       	clt
    68de:	09 c0       	rjmp	.+18     	; 0x68f2 <__floatsisf+0x12>

000068e0 <__floatsisf>:
    68e0:	97 fb       	bst	r25, 7
    68e2:	3e f4       	brtc	.+14     	; 0x68f2 <__floatsisf+0x12>
    68e4:	90 95       	com	r25
    68e6:	80 95       	com	r24
    68e8:	70 95       	com	r23
    68ea:	61 95       	neg	r22
    68ec:	7f 4f       	sbci	r23, 0xFF	; 255
    68ee:	8f 4f       	sbci	r24, 0xFF	; 255
    68f0:	9f 4f       	sbci	r25, 0xFF	; 255
    68f2:	99 23       	and	r25, r25
    68f4:	a9 f0       	breq	.+42     	; 0x6920 <__floatsisf+0x40>
    68f6:	f9 2f       	mov	r31, r25
    68f8:	96 e9       	ldi	r25, 0x96	; 150
    68fa:	bb 27       	eor	r27, r27
    68fc:	93 95       	inc	r25
    68fe:	f6 95       	lsr	r31
    6900:	87 95       	ror	r24
    6902:	77 95       	ror	r23
    6904:	67 95       	ror	r22
    6906:	b7 95       	ror	r27
    6908:	f1 11       	cpse	r31, r1
    690a:	f8 cf       	rjmp	.-16     	; 0x68fc <__floatsisf+0x1c>
    690c:	fa f4       	brpl	.+62     	; 0x694c <__floatsisf+0x6c>
    690e:	bb 0f       	add	r27, r27
    6910:	11 f4       	brne	.+4      	; 0x6916 <__floatsisf+0x36>
    6912:	60 ff       	sbrs	r22, 0
    6914:	1b c0       	rjmp	.+54     	; 0x694c <__floatsisf+0x6c>
    6916:	6f 5f       	subi	r22, 0xFF	; 255
    6918:	7f 4f       	sbci	r23, 0xFF	; 255
    691a:	8f 4f       	sbci	r24, 0xFF	; 255
    691c:	9f 4f       	sbci	r25, 0xFF	; 255
    691e:	16 c0       	rjmp	.+44     	; 0x694c <__floatsisf+0x6c>
    6920:	88 23       	and	r24, r24
    6922:	11 f0       	breq	.+4      	; 0x6928 <__floatsisf+0x48>
    6924:	96 e9       	ldi	r25, 0x96	; 150
    6926:	11 c0       	rjmp	.+34     	; 0x694a <__floatsisf+0x6a>
    6928:	77 23       	and	r23, r23
    692a:	21 f0       	breq	.+8      	; 0x6934 <__floatsisf+0x54>
    692c:	9e e8       	ldi	r25, 0x8E	; 142
    692e:	87 2f       	mov	r24, r23
    6930:	76 2f       	mov	r23, r22
    6932:	05 c0       	rjmp	.+10     	; 0x693e <__floatsisf+0x5e>
    6934:	66 23       	and	r22, r22
    6936:	71 f0       	breq	.+28     	; 0x6954 <__floatsisf+0x74>
    6938:	96 e8       	ldi	r25, 0x86	; 134
    693a:	86 2f       	mov	r24, r22
    693c:	70 e0       	ldi	r23, 0x00	; 0
    693e:	60 e0       	ldi	r22, 0x00	; 0
    6940:	2a f0       	brmi	.+10     	; 0x694c <__floatsisf+0x6c>
    6942:	9a 95       	dec	r25
    6944:	66 0f       	add	r22, r22
    6946:	77 1f       	adc	r23, r23
    6948:	88 1f       	adc	r24, r24
    694a:	da f7       	brpl	.-10     	; 0x6942 <__floatsisf+0x62>
    694c:	88 0f       	add	r24, r24
    694e:	96 95       	lsr	r25
    6950:	87 95       	ror	r24
    6952:	97 f9       	bld	r25, 7
    6954:	08 95       	ret

00006956 <__fp_cmp>:
    6956:	99 0f       	add	r25, r25
    6958:	00 08       	sbc	r0, r0
    695a:	55 0f       	add	r21, r21
    695c:	aa 0b       	sbc	r26, r26
    695e:	e0 e8       	ldi	r30, 0x80	; 128
    6960:	fe ef       	ldi	r31, 0xFE	; 254
    6962:	16 16       	cp	r1, r22
    6964:	17 06       	cpc	r1, r23
    6966:	e8 07       	cpc	r30, r24
    6968:	f9 07       	cpc	r31, r25
    696a:	c0 f0       	brcs	.+48     	; 0x699c <__fp_cmp+0x46>
    696c:	12 16       	cp	r1, r18
    696e:	13 06       	cpc	r1, r19
    6970:	e4 07       	cpc	r30, r20
    6972:	f5 07       	cpc	r31, r21
    6974:	98 f0       	brcs	.+38     	; 0x699c <__fp_cmp+0x46>
    6976:	62 1b       	sub	r22, r18
    6978:	73 0b       	sbc	r23, r19
    697a:	84 0b       	sbc	r24, r20
    697c:	95 0b       	sbc	r25, r21
    697e:	39 f4       	brne	.+14     	; 0x698e <__fp_cmp+0x38>
    6980:	0a 26       	eor	r0, r26
    6982:	61 f0       	breq	.+24     	; 0x699c <__fp_cmp+0x46>
    6984:	23 2b       	or	r18, r19
    6986:	24 2b       	or	r18, r20
    6988:	25 2b       	or	r18, r21
    698a:	21 f4       	brne	.+8      	; 0x6994 <__fp_cmp+0x3e>
    698c:	08 95       	ret
    698e:	0a 26       	eor	r0, r26
    6990:	09 f4       	brne	.+2      	; 0x6994 <__fp_cmp+0x3e>
    6992:	a1 40       	sbci	r26, 0x01	; 1
    6994:	a6 95       	lsr	r26
    6996:	8f ef       	ldi	r24, 0xFF	; 255
    6998:	81 1d       	adc	r24, r1
    699a:	81 1d       	adc	r24, r1
    699c:	08 95       	ret

0000699e <__fp_inf>:
    699e:	97 f9       	bld	r25, 7
    69a0:	9f 67       	ori	r25, 0x7F	; 127
    69a2:	80 e8       	ldi	r24, 0x80	; 128
    69a4:	70 e0       	ldi	r23, 0x00	; 0
    69a6:	60 e0       	ldi	r22, 0x00	; 0
    69a8:	08 95       	ret

000069aa <__fp_nan>:
    69aa:	9f ef       	ldi	r25, 0xFF	; 255
    69ac:	80 ec       	ldi	r24, 0xC0	; 192
    69ae:	08 95       	ret

000069b0 <__fp_pscA>:
    69b0:	00 24       	eor	r0, r0
    69b2:	0a 94       	dec	r0
    69b4:	16 16       	cp	r1, r22
    69b6:	17 06       	cpc	r1, r23
    69b8:	18 06       	cpc	r1, r24
    69ba:	09 06       	cpc	r0, r25
    69bc:	08 95       	ret

000069be <__fp_pscB>:
    69be:	00 24       	eor	r0, r0
    69c0:	0a 94       	dec	r0
    69c2:	12 16       	cp	r1, r18
    69c4:	13 06       	cpc	r1, r19
    69c6:	14 06       	cpc	r1, r20
    69c8:	05 06       	cpc	r0, r21
    69ca:	08 95       	ret

000069cc <__fp_round>:
    69cc:	09 2e       	mov	r0, r25
    69ce:	03 94       	inc	r0
    69d0:	00 0c       	add	r0, r0
    69d2:	11 f4       	brne	.+4      	; 0x69d8 <__fp_round+0xc>
    69d4:	88 23       	and	r24, r24
    69d6:	52 f0       	brmi	.+20     	; 0x69ec <__fp_round+0x20>
    69d8:	bb 0f       	add	r27, r27
    69da:	40 f4       	brcc	.+16     	; 0x69ec <__fp_round+0x20>
    69dc:	bf 2b       	or	r27, r31
    69de:	11 f4       	brne	.+4      	; 0x69e4 <__fp_round+0x18>
    69e0:	60 ff       	sbrs	r22, 0
    69e2:	04 c0       	rjmp	.+8      	; 0x69ec <__fp_round+0x20>
    69e4:	6f 5f       	subi	r22, 0xFF	; 255
    69e6:	7f 4f       	sbci	r23, 0xFF	; 255
    69e8:	8f 4f       	sbci	r24, 0xFF	; 255
    69ea:	9f 4f       	sbci	r25, 0xFF	; 255
    69ec:	08 95       	ret

000069ee <__fp_split3>:
    69ee:	57 fd       	sbrc	r21, 7
    69f0:	90 58       	subi	r25, 0x80	; 128
    69f2:	44 0f       	add	r20, r20
    69f4:	55 1f       	adc	r21, r21
    69f6:	59 f0       	breq	.+22     	; 0x6a0e <__fp_splitA+0x10>
    69f8:	5f 3f       	cpi	r21, 0xFF	; 255
    69fa:	71 f0       	breq	.+28     	; 0x6a18 <__fp_splitA+0x1a>
    69fc:	47 95       	ror	r20

000069fe <__fp_splitA>:
    69fe:	88 0f       	add	r24, r24
    6a00:	97 fb       	bst	r25, 7
    6a02:	99 1f       	adc	r25, r25
    6a04:	61 f0       	breq	.+24     	; 0x6a1e <__fp_splitA+0x20>
    6a06:	9f 3f       	cpi	r25, 0xFF	; 255
    6a08:	79 f0       	breq	.+30     	; 0x6a28 <__fp_splitA+0x2a>
    6a0a:	87 95       	ror	r24
    6a0c:	08 95       	ret
    6a0e:	12 16       	cp	r1, r18
    6a10:	13 06       	cpc	r1, r19
    6a12:	14 06       	cpc	r1, r20
    6a14:	55 1f       	adc	r21, r21
    6a16:	f2 cf       	rjmp	.-28     	; 0x69fc <__fp_split3+0xe>
    6a18:	46 95       	lsr	r20
    6a1a:	f1 df       	rcall	.-30     	; 0x69fe <__fp_splitA>
    6a1c:	08 c0       	rjmp	.+16     	; 0x6a2e <__fp_splitA+0x30>
    6a1e:	16 16       	cp	r1, r22
    6a20:	17 06       	cpc	r1, r23
    6a22:	18 06       	cpc	r1, r24
    6a24:	99 1f       	adc	r25, r25
    6a26:	f1 cf       	rjmp	.-30     	; 0x6a0a <__fp_splitA+0xc>
    6a28:	86 95       	lsr	r24
    6a2a:	71 05       	cpc	r23, r1
    6a2c:	61 05       	cpc	r22, r1
    6a2e:	08 94       	sec
    6a30:	08 95       	ret

00006a32 <__fp_zero>:
    6a32:	e8 94       	clt

00006a34 <__fp_szero>:
    6a34:	bb 27       	eor	r27, r27
    6a36:	66 27       	eor	r22, r22
    6a38:	77 27       	eor	r23, r23
    6a3a:	cb 01       	movw	r24, r22
    6a3c:	97 f9       	bld	r25, 7
    6a3e:	08 95       	ret

00006a40 <__gesf2>:
    6a40:	8a df       	rcall	.-236    	; 0x6956 <__fp_cmp>
    6a42:	08 f4       	brcc	.+2      	; 0x6a46 <__gesf2+0x6>
    6a44:	8f ef       	ldi	r24, 0xFF	; 255
    6a46:	08 95       	ret

00006a48 <__mulsf3>:
    6a48:	0b d0       	rcall	.+22     	; 0x6a60 <__mulsf3x>
    6a4a:	c0 cf       	rjmp	.-128    	; 0x69cc <__fp_round>
    6a4c:	b1 df       	rcall	.-158    	; 0x69b0 <__fp_pscA>
    6a4e:	28 f0       	brcs	.+10     	; 0x6a5a <__mulsf3+0x12>
    6a50:	b6 df       	rcall	.-148    	; 0x69be <__fp_pscB>
    6a52:	18 f0       	brcs	.+6      	; 0x6a5a <__mulsf3+0x12>
    6a54:	95 23       	and	r25, r21
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <__mulsf3+0x12>
    6a58:	a2 cf       	rjmp	.-188    	; 0x699e <__fp_inf>
    6a5a:	a7 cf       	rjmp	.-178    	; 0x69aa <__fp_nan>
    6a5c:	11 24       	eor	r1, r1
    6a5e:	ea cf       	rjmp	.-44     	; 0x6a34 <__fp_szero>

00006a60 <__mulsf3x>:
    6a60:	c6 df       	rcall	.-116    	; 0x69ee <__fp_split3>
    6a62:	a0 f3       	brcs	.-24     	; 0x6a4c <__mulsf3+0x4>

00006a64 <__mulsf3_pse>:
    6a64:	95 9f       	mul	r25, r21
    6a66:	d1 f3       	breq	.-12     	; 0x6a5c <__mulsf3+0x14>
    6a68:	95 0f       	add	r25, r21
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	55 1f       	adc	r21, r21
    6a6e:	62 9f       	mul	r22, r18
    6a70:	f0 01       	movw	r30, r0
    6a72:	72 9f       	mul	r23, r18
    6a74:	bb 27       	eor	r27, r27
    6a76:	f0 0d       	add	r31, r0
    6a78:	b1 1d       	adc	r27, r1
    6a7a:	63 9f       	mul	r22, r19
    6a7c:	aa 27       	eor	r26, r26
    6a7e:	f0 0d       	add	r31, r0
    6a80:	b1 1d       	adc	r27, r1
    6a82:	aa 1f       	adc	r26, r26
    6a84:	64 9f       	mul	r22, r20
    6a86:	66 27       	eor	r22, r22
    6a88:	b0 0d       	add	r27, r0
    6a8a:	a1 1d       	adc	r26, r1
    6a8c:	66 1f       	adc	r22, r22
    6a8e:	82 9f       	mul	r24, r18
    6a90:	22 27       	eor	r18, r18
    6a92:	b0 0d       	add	r27, r0
    6a94:	a1 1d       	adc	r26, r1
    6a96:	62 1f       	adc	r22, r18
    6a98:	73 9f       	mul	r23, r19
    6a9a:	b0 0d       	add	r27, r0
    6a9c:	a1 1d       	adc	r26, r1
    6a9e:	62 1f       	adc	r22, r18
    6aa0:	83 9f       	mul	r24, r19
    6aa2:	a0 0d       	add	r26, r0
    6aa4:	61 1d       	adc	r22, r1
    6aa6:	22 1f       	adc	r18, r18
    6aa8:	74 9f       	mul	r23, r20
    6aaa:	33 27       	eor	r19, r19
    6aac:	a0 0d       	add	r26, r0
    6aae:	61 1d       	adc	r22, r1
    6ab0:	23 1f       	adc	r18, r19
    6ab2:	84 9f       	mul	r24, r20
    6ab4:	60 0d       	add	r22, r0
    6ab6:	21 1d       	adc	r18, r1
    6ab8:	82 2f       	mov	r24, r18
    6aba:	76 2f       	mov	r23, r22
    6abc:	6a 2f       	mov	r22, r26
    6abe:	11 24       	eor	r1, r1
    6ac0:	9f 57       	subi	r25, 0x7F	; 127
    6ac2:	50 40       	sbci	r21, 0x00	; 0
    6ac4:	8a f0       	brmi	.+34     	; 0x6ae8 <__mulsf3_pse+0x84>
    6ac6:	e1 f0       	breq	.+56     	; 0x6b00 <__mulsf3_pse+0x9c>
    6ac8:	88 23       	and	r24, r24
    6aca:	4a f0       	brmi	.+18     	; 0x6ade <__mulsf3_pse+0x7a>
    6acc:	ee 0f       	add	r30, r30
    6ace:	ff 1f       	adc	r31, r31
    6ad0:	bb 1f       	adc	r27, r27
    6ad2:	66 1f       	adc	r22, r22
    6ad4:	77 1f       	adc	r23, r23
    6ad6:	88 1f       	adc	r24, r24
    6ad8:	91 50       	subi	r25, 0x01	; 1
    6ada:	50 40       	sbci	r21, 0x00	; 0
    6adc:	a9 f7       	brne	.-22     	; 0x6ac8 <__mulsf3_pse+0x64>
    6ade:	9e 3f       	cpi	r25, 0xFE	; 254
    6ae0:	51 05       	cpc	r21, r1
    6ae2:	70 f0       	brcs	.+28     	; 0x6b00 <__mulsf3_pse+0x9c>
    6ae4:	5c cf       	rjmp	.-328    	; 0x699e <__fp_inf>
    6ae6:	a6 cf       	rjmp	.-180    	; 0x6a34 <__fp_szero>
    6ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    6aea:	ec f3       	brlt	.-6      	; 0x6ae6 <__mulsf3_pse+0x82>
    6aec:	98 3e       	cpi	r25, 0xE8	; 232
    6aee:	dc f3       	brlt	.-10     	; 0x6ae6 <__mulsf3_pse+0x82>
    6af0:	86 95       	lsr	r24
    6af2:	77 95       	ror	r23
    6af4:	67 95       	ror	r22
    6af6:	b7 95       	ror	r27
    6af8:	f7 95       	ror	r31
    6afa:	e7 95       	ror	r30
    6afc:	9f 5f       	subi	r25, 0xFF	; 255
    6afe:	c1 f7       	brne	.-16     	; 0x6af0 <__mulsf3_pse+0x8c>
    6b00:	fe 2b       	or	r31, r30
    6b02:	88 0f       	add	r24, r24
    6b04:	91 1d       	adc	r25, r1
    6b06:	96 95       	lsr	r25
    6b08:	87 95       	ror	r24
    6b0a:	97 f9       	bld	r25, 7
    6b0c:	08 95       	ret

00006b0e <__unordsf2>:
    6b0e:	23 df       	rcall	.-442    	; 0x6956 <__fp_cmp>
    6b10:	88 0b       	sbc	r24, r24
    6b12:	99 0b       	sbc	r25, r25
    6b14:	08 95       	ret

00006b16 <__mulsi3>:
    6b16:	62 9f       	mul	r22, r18
    6b18:	d0 01       	movw	r26, r0
    6b1a:	73 9f       	mul	r23, r19
    6b1c:	f0 01       	movw	r30, r0
    6b1e:	82 9f       	mul	r24, r18
    6b20:	e0 0d       	add	r30, r0
    6b22:	f1 1d       	adc	r31, r1
    6b24:	64 9f       	mul	r22, r20
    6b26:	e0 0d       	add	r30, r0
    6b28:	f1 1d       	adc	r31, r1
    6b2a:	92 9f       	mul	r25, r18
    6b2c:	f0 0d       	add	r31, r0
    6b2e:	83 9f       	mul	r24, r19
    6b30:	f0 0d       	add	r31, r0
    6b32:	74 9f       	mul	r23, r20
    6b34:	f0 0d       	add	r31, r0
    6b36:	65 9f       	mul	r22, r21
    6b38:	f0 0d       	add	r31, r0
    6b3a:	99 27       	eor	r25, r25
    6b3c:	72 9f       	mul	r23, r18
    6b3e:	b0 0d       	add	r27, r0
    6b40:	e1 1d       	adc	r30, r1
    6b42:	f9 1f       	adc	r31, r25
    6b44:	63 9f       	mul	r22, r19
    6b46:	b0 0d       	add	r27, r0
    6b48:	e1 1d       	adc	r30, r1
    6b4a:	f9 1f       	adc	r31, r25
    6b4c:	bd 01       	movw	r22, r26
    6b4e:	cf 01       	movw	r24, r30
    6b50:	11 24       	eor	r1, r1
    6b52:	08 95       	ret

00006b54 <__divmodhi4>:
    6b54:	97 fb       	bst	r25, 7
    6b56:	09 2e       	mov	r0, r25
    6b58:	07 26       	eor	r0, r23
    6b5a:	0a d0       	rcall	.+20     	; 0x6b70 <__divmodhi4_neg1>
    6b5c:	77 fd       	sbrc	r23, 7
    6b5e:	04 d0       	rcall	.+8      	; 0x6b68 <__divmodhi4_neg2>
    6b60:	49 d0       	rcall	.+146    	; 0x6bf4 <__udivmodhi4>
    6b62:	06 d0       	rcall	.+12     	; 0x6b70 <__divmodhi4_neg1>
    6b64:	00 20       	and	r0, r0
    6b66:	1a f4       	brpl	.+6      	; 0x6b6e <__divmodhi4_exit>

00006b68 <__divmodhi4_neg2>:
    6b68:	70 95       	com	r23
    6b6a:	61 95       	neg	r22
    6b6c:	7f 4f       	sbci	r23, 0xFF	; 255

00006b6e <__divmodhi4_exit>:
    6b6e:	08 95       	ret

00006b70 <__divmodhi4_neg1>:
    6b70:	f6 f7       	brtc	.-4      	; 0x6b6e <__divmodhi4_exit>
    6b72:	90 95       	com	r25
    6b74:	81 95       	neg	r24
    6b76:	9f 4f       	sbci	r25, 0xFF	; 255
    6b78:	08 95       	ret

00006b7a <__udivmodsi4>:
    6b7a:	a1 e2       	ldi	r26, 0x21	; 33
    6b7c:	1a 2e       	mov	r1, r26
    6b7e:	aa 1b       	sub	r26, r26
    6b80:	bb 1b       	sub	r27, r27
    6b82:	fd 01       	movw	r30, r26
    6b84:	0d c0       	rjmp	.+26     	; 0x6ba0 <__udivmodsi4_ep>

00006b86 <__udivmodsi4_loop>:
    6b86:	aa 1f       	adc	r26, r26
    6b88:	bb 1f       	adc	r27, r27
    6b8a:	ee 1f       	adc	r30, r30
    6b8c:	ff 1f       	adc	r31, r31
    6b8e:	a2 17       	cp	r26, r18
    6b90:	b3 07       	cpc	r27, r19
    6b92:	e4 07       	cpc	r30, r20
    6b94:	f5 07       	cpc	r31, r21
    6b96:	20 f0       	brcs	.+8      	; 0x6ba0 <__udivmodsi4_ep>
    6b98:	a2 1b       	sub	r26, r18
    6b9a:	b3 0b       	sbc	r27, r19
    6b9c:	e4 0b       	sbc	r30, r20
    6b9e:	f5 0b       	sbc	r31, r21

00006ba0 <__udivmodsi4_ep>:
    6ba0:	66 1f       	adc	r22, r22
    6ba2:	77 1f       	adc	r23, r23
    6ba4:	88 1f       	adc	r24, r24
    6ba6:	99 1f       	adc	r25, r25
    6ba8:	1a 94       	dec	r1
    6baa:	69 f7       	brne	.-38     	; 0x6b86 <__udivmodsi4_loop>
    6bac:	60 95       	com	r22
    6bae:	70 95       	com	r23
    6bb0:	80 95       	com	r24
    6bb2:	90 95       	com	r25
    6bb4:	9b 01       	movw	r18, r22
    6bb6:	ac 01       	movw	r20, r24
    6bb8:	bd 01       	movw	r22, r26
    6bba:	cf 01       	movw	r24, r30
    6bbc:	08 95       	ret

00006bbe <__divmodsi4>:
    6bbe:	97 fb       	bst	r25, 7
    6bc0:	09 2e       	mov	r0, r25
    6bc2:	05 26       	eor	r0, r21
    6bc4:	0e d0       	rcall	.+28     	; 0x6be2 <__divmodsi4_neg1>
    6bc6:	57 fd       	sbrc	r21, 7
    6bc8:	04 d0       	rcall	.+8      	; 0x6bd2 <__divmodsi4_neg2>
    6bca:	d7 df       	rcall	.-82     	; 0x6b7a <__udivmodsi4>
    6bcc:	0a d0       	rcall	.+20     	; 0x6be2 <__divmodsi4_neg1>
    6bce:	00 1c       	adc	r0, r0
    6bd0:	38 f4       	brcc	.+14     	; 0x6be0 <__divmodsi4_exit>

00006bd2 <__divmodsi4_neg2>:
    6bd2:	50 95       	com	r21
    6bd4:	40 95       	com	r20
    6bd6:	30 95       	com	r19
    6bd8:	21 95       	neg	r18
    6bda:	3f 4f       	sbci	r19, 0xFF	; 255
    6bdc:	4f 4f       	sbci	r20, 0xFF	; 255
    6bde:	5f 4f       	sbci	r21, 0xFF	; 255

00006be0 <__divmodsi4_exit>:
    6be0:	08 95       	ret

00006be2 <__divmodsi4_neg1>:
    6be2:	f6 f7       	brtc	.-4      	; 0x6be0 <__divmodsi4_exit>
    6be4:	90 95       	com	r25
    6be6:	80 95       	com	r24
    6be8:	70 95       	com	r23
    6bea:	61 95       	neg	r22
    6bec:	7f 4f       	sbci	r23, 0xFF	; 255
    6bee:	8f 4f       	sbci	r24, 0xFF	; 255
    6bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf2:	08 95       	ret

00006bf4 <__udivmodhi4>:
    6bf4:	aa 1b       	sub	r26, r26
    6bf6:	bb 1b       	sub	r27, r27
    6bf8:	51 e1       	ldi	r21, 0x11	; 17
    6bfa:	07 c0       	rjmp	.+14     	; 0x6c0a <__udivmodhi4_ep>

00006bfc <__udivmodhi4_loop>:
    6bfc:	aa 1f       	adc	r26, r26
    6bfe:	bb 1f       	adc	r27, r27
    6c00:	a6 17       	cp	r26, r22
    6c02:	b7 07       	cpc	r27, r23
    6c04:	10 f0       	brcs	.+4      	; 0x6c0a <__udivmodhi4_ep>
    6c06:	a6 1b       	sub	r26, r22
    6c08:	b7 0b       	sbc	r27, r23

00006c0a <__udivmodhi4_ep>:
    6c0a:	88 1f       	adc	r24, r24
    6c0c:	99 1f       	adc	r25, r25
    6c0e:	5a 95       	dec	r21
    6c10:	a9 f7       	brne	.-22     	; 0x6bfc <__udivmodhi4_loop>
    6c12:	80 95       	com	r24
    6c14:	90 95       	com	r25
    6c16:	bc 01       	movw	r22, r24
    6c18:	cd 01       	movw	r24, r26
    6c1a:	08 95       	ret

00006c1c <__tablejump_elpm__>:
    6c1c:	07 90       	elpm	r0, Z+
    6c1e:	f6 91       	elpm	r31, Z+
    6c20:	e0 2d       	mov	r30, r0
    6c22:	19 94       	eijmp

00006c24 <dtostrf>:
    6c24:	ef 92       	push	r14
    6c26:	ff 92       	push	r15
    6c28:	0f 93       	push	r16
    6c2a:	1f 93       	push	r17
    6c2c:	32 2f       	mov	r19, r18
    6c2e:	f0 2e       	mov	r15, r16
    6c30:	47 ff       	sbrs	r20, 7
    6c32:	02 c0       	rjmp	.+4      	; 0x6c38 <dtostrf+0x14>
    6c34:	a4 e1       	ldi	r26, 0x14	; 20
    6c36:	01 c0       	rjmp	.+2      	; 0x6c3a <dtostrf+0x16>
    6c38:	a4 e0       	ldi	r26, 0x04	; 4
    6c3a:	e4 2f       	mov	r30, r20
    6c3c:	ff 27       	eor	r31, r31
    6c3e:	e7 fd       	sbrc	r30, 7
    6c40:	f0 95       	com	r31
    6c42:	f7 ff       	sbrs	r31, 7
    6c44:	03 c0       	rjmp	.+6      	; 0x6c4c <dtostrf+0x28>
    6c46:	f0 95       	com	r31
    6c48:	e1 95       	neg	r30
    6c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c4c:	4f 2d       	mov	r20, r15
    6c4e:	51 2f       	mov	r21, r17
    6c50:	2e 2f       	mov	r18, r30
    6c52:	03 2f       	mov	r16, r19
    6c54:	ea 2e       	mov	r14, r26
    6c56:	0e 94 10 38 	call	0x7020	; 0x7020 <dtoa_prf>
    6c5a:	8f 2d       	mov	r24, r15
    6c5c:	91 2f       	mov	r25, r17
    6c5e:	1f 91       	pop	r17
    6c60:	0f 91       	pop	r16
    6c62:	ff 90       	pop	r15
    6c64:	ef 90       	pop	r14
    6c66:	08 95       	ret

00006c68 <do_random>:
    6c68:	af 92       	push	r10
    6c6a:	bf 92       	push	r11
    6c6c:	cf 92       	push	r12
    6c6e:	df 92       	push	r13
    6c70:	ef 92       	push	r14
    6c72:	ff 92       	push	r15
    6c74:	0f 93       	push	r16
    6c76:	1f 93       	push	r17
    6c78:	cf 93       	push	r28
    6c7a:	df 93       	push	r29
    6c7c:	ec 01       	movw	r28, r24
    6c7e:	68 81       	ld	r22, Y
    6c80:	79 81       	ldd	r23, Y+1	; 0x01
    6c82:	8a 81       	ldd	r24, Y+2	; 0x02
    6c84:	9b 81       	ldd	r25, Y+3	; 0x03
    6c86:	61 15       	cp	r22, r1
    6c88:	71 05       	cpc	r23, r1
    6c8a:	81 05       	cpc	r24, r1
    6c8c:	91 05       	cpc	r25, r1
    6c8e:	21 f4       	brne	.+8      	; 0x6c98 <do_random+0x30>
    6c90:	64 e2       	ldi	r22, 0x24	; 36
    6c92:	79 ed       	ldi	r23, 0xD9	; 217
    6c94:	8b e5       	ldi	r24, 0x5B	; 91
    6c96:	97 e0       	ldi	r25, 0x07	; 7
    6c98:	2d e1       	ldi	r18, 0x1D	; 29
    6c9a:	33 ef       	ldi	r19, 0xF3	; 243
    6c9c:	41 e0       	ldi	r20, 0x01	; 1
    6c9e:	50 e0       	ldi	r21, 0x00	; 0
    6ca0:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <__divmodsi4>
    6ca4:	79 01       	movw	r14, r18
    6ca6:	8a 01       	movw	r16, r20
    6ca8:	27 ea       	ldi	r18, 0xA7	; 167
    6caa:	31 e4       	ldi	r19, 0x41	; 65
    6cac:	40 e0       	ldi	r20, 0x00	; 0
    6cae:	50 e0       	ldi	r21, 0x00	; 0
    6cb0:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    6cb4:	5b 01       	movw	r10, r22
    6cb6:	6c 01       	movw	r12, r24
    6cb8:	c8 01       	movw	r24, r16
    6cba:	b7 01       	movw	r22, r14
    6cbc:	2c ee       	ldi	r18, 0xEC	; 236
    6cbe:	34 ef       	ldi	r19, 0xF4	; 244
    6cc0:	4f ef       	ldi	r20, 0xFF	; 255
    6cc2:	5f ef       	ldi	r21, 0xFF	; 255
    6cc4:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <__mulsi3>
    6cc8:	9b 01       	movw	r18, r22
    6cca:	ac 01       	movw	r20, r24
    6ccc:	2a 0d       	add	r18, r10
    6cce:	3b 1d       	adc	r19, r11
    6cd0:	4c 1d       	adc	r20, r12
    6cd2:	5d 1d       	adc	r21, r13
    6cd4:	57 ff       	sbrs	r21, 7
    6cd6:	04 c0       	rjmp	.+8      	; 0x6ce0 <do_random+0x78>
    6cd8:	21 50       	subi	r18, 0x01	; 1
    6cda:	30 40       	sbci	r19, 0x00	; 0
    6cdc:	40 40       	sbci	r20, 0x00	; 0
    6cde:	50 48       	sbci	r21, 0x80	; 128
    6ce0:	28 83       	st	Y, r18
    6ce2:	39 83       	std	Y+1, r19	; 0x01
    6ce4:	4a 83       	std	Y+2, r20	; 0x02
    6ce6:	5b 83       	std	Y+3, r21	; 0x03
    6ce8:	5f 77       	andi	r21, 0x7F	; 127
    6cea:	b9 01       	movw	r22, r18
    6cec:	ca 01       	movw	r24, r20
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	ff 90       	pop	r15
    6cf8:	ef 90       	pop	r14
    6cfa:	df 90       	pop	r13
    6cfc:	cf 90       	pop	r12
    6cfe:	bf 90       	pop	r11
    6d00:	af 90       	pop	r10
    6d02:	08 95       	ret

00006d04 <random_r>:
    6d04:	0e 94 34 36 	call	0x6c68	; 0x6c68 <do_random>
    6d08:	08 95       	ret

00006d0a <random>:
    6d0a:	8a e6       	ldi	r24, 0x6A	; 106
    6d0c:	92 e0       	ldi	r25, 0x02	; 2
    6d0e:	0e 94 34 36 	call	0x6c68	; 0x6c68 <do_random>
    6d12:	08 95       	ret

00006d14 <srandom>:
    6d14:	60 93 6a 02 	sts	0x026A, r22
    6d18:	70 93 6b 02 	sts	0x026B, r23
    6d1c:	80 93 6c 02 	sts	0x026C, r24
    6d20:	90 93 6d 02 	sts	0x026D, r25
    6d24:	08 95       	ret

00006d26 <atof>:
    6d26:	66 27       	eor	r22, r22
    6d28:	77 27       	eor	r23, r23
    6d2a:	0c 94 80 39 	jmp	0x7300	; 0x7300 <strtod>

00006d2e <atol>:
    6d2e:	1f 93       	push	r17
    6d30:	fc 01       	movw	r30, r24
    6d32:	99 27       	eor	r25, r25
    6d34:	88 27       	eor	r24, r24
    6d36:	bc 01       	movw	r22, r24
    6d38:	e8 94       	clt
    6d3a:	11 91       	ld	r17, Z+
    6d3c:	10 32       	cpi	r17, 0x20	; 32
    6d3e:	e9 f3       	breq	.-6      	; 0x6d3a <atol+0xc>
    6d40:	19 30       	cpi	r17, 0x09	; 9
    6d42:	10 f0       	brcs	.+4      	; 0x6d48 <atol+0x1a>
    6d44:	1e 30       	cpi	r17, 0x0E	; 14
    6d46:	c8 f3       	brcs	.-14     	; 0x6d3a <atol+0xc>
    6d48:	1b 32       	cpi	r17, 0x2B	; 43
    6d4a:	51 f0       	breq	.+20     	; 0x6d60 <atol+0x32>
    6d4c:	1d 32       	cpi	r17, 0x2D	; 45
    6d4e:	49 f4       	brne	.+18     	; 0x6d62 <atol+0x34>
    6d50:	68 94       	set
    6d52:	06 c0       	rjmp	.+12     	; 0x6d60 <atol+0x32>
    6d54:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <__mulsi_const_10>
    6d58:	61 0f       	add	r22, r17
    6d5a:	71 1d       	adc	r23, r1
    6d5c:	81 1d       	adc	r24, r1
    6d5e:	91 1d       	adc	r25, r1
    6d60:	11 91       	ld	r17, Z+
    6d62:	10 53       	subi	r17, 0x30	; 48
    6d64:	1a 30       	cpi	r17, 0x0A	; 10
    6d66:	b0 f3       	brcs	.-20     	; 0x6d54 <atol+0x26>
    6d68:	3e f4       	brtc	.+14     	; 0x6d78 <atol+0x4a>
    6d6a:	90 95       	com	r25
    6d6c:	80 95       	com	r24
    6d6e:	70 95       	com	r23
    6d70:	61 95       	neg	r22
    6d72:	7f 4f       	sbci	r23, 0xFF	; 255
    6d74:	8f 4f       	sbci	r24, 0xFF	; 255
    6d76:	9f 4f       	sbci	r25, 0xFF	; 255
    6d78:	1f 91       	pop	r17
    6d7a:	08 95       	ret

00006d7c <isspace>:
    6d7c:	91 11       	cpse	r25, r1
    6d7e:	26 c5       	rjmp	.+2636   	; 0x77cc <__ctype_isfalse>
    6d80:	80 32       	cpi	r24, 0x20	; 32
    6d82:	19 f0       	breq	.+6      	; 0x6d8a <isspace+0xe>
    6d84:	89 50       	subi	r24, 0x09	; 9
    6d86:	85 50       	subi	r24, 0x05	; 5
    6d88:	d0 f7       	brcc	.-12     	; 0x6d7e <isspace+0x2>
    6d8a:	08 95       	ret

00006d8c <tolower>:
    6d8c:	91 11       	cpse	r25, r1
    6d8e:	08 95       	ret
    6d90:	81 54       	subi	r24, 0x41	; 65
    6d92:	8a 51       	subi	r24, 0x1A	; 26
    6d94:	08 f4       	brcc	.+2      	; 0x6d98 <tolower+0xc>
    6d96:	80 5e       	subi	r24, 0xE0	; 224
    6d98:	85 5a       	subi	r24, 0xA5	; 165
    6d9a:	08 95       	ret

00006d9c <toupper>:
    6d9c:	91 11       	cpse	r25, r1
    6d9e:	08 95       	ret
    6da0:	81 56       	subi	r24, 0x61	; 97
    6da2:	8a 51       	subi	r24, 0x1A	; 26
    6da4:	08 f4       	brcc	.+2      	; 0x6da8 <toupper+0xc>
    6da6:	80 52       	subi	r24, 0x20	; 32
    6da8:	85 58       	subi	r24, 0x85	; 133
    6daa:	08 95       	ret

00006dac <strcpy_P>:
    6dac:	fb 01       	movw	r30, r22
    6dae:	dc 01       	movw	r26, r24
    6db0:	05 90       	lpm	r0, Z+
    6db2:	0d 92       	st	X+, r0
    6db4:	00 20       	and	r0, r0
    6db6:	e1 f7       	brne	.-8      	; 0x6db0 <strcpy_P+0x4>
    6db8:	08 95       	ret

00006dba <strlen_P>:
    6dba:	fc 01       	movw	r30, r24
    6dbc:	05 90       	lpm	r0, Z+
    6dbe:	00 20       	and	r0, r0
    6dc0:	e9 f7       	brne	.-6      	; 0x6dbc <strlen_P+0x2>
    6dc2:	80 95       	com	r24
    6dc4:	90 95       	com	r25
    6dc6:	8e 0f       	add	r24, r30
    6dc8:	9f 1f       	adc	r25, r31
    6dca:	08 95       	ret

00006dcc <memcmp>:
    6dcc:	fb 01       	movw	r30, r22
    6dce:	dc 01       	movw	r26, r24
    6dd0:	04 c0       	rjmp	.+8      	; 0x6dda <memcmp+0xe>
    6dd2:	8d 91       	ld	r24, X+
    6dd4:	01 90       	ld	r0, Z+
    6dd6:	80 19       	sub	r24, r0
    6dd8:	21 f4       	brne	.+8      	; 0x6de2 <memcmp+0x16>
    6dda:	41 50       	subi	r20, 0x01	; 1
    6ddc:	50 40       	sbci	r21, 0x00	; 0
    6dde:	c8 f7       	brcc	.-14     	; 0x6dd2 <memcmp+0x6>
    6de0:	88 1b       	sub	r24, r24
    6de2:	99 0b       	sbc	r25, r25
    6de4:	08 95       	ret

00006de6 <memcpy>:
    6de6:	fb 01       	movw	r30, r22
    6de8:	dc 01       	movw	r26, r24
    6dea:	02 c0       	rjmp	.+4      	; 0x6df0 <memcpy+0xa>
    6dec:	01 90       	ld	r0, Z+
    6dee:	0d 92       	st	X+, r0
    6df0:	41 50       	subi	r20, 0x01	; 1
    6df2:	50 40       	sbci	r21, 0x00	; 0
    6df4:	d8 f7       	brcc	.-10     	; 0x6dec <memcpy+0x6>
    6df6:	08 95       	ret

00006df8 <memmove>:
    6df8:	68 17       	cp	r22, r24
    6dfa:	79 07       	cpc	r23, r25
    6dfc:	68 f4       	brcc	.+26     	; 0x6e18 <memmove+0x20>
    6dfe:	fb 01       	movw	r30, r22
    6e00:	dc 01       	movw	r26, r24
    6e02:	e4 0f       	add	r30, r20
    6e04:	f5 1f       	adc	r31, r21
    6e06:	a4 0f       	add	r26, r20
    6e08:	b5 1f       	adc	r27, r21
    6e0a:	02 c0       	rjmp	.+4      	; 0x6e10 <memmove+0x18>
    6e0c:	02 90       	ld	r0, -Z
    6e0e:	0e 92       	st	-X, r0
    6e10:	41 50       	subi	r20, 0x01	; 1
    6e12:	50 40       	sbci	r21, 0x00	; 0
    6e14:	d8 f7       	brcc	.-10     	; 0x6e0c <memmove+0x14>
    6e16:	08 95       	ret
    6e18:	0c 94 f3 36 	jmp	0x6de6	; 0x6de6 <memcpy>

00006e1c <strchr>:
    6e1c:	fc 01       	movw	r30, r24
    6e1e:	81 91       	ld	r24, Z+
    6e20:	86 17       	cp	r24, r22
    6e22:	21 f0       	breq	.+8      	; 0x6e2c <strchr+0x10>
    6e24:	88 23       	and	r24, r24
    6e26:	d9 f7       	brne	.-10     	; 0x6e1e <strchr+0x2>
    6e28:	99 27       	eor	r25, r25
    6e2a:	08 95       	ret
    6e2c:	31 97       	sbiw	r30, 0x01	; 1
    6e2e:	cf 01       	movw	r24, r30
    6e30:	08 95       	ret

00006e32 <strcmp>:
    6e32:	fb 01       	movw	r30, r22
    6e34:	dc 01       	movw	r26, r24
    6e36:	8d 91       	ld	r24, X+
    6e38:	01 90       	ld	r0, Z+
    6e3a:	80 19       	sub	r24, r0
    6e3c:	01 10       	cpse	r0, r1
    6e3e:	d9 f3       	breq	.-10     	; 0x6e36 <strcmp+0x4>
    6e40:	99 0b       	sbc	r25, r25
    6e42:	08 95       	ret

00006e44 <strcpy>:
    6e44:	fb 01       	movw	r30, r22
    6e46:	dc 01       	movw	r26, r24
    6e48:	01 90       	ld	r0, Z+
    6e4a:	0d 92       	st	X+, r0
    6e4c:	00 20       	and	r0, r0
    6e4e:	e1 f7       	brne	.-8      	; 0x6e48 <strcpy+0x4>
    6e50:	08 95       	ret

00006e52 <strncmp>:
    6e52:	fb 01       	movw	r30, r22
    6e54:	dc 01       	movw	r26, r24
    6e56:	41 50       	subi	r20, 0x01	; 1
    6e58:	50 40       	sbci	r21, 0x00	; 0
    6e5a:	30 f0       	brcs	.+12     	; 0x6e68 <strncmp+0x16>
    6e5c:	8d 91       	ld	r24, X+
    6e5e:	01 90       	ld	r0, Z+
    6e60:	80 19       	sub	r24, r0
    6e62:	19 f4       	brne	.+6      	; 0x6e6a <strncmp+0x18>
    6e64:	00 20       	and	r0, r0
    6e66:	b9 f7       	brne	.-18     	; 0x6e56 <strncmp+0x4>
    6e68:	88 1b       	sub	r24, r24
    6e6a:	99 0b       	sbc	r25, r25
    6e6c:	08 95       	ret

00006e6e <strncpy>:
    6e6e:	fb 01       	movw	r30, r22
    6e70:	dc 01       	movw	r26, r24
    6e72:	41 50       	subi	r20, 0x01	; 1
    6e74:	50 40       	sbci	r21, 0x00	; 0
    6e76:	48 f0       	brcs	.+18     	; 0x6e8a <strncpy+0x1c>
    6e78:	01 90       	ld	r0, Z+
    6e7a:	0d 92       	st	X+, r0
    6e7c:	00 20       	and	r0, r0
    6e7e:	c9 f7       	brne	.-14     	; 0x6e72 <strncpy+0x4>
    6e80:	01 c0       	rjmp	.+2      	; 0x6e84 <strncpy+0x16>
    6e82:	1d 92       	st	X+, r1
    6e84:	41 50       	subi	r20, 0x01	; 1
    6e86:	50 40       	sbci	r21, 0x00	; 0
    6e88:	e0 f7       	brcc	.-8      	; 0x6e82 <strncpy+0x14>
    6e8a:	08 95       	ret

00006e8c <strrchr>:
    6e8c:	fc 01       	movw	r30, r24
    6e8e:	81 e0       	ldi	r24, 0x01	; 1
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	01 90       	ld	r0, Z+
    6e94:	06 16       	cp	r0, r22
    6e96:	09 f4       	brne	.+2      	; 0x6e9a <strrchr+0xe>
    6e98:	cf 01       	movw	r24, r30
    6e9a:	00 20       	and	r0, r0
    6e9c:	d1 f7       	brne	.-12     	; 0x6e92 <strrchr+0x6>
    6e9e:	01 97       	sbiw	r24, 0x01	; 1
    6ea0:	08 95       	ret

00006ea2 <strstr>:
    6ea2:	fb 01       	movw	r30, r22
    6ea4:	51 91       	ld	r21, Z+
    6ea6:	55 23       	and	r21, r21
    6ea8:	a9 f0       	breq	.+42     	; 0x6ed4 <strstr+0x32>
    6eaa:	bf 01       	movw	r22, r30
    6eac:	dc 01       	movw	r26, r24
    6eae:	4d 91       	ld	r20, X+
    6eb0:	45 17       	cp	r20, r21
    6eb2:	41 11       	cpse	r20, r1
    6eb4:	e1 f7       	brne	.-8      	; 0x6eae <strstr+0xc>
    6eb6:	59 f4       	brne	.+22     	; 0x6ece <strstr+0x2c>
    6eb8:	cd 01       	movw	r24, r26
    6eba:	01 90       	ld	r0, Z+
    6ebc:	00 20       	and	r0, r0
    6ebe:	49 f0       	breq	.+18     	; 0x6ed2 <strstr+0x30>
    6ec0:	4d 91       	ld	r20, X+
    6ec2:	40 15       	cp	r20, r0
    6ec4:	41 11       	cpse	r20, r1
    6ec6:	c9 f3       	breq	.-14     	; 0x6eba <strstr+0x18>
    6ec8:	fb 01       	movw	r30, r22
    6eca:	41 11       	cpse	r20, r1
    6ecc:	ef cf       	rjmp	.-34     	; 0x6eac <strstr+0xa>
    6ece:	81 e0       	ldi	r24, 0x01	; 1
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	01 97       	sbiw	r24, 0x01	; 1
    6ed4:	08 95       	ret

00006ed6 <itoa>:
    6ed6:	fb 01       	movw	r30, r22
    6ed8:	9f 01       	movw	r18, r30
    6eda:	e8 94       	clt
    6edc:	42 30       	cpi	r20, 0x02	; 2
    6ede:	c4 f0       	brlt	.+48     	; 0x6f10 <itoa+0x3a>
    6ee0:	45 32       	cpi	r20, 0x25	; 37
    6ee2:	b4 f4       	brge	.+44     	; 0x6f10 <itoa+0x3a>
    6ee4:	4a 30       	cpi	r20, 0x0A	; 10
    6ee6:	29 f4       	brne	.+10     	; 0x6ef2 <itoa+0x1c>
    6ee8:	97 fb       	bst	r25, 7
    6eea:	1e f4       	brtc	.+6      	; 0x6ef2 <itoa+0x1c>
    6eec:	90 95       	com	r25
    6eee:	81 95       	neg	r24
    6ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef2:	64 2f       	mov	r22, r20
    6ef4:	77 27       	eor	r23, r23
    6ef6:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <__udivmodhi4>
    6efa:	80 5d       	subi	r24, 0xD0	; 208
    6efc:	8a 33       	cpi	r24, 0x3A	; 58
    6efe:	0c f0       	brlt	.+2      	; 0x6f02 <itoa+0x2c>
    6f00:	89 5d       	subi	r24, 0xD9	; 217
    6f02:	81 93       	st	Z+, r24
    6f04:	cb 01       	movw	r24, r22
    6f06:	00 97       	sbiw	r24, 0x00	; 0
    6f08:	a1 f7       	brne	.-24     	; 0x6ef2 <itoa+0x1c>
    6f0a:	16 f4       	brtc	.+4      	; 0x6f10 <itoa+0x3a>
    6f0c:	5d e2       	ldi	r21, 0x2D	; 45
    6f0e:	51 93       	st	Z+, r21
    6f10:	10 82       	st	Z, r1
    6f12:	c9 01       	movw	r24, r18
    6f14:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <strrev>

00006f18 <ltoa>:
    6f18:	fa 01       	movw	r30, r20
    6f1a:	cf 93       	push	r28
    6f1c:	ff 93       	push	r31
    6f1e:	ef 93       	push	r30
    6f20:	22 30       	cpi	r18, 0x02	; 2
    6f22:	44 f1       	brlt	.+80     	; 0x6f74 <ltoa+0x5c>
    6f24:	25 32       	cpi	r18, 0x25	; 37
    6f26:	34 f5       	brge	.+76     	; 0x6f74 <ltoa+0x5c>
    6f28:	c2 2f       	mov	r28, r18
    6f2a:	e8 94       	clt
    6f2c:	ca 30       	cpi	r28, 0x0A	; 10
    6f2e:	49 f4       	brne	.+18     	; 0x6f42 <ltoa+0x2a>
    6f30:	97 fb       	bst	r25, 7
    6f32:	3e f4       	brtc	.+14     	; 0x6f42 <ltoa+0x2a>
    6f34:	90 95       	com	r25
    6f36:	80 95       	com	r24
    6f38:	70 95       	com	r23
    6f3a:	61 95       	neg	r22
    6f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f40:	9f 4f       	sbci	r25, 0xFF	; 255
    6f42:	2c 2f       	mov	r18, r28
    6f44:	33 27       	eor	r19, r19
    6f46:	44 27       	eor	r20, r20
    6f48:	55 27       	eor	r21, r21
    6f4a:	ff 93       	push	r31
    6f4c:	ef 93       	push	r30
    6f4e:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    6f52:	ef 91       	pop	r30
    6f54:	ff 91       	pop	r31
    6f56:	60 5d       	subi	r22, 0xD0	; 208
    6f58:	6a 33       	cpi	r22, 0x3A	; 58
    6f5a:	0c f0       	brlt	.+2      	; 0x6f5e <ltoa+0x46>
    6f5c:	69 5d       	subi	r22, 0xD9	; 217
    6f5e:	61 93       	st	Z+, r22
    6f60:	b9 01       	movw	r22, r18
    6f62:	ca 01       	movw	r24, r20
    6f64:	60 50       	subi	r22, 0x00	; 0
    6f66:	70 40       	sbci	r23, 0x00	; 0
    6f68:	80 40       	sbci	r24, 0x00	; 0
    6f6a:	90 40       	sbci	r25, 0x00	; 0
    6f6c:	51 f7       	brne	.-44     	; 0x6f42 <ltoa+0x2a>
    6f6e:	16 f4       	brtc	.+4      	; 0x6f74 <ltoa+0x5c>
    6f70:	cd e2       	ldi	r28, 0x2D	; 45
    6f72:	c1 93       	st	Z+, r28
    6f74:	10 82       	st	Z, r1
    6f76:	8f 91       	pop	r24
    6f78:	9f 91       	pop	r25
    6f7a:	cf 91       	pop	r28
    6f7c:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <strrev>

00006f80 <__mulsi_const_10>:
    6f80:	59 2f       	mov	r21, r25
    6f82:	48 2f       	mov	r20, r24
    6f84:	37 2f       	mov	r19, r23
    6f86:	26 2f       	mov	r18, r22
    6f88:	66 0f       	add	r22, r22
    6f8a:	77 1f       	adc	r23, r23
    6f8c:	88 1f       	adc	r24, r24
    6f8e:	99 1f       	adc	r25, r25
    6f90:	66 0f       	add	r22, r22
    6f92:	77 1f       	adc	r23, r23
    6f94:	88 1f       	adc	r24, r24
    6f96:	99 1f       	adc	r25, r25
    6f98:	62 0f       	add	r22, r18
    6f9a:	73 1f       	adc	r23, r19
    6f9c:	84 1f       	adc	r24, r20
    6f9e:	95 1f       	adc	r25, r21
    6fa0:	66 0f       	add	r22, r22
    6fa2:	77 1f       	adc	r23, r23
    6fa4:	88 1f       	adc	r24, r24
    6fa6:	99 1f       	adc	r25, r25
    6fa8:	08 95       	ret

00006faa <ultoa>:
    6faa:	fa 01       	movw	r30, r20
    6fac:	cf 93       	push	r28
    6fae:	ff 93       	push	r31
    6fb0:	ef 93       	push	r30
    6fb2:	22 30       	cpi	r18, 0x02	; 2
    6fb4:	cc f0       	brlt	.+50     	; 0x6fe8 <ultoa+0x3e>
    6fb6:	25 32       	cpi	r18, 0x25	; 37
    6fb8:	bc f4       	brge	.+46     	; 0x6fe8 <ultoa+0x3e>
    6fba:	c2 2f       	mov	r28, r18
    6fbc:	2c 2f       	mov	r18, r28
    6fbe:	33 27       	eor	r19, r19
    6fc0:	44 27       	eor	r20, r20
    6fc2:	55 27       	eor	r21, r21
    6fc4:	ff 93       	push	r31
    6fc6:	ef 93       	push	r30
    6fc8:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__udivmodsi4>
    6fcc:	ef 91       	pop	r30
    6fce:	ff 91       	pop	r31
    6fd0:	60 5d       	subi	r22, 0xD0	; 208
    6fd2:	6a 33       	cpi	r22, 0x3A	; 58
    6fd4:	0c f0       	brlt	.+2      	; 0x6fd8 <ultoa+0x2e>
    6fd6:	69 5d       	subi	r22, 0xD9	; 217
    6fd8:	61 93       	st	Z+, r22
    6fda:	b9 01       	movw	r22, r18
    6fdc:	ca 01       	movw	r24, r20
    6fde:	60 50       	subi	r22, 0x00	; 0
    6fe0:	70 40       	sbci	r23, 0x00	; 0
    6fe2:	80 40       	sbci	r24, 0x00	; 0
    6fe4:	90 40       	sbci	r25, 0x00	; 0
    6fe6:	51 f7       	brne	.-44     	; 0x6fbc <ultoa+0x12>
    6fe8:	10 82       	st	Z, r1
    6fea:	8f 91       	pop	r24
    6fec:	9f 91       	pop	r25
    6fee:	cf 91       	pop	r28
    6ff0:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <strrev>

00006ff4 <utoa>:
    6ff4:	fb 01       	movw	r30, r22
    6ff6:	9f 01       	movw	r18, r30
    6ff8:	42 30       	cpi	r20, 0x02	; 2
    6ffa:	74 f0       	brlt	.+28     	; 0x7018 <utoa+0x24>
    6ffc:	45 32       	cpi	r20, 0x25	; 37
    6ffe:	64 f4       	brge	.+24     	; 0x7018 <utoa+0x24>
    7000:	64 2f       	mov	r22, r20
    7002:	77 27       	eor	r23, r23
    7004:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <__udivmodhi4>
    7008:	80 5d       	subi	r24, 0xD0	; 208
    700a:	8a 33       	cpi	r24, 0x3A	; 58
    700c:	0c f0       	brlt	.+2      	; 0x7010 <utoa+0x1c>
    700e:	89 5d       	subi	r24, 0xD9	; 217
    7010:	81 93       	st	Z+, r24
    7012:	cb 01       	movw	r24, r22
    7014:	00 97       	sbiw	r24, 0x00	; 0
    7016:	a1 f7       	brne	.-24     	; 0x7000 <utoa+0xc>
    7018:	10 82       	st	Z, r1
    701a:	c9 01       	movw	r24, r18
    701c:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <strrev>

00007020 <dtoa_prf>:
    7020:	af 92       	push	r10
    7022:	bf 92       	push	r11
    7024:	cf 92       	push	r12
    7026:	df 92       	push	r13
    7028:	ef 92       	push	r14
    702a:	ff 92       	push	r15
    702c:	0f 93       	push	r16
    702e:	1f 93       	push	r17
    7030:	df 93       	push	r29
    7032:	cf 93       	push	r28
    7034:	cd b7       	in	r28, 0x3d	; 61
    7036:	de b7       	in	r29, 0x3e	; 62
    7038:	29 97       	sbiw	r28, 0x09	; 9
    703a:	0f b6       	in	r0, 0x3f	; 63
    703c:	f8 94       	cli
    703e:	de bf       	out	0x3e, r29	; 62
    7040:	0f be       	out	0x3f, r0	; 63
    7042:	cd bf       	out	0x3d, r28	; 61
    7044:	6a 01       	movw	r12, r20
    7046:	f2 2e       	mov	r15, r18
    7048:	10 2f       	mov	r17, r16
    704a:	0c 33       	cpi	r16, 0x3C	; 60
    704c:	18 f4       	brcc	.+6      	; 0x7054 <dtoa_prf+0x34>
    704e:	b0 2e       	mov	r11, r16
    7050:	b3 94       	inc	r11
    7052:	02 c0       	rjmp	.+4      	; 0x7058 <dtoa_prf+0x38>
    7054:	ec e3       	ldi	r30, 0x3C	; 60
    7056:	be 2e       	mov	r11, r30
    7058:	ae 01       	movw	r20, r28
    705a:	4f 5f       	subi	r20, 0xFF	; 255
    705c:	5f 4f       	sbci	r21, 0xFF	; 255
    705e:	27 e0       	ldi	r18, 0x07	; 7
    7060:	0b 2d       	mov	r16, r11
    7062:	0e 94 0e 3b 	call	0x761c	; 0x761c <__ftoa_engine>
    7066:	29 81       	ldd	r18, Y+1	; 0x01
    7068:	30 e0       	ldi	r19, 0x00	; 0
    706a:	a9 01       	movw	r20, r18
    706c:	49 70       	andi	r20, 0x09	; 9
    706e:	50 70       	andi	r21, 0x00	; 0
    7070:	41 30       	cpi	r20, 0x01	; 1
    7072:	51 05       	cpc	r21, r1
    7074:	31 f0       	breq	.+12     	; 0x7082 <dtoa_prf+0x62>
    7076:	e1 fc       	sbrc	r14, 1
    7078:	06 c0       	rjmp	.+12     	; 0x7086 <dtoa_prf+0x66>
    707a:	e0 fe       	sbrs	r14, 0
    707c:	06 c0       	rjmp	.+12     	; 0x708a <dtoa_prf+0x6a>
    707e:	e0 e2       	ldi	r30, 0x20	; 32
    7080:	05 c0       	rjmp	.+10     	; 0x708c <dtoa_prf+0x6c>
    7082:	ed e2       	ldi	r30, 0x2D	; 45
    7084:	03 c0       	rjmp	.+6      	; 0x708c <dtoa_prf+0x6c>
    7086:	eb e2       	ldi	r30, 0x2B	; 43
    7088:	01 c0       	rjmp	.+2      	; 0x708c <dtoa_prf+0x6c>
    708a:	e0 e0       	ldi	r30, 0x00	; 0
    708c:	23 ff       	sbrs	r18, 3
    708e:	37 c0       	rjmp	.+110    	; 0x70fe <dtoa_prf+0xde>
    7090:	ee 23       	and	r30, r30
    7092:	11 f0       	breq	.+4      	; 0x7098 <dtoa_prf+0x78>
    7094:	84 e0       	ldi	r24, 0x04	; 4
    7096:	01 c0       	rjmp	.+2      	; 0x709a <dtoa_prf+0x7a>
    7098:	83 e0       	ldi	r24, 0x03	; 3
    709a:	8f 15       	cp	r24, r15
    709c:	18 f4       	brcc	.+6      	; 0x70a4 <dtoa_prf+0x84>
    709e:	f8 1a       	sub	r15, r24
    70a0:	8f 2d       	mov	r24, r15
    70a2:	01 c0       	rjmp	.+2      	; 0x70a6 <dtoa_prf+0x86>
    70a4:	80 e0       	ldi	r24, 0x00	; 0
    70a6:	e4 fc       	sbrc	r14, 4
    70a8:	0b c0       	rjmp	.+22     	; 0x70c0 <dtoa_prf+0xa0>
    70aa:	98 2f       	mov	r25, r24
    70ac:	d6 01       	movw	r26, r12
    70ae:	20 e2       	ldi	r18, 0x20	; 32
    70b0:	02 c0       	rjmp	.+4      	; 0x70b6 <dtoa_prf+0x96>
    70b2:	2d 93       	st	X+, r18
    70b4:	91 50       	subi	r25, 0x01	; 1
    70b6:	99 23       	and	r25, r25
    70b8:	e1 f7       	brne	.-8      	; 0x70b2 <dtoa_prf+0x92>
    70ba:	c8 0e       	add	r12, r24
    70bc:	d1 1c       	adc	r13, r1
    70be:	80 e0       	ldi	r24, 0x00	; 0
    70c0:	ee 23       	and	r30, r30
    70c2:	19 f0       	breq	.+6      	; 0x70ca <dtoa_prf+0xaa>
    70c4:	d6 01       	movw	r26, r12
    70c6:	ed 93       	st	X+, r30
    70c8:	6d 01       	movw	r12, r26
    70ca:	f6 01       	movw	r30, r12
    70cc:	31 96       	adiw	r30, 0x01	; 1
    70ce:	e2 fe       	sbrs	r14, 2
    70d0:	05 c0       	rjmp	.+10     	; 0x70dc <dtoa_prf+0xbc>
    70d2:	9e e4       	ldi	r25, 0x4E	; 78
    70d4:	d6 01       	movw	r26, r12
    70d6:	9c 93       	st	X, r25
    70d8:	21 e4       	ldi	r18, 0x41	; 65
    70da:	04 c0       	rjmp	.+8      	; 0x70e4 <dtoa_prf+0xc4>
    70dc:	9e e6       	ldi	r25, 0x6E	; 110
    70de:	d6 01       	movw	r26, r12
    70e0:	9c 93       	st	X, r25
    70e2:	21 e6       	ldi	r18, 0x61	; 97
    70e4:	11 96       	adiw	r26, 0x01	; 1
    70e6:	2c 93       	st	X, r18
    70e8:	91 83       	std	Z+1, r25	; 0x01
    70ea:	32 96       	adiw	r30, 0x02	; 2
    70ec:	98 2f       	mov	r25, r24
    70ee:	df 01       	movw	r26, r30
    70f0:	20 e2       	ldi	r18, 0x20	; 32
    70f2:	02 c0       	rjmp	.+4      	; 0x70f8 <dtoa_prf+0xd8>
    70f4:	2d 93       	st	X+, r18
    70f6:	91 50       	subi	r25, 0x01	; 1
    70f8:	99 23       	and	r25, r25
    70fa:	e1 f7       	brne	.-8      	; 0x70f4 <dtoa_prf+0xd4>
    70fc:	3d c0       	rjmp	.+122    	; 0x7178 <dtoa_prf+0x158>
    70fe:	22 ff       	sbrs	r18, 2
    7100:	41 c0       	rjmp	.+130    	; 0x7184 <dtoa_prf+0x164>
    7102:	ee 23       	and	r30, r30
    7104:	11 f0       	breq	.+4      	; 0x710a <dtoa_prf+0xea>
    7106:	84 e0       	ldi	r24, 0x04	; 4
    7108:	01 c0       	rjmp	.+2      	; 0x710c <dtoa_prf+0xec>
    710a:	83 e0       	ldi	r24, 0x03	; 3
    710c:	8f 15       	cp	r24, r15
    710e:	18 f4       	brcc	.+6      	; 0x7116 <dtoa_prf+0xf6>
    7110:	f8 1a       	sub	r15, r24
    7112:	8f 2d       	mov	r24, r15
    7114:	01 c0       	rjmp	.+2      	; 0x7118 <dtoa_prf+0xf8>
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	e4 fc       	sbrc	r14, 4
    711a:	0b c0       	rjmp	.+22     	; 0x7132 <dtoa_prf+0x112>
    711c:	98 2f       	mov	r25, r24
    711e:	d6 01       	movw	r26, r12
    7120:	20 e2       	ldi	r18, 0x20	; 32
    7122:	02 c0       	rjmp	.+4      	; 0x7128 <dtoa_prf+0x108>
    7124:	2d 93       	st	X+, r18
    7126:	91 50       	subi	r25, 0x01	; 1
    7128:	99 23       	and	r25, r25
    712a:	e1 f7       	brne	.-8      	; 0x7124 <dtoa_prf+0x104>
    712c:	c8 0e       	add	r12, r24
    712e:	d1 1c       	adc	r13, r1
    7130:	80 e0       	ldi	r24, 0x00	; 0
    7132:	ee 23       	and	r30, r30
    7134:	19 f0       	breq	.+6      	; 0x713c <dtoa_prf+0x11c>
    7136:	d6 01       	movw	r26, r12
    7138:	ed 93       	st	X+, r30
    713a:	6d 01       	movw	r12, r26
    713c:	f6 01       	movw	r30, r12
    713e:	31 96       	adiw	r30, 0x01	; 1
    7140:	e2 fe       	sbrs	r14, 2
    7142:	09 c0       	rjmp	.+18     	; 0x7156 <dtoa_prf+0x136>
    7144:	99 e4       	ldi	r25, 0x49	; 73
    7146:	d6 01       	movw	r26, r12
    7148:	9c 93       	st	X, r25
    714a:	9e e4       	ldi	r25, 0x4E	; 78
    714c:	11 96       	adiw	r26, 0x01	; 1
    714e:	9c 93       	st	X, r25
    7150:	11 97       	sbiw	r26, 0x01	; 1
    7152:	96 e4       	ldi	r25, 0x46	; 70
    7154:	07 c0       	rjmp	.+14     	; 0x7164 <dtoa_prf+0x144>
    7156:	99 e6       	ldi	r25, 0x69	; 105
    7158:	d6 01       	movw	r26, r12
    715a:	9c 93       	st	X, r25
    715c:	9e e6       	ldi	r25, 0x6E	; 110
    715e:	11 96       	adiw	r26, 0x01	; 1
    7160:	9c 93       	st	X, r25
    7162:	96 e6       	ldi	r25, 0x66	; 102
    7164:	91 83       	std	Z+1, r25	; 0x01
    7166:	32 96       	adiw	r30, 0x02	; 2
    7168:	98 2f       	mov	r25, r24
    716a:	df 01       	movw	r26, r30
    716c:	20 e2       	ldi	r18, 0x20	; 32
    716e:	02 c0       	rjmp	.+4      	; 0x7174 <dtoa_prf+0x154>
    7170:	2d 93       	st	X+, r18
    7172:	91 50       	subi	r25, 0x01	; 1
    7174:	99 23       	and	r25, r25
    7176:	e1 f7       	brne	.-8      	; 0x7170 <dtoa_prf+0x150>
    7178:	e8 0f       	add	r30, r24
    717a:	f1 1d       	adc	r31, r1
    717c:	10 82       	st	Z, r1
    717e:	2e ef       	ldi	r18, 0xFE	; 254
    7180:	3f ef       	ldi	r19, 0xFF	; 255
    7182:	ac c0       	rjmp	.+344    	; 0x72dc <dtoa_prf+0x2bc>
    7184:	41 e0       	ldi	r20, 0x01	; 1
    7186:	50 e0       	ldi	r21, 0x00	; 0
    7188:	ee 23       	and	r30, r30
    718a:	11 f4       	brne	.+4      	; 0x7190 <dtoa_prf+0x170>
    718c:	40 e0       	ldi	r20, 0x00	; 0
    718e:	50 e0       	ldi	r21, 0x00	; 0
    7190:	18 16       	cp	r1, r24
    7192:	19 06       	cpc	r1, r25
    7194:	24 f4       	brge	.+8      	; 0x719e <dtoa_prf+0x17e>
    7196:	bc 01       	movw	r22, r24
    7198:	6f 5f       	subi	r22, 0xFF	; 255
    719a:	7f 4f       	sbci	r23, 0xFF	; 255
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <dtoa_prf+0x182>
    719e:	61 e0       	ldi	r22, 0x01	; 1
    71a0:	70 e0       	ldi	r23, 0x00	; 0
    71a2:	64 0f       	add	r22, r20
    71a4:	75 1f       	adc	r23, r21
    71a6:	11 23       	and	r17, r17
    71a8:	29 f0       	breq	.+10     	; 0x71b4 <dtoa_prf+0x194>
    71aa:	41 2f       	mov	r20, r17
    71ac:	50 e0       	ldi	r21, 0x00	; 0
    71ae:	4f 5f       	subi	r20, 0xFF	; 255
    71b0:	5f 4f       	sbci	r21, 0xFF	; 255
    71b2:	02 c0       	rjmp	.+4      	; 0x71b8 <dtoa_prf+0x198>
    71b4:	40 e0       	ldi	r20, 0x00	; 0
    71b6:	50 e0       	ldi	r21, 0x00	; 0
    71b8:	46 0f       	add	r20, r22
    71ba:	57 1f       	adc	r21, r23
    71bc:	6f 2d       	mov	r22, r15
    71be:	70 e0       	ldi	r23, 0x00	; 0
    71c0:	46 17       	cp	r20, r22
    71c2:	57 07       	cpc	r21, r23
    71c4:	1c f4       	brge	.+6      	; 0x71cc <dtoa_prf+0x1ac>
    71c6:	0f 2d       	mov	r16, r15
    71c8:	04 1b       	sub	r16, r20
    71ca:	01 c0       	rjmp	.+2      	; 0x71ce <dtoa_prf+0x1ae>
    71cc:	00 e0       	ldi	r16, 0x00	; 0
    71ce:	ff 24       	eor	r15, r15
    71d0:	a7 01       	movw	r20, r14
    71d2:	40 71       	andi	r20, 0x10	; 16
    71d4:	50 70       	andi	r21, 0x00	; 0
    71d6:	e4 fc       	sbrc	r14, 4
    71d8:	0d c0       	rjmp	.+26     	; 0x71f4 <dtoa_prf+0x1d4>
    71da:	e3 fc       	sbrc	r14, 3
    71dc:	0b c0       	rjmp	.+22     	; 0x71f4 <dtoa_prf+0x1d4>
    71de:	60 2f       	mov	r22, r16
    71e0:	d6 01       	movw	r26, r12
    71e2:	70 e2       	ldi	r23, 0x20	; 32
    71e4:	02 c0       	rjmp	.+4      	; 0x71ea <dtoa_prf+0x1ca>
    71e6:	7d 93       	st	X+, r23
    71e8:	61 50       	subi	r22, 0x01	; 1
    71ea:	66 23       	and	r22, r22
    71ec:	e1 f7       	brne	.-8      	; 0x71e6 <dtoa_prf+0x1c6>
    71ee:	c0 0e       	add	r12, r16
    71f0:	d1 1c       	adc	r13, r1
    71f2:	00 e0       	ldi	r16, 0x00	; 0
    71f4:	ee 23       	and	r30, r30
    71f6:	19 f0       	breq	.+6      	; 0x71fe <dtoa_prf+0x1de>
    71f8:	d6 01       	movw	r26, r12
    71fa:	ed 93       	st	X+, r30
    71fc:	6d 01       	movw	r12, r26
    71fe:	41 15       	cp	r20, r1
    7200:	51 05       	cpc	r21, r1
    7202:	59 f4       	brne	.+22     	; 0x721a <dtoa_prf+0x1fa>
    7204:	40 2f       	mov	r20, r16
    7206:	f6 01       	movw	r30, r12
    7208:	50 e3       	ldi	r21, 0x30	; 48
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <dtoa_prf+0x1f0>
    720c:	51 93       	st	Z+, r21
    720e:	41 50       	subi	r20, 0x01	; 1
    7210:	44 23       	and	r20, r20
    7212:	e1 f7       	brne	.-8      	; 0x720c <dtoa_prf+0x1ec>
    7214:	c0 0e       	add	r12, r16
    7216:	d1 1c       	adc	r13, r1
    7218:	00 e0       	ldi	r16, 0x00	; 0
    721a:	b8 0e       	add	r11, r24
    721c:	fa 80       	ldd	r15, Y+2	; 0x02
    721e:	a9 01       	movw	r20, r18
    7220:	40 71       	andi	r20, 0x10	; 16
    7222:	50 70       	andi	r21, 0x00	; 0
    7224:	24 ff       	sbrs	r18, 4
    7226:	04 c0       	rjmp	.+8      	; 0x7230 <dtoa_prf+0x210>
    7228:	bf 2d       	mov	r27, r15
    722a:	b1 33       	cpi	r27, 0x31	; 49
    722c:	09 f4       	brne	.+2      	; 0x7230 <dtoa_prf+0x210>
    722e:	ba 94       	dec	r11
    7230:	1b 14       	cp	r1, r11
    7232:	2c f4       	brge	.+10     	; 0x723e <dtoa_prf+0x21e>
    7234:	ab 2d       	mov	r26, r11
    7236:	a9 30       	cpi	r26, 0x09	; 9
    7238:	18 f0       	brcs	.+6      	; 0x7240 <dtoa_prf+0x220>
    723a:	a8 e0       	ldi	r26, 0x08	; 8
    723c:	01 c0       	rjmp	.+2      	; 0x7240 <dtoa_prf+0x220>
    723e:	a1 e0       	ldi	r26, 0x01	; 1
    7240:	9c 01       	movw	r18, r24
    7242:	97 ff       	sbrs	r25, 7
    7244:	02 c0       	rjmp	.+4      	; 0x724a <dtoa_prf+0x22a>
    7246:	20 e0       	ldi	r18, 0x00	; 0
    7248:	30 e0       	ldi	r19, 0x00	; 0
    724a:	bc 01       	movw	r22, r24
    724c:	6f 5f       	subi	r22, 0xFF	; 255
    724e:	7f 4f       	sbci	r23, 0xFF	; 255
    7250:	62 1b       	sub	r22, r18
    7252:	73 0b       	sbc	r23, r19
    7254:	fe 01       	movw	r30, r28
    7256:	31 96       	adiw	r30, 0x01	; 1
    7258:	e6 0f       	add	r30, r22
    725a:	f7 1f       	adc	r31, r23
    725c:	6e e2       	ldi	r22, 0x2E	; 46
    725e:	e6 2e       	mov	r14, r22
    7260:	bc 01       	movw	r22, r24
    7262:	6a 1b       	sub	r22, r26
    7264:	71 09       	sbc	r23, r1
    7266:	a1 2f       	mov	r26, r17
    7268:	b0 e0       	ldi	r27, 0x00	; 0
    726a:	aa 24       	eor	r10, r10
    726c:	bb 24       	eor	r11, r11
    726e:	aa 1a       	sub	r10, r26
    7270:	bb 0a       	sbc	r11, r27
    7272:	1f ef       	ldi	r17, 0xFF	; 255
    7274:	2f 3f       	cpi	r18, 0xFF	; 255
    7276:	31 07       	cpc	r19, r17
    7278:	19 f4       	brne	.+6      	; 0x7280 <dtoa_prf+0x260>
    727a:	d6 01       	movw	r26, r12
    727c:	ed 92       	st	X+, r14
    727e:	6d 01       	movw	r12, r26
    7280:	82 17       	cp	r24, r18
    7282:	93 07       	cpc	r25, r19
    7284:	2c f0       	brlt	.+10     	; 0x7290 <dtoa_prf+0x270>
    7286:	62 17       	cp	r22, r18
    7288:	73 07       	cpc	r23, r19
    728a:	14 f4       	brge	.+4      	; 0x7290 <dtoa_prf+0x270>
    728c:	10 81       	ld	r17, Z
    728e:	01 c0       	rjmp	.+2      	; 0x7292 <dtoa_prf+0x272>
    7290:	10 e3       	ldi	r17, 0x30	; 48
    7292:	21 50       	subi	r18, 0x01	; 1
    7294:	30 40       	sbci	r19, 0x00	; 0
    7296:	31 96       	adiw	r30, 0x01	; 1
    7298:	2a 15       	cp	r18, r10
    729a:	3b 05       	cpc	r19, r11
    729c:	24 f0       	brlt	.+8      	; 0x72a6 <dtoa_prf+0x286>
    729e:	d6 01       	movw	r26, r12
    72a0:	1d 93       	st	X+, r17
    72a2:	6d 01       	movw	r12, r26
    72a4:	e6 cf       	rjmp	.-52     	; 0x7272 <dtoa_prf+0x252>
    72a6:	28 17       	cp	r18, r24
    72a8:	39 07       	cpc	r19, r25
    72aa:	49 f4       	brne	.+18     	; 0x72be <dtoa_prf+0x29e>
    72ac:	bf 2d       	mov	r27, r15
    72ae:	b6 33       	cpi	r27, 0x36	; 54
    72b0:	28 f4       	brcc	.+10     	; 0x72bc <dtoa_prf+0x29c>
    72b2:	b5 33       	cpi	r27, 0x35	; 53
    72b4:	21 f4       	brne	.+8      	; 0x72be <dtoa_prf+0x29e>
    72b6:	41 15       	cp	r20, r1
    72b8:	51 05       	cpc	r21, r1
    72ba:	09 f4       	brne	.+2      	; 0x72be <dtoa_prf+0x29e>
    72bc:	11 e3       	ldi	r17, 0x31	; 49
    72be:	f6 01       	movw	r30, r12
    72c0:	11 93       	st	Z+, r17
    72c2:	80 2f       	mov	r24, r16
    72c4:	df 01       	movw	r26, r30
    72c6:	90 e2       	ldi	r25, 0x20	; 32
    72c8:	02 c0       	rjmp	.+4      	; 0x72ce <dtoa_prf+0x2ae>
    72ca:	9d 93       	st	X+, r25
    72cc:	81 50       	subi	r24, 0x01	; 1
    72ce:	88 23       	and	r24, r24
    72d0:	e1 f7       	brne	.-8      	; 0x72ca <dtoa_prf+0x2aa>
    72d2:	e0 0f       	add	r30, r16
    72d4:	f1 1d       	adc	r31, r1
    72d6:	10 82       	st	Z, r1
    72d8:	20 e0       	ldi	r18, 0x00	; 0
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	c9 01       	movw	r24, r18
    72de:	29 96       	adiw	r28, 0x09	; 9
    72e0:	0f b6       	in	r0, 0x3f	; 63
    72e2:	f8 94       	cli
    72e4:	de bf       	out	0x3e, r29	; 62
    72e6:	0f be       	out	0x3f, r0	; 63
    72e8:	cd bf       	out	0x3d, r28	; 61
    72ea:	cf 91       	pop	r28
    72ec:	df 91       	pop	r29
    72ee:	1f 91       	pop	r17
    72f0:	0f 91       	pop	r16
    72f2:	ff 90       	pop	r15
    72f4:	ef 90       	pop	r14
    72f6:	df 90       	pop	r13
    72f8:	cf 90       	pop	r12
    72fa:	bf 90       	pop	r11
    72fc:	af 90       	pop	r10
    72fe:	08 95       	ret

00007300 <strtod>:
    7300:	6f 92       	push	r6
    7302:	7f 92       	push	r7
    7304:	8f 92       	push	r8
    7306:	9f 92       	push	r9
    7308:	af 92       	push	r10
    730a:	bf 92       	push	r11
    730c:	cf 92       	push	r12
    730e:	df 92       	push	r13
    7310:	ef 92       	push	r14
    7312:	ff 92       	push	r15
    7314:	0f 93       	push	r16
    7316:	1f 93       	push	r17
    7318:	df 93       	push	r29
    731a:	cf 93       	push	r28
    731c:	0f 92       	push	r0
    731e:	cd b7       	in	r28, 0x3d	; 61
    7320:	de b7       	in	r29, 0x3e	; 62
    7322:	5b 01       	movw	r10, r22
    7324:	61 15       	cp	r22, r1
    7326:	71 05       	cpc	r23, r1
    7328:	21 f0       	breq	.+8      	; 0x7332 <strtod+0x32>
    732a:	db 01       	movw	r26, r22
    732c:	8c 93       	st	X, r24
    732e:	11 96       	adiw	r26, 0x01	; 1
    7330:	9c 93       	st	X, r25
    7332:	48 2f       	mov	r20, r24
    7334:	59 2f       	mov	r21, r25
    7336:	6a 01       	movw	r12, r20
    7338:	f6 01       	movw	r30, r12
    733a:	e1 90       	ld	r14, Z+
    733c:	6f 01       	movw	r12, r30
    733e:	8f 01       	movw	r16, r30
    7340:	8e 2d       	mov	r24, r14
    7342:	90 e0       	ldi	r25, 0x00	; 0
    7344:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <isspace>
    7348:	00 97       	sbiw	r24, 0x00	; 0
    734a:	b1 f7       	brne	.-20     	; 0x7338 <strtod+0x38>
    734c:	fe 2d       	mov	r31, r14
    734e:	fd 32       	cpi	r31, 0x2D	; 45
    7350:	29 f4       	brne	.+10     	; 0x735c <strtod+0x5c>
    7352:	d6 01       	movw	r26, r12
    7354:	ed 90       	ld	r14, X+
    7356:	8d 01       	movw	r16, r26
    7358:	21 e0       	ldi	r18, 0x01	; 1
    735a:	07 c0       	rjmp	.+14     	; 0x736a <strtod+0x6a>
    735c:	be 2d       	mov	r27, r14
    735e:	bb 32       	cpi	r27, 0x2B	; 43
    7360:	19 f4       	brne	.+6      	; 0x7368 <strtod+0x68>
    7362:	f6 01       	movw	r30, r12
    7364:	e1 90       	ld	r14, Z+
    7366:	8f 01       	movw	r16, r30
    7368:	20 e0       	ldi	r18, 0x00	; 0
    736a:	68 01       	movw	r12, r16
    736c:	08 94       	sec
    736e:	c1 08       	sbc	r12, r1
    7370:	d1 08       	sbc	r13, r1
    7372:	c6 01       	movw	r24, r12
    7374:	65 e0       	ldi	r22, 0x05	; 5
    7376:	72 e0       	ldi	r23, 0x02	; 2
    7378:	43 e0       	ldi	r20, 0x03	; 3
    737a:	50 e0       	ldi	r21, 0x00	; 0
    737c:	29 83       	std	Y+1, r18	; 0x01
    737e:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <strncasecmp_P>
    7382:	29 81       	ldd	r18, Y+1	; 0x01
    7384:	00 97       	sbiw	r24, 0x00	; 0
    7386:	11 f5       	brne	.+68     	; 0x73cc <strtod+0xcc>
    7388:	72 e0       	ldi	r23, 0x02	; 2
    738a:	e7 2e       	mov	r14, r23
    738c:	f1 2c       	mov	r15, r1
    738e:	e0 0e       	add	r14, r16
    7390:	f1 1e       	adc	r15, r17
    7392:	c7 01       	movw	r24, r14
    7394:	68 e0       	ldi	r22, 0x08	; 8
    7396:	72 e0       	ldi	r23, 0x02	; 2
    7398:	45 e0       	ldi	r20, 0x05	; 5
    739a:	50 e0       	ldi	r21, 0x00	; 0
    739c:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <strncasecmp_P>
    73a0:	29 81       	ldd	r18, Y+1	; 0x01
    73a2:	00 97       	sbiw	r24, 0x00	; 0
    73a4:	29 f4       	brne	.+10     	; 0x73b0 <strtod+0xb0>
    73a6:	67 e0       	ldi	r22, 0x07	; 7
    73a8:	e6 2e       	mov	r14, r22
    73aa:	f1 2c       	mov	r15, r1
    73ac:	e0 0e       	add	r14, r16
    73ae:	f1 1e       	adc	r15, r17
    73b0:	a1 14       	cp	r10, r1
    73b2:	b1 04       	cpc	r11, r1
    73b4:	21 f0       	breq	.+8      	; 0x73be <strtod+0xbe>
    73b6:	d5 01       	movw	r26, r10
    73b8:	11 96       	adiw	r26, 0x01	; 1
    73ba:	fc 92       	st	X, r15
    73bc:	ee 92       	st	-X, r14
    73be:	20 ff       	sbrs	r18, 0
    73c0:	0f c1       	rjmp	.+542    	; 0x75e0 <strtod+0x2e0>
    73c2:	30 e0       	ldi	r19, 0x00	; 0
    73c4:	20 e0       	ldi	r18, 0x00	; 0
    73c6:	90 e8       	ldi	r25, 0x80	; 128
    73c8:	8f ef       	ldi	r24, 0xFF	; 255
    73ca:	12 c1       	rjmp	.+548    	; 0x75f0 <strtod+0x2f0>
    73cc:	c6 01       	movw	r24, r12
    73ce:	6d e0       	ldi	r22, 0x0D	; 13
    73d0:	72 e0       	ldi	r23, 0x02	; 2
    73d2:	43 e0       	ldi	r20, 0x03	; 3
    73d4:	50 e0       	ldi	r21, 0x00	; 0
    73d6:	29 83       	std	Y+1, r18	; 0x01
    73d8:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <strncasecmp_P>
    73dc:	29 81       	ldd	r18, Y+1	; 0x01
    73de:	00 97       	sbiw	r24, 0x00	; 0
    73e0:	31 f0       	breq	.+12     	; 0x73ee <strtod+0xee>
    73e2:	60 e0       	ldi	r22, 0x00	; 0
    73e4:	70 e0       	ldi	r23, 0x00	; 0
    73e6:	cb 01       	movw	r24, r22
    73e8:	66 24       	eor	r6, r6
    73ea:	77 24       	eor	r7, r7
    73ec:	0a c0       	rjmp	.+20     	; 0x7402 <strtod+0x102>
    73ee:	a1 14       	cp	r10, r1
    73f0:	b1 04       	cpc	r11, r1
    73f2:	09 f4       	brne	.+2      	; 0x73f6 <strtod+0xf6>
    73f4:	f9 c0       	rjmp	.+498    	; 0x75e8 <strtod+0x2e8>
    73f6:	0e 5f       	subi	r16, 0xFE	; 254
    73f8:	1f 4f       	sbci	r17, 0xFF	; 255
    73fa:	f5 01       	movw	r30, r10
    73fc:	11 83       	std	Z+1, r17	; 0x01
    73fe:	00 83       	st	Z, r16
    7400:	f3 c0       	rjmp	.+486    	; 0x75e8 <strtod+0x2e8>
    7402:	3e 2d       	mov	r19, r14
    7404:	30 53       	subi	r19, 0x30	; 48
    7406:	3a 30       	cpi	r19, 0x0A	; 10
    7408:	a0 f5       	brcc	.+104    	; 0x7472 <strtod+0x172>
    740a:	22 60       	ori	r18, 0x02	; 2
    740c:	e2 2f       	mov	r30, r18
    740e:	f0 e0       	ldi	r31, 0x00	; 0
    7410:	af 01       	movw	r20, r30
    7412:	48 70       	andi	r20, 0x08	; 8
    7414:	50 70       	andi	r21, 0x00	; 0
    7416:	22 ff       	sbrs	r18, 2
    7418:	07 c0       	rjmp	.+14     	; 0x7428 <strtod+0x128>
    741a:	41 15       	cp	r20, r1
    741c:	51 05       	cpc	r21, r1
    741e:	71 f5       	brne	.+92     	; 0x747c <strtod+0x17c>
    7420:	08 94       	sec
    7422:	61 1c       	adc	r6, r1
    7424:	71 1c       	adc	r7, r1
    7426:	2a c0       	rjmp	.+84     	; 0x747c <strtod+0x17c>
    7428:	41 15       	cp	r20, r1
    742a:	51 05       	cpc	r21, r1
    742c:	19 f0       	breq	.+6      	; 0x7434 <strtod+0x134>
    742e:	08 94       	sec
    7430:	61 08       	sbc	r6, r1
    7432:	71 08       	sbc	r7, r1
    7434:	6b 01       	movw	r12, r22
    7436:	7c 01       	movw	r14, r24
    7438:	52 e0       	ldi	r21, 0x02	; 2
    743a:	cc 0c       	add	r12, r12
    743c:	dd 1c       	adc	r13, r13
    743e:	ee 1c       	adc	r14, r14
    7440:	ff 1c       	adc	r15, r15
    7442:	5a 95       	dec	r21
    7444:	d1 f7       	brne	.-12     	; 0x743a <strtod+0x13a>
    7446:	6c 0d       	add	r22, r12
    7448:	7d 1d       	adc	r23, r13
    744a:	8e 1d       	adc	r24, r14
    744c:	9f 1d       	adc	r25, r15
    744e:	66 0f       	add	r22, r22
    7450:	77 1f       	adc	r23, r23
    7452:	88 1f       	adc	r24, r24
    7454:	99 1f       	adc	r25, r25
    7456:	63 0f       	add	r22, r19
    7458:	71 1d       	adc	r23, r1
    745a:	81 1d       	adc	r24, r1
    745c:	91 1d       	adc	r25, r1
    745e:	68 39       	cpi	r22, 0x98	; 152
    7460:	f9 e9       	ldi	r31, 0x99	; 153
    7462:	7f 07       	cpc	r23, r31
    7464:	f9 e9       	ldi	r31, 0x99	; 153
    7466:	8f 07       	cpc	r24, r31
    7468:	f9 e1       	ldi	r31, 0x19	; 25
    746a:	9f 07       	cpc	r25, r31
    746c:	38 f0       	brcs	.+14     	; 0x747c <strtod+0x17c>
    746e:	24 60       	ori	r18, 0x04	; 4
    7470:	05 c0       	rjmp	.+10     	; 0x747c <strtod+0x17c>
    7472:	3e 3f       	cpi	r19, 0xFE	; 254
    7474:	39 f4       	brne	.+14     	; 0x7484 <strtod+0x184>
    7476:	23 fd       	sbrc	r18, 3
    7478:	3f c0       	rjmp	.+126    	; 0x74f8 <strtod+0x1f8>
    747a:	28 60       	ori	r18, 0x08	; 8
    747c:	d8 01       	movw	r26, r16
    747e:	ed 90       	ld	r14, X+
    7480:	8d 01       	movw	r16, r26
    7482:	bf cf       	rjmp	.-130    	; 0x7402 <strtod+0x102>
    7484:	35 33       	cpi	r19, 0x35	; 53
    7486:	11 f0       	breq	.+4      	; 0x748c <strtod+0x18c>
    7488:	35 31       	cpi	r19, 0x15	; 21
    748a:	b1 f5       	brne	.+108    	; 0x74f8 <strtod+0x1f8>
    748c:	f8 01       	movw	r30, r16
    748e:	31 91       	ld	r19, Z+
    7490:	3d 32       	cpi	r19, 0x2D	; 45
    7492:	11 f4       	brne	.+4      	; 0x7498 <strtod+0x198>
    7494:	20 61       	ori	r18, 0x10	; 16
    7496:	02 c0       	rjmp	.+4      	; 0x749c <strtod+0x19c>
    7498:	3b 32       	cpi	r19, 0x2B	; 43
    749a:	41 f4       	brne	.+16     	; 0x74ac <strtod+0x1ac>
    749c:	d8 01       	movw	r26, r16
    749e:	11 96       	adiw	r26, 0x01	; 1
    74a0:	3c 91       	ld	r19, X
    74a2:	11 97       	sbiw	r26, 0x01	; 1
    74a4:	31 96       	adiw	r30, 0x01	; 1
    74a6:	42 e0       	ldi	r20, 0x02	; 2
    74a8:	50 e0       	ldi	r21, 0x00	; 0
    74aa:	02 c0       	rjmp	.+4      	; 0x74b0 <strtod+0x1b0>
    74ac:	41 e0       	ldi	r20, 0x01	; 1
    74ae:	50 e0       	ldi	r21, 0x00	; 0
    74b0:	30 53       	subi	r19, 0x30	; 48
    74b2:	3a 30       	cpi	r19, 0x0A	; 10
    74b4:	20 f0       	brcs	.+8      	; 0x74be <strtod+0x1be>
    74b6:	8f 01       	movw	r16, r30
    74b8:	04 1b       	sub	r16, r20
    74ba:	15 0b       	sbc	r17, r21
    74bc:	1d c0       	rjmp	.+58     	; 0x74f8 <strtod+0x1f8>
    74be:	40 e0       	ldi	r20, 0x00	; 0
    74c0:	50 e0       	ldi	r21, 0x00	; 0
    74c2:	bc e0       	ldi	r27, 0x0C	; 12
    74c4:	40 38       	cpi	r20, 0x80	; 128
    74c6:	5b 07       	cpc	r21, r27
    74c8:	5c f4       	brge	.+22     	; 0x74e0 <strtod+0x1e0>
    74ca:	da 01       	movw	r26, r20
    74cc:	aa 0f       	add	r26, r26
    74ce:	bb 1f       	adc	r27, r27
    74d0:	aa 0f       	add	r26, r26
    74d2:	bb 1f       	adc	r27, r27
    74d4:	4a 0f       	add	r20, r26
    74d6:	5b 1f       	adc	r21, r27
    74d8:	44 0f       	add	r20, r20
    74da:	55 1f       	adc	r21, r21
    74dc:	43 0f       	add	r20, r19
    74de:	51 1d       	adc	r21, r1
    74e0:	31 91       	ld	r19, Z+
    74e2:	30 53       	subi	r19, 0x30	; 48
    74e4:	8f 01       	movw	r16, r30
    74e6:	3a 30       	cpi	r19, 0x0A	; 10
    74e8:	60 f3       	brcs	.-40     	; 0x74c2 <strtod+0x1c2>
    74ea:	24 ff       	sbrs	r18, 4
    74ec:	03 c0       	rjmp	.+6      	; 0x74f4 <strtod+0x1f4>
    74ee:	50 95       	com	r21
    74f0:	41 95       	neg	r20
    74f2:	5f 4f       	sbci	r21, 0xFF	; 255
    74f4:	64 0e       	add	r6, r20
    74f6:	75 1e       	adc	r7, r21
    74f8:	c2 2e       	mov	r12, r18
    74fa:	dd 24       	eor	r13, r13
    74fc:	21 ff       	sbrs	r18, 1
    74fe:	08 c0       	rjmp	.+16     	; 0x7510 <strtod+0x210>
    7500:	a1 14       	cp	r10, r1
    7502:	b1 04       	cpc	r11, r1
    7504:	29 f0       	breq	.+10     	; 0x7510 <strtod+0x210>
    7506:	01 50       	subi	r16, 0x01	; 1
    7508:	10 40       	sbci	r17, 0x00	; 0
    750a:	f5 01       	movw	r30, r10
    750c:	11 83       	std	Z+1, r17	; 0x01
    750e:	00 83       	st	Z, r16
    7510:	0e 94 6e 34 	call	0x68dc	; 0x68dc <__floatunsisf>
    7514:	7b 01       	movw	r14, r22
    7516:	8c 01       	movw	r16, r24
    7518:	f3 e0       	ldi	r31, 0x03	; 3
    751a:	cf 22       	and	r12, r31
    751c:	dd 24       	eor	r13, r13
    751e:	33 e0       	ldi	r19, 0x03	; 3
    7520:	c3 16       	cp	r12, r19
    7522:	d1 04       	cpc	r13, r1
    7524:	21 f4       	brne	.+8      	; 0x752e <strtod+0x22e>
    7526:	17 fb       	bst	r17, 7
    7528:	10 95       	com	r17
    752a:	17 f9       	bld	r17, 7
    752c:	10 95       	com	r17
    752e:	c8 01       	movw	r24, r16
    7530:	b7 01       	movw	r22, r14
    7532:	20 e0       	ldi	r18, 0x00	; 0
    7534:	30 e0       	ldi	r19, 0x00	; 0
    7536:	a9 01       	movw	r20, r18
    7538:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    753c:	88 23       	and	r24, r24
    753e:	09 f4       	brne	.+2      	; 0x7542 <strtod+0x242>
    7540:	4a c0       	rjmp	.+148    	; 0x75d6 <strtod+0x2d6>
    7542:	77 fe       	sbrs	r7, 7
    7544:	09 c0       	rjmp	.+18     	; 0x7558 <strtod+0x258>
    7546:	44 e2       	ldi	r20, 0x24	; 36
    7548:	c4 2e       	mov	r12, r20
    754a:	42 e0       	ldi	r20, 0x02	; 2
    754c:	d4 2e       	mov	r13, r20
    754e:	70 94       	com	r7
    7550:	61 94       	neg	r6
    7552:	71 08       	sbc	r7, r1
    7554:	73 94       	inc	r7
    7556:	04 c0       	rjmp	.+8      	; 0x7560 <strtod+0x260>
    7558:	3c e3       	ldi	r19, 0x3C	; 60
    755a:	c3 2e       	mov	r12, r19
    755c:	32 e0       	ldi	r19, 0x02	; 2
    755e:	d3 2e       	mov	r13, r19
    7560:	26 e0       	ldi	r18, 0x06	; 6
    7562:	82 2e       	mov	r8, r18
    7564:	91 2c       	mov	r9, r1
    7566:	90 e2       	ldi	r25, 0x20	; 32
    7568:	a9 2e       	mov	r10, r25
    756a:	b1 2c       	mov	r11, r1
    756c:	0f c0       	rjmp	.+30     	; 0x758c <strtod+0x28c>
    756e:	f6 01       	movw	r30, r12
    7570:	25 91       	lpm	r18, Z+
    7572:	35 91       	lpm	r19, Z+
    7574:	45 91       	lpm	r20, Z+
    7576:	54 91       	lpm	r21, Z+
    7578:	c8 01       	movw	r24, r16
    757a:	b7 01       	movw	r22, r14
    757c:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__mulsf3>
    7580:	e6 2e       	mov	r14, r22
    7582:	f7 2e       	mov	r15, r23
    7584:	08 2f       	mov	r16, r24
    7586:	19 2f       	mov	r17, r25
    7588:	6a 18       	sub	r6, r10
    758a:	7b 08       	sbc	r7, r11
    758c:	6a 14       	cp	r6, r10
    758e:	7b 04       	cpc	r7, r11
    7590:	74 f7       	brge	.-36     	; 0x756e <strtod+0x26e>
    7592:	b5 94       	asr	r11
    7594:	a7 94       	ror	r10
    7596:	08 94       	sec
    7598:	81 08       	sbc	r8, r1
    759a:	91 08       	sbc	r9, r1
    759c:	81 14       	cp	r8, r1
    759e:	91 04       	cpc	r9, r1
    75a0:	29 f0       	breq	.+10     	; 0x75ac <strtod+0x2ac>
    75a2:	8c ef       	ldi	r24, 0xFC	; 252
    75a4:	9f ef       	ldi	r25, 0xFF	; 255
    75a6:	c8 0e       	add	r12, r24
    75a8:	d9 1e       	adc	r13, r25
    75aa:	f0 cf       	rjmp	.-32     	; 0x758c <strtod+0x28c>
    75ac:	b7 01       	movw	r22, r14
    75ae:	c8 01       	movw	r24, r16
    75b0:	28 2f       	mov	r18, r24
    75b2:	22 0f       	add	r18, r18
    75b4:	29 2f       	mov	r18, r25
    75b6:	22 1f       	adc	r18, r18
    75b8:	2f 3f       	cpi	r18, 0xFF	; 255
    75ba:	39 f0       	breq	.+14     	; 0x75ca <strtod+0x2ca>
    75bc:	20 e0       	ldi	r18, 0x00	; 0
    75be:	30 e0       	ldi	r19, 0x00	; 0
    75c0:	a9 01       	movw	r20, r18
    75c2:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__cmpsf2>
    75c6:	88 23       	and	r24, r24
    75c8:	31 f4       	brne	.+12     	; 0x75d6 <strtod+0x2d6>
    75ca:	82 e2       	ldi	r24, 0x22	; 34
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	90 93 91 06 	sts	0x0691, r25
    75d2:	80 93 90 06 	sts	0x0690, r24
    75d6:	3e 2d       	mov	r19, r14
    75d8:	2f 2d       	mov	r18, r15
    75da:	90 2f       	mov	r25, r16
    75dc:	81 2f       	mov	r24, r17
    75de:	08 c0       	rjmp	.+16     	; 0x75f0 <strtod+0x2f0>
    75e0:	30 e0       	ldi	r19, 0x00	; 0
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	90 e8       	ldi	r25, 0x80	; 128
    75e6:	03 c0       	rjmp	.+6      	; 0x75ee <strtod+0x2ee>
    75e8:	30 e0       	ldi	r19, 0x00	; 0
    75ea:	20 e0       	ldi	r18, 0x00	; 0
    75ec:	90 ec       	ldi	r25, 0xC0	; 192
    75ee:	8f e7       	ldi	r24, 0x7F	; 127
    75f0:	f9 01       	movw	r30, r18
    75f2:	ac 01       	movw	r20, r24
    75f4:	6f 2f       	mov	r22, r31
    75f6:	72 2f       	mov	r23, r18
    75f8:	85 2f       	mov	r24, r21
    75fa:	94 2f       	mov	r25, r20
    75fc:	0f 90       	pop	r0
    75fe:	cf 91       	pop	r28
    7600:	df 91       	pop	r29
    7602:	1f 91       	pop	r17
    7604:	0f 91       	pop	r16
    7606:	ff 90       	pop	r15
    7608:	ef 90       	pop	r14
    760a:	df 90       	pop	r13
    760c:	cf 90       	pop	r12
    760e:	bf 90       	pop	r11
    7610:	af 90       	pop	r10
    7612:	9f 90       	pop	r9
    7614:	8f 90       	pop	r8
    7616:	7f 90       	pop	r7
    7618:	6f 90       	pop	r6
    761a:	08 95       	ret

0000761c <__ftoa_engine>:
    761c:	28 30       	cpi	r18, 0x08	; 8
    761e:	08 f0       	brcs	.+2      	; 0x7622 <__ftoa_engine+0x6>
    7620:	27 e0       	ldi	r18, 0x07	; 7
    7622:	33 27       	eor	r19, r19
    7624:	da 01       	movw	r26, r20
    7626:	99 0f       	add	r25, r25
    7628:	31 1d       	adc	r19, r1
    762a:	87 fd       	sbrc	r24, 7
    762c:	91 60       	ori	r25, 0x01	; 1
    762e:	00 96       	adiw	r24, 0x00	; 0
    7630:	61 05       	cpc	r22, r1
    7632:	71 05       	cpc	r23, r1
    7634:	39 f4       	brne	.+14     	; 0x7644 <__ftoa_engine+0x28>
    7636:	32 60       	ori	r19, 0x02	; 2
    7638:	2e 5f       	subi	r18, 0xFE	; 254
    763a:	3d 93       	st	X+, r19
    763c:	30 e3       	ldi	r19, 0x30	; 48
    763e:	2a 95       	dec	r18
    7640:	e1 f7       	brne	.-8      	; 0x763a <__ftoa_engine+0x1e>
    7642:	08 95       	ret
    7644:	9f 3f       	cpi	r25, 0xFF	; 255
    7646:	30 f0       	brcs	.+12     	; 0x7654 <__ftoa_engine+0x38>
    7648:	80 38       	cpi	r24, 0x80	; 128
    764a:	71 05       	cpc	r23, r1
    764c:	61 05       	cpc	r22, r1
    764e:	09 f0       	breq	.+2      	; 0x7652 <__ftoa_engine+0x36>
    7650:	3c 5f       	subi	r19, 0xFC	; 252
    7652:	3c 5f       	subi	r19, 0xFC	; 252
    7654:	3d 93       	st	X+, r19
    7656:	91 30       	cpi	r25, 0x01	; 1
    7658:	08 f0       	brcs	.+2      	; 0x765c <__ftoa_engine+0x40>
    765a:	80 68       	ori	r24, 0x80	; 128
    765c:	91 1d       	adc	r25, r1
    765e:	df 93       	push	r29
    7660:	cf 93       	push	r28
    7662:	1f 93       	push	r17
    7664:	0f 93       	push	r16
    7666:	ff 92       	push	r15
    7668:	ef 92       	push	r14
    766a:	19 2f       	mov	r17, r25
    766c:	98 7f       	andi	r25, 0xF8	; 248
    766e:	96 95       	lsr	r25
    7670:	e9 2f       	mov	r30, r25
    7672:	96 95       	lsr	r25
    7674:	96 95       	lsr	r25
    7676:	e9 0f       	add	r30, r25
    7678:	ff 27       	eor	r31, r31
    767a:	e6 56       	subi	r30, 0x66	; 102
    767c:	fd 4f       	sbci	r31, 0xFD	; 253
    767e:	99 27       	eor	r25, r25
    7680:	33 27       	eor	r19, r19
    7682:	ee 24       	eor	r14, r14
    7684:	ff 24       	eor	r15, r15
    7686:	a7 01       	movw	r20, r14
    7688:	e7 01       	movw	r28, r14
    768a:	05 90       	lpm	r0, Z+
    768c:	08 94       	sec
    768e:	07 94       	ror	r0
    7690:	28 f4       	brcc	.+10     	; 0x769c <__ftoa_engine+0x80>
    7692:	36 0f       	add	r19, r22
    7694:	e7 1e       	adc	r14, r23
    7696:	f8 1e       	adc	r15, r24
    7698:	49 1f       	adc	r20, r25
    769a:	51 1d       	adc	r21, r1
    769c:	66 0f       	add	r22, r22
    769e:	77 1f       	adc	r23, r23
    76a0:	88 1f       	adc	r24, r24
    76a2:	99 1f       	adc	r25, r25
    76a4:	06 94       	lsr	r0
    76a6:	a1 f7       	brne	.-24     	; 0x7690 <__ftoa_engine+0x74>
    76a8:	05 90       	lpm	r0, Z+
    76aa:	07 94       	ror	r0
    76ac:	28 f4       	brcc	.+10     	; 0x76b8 <__ftoa_engine+0x9c>
    76ae:	e7 0e       	add	r14, r23
    76b0:	f8 1e       	adc	r15, r24
    76b2:	49 1f       	adc	r20, r25
    76b4:	56 1f       	adc	r21, r22
    76b6:	c1 1d       	adc	r28, r1
    76b8:	77 0f       	add	r23, r23
    76ba:	88 1f       	adc	r24, r24
    76bc:	99 1f       	adc	r25, r25
    76be:	66 1f       	adc	r22, r22
    76c0:	06 94       	lsr	r0
    76c2:	a1 f7       	brne	.-24     	; 0x76ac <__ftoa_engine+0x90>
    76c4:	05 90       	lpm	r0, Z+
    76c6:	07 94       	ror	r0
    76c8:	28 f4       	brcc	.+10     	; 0x76d4 <__ftoa_engine+0xb8>
    76ca:	f8 0e       	add	r15, r24
    76cc:	49 1f       	adc	r20, r25
    76ce:	56 1f       	adc	r21, r22
    76d0:	c7 1f       	adc	r28, r23
    76d2:	d1 1d       	adc	r29, r1
    76d4:	88 0f       	add	r24, r24
    76d6:	99 1f       	adc	r25, r25
    76d8:	66 1f       	adc	r22, r22
    76da:	77 1f       	adc	r23, r23
    76dc:	06 94       	lsr	r0
    76de:	a1 f7       	brne	.-24     	; 0x76c8 <__ftoa_engine+0xac>
    76e0:	05 90       	lpm	r0, Z+
    76e2:	07 94       	ror	r0
    76e4:	20 f4       	brcc	.+8      	; 0x76ee <__ftoa_engine+0xd2>
    76e6:	49 0f       	add	r20, r25
    76e8:	56 1f       	adc	r21, r22
    76ea:	c7 1f       	adc	r28, r23
    76ec:	d8 1f       	adc	r29, r24
    76ee:	99 0f       	add	r25, r25
    76f0:	66 1f       	adc	r22, r22
    76f2:	77 1f       	adc	r23, r23
    76f4:	88 1f       	adc	r24, r24
    76f6:	06 94       	lsr	r0
    76f8:	a9 f7       	brne	.-22     	; 0x76e4 <__ftoa_engine+0xc8>
    76fa:	84 91       	lpm	r24, Z+
    76fc:	10 95       	com	r17
    76fe:	17 70       	andi	r17, 0x07	; 7
    7700:	41 f0       	breq	.+16     	; 0x7712 <__ftoa_engine+0xf6>
    7702:	d6 95       	lsr	r29
    7704:	c7 95       	ror	r28
    7706:	57 95       	ror	r21
    7708:	47 95       	ror	r20
    770a:	f7 94       	ror	r15
    770c:	e7 94       	ror	r14
    770e:	1a 95       	dec	r17
    7710:	c1 f7       	brne	.-16     	; 0x7702 <__ftoa_engine+0xe6>
    7712:	e0 e4       	ldi	r30, 0x40	; 64
    7714:	f2 e0       	ldi	r31, 0x02	; 2
    7716:	68 94       	set
    7718:	15 90       	lpm	r1, Z+
    771a:	15 91       	lpm	r17, Z+
    771c:	35 91       	lpm	r19, Z+
    771e:	65 91       	lpm	r22, Z+
    7720:	95 91       	lpm	r25, Z+
    7722:	05 90       	lpm	r0, Z+
    7724:	7f e2       	ldi	r23, 0x2F	; 47
    7726:	73 95       	inc	r23
    7728:	e1 18       	sub	r14, r1
    772a:	f1 0a       	sbc	r15, r17
    772c:	43 0b       	sbc	r20, r19
    772e:	56 0b       	sbc	r21, r22
    7730:	c9 0b       	sbc	r28, r25
    7732:	d0 09       	sbc	r29, r0
    7734:	c0 f7       	brcc	.-16     	; 0x7726 <__ftoa_engine+0x10a>
    7736:	e1 0c       	add	r14, r1
    7738:	f1 1e       	adc	r15, r17
    773a:	43 1f       	adc	r20, r19
    773c:	56 1f       	adc	r21, r22
    773e:	c9 1f       	adc	r28, r25
    7740:	d0 1d       	adc	r29, r0
    7742:	7e f4       	brtc	.+30     	; 0x7762 <__ftoa_engine+0x146>
    7744:	70 33       	cpi	r23, 0x30	; 48
    7746:	11 f4       	brne	.+4      	; 0x774c <__ftoa_engine+0x130>
    7748:	8a 95       	dec	r24
    774a:	e6 cf       	rjmp	.-52     	; 0x7718 <__ftoa_engine+0xfc>
    774c:	e8 94       	clt
    774e:	01 50       	subi	r16, 0x01	; 1
    7750:	30 f0       	brcs	.+12     	; 0x775e <__ftoa_engine+0x142>
    7752:	08 0f       	add	r16, r24
    7754:	0a f4       	brpl	.+2      	; 0x7758 <__ftoa_engine+0x13c>
    7756:	00 27       	eor	r16, r16
    7758:	02 17       	cp	r16, r18
    775a:	08 f4       	brcc	.+2      	; 0x775e <__ftoa_engine+0x142>
    775c:	20 2f       	mov	r18, r16
    775e:	23 95       	inc	r18
    7760:	02 2f       	mov	r16, r18
    7762:	7a 33       	cpi	r23, 0x3A	; 58
    7764:	28 f0       	brcs	.+10     	; 0x7770 <__ftoa_engine+0x154>
    7766:	79 e3       	ldi	r23, 0x39	; 57
    7768:	7d 93       	st	X+, r23
    776a:	2a 95       	dec	r18
    776c:	e9 f7       	brne	.-6      	; 0x7768 <__ftoa_engine+0x14c>
    776e:	10 c0       	rjmp	.+32     	; 0x7790 <__ftoa_engine+0x174>
    7770:	7d 93       	st	X+, r23
    7772:	2a 95       	dec	r18
    7774:	89 f6       	brne	.-94     	; 0x7718 <__ftoa_engine+0xfc>
    7776:	06 94       	lsr	r0
    7778:	97 95       	ror	r25
    777a:	67 95       	ror	r22
    777c:	37 95       	ror	r19
    777e:	17 95       	ror	r17
    7780:	17 94       	ror	r1
    7782:	e1 18       	sub	r14, r1
    7784:	f1 0a       	sbc	r15, r17
    7786:	43 0b       	sbc	r20, r19
    7788:	56 0b       	sbc	r21, r22
    778a:	c9 0b       	sbc	r28, r25
    778c:	d0 09       	sbc	r29, r0
    778e:	98 f0       	brcs	.+38     	; 0x77b6 <__ftoa_engine+0x19a>
    7790:	23 95       	inc	r18
    7792:	7e 91       	ld	r23, -X
    7794:	73 95       	inc	r23
    7796:	7a 33       	cpi	r23, 0x3A	; 58
    7798:	08 f0       	brcs	.+2      	; 0x779c <__ftoa_engine+0x180>
    779a:	70 e3       	ldi	r23, 0x30	; 48
    779c:	7c 93       	st	X, r23
    779e:	20 13       	cpse	r18, r16
    77a0:	b8 f7       	brcc	.-18     	; 0x7790 <__ftoa_engine+0x174>
    77a2:	7e 91       	ld	r23, -X
    77a4:	70 61       	ori	r23, 0x10	; 16
    77a6:	7d 93       	st	X+, r23
    77a8:	30 f0       	brcs	.+12     	; 0x77b6 <__ftoa_engine+0x19a>
    77aa:	83 95       	inc	r24
    77ac:	71 e3       	ldi	r23, 0x31	; 49
    77ae:	7d 93       	st	X+, r23
    77b0:	70 e3       	ldi	r23, 0x30	; 48
    77b2:	2a 95       	dec	r18
    77b4:	e1 f7       	brne	.-8      	; 0x77ae <__ftoa_engine+0x192>
    77b6:	11 24       	eor	r1, r1
    77b8:	ef 90       	pop	r14
    77ba:	ff 90       	pop	r15
    77bc:	0f 91       	pop	r16
    77be:	1f 91       	pop	r17
    77c0:	cf 91       	pop	r28
    77c2:	df 91       	pop	r29
    77c4:	99 27       	eor	r25, r25
    77c6:	87 fd       	sbrc	r24, 7
    77c8:	90 95       	com	r25
    77ca:	08 95       	ret

000077cc <__ctype_isfalse>:
    77cc:	99 27       	eor	r25, r25
    77ce:	88 27       	eor	r24, r24

000077d0 <__ctype_istrue>:
    77d0:	08 95       	ret

000077d2 <strncasecmp_P>:
    77d2:	fb 01       	movw	r30, r22
    77d4:	dc 01       	movw	r26, r24
    77d6:	41 50       	subi	r20, 0x01	; 1
    77d8:	50 40       	sbci	r21, 0x00	; 0
    77da:	88 f0       	brcs	.+34     	; 0x77fe <strncasecmp_P+0x2c>
    77dc:	8d 91       	ld	r24, X+
    77de:	81 34       	cpi	r24, 0x41	; 65
    77e0:	1c f0       	brlt	.+6      	; 0x77e8 <strncasecmp_P+0x16>
    77e2:	8b 35       	cpi	r24, 0x5B	; 91
    77e4:	0c f4       	brge	.+2      	; 0x77e8 <strncasecmp_P+0x16>
    77e6:	80 5e       	subi	r24, 0xE0	; 224
    77e8:	65 91       	lpm	r22, Z+
    77ea:	61 34       	cpi	r22, 0x41	; 65
    77ec:	1c f0       	brlt	.+6      	; 0x77f4 <strncasecmp_P+0x22>
    77ee:	6b 35       	cpi	r22, 0x5B	; 91
    77f0:	0c f4       	brge	.+2      	; 0x77f4 <strncasecmp_P+0x22>
    77f2:	60 5e       	subi	r22, 0xE0	; 224
    77f4:	86 1b       	sub	r24, r22
    77f6:	61 11       	cpse	r22, r1
    77f8:	71 f3       	breq	.-36     	; 0x77d6 <strncasecmp_P+0x4>
    77fa:	99 0b       	sbc	r25, r25
    77fc:	08 95       	ret
    77fe:	88 1b       	sub	r24, r24
    7800:	fc cf       	rjmp	.-8      	; 0x77fa <strncasecmp_P+0x28>

00007802 <strrev>:
    7802:	dc 01       	movw	r26, r24
    7804:	fc 01       	movw	r30, r24
    7806:	67 2f       	mov	r22, r23
    7808:	71 91       	ld	r23, Z+
    780a:	77 23       	and	r23, r23
    780c:	e1 f7       	brne	.-8      	; 0x7806 <strrev+0x4>
    780e:	32 97       	sbiw	r30, 0x02	; 2
    7810:	04 c0       	rjmp	.+8      	; 0x781a <strrev+0x18>
    7812:	7c 91       	ld	r23, X
    7814:	6d 93       	st	X+, r22
    7816:	70 83       	st	Z, r23
    7818:	62 91       	ld	r22, -Z
    781a:	ae 17       	cp	r26, r30
    781c:	bf 07       	cpc	r27, r31
    781e:	c8 f3       	brcs	.-14     	; 0x7812 <strrev+0x10>
    7820:	08 95       	ret

00007822 <_exit>:
    7822:	f8 94       	cli

00007824 <__stop_program>:
    7824:	ff cf       	rjmp	.-2      	; 0x7824 <__stop_program>
