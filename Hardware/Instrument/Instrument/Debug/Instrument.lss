
Instrument.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800200  0000be66  0000befa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000be66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a6  0080033c  0080033c  0000c036  2**0
                  ALLOC
  3 .stab         000045cc  00000000  00000000  0000c038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001185  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000540  00000000  00000000  00011790  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023f92  00000000  00000000  00011cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005056  00000000  00000000  00035c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b0e  00000000  00000000  0003acb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000038ac  00000000  00000000  000407c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000586c  00000000  00000000  00044074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012fca  00000000  00000000  000498e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0005c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 01 	jmp	0x358	; 0x358 <__dtors_end>
       4:	0c 94 27 13 	jmp	0x264e	; 0x264e <__vector_1>
       8:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_2>
       c:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_3>
      10:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__vector_4>
      14:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__vector_5>
      18:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_6>
      1c:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_7>
      20:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__vector_8>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 15 12 	jmp	0x242a	; 0x242a <__vector_13>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 57 47 	jmp	0x8eae	; 0x8eae <__vector_16>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 09 48 	jmp	0x9012	; 0x9012 <__vector_20>
      54:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      58:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      5c:	0c 94 af 14 	jmp	0x295e	; 0x295e <__vector_23>
      60:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      64:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      68:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_26>
      6c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      70:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      74:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      78:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      7c:	0c 94 57 47 	jmp	0x8eae	; 0x8eae <__vector_16>
      80:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      84:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      88:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      8c:	0c 94 09 48 	jmp	0x9012	; 0x9012 <__vector_20>
      90:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_36>
      94:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_37>
      98:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      9c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      a0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      a4:	0c 94 57 47 	jmp	0x8eae	; 0x8eae <__vector_16>
      a8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      ac:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      b0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      b4:	0c 94 09 48 	jmp	0x9012	; 0x9012 <__vector_20>
      b8:	0c 94 57 47 	jmp	0x8eae	; 0x8eae <__vector_16>
      bc:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      c0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      c4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      c8:	0c 94 09 48 	jmp	0x9012	; 0x9012 <__vector_20>
      cc:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_51>
      d0:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_52>
      d4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      d8:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_54>
      dc:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_55>
      e0:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

000000e4 <_ZL21tone_pin_to_timer_PGM>:
      e4:	02                                                  .

000000e5 <digital_pin_to_timer_PGM>:
      e5:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     111:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000012b <digital_pin_to_bit_mask_PGM>:
     12b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     13b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     14b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     15b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     16b:	04 08 10 20 40 80                                   ... @.

00000171 <digital_pin_to_port_PGM>:
     171:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     181:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     191:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1a1:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1b1:	0b 0b 0b 0b 0b 0b                                   ......

000001b7 <port_to_input_PGM>:
     1b7:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1c7:	00 01 00 00 03 01 06 01 09 01                       ..........

000001d1 <port_to_output_PGM>:
     1d1:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1e1:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001eb <port_to_mode_PGM>:
     1eb:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     1fb:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000205 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     205:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000215 <pstr_inf>:
     215:	49 4e 46                                            INF

00000218 <pstr_inity>:
     218:	49 4e 49 54 59                                      INITY

0000021d <pstr_nan>:
     21d:	4e 41 4e                                            NAN

00000220 <pwr_p10>:
     220:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     230:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000238 <pwr_m10>:
     238:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     248:	95 95 e6 24 1f b1 4f 0a 00 40 7a 10 f3 5a 00 a0     ...$..O..@z..Z..
     258:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     268:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     278:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     288:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     298:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2a8:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2b8:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2c8:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2d8:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2e8:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2f8:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     308:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     318:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     328:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     338:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     348:	3d 27                                               ='

0000034a <__ctors_start>:
     34a:	ae 06       	cpc	r10, r30
     34c:	2a 08       	sbc	r2, r10
     34e:	d6 2a       	or	r13, r22
     350:	9e 30       	cpi	r25, 0x0E	; 14
     352:	66 51       	subi	r22, 0x16	; 22
     354:	22 54       	subi	r18, 0x42	; 66

00000356 <__ctors_end>:
     356:	29 54       	subi	r18, 0x49	; 73

00000358 <__dtors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	d1 e2       	ldi	r29, 0x21	; 33
     360:	de bf       	out	0x3e, r29	; 62
     362:	cd bf       	out	0x3d, r28	; 61
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60

00000368 <__do_copy_data>:
     368:	13 e0       	ldi	r17, 0x03	; 3
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b2 e0       	ldi	r27, 0x02	; 2
     36e:	e6 e6       	ldi	r30, 0x66	; 102
     370:	fe eb       	ldi	r31, 0xBE	; 190
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0b bf       	out	0x3b, r16	; 59
     376:	02 c0       	rjmp	.+4      	; 0x37c <__do_copy_data+0x14>
     378:	07 90       	elpm	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	ac 33       	cpi	r26, 0x3C	; 60
     37e:	b1 07       	cpc	r27, r17
     380:	d9 f7       	brne	.-10     	; 0x378 <__do_copy_data+0x10>
     382:	1b be       	out	0x3b, r1	; 59

00000384 <__do_clear_bss>:
     384:	1a e0       	ldi	r17, 0x0A	; 10
     386:	ac e3       	ldi	r26, 0x3C	; 60
     388:	b3 e0       	ldi	r27, 0x03	; 3
     38a:	01 c0       	rjmp	.+2      	; 0x38e <.do_clear_bss_start>

0000038c <.do_clear_bss_loop>:
     38c:	1d 92       	st	X+, r1

0000038e <.do_clear_bss_start>:
     38e:	a2 3e       	cpi	r26, 0xE2	; 226
     390:	b1 07       	cpc	r27, r17
     392:	e1 f7       	brne	.-8      	; 0x38c <.do_clear_bss_loop>

00000394 <__do_global_ctors>:
     394:	13 e0       	ldi	r17, 0x03	; 3
     396:	c6 e5       	ldi	r28, 0x56	; 86
     398:	d3 e0       	ldi	r29, 0x03	; 3
     39a:	00 e0       	ldi	r16, 0x00	; 0
     39c:	06 c0       	rjmp	.+12     	; 0x3aa <__do_global_ctors+0x16>
     39e:	22 97       	sbiw	r28, 0x02	; 2
     3a0:	01 09       	sbc	r16, r1
     3a2:	fe 01       	movw	r30, r28
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	0e 94 19 59 	call	0xb232	; 0xb232 <__tablejump_elpm__>
     3aa:	ca 34       	cpi	r28, 0x4A	; 74
     3ac:	d1 07       	cpc	r29, r17
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 07       	cpc	r16, r24
     3b2:	a9 f7       	brne	.-22     	; 0x39e <__do_global_ctors+0xa>
     3b4:	1b be       	out	0x3b, r1	; 59
     3b6:	0e 94 39 08 	call	0x1072	; 0x1072 <main>
     3ba:	0c 94 20 5f 	jmp	0xbe40	; 0xbe40 <__do_global_dtors>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     3c2:	fc 01       	movw	r30, r24
     3c4:	24 85       	ldd	r18, Z+12	; 0x0c
     3c6:	35 85       	ldd	r19, Z+13	; 0x0d
     3c8:	f9 01       	movw	r30, r18
     3ca:	e0 5c       	subi	r30, 0xC0	; 192
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	2e 5b       	subi	r18, 0xBE	; 190
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	31 81       	ldd	r19, Z+1	; 0x01
     3dc:	80 5c       	subi	r24, 0xC0	; 192
     3de:	9f 4f       	sbci	r25, 0xFF	; 255
     3e0:	82 1b       	sub	r24, r18
     3e2:	93 0b       	sbc	r25, r19
     3e4:	60 e4       	ldi	r22, 0x40	; 64
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	0e 94 b5 58 	call	0xb16a	; 0xb16a <__divmodhi4>
}
     3ec:	08 95       	ret

000003ee <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     3ee:	fc 01       	movw	r30, r24
     3f0:	84 85       	ldd	r24, Z+12	; 0x0c
     3f2:	95 85       	ldd	r25, Z+13	; 0x0d
     3f4:	fc 01       	movw	r30, r24
     3f6:	e0 5c       	subi	r30, 0xC0	; 192
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	20 81       	ld	r18, Z
     3fc:	31 81       	ldd	r19, Z+1	; 0x01
     3fe:	fc 01       	movw	r30, r24
     400:	ee 5b       	subi	r30, 0xBE	; 190
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	40 81       	ld	r20, Z
     406:	51 81       	ldd	r21, Z+1	; 0x01
     408:	24 17       	cp	r18, r20
     40a:	35 07       	cpc	r19, r21
     40c:	59 f0       	breq	.+22     	; 0x424 <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     40e:	fc 01       	movw	r30, r24
     410:	ee 5b       	subi	r30, 0xBE	; 190
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     428:	08 95       	ret

0000042a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     42a:	dc 01       	movw	r26, r24
     42c:	1c 96       	adiw	r26, 0x0c	; 12
     42e:	8d 91       	ld	r24, X+
     430:	9c 91       	ld	r25, X
     432:	1d 97       	sbiw	r26, 0x0d	; 13
     434:	fc 01       	movw	r30, r24
     436:	e0 5c       	subi	r30, 0xC0	; 192
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	20 81       	ld	r18, Z
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	fc 01       	movw	r30, r24
     440:	ee 5b       	subi	r30, 0xBE	; 190
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	40 81       	ld	r20, Z
     446:	51 81       	ldd	r21, Z+1	; 0x01
     448:	24 17       	cp	r18, r20
     44a:	35 07       	cpc	r19, r21
     44c:	99 f0       	breq	.+38     	; 0x474 <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     44e:	fc 01       	movw	r30, r24
     450:	ee 5b       	subi	r30, 0xBE	; 190
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	dc 01       	movw	r26, r24
     45e:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     460:	20 81       	ld	r18, Z
     462:	31 81       	ldd	r19, Z+1	; 0x01
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	2f 73       	andi	r18, 0x3F	; 63
     46a:	30 70       	andi	r19, 0x00	; 0
     46c:	31 83       	std	Z+1, r19	; 0x01
     46e:	20 83       	st	Z, r18
    return c;
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     478:	08 95       	ret

0000047a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     47a:	fc 01       	movw	r30, r24
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     47c:	81 a1       	lds	r24, 0x41
     47e:	88 23       	and	r24, r24
     480:	29 f0       	breq	.+10     	; 0x48c <_ZN14HardwareSerial5flushEv+0x12>
     482:	a4 89       	ldd	r26, Z+20	; 0x14
     484:	b5 89       	ldd	r27, Z+21	; 0x15
     486:	8c 91       	ld	r24, X
     488:	86 ff       	sbrs	r24, 6
     48a:	fb cf       	rjmp	.-10     	; 0x482 <_ZN14HardwareSerial5flushEv+0x8>
  transmitting = false;
     48c:	11 a2       	lds	r17, 0x91
}
     48e:	08 95       	ret

00000490 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     490:	dc 01       	movw	r26, r24
  unsigned int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     492:	1e 96       	adiw	r26, 0x0e	; 14
     494:	4d 91       	ld	r20, X+
     496:	5c 91       	ld	r21, X
     498:	1f 97       	sbiw	r26, 0x0f	; 15
     49a:	fa 01       	movw	r30, r20
     49c:	e0 5c       	subi	r30, 0xC0	; 192
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	20 81       	ld	r18, Z
     4a2:	31 81       	ldd	r19, Z+1	; 0x01
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	2f 73       	andi	r18, 0x3F	; 63
     4aa:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     4ac:	fa 01       	movw	r30, r20
     4ae:	ee 5b       	subi	r30, 0xBE	; 190
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	28 17       	cp	r18, r24
     4b8:	39 07       	cpc	r19, r25
     4ba:	d9 f3       	breq	.-10     	; 0x4b2 <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     4bc:	fa 01       	movw	r30, r20
     4be:	e0 5c       	subi	r30, 0xC0	; 192
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	84 0f       	add	r24, r20
     4c8:	95 1f       	adc	r25, r21
     4ca:	fc 01       	movw	r30, r24
     4cc:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     4ce:	1e 96       	adiw	r26, 0x0e	; 14
     4d0:	ed 91       	ld	r30, X+
     4d2:	fc 91       	ld	r31, X
     4d4:	1f 97       	sbiw	r26, 0x0f	; 15
     4d6:	e0 5c       	subi	r30, 0xC0	; 192
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	31 83       	std	Z+1, r19	; 0x01
     4dc:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     4de:	56 96       	adiw	r26, 0x16	; 22
     4e0:	ed 91       	ld	r30, X+
     4e2:	fc 91       	ld	r31, X
     4e4:	57 97       	sbiw	r26, 0x17	; 23
     4e6:	40 81       	ld	r20, Z
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	c9 01       	movw	r24, r18
     4ee:	5f 96       	adiw	r26, 0x1f	; 31
     4f0:	0c 90       	ld	r0, X
     4f2:	5f 97       	sbiw	r26, 0x1f	; 31
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <_ZN14HardwareSerial5writeEh+0x6a>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	0a 94       	dec	r0
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <_ZN14HardwareSerial5writeEh+0x66>
     4fe:	84 2b       	or	r24, r20
     500:	80 83       	st	Z, r24
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	91 96       	adiw	r26, 0x21	; 33
     506:	8c 93       	st	X, r24
     508:	91 97       	sbiw	r26, 0x21	; 33
  sbi(*_ucsra, TXC0);
     50a:	54 96       	adiw	r26, 0x14	; 20
     50c:	ed 91       	ld	r30, X+
     50e:	fc 91       	ld	r31, X
     510:	55 97       	sbiw	r26, 0x15	; 21
     512:	80 81       	ld	r24, Z
     514:	80 64       	ori	r24, 0x40	; 64
     516:	80 83       	st	Z, r24
  
  return 1;
}
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	08 95       	ret

0000051e <_Z12serialEvent1v>:
// #endif
// #endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
     51e:	08 95       	ret

00000520 <__vector_36>:
  #define serialEvent1_implemented
  ISR(USART1_RX_vect)
  {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
    if (bit_is_clear(UCSR1A, UPE1)) {
     53c:	80 91 c8 00 	lds	r24, 0x00C8
     540:	82 fd       	sbrc	r24, 2
     542:	1c c0       	rjmp	.+56     	; 0x57c <__vector_36+0x5c>
      unsigned char c = UDR1;
     544:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     548:	80 91 58 05 	lds	r24, 0x0558
     54c:	90 91 59 05 	lds	r25, 0x0559
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	8f 73       	andi	r24, 0x3F	; 63
     554:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     556:	20 91 5a 05 	lds	r18, 0x055A
     55a:	30 91 5b 05 	lds	r19, 0x055B
     55e:	82 17       	cp	r24, r18
     560:	93 07       	cpc	r25, r19
     562:	71 f0       	breq	.+28     	; 0x580 <__vector_36+0x60>
    buffer->buffer[buffer->head] = c;
     564:	e0 91 58 05 	lds	r30, 0x0558
     568:	f0 91 59 05 	lds	r31, 0x0559
     56c:	e8 5e       	subi	r30, 0xE8	; 232
     56e:	fa 4f       	sbci	r31, 0xFA	; 250
     570:	40 83       	st	Z, r20
    buffer->head = i;
     572:	90 93 59 05 	sts	0x0559, r25
     576:	80 93 58 05 	sts	0x0558, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__vector_36+0x60>
  {
    if (bit_is_clear(UCSR1A, UPE1)) {
      unsigned char c = UDR1;
      store_char(c, &rx_buffer1);
    } else {
      unsigned char c = UDR1;
     57c:	80 91 ce 00 	lds	r24, 0x00CE
    };
  }
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	0b be       	out	0x3b, r0	; 59
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <_Z12serialEvent2v>:
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
     59c:	08 95       	ret

0000059e <__vector_51>:
  #define serialEvent2_implemented
  ISR(USART2_RX_vect)
  {
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
    if (bit_is_clear(UCSR2A, UPE2)) {
     5ba:	80 91 d0 00 	lds	r24, 0x00D0
     5be:	82 fd       	sbrc	r24, 2
     5c0:	1c c0       	rjmp	.+56     	; 0x5fa <__vector_51+0x5c>
      unsigned char c = UDR2;
     5c2:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     5c6:	80 91 d0 04 	lds	r24, 0x04D0
     5ca:	90 91 d1 04 	lds	r25, 0x04D1
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	8f 73       	andi	r24, 0x3F	; 63
     5d2:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     5d4:	20 91 d2 04 	lds	r18, 0x04D2
     5d8:	30 91 d3 04 	lds	r19, 0x04D3
     5dc:	82 17       	cp	r24, r18
     5de:	93 07       	cpc	r25, r19
     5e0:	71 f0       	breq	.+28     	; 0x5fe <__vector_51+0x60>
    buffer->buffer[buffer->head] = c;
     5e2:	e0 91 d0 04 	lds	r30, 0x04D0
     5e6:	f0 91 d1 04 	lds	r31, 0x04D1
     5ea:	e0 57       	subi	r30, 0x70	; 112
     5ec:	fb 4f       	sbci	r31, 0xFB	; 251
     5ee:	40 83       	st	Z, r20
    buffer->head = i;
     5f0:	90 93 d1 04 	sts	0x04D1, r25
     5f4:	80 93 d0 04 	sts	0x04D0, r24
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <__vector_51+0x60>
  {
    if (bit_is_clear(UCSR2A, UPE2)) {
      unsigned char c = UDR2;
      store_char(c, &rx_buffer2);
    } else {
      unsigned char c = UDR2;
     5fa:	80 91 d6 00 	lds	r24, 0x00D6
    };
  }
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	0f 90       	pop	r0
     60e:	0b be       	out	0x3b, r0	; 59
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <_Z12serialEvent3v>:
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
     61a:	08 95       	ret

0000061c <__vector_54>:
  #define serialEvent3_implemented
  ISR(USART3_RX_vect)
  {
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	0b b6       	in	r0, 0x3b	; 59
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	2f 93       	push	r18
     62c:	3f 93       	push	r19
     62e:	4f 93       	push	r20
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
    if (bit_is_clear(UCSR3A, UPE3)) {
     638:	80 91 30 01 	lds	r24, 0x0130
     63c:	82 fd       	sbrc	r24, 2
     63e:	1c c0       	rjmp	.+56     	; 0x678 <__vector_54+0x5c>
      unsigned char c = UDR3;
     640:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  unsigned int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     644:	80 91 48 04 	lds	r24, 0x0448
     648:	90 91 49 04 	lds	r25, 0x0449
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	8f 73       	andi	r24, 0x3F	; 63
     650:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     652:	20 91 4a 04 	lds	r18, 0x044A
     656:	30 91 4b 04 	lds	r19, 0x044B
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	71 f0       	breq	.+28     	; 0x67c <__vector_54+0x60>
    buffer->buffer[buffer->head] = c;
     660:	e0 91 48 04 	lds	r30, 0x0448
     664:	f0 91 49 04 	lds	r31, 0x0449
     668:	e8 5f       	subi	r30, 0xF8	; 248
     66a:	fb 4f       	sbci	r31, 0xFB	; 251
     66c:	40 83       	st	Z, r20
    buffer->head = i;
     66e:	90 93 49 04 	sts	0x0449, r25
     672:	80 93 48 04 	sts	0x0448, r24
     676:	02 c0       	rjmp	.+4      	; 0x67c <__vector_54+0x60>
  {
    if (bit_is_clear(UCSR3A, UPE3)) {
      unsigned char c = UDR3;
      store_char(c, &rx_buffer3);
    } else {
      unsigned char c = UDR3;
     678:	80 91 36 01 	lds	r24, 0x0136
    };
  }
     67c:	ff 91       	pop	r31
     67e:	ef 91       	pop	r30
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <_Z14serialEventRunv>:
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN14HardwareSerial9availableEv>
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <_Z14serialEventRunv+0x10>
     6a4:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
     6a8:	8e e5       	ldi	r24, 0x5E	; 94
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN14HardwareSerial9availableEv>
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <_Z14serialEventRunv+0x20>
     6b4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
     6b8:	8c e3       	ldi	r24, 0x3C	; 60
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN14HardwareSerial9availableEv>
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <_Z14serialEventRunv+0x30>
     6c4:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z12serialEvent3v>
     6c8:	08 95       	ret

000006ca <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	0b b6       	in	r0, 0x3b	; 59
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	2f 93       	push	r18
     6da:	3f 93       	push	r19
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     6e4:	20 91 9c 05 	lds	r18, 0x059C
     6e8:	30 91 9d 05 	lds	r19, 0x059D
     6ec:	80 91 9e 05 	lds	r24, 0x059E
     6f0:	90 91 9f 05 	lds	r25, 0x059F
     6f4:	28 17       	cp	r18, r24
     6f6:	39 07       	cpc	r19, r25
     6f8:	31 f4       	brne	.+12     	; 0x706 <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     6fa:	e1 ec       	ldi	r30, 0xC1	; 193
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	8f 7d       	andi	r24, 0xDF	; 223
     702:	80 83       	st	Z, r24
     704:	14 c0       	rjmp	.+40     	; 0x72e <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     706:	e0 91 9e 05 	lds	r30, 0x059E
     70a:	f0 91 9f 05 	lds	r31, 0x059F
     70e:	e4 5a       	subi	r30, 0xA4	; 164
     710:	fa 4f       	sbci	r31, 0xFA	; 250
     712:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     714:	80 91 9e 05 	lds	r24, 0x059E
     718:	90 91 9f 05 	lds	r25, 0x059F
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	8f 73       	andi	r24, 0x3F	; 63
     720:	90 70       	andi	r25, 0x00	; 0
     722:	90 93 9f 05 	sts	0x059F, r25
     726:	80 93 9e 05 	sts	0x059E, r24
	
  #if defined(UDR0)
    UDR0 = c;
     72a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     72e:	ff 91       	pop	r31
     730:	ef 91       	pop	r30
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0b be       	out	0x3b, r0	; 59
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	0b b6       	in	r0, 0x3b	; 59
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	2f 93       	push	r18
     758:	3f 93       	push	r19
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
     762:	20 91 14 05 	lds	r18, 0x0514
     766:	30 91 15 05 	lds	r19, 0x0515
     76a:	80 91 16 05 	lds	r24, 0x0516
     76e:	90 91 17 05 	lds	r25, 0x0517
     772:	28 17       	cp	r18, r24
     774:	39 07       	cpc	r19, r25
     776:	31 f4       	brne	.+12     	; 0x784 <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
     778:	e9 ec       	ldi	r30, 0xC9	; 201
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8f 7d       	andi	r24, 0xDF	; 223
     780:	80 83       	st	Z, r24
     782:	14 c0       	rjmp	.+40     	; 0x7ac <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
     784:	e0 91 16 05 	lds	r30, 0x0516
     788:	f0 91 17 05 	lds	r31, 0x0517
     78c:	ec 52       	subi	r30, 0x2C	; 44
     78e:	fb 4f       	sbci	r31, 0xFB	; 251
     790:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
     792:	80 91 16 05 	lds	r24, 0x0516
     796:	90 91 17 05 	lds	r25, 0x0517
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	8f 73       	andi	r24, 0x3F	; 63
     79e:	90 70       	andi	r25, 0x00	; 0
     7a0:	90 93 17 05 	sts	0x0517, r25
     7a4:	80 93 16 05 	sts	0x0516, r24
	
    UDR1 = c;
     7a8:	20 93 ce 00 	sts	0x00CE, r18
  }
}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0b be       	out	0x3b, r0	; 59
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
     7e0:	20 91 8c 04 	lds	r18, 0x048C
     7e4:	30 91 8d 04 	lds	r19, 0x048D
     7e8:	80 91 8e 04 	lds	r24, 0x048E
     7ec:	90 91 8f 04 	lds	r25, 0x048F
     7f0:	28 17       	cp	r18, r24
     7f2:	39 07       	cpc	r19, r25
     7f4:	31 f4       	brne	.+12     	; 0x802 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
     7f6:	e1 ed       	ldi	r30, 0xD1	; 209
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8f 7d       	andi	r24, 0xDF	; 223
     7fe:	80 83       	st	Z, r24
     800:	14 c0       	rjmp	.+40     	; 0x82a <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
     802:	e0 91 8e 04 	lds	r30, 0x048E
     806:	f0 91 8f 04 	lds	r31, 0x048F
     80a:	e4 5b       	subi	r30, 0xB4	; 180
     80c:	fb 4f       	sbci	r31, 0xFB	; 251
     80e:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
     810:	80 91 8e 04 	lds	r24, 0x048E
     814:	90 91 8f 04 	lds	r25, 0x048F
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	8f 73       	andi	r24, 0x3F	; 63
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	90 93 8f 04 	sts	0x048F, r25
     822:	80 93 8e 04 	sts	0x048E, r24
	
    UDR2 = c;
     826:	20 93 d6 00 	sts	0x00D6, r18
  }
}
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0b be       	out	0x3b, r0	; 59
     83a:	0f 90       	pop	r0
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	0f 90       	pop	r0
     840:	1f 90       	pop	r1
     842:	18 95       	reti

00000844 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	0b b6       	in	r0, 0x3b	; 59
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	2f 93       	push	r18
     854:	3f 93       	push	r19
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
     85e:	20 91 04 04 	lds	r18, 0x0404
     862:	30 91 05 04 	lds	r19, 0x0405
     866:	80 91 06 04 	lds	r24, 0x0406
     86a:	90 91 07 04 	lds	r25, 0x0407
     86e:	28 17       	cp	r18, r24
     870:	39 07       	cpc	r19, r25
     872:	31 f4       	brne	.+12     	; 0x880 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
     874:	e1 e3       	ldi	r30, 0x31	; 49
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	80 81       	ld	r24, Z
     87a:	8f 7d       	andi	r24, 0xDF	; 223
     87c:	80 83       	st	Z, r24
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
     880:	e0 91 06 04 	lds	r30, 0x0406
     884:	f0 91 07 04 	lds	r31, 0x0407
     888:	ec 53       	subi	r30, 0x3C	; 60
     88a:	fc 4f       	sbci	r31, 0xFC	; 252
     88c:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
     88e:	80 91 06 04 	lds	r24, 0x0406
     892:	90 91 07 04 	lds	r25, 0x0407
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	8f 73       	andi	r24, 0x3F	; 63
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	90 93 07 04 	sts	0x0407, r25
     8a0:	80 93 06 04 	sts	0x0406, r24
	
    UDR3 = c;
     8a4:	20 93 36 01 	sts	0x0136, r18
  }
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0b be       	out	0x3b, r0	; 59
     8b8:	0f 90       	pop	r0
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	0f 90       	pop	r0
     8be:	1f 90       	pop	r1
     8c0:	18 95       	reti

000008c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     8e0:	13 82       	std	Z+3, r1	; 0x03
     8e2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     8e4:	88 ee       	ldi	r24, 0xE8	; 232
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	84 83       	std	Z+4, r24	; 0x04
     8ee:	95 83       	std	Z+5, r25	; 0x05
     8f0:	a6 83       	std	Z+6, r26	; 0x06
     8f2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
     8fc:	75 87       	std	Z+13, r23	; 0x0d
     8fe:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
     900:	57 87       	std	Z+15, r21	; 0x0f
     902:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
     904:	31 8b       	std	Z+17, r19	; 0x11
     906:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
     908:	13 8b       	std	Z+19, r17	; 0x13
     90a:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
     90c:	f5 8a       	std	Z+21, r15	; 0x15
     90e:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
     910:	d7 8a       	std	Z+23, r13	; 0x17
     912:	c6 8a       	std	Z+22, r12	; 0x16
  _ucsrc = ucsrc;
     914:	b1 8e       	std	Z+25, r11	; 0x19
     916:	a0 8e       	std	Z+24, r10	; 0x18
  _udr = udr;
     918:	93 8e       	std	Z+27, r9	; 0x1b
     91a:	82 8e       	std	Z+26, r8	; 0x1a
  _rxen = rxen;
     91c:	88 89       	ldd	r24, Y+16	; 0x10
     91e:	84 8f       	std	Z+28, r24	; 0x1c
  _txen = txen;
     920:	89 89       	ldd	r24, Y+17	; 0x11
     922:	85 8f       	std	Z+29, r24	; 0x1d
  _rxcie = rxcie;
     924:	8a 89       	ldd	r24, Y+18	; 0x12
     926:	86 8f       	std	Z+30, r24	; 0x1e
  _udrie = udrie;
     928:	8b 89       	ldd	r24, Y+19	; 0x13
     92a:	87 8f       	std	Z+31, r24	; 0x1f
  _u2x = u2x;
     92c:	8c 89       	ldd	r24, Y+20	; 0x14
     92e:	80 a3       	lds	r24, 0x50
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	08 95       	ret

0000094a <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     94a:	2f 92       	push	r2
     94c:	3f 92       	push	r3
     94e:	4f 92       	push	r4
     950:	5f 92       	push	r5
     952:	6f 92       	push	r6
     954:	7f 92       	push	r7
     956:	8f 92       	push	r8
     958:	9f 92       	push	r9
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	8c 01       	movw	r16, r24
     970:	6a 01       	movw	r12, r20
     972:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     974:	c1 e0       	ldi	r28, 0x01	; 1
     976:	40 30       	cpi	r20, 0x00	; 0
     978:	21 ee       	ldi	r18, 0xE1	; 225
     97a:	52 07       	cpc	r21, r18
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	62 07       	cpc	r22, r18
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	72 07       	cpc	r23, r18
     984:	21 f4       	brne	.+8      	; 0x98e <_ZN14HardwareSerial5beginEm+0x44>
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	02 c0       	rjmp	.+4      	; 0x98e <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     98a:	cd 2f       	mov	r28, r29
     98c:	18 c0       	rjmp	.+48     	; 0x9be <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     98e:	22 24       	eor	r2, r2
     990:	33 24       	eor	r3, r3
     992:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     994:	0f 2e       	mov	r0, r31
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	8f 2e       	mov	r8, r31
     99a:	f9 e0       	ldi	r31, 0x09	; 9
     99c:	9f 2e       	mov	r9, r31
     99e:	fd e3       	ldi	r31, 0x3D	; 61
     9a0:	af 2e       	mov	r10, r31
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	bf 2e       	mov	r11, r31
     9a6:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f0 e8       	ldi	r31, 0x80	; 128
     9ac:	4f 2e       	mov	r4, r31
     9ae:	f4 e8       	ldi	r31, 0x84	; 132
     9b0:	5f 2e       	mov	r5, r31
     9b2:	fe e1       	ldi	r31, 0x1E	; 30
     9b4:	6f 2e       	mov	r6, r31
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	7f 2e       	mov	r7, r31
     9ba:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
     9be:	cc 23       	and	r28, r28
     9c0:	f1 f0       	breq	.+60     	; 0x9fe <_ZN14HardwareSerial5beginEm+0xb4>
    *_ucsra = 1 << _u2x;
     9c2:	d8 01       	movw	r26, r16
     9c4:	54 96       	adiw	r26, 0x14	; 20
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	55 97       	sbiw	r26, 0x15	; 21
     9cc:	c1 01       	movw	r24, r2
     9ce:	90 96       	adiw	r26, 0x20	; 32
     9d0:	0c 90       	ld	r0, X
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <_ZN14HardwareSerial5beginEm+0x8e>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <_ZN14HardwareSerial5beginEm+0x8a>
     9dc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9de:	c5 01       	movw	r24, r10
     9e0:	b4 01       	movw	r22, r8
     9e2:	a7 01       	movw	r20, r14
     9e4:	96 01       	movw	r18, r12
     9e6:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
     9ea:	da 01       	movw	r26, r20
     9ec:	c9 01       	movw	r24, r18
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	a1 09       	sbc	r26, r1
     9f2:	b1 09       	sbc	r27, r1
     9f4:	b6 95       	lsr	r27
     9f6:	a7 95       	ror	r26
     9f8:	97 95       	ror	r25
     9fa:	87 95       	ror	r24
     9fc:	15 c0       	rjmp	.+42     	; 0xa28 <_ZN14HardwareSerial5beginEm+0xde>
  } else {
    *_ucsra = 0;
     9fe:	d8 01       	movw	r26, r16
     a00:	54 96       	adiw	r26, 0x14	; 20
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	55 97       	sbiw	r26, 0x15	; 21
     a08:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a0a:	c3 01       	movw	r24, r6
     a0c:	b2 01       	movw	r22, r4
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
     a16:	da 01       	movw	r26, r20
     a18:	c9 01       	movw	r24, r18
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	b6 95       	lsr	r27
     a22:	a7 95       	ror	r26
     a24:	97 95       	ror	r25
     a26:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
     a28:	b0 e1       	ldi	r27, 0x10	; 16
     a2a:	80 30       	cpi	r24, 0x00	; 0
     a2c:	9b 07       	cpc	r25, r27
     a2e:	18 f0       	brcs	.+6      	; 0xa36 <_ZN14HardwareSerial5beginEm+0xec>
     a30:	cc 23       	and	r28, r28
     a32:	09 f0       	breq	.+2      	; 0xa36 <_ZN14HardwareSerial5beginEm+0xec>
     a34:	aa cf       	rjmp	.-172    	; 0x98a <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a36:	d8 01       	movw	r26, r16
     a38:	50 96       	adiw	r26, 0x10	; 16
     a3a:	ed 91       	ld	r30, X+
     a3c:	fc 91       	ld	r31, X
     a3e:	51 97       	sbiw	r26, 0x11	; 17
     a40:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
     a42:	52 96       	adiw	r26, 0x12	; 18
     a44:	ed 91       	ld	r30, X+
     a46:	fc 91       	ld	r31, X
     a48:	53 97       	sbiw	r26, 0x13	; 19
     a4a:	80 83       	st	Z, r24

  transmitting = false;
     a4c:	91 96       	adiw	r26, 0x21	; 33
     a4e:	1c 92       	st	X, r1
     a50:	91 97       	sbiw	r26, 0x21	; 33

  sbi(*_ucsrb, _rxen);
     a52:	56 96       	adiw	r26, 0x16	; 22
     a54:	ed 91       	ld	r30, X+
     a56:	fc 91       	ld	r31, X
     a58:	57 97       	sbiw	r26, 0x17	; 23
     a5a:	40 81       	ld	r20, Z
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	c9 01       	movw	r24, r18
     a62:	5c 96       	adiw	r26, 0x1c	; 28
     a64:	0c 90       	ld	r0, X
     a66:	5c 97       	sbiw	r26, 0x1c	; 28
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <_ZN14HardwareSerial5beginEm+0x124>
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	0a 94       	dec	r0
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <_ZN14HardwareSerial5beginEm+0x120>
     a72:	84 2b       	or	r24, r20
     a74:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
     a76:	56 96       	adiw	r26, 0x16	; 22
     a78:	ed 91       	ld	r30, X+
     a7a:	fc 91       	ld	r31, X
     a7c:	57 97       	sbiw	r26, 0x17	; 23
     a7e:	40 81       	ld	r20, Z
     a80:	c9 01       	movw	r24, r18
     a82:	5d 96       	adiw	r26, 0x1d	; 29
     a84:	0c 90       	ld	r0, X
     a86:	5d 97       	sbiw	r26, 0x1d	; 29
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <_ZN14HardwareSerial5beginEm+0x144>
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	0a 94       	dec	r0
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <_ZN14HardwareSerial5beginEm+0x140>
     a92:	84 2b       	or	r24, r20
     a94:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
     a96:	56 96       	adiw	r26, 0x16	; 22
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	57 97       	sbiw	r26, 0x17	; 23
     a9e:	40 81       	ld	r20, Z
     aa0:	c9 01       	movw	r24, r18
     aa2:	5e 96       	adiw	r26, 0x1e	; 30
     aa4:	0c 90       	ld	r0, X
     aa6:	5e 97       	sbiw	r26, 0x1e	; 30
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <_ZN14HardwareSerial5beginEm+0x164>
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	0a 94       	dec	r0
     ab0:	e2 f7       	brpl	.-8      	; 0xaaa <_ZN14HardwareSerial5beginEm+0x160>
     ab2:	84 2b       	or	r24, r20
     ab4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
     ab6:	56 96       	adiw	r26, 0x16	; 22
     ab8:	ed 91       	ld	r30, X+
     aba:	fc 91       	ld	r31, X
     abc:	57 97       	sbiw	r26, 0x17	; 23
     abe:	80 81       	ld	r24, Z
     ac0:	5f 96       	adiw	r26, 0x1f	; 31
     ac2:	0c 90       	ld	r0, X
     ac4:	5f 97       	sbiw	r26, 0x1f	; 31
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <_ZN14HardwareSerial5beginEm+0x182>
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	0a 94       	dec	r0
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <_ZN14HardwareSerial5beginEm+0x17e>
     ad0:	20 95       	com	r18
     ad2:	28 23       	and	r18, r24
     ad4:	20 83       	st	Z, r18
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <_ZN14HardwareSerial5beginEmh>:

void HardwareSerial::begin(unsigned long baud, byte config)
{
     afc:	3f 92       	push	r3
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	8c 01       	movw	r16, r24
     b20:	6a 01       	movw	r12, r20
     b22:	7b 01       	movw	r14, r22
     b24:	32 2e       	mov	r3, r18
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::begin(unsigned long baud, byte config)
     b26:	c1 e0       	ldi	r28, 0x01	; 1
     b28:	40 30       	cpi	r20, 0x00	; 0
     b2a:	21 ee       	ldi	r18, 0xE1	; 225
     b2c:	52 07       	cpc	r21, r18
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	62 07       	cpc	r22, r18
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	72 07       	cpc	r23, r18
     b36:	21 f4       	brne	.+8      	; 0xb40 <_ZN14HardwareSerial5beginEmh+0x44>
     b38:	c0 e0       	ldi	r28, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <_ZN14HardwareSerial5beginEmh+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     b3c:	cd 2f       	mov	r28, r29
     b3e:	15 c0       	rjmp	.+42     	; 0xb6a <_ZN14HardwareSerial5beginEmh+0x6e>

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b40:	0f 2e       	mov	r0, r31
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	8f 2e       	mov	r8, r31
     b46:	f9 e0       	ldi	r31, 0x09	; 9
     b48:	9f 2e       	mov	r9, r31
     b4a:	fd e3       	ldi	r31, 0x3D	; 61
     b4c:	af 2e       	mov	r10, r31
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	bf 2e       	mov	r11, r31
     b52:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b54:	0f 2e       	mov	r0, r31
     b56:	f0 e8       	ldi	r31, 0x80	; 128
     b58:	4f 2e       	mov	r4, r31
     b5a:	f4 e8       	ldi	r31, 0x84	; 132
     b5c:	5f 2e       	mov	r5, r31
     b5e:	fe e1       	ldi	r31, 0x1E	; 30
     b60:	6f 2e       	mov	r6, r31
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	7f 2e       	mov	r7, r31
     b66:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     b68:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
     b6a:	cc 23       	and	r28, r28
     b6c:	f9 f0       	breq	.+62     	; 0xbac <_ZN14HardwareSerial5beginEmh+0xb0>
    *_ucsra = 1 << _u2x;
     b6e:	d8 01       	movw	r26, r16
     b70:	54 96       	adiw	r26, 0x14	; 20
     b72:	ed 91       	ld	r30, X+
     b74:	fc 91       	ld	r31, X
     b76:	55 97       	sbiw	r26, 0x15	; 21
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	90 96       	adiw	r26, 0x20	; 32
     b7e:	0c 90       	ld	r0, X
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <_ZN14HardwareSerial5beginEmh+0x8a>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	0a 94       	dec	r0
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <_ZN14HardwareSerial5beginEmh+0x86>
     b8a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b8c:	c5 01       	movw	r24, r10
     b8e:	b4 01       	movw	r22, r8
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
     b98:	da 01       	movw	r26, r20
     b9a:	c9 01       	movw	r24, r18
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	b6 95       	lsr	r27
     ba4:	a7 95       	ror	r26
     ba6:	97 95       	ror	r25
     ba8:	87 95       	ror	r24
     baa:	15 c0       	rjmp	.+42     	; 0xbd6 <_ZN14HardwareSerial5beginEmh+0xda>
  } else {
    *_ucsra = 0;
     bac:	d8 01       	movw	r26, r16
     bae:	54 96       	adiw	r26, 0x14	; 20
     bb0:	ed 91       	ld	r30, X+
     bb2:	fc 91       	ld	r31, X
     bb4:	55 97       	sbiw	r26, 0x15	; 21
     bb6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bb8:	c3 01       	movw	r24, r6
     bba:	b2 01       	movw	r22, r4
     bbc:	a7 01       	movw	r20, r14
     bbe:	96 01       	movw	r18, r12
     bc0:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
     bc4:	da 01       	movw	r26, r20
     bc6:	c9 01       	movw	r24, r18
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	a1 09       	sbc	r26, r1
     bcc:	b1 09       	sbc	r27, r1
     bce:	b6 95       	lsr	r27
     bd0:	a7 95       	ror	r26
     bd2:	97 95       	ror	r25
     bd4:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
     bd6:	b0 e1       	ldi	r27, 0x10	; 16
     bd8:	80 30       	cpi	r24, 0x00	; 0
     bda:	9b 07       	cpc	r25, r27
     bdc:	18 f0       	brcs	.+6      	; 0xbe4 <_ZN14HardwareSerial5beginEmh+0xe8>
     bde:	cc 23       	and	r28, r28
     be0:	09 f0       	breq	.+2      	; 0xbe4 <_ZN14HardwareSerial5beginEmh+0xe8>
     be2:	ac cf       	rjmp	.-168    	; 0xb3c <_ZN14HardwareSerial5beginEmh+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     be4:	d8 01       	movw	r26, r16
     be6:	50 96       	adiw	r26, 0x10	; 16
     be8:	ed 91       	ld	r30, X+
     bea:	fc 91       	ld	r31, X
     bec:	51 97       	sbiw	r26, 0x11	; 17
     bee:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
     bf0:	52 96       	adiw	r26, 0x12	; 18
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	53 97       	sbiw	r26, 0x13	; 19
     bf8:	80 83       	st	Z, r24

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     bfa:	58 96       	adiw	r26, 0x18	; 24
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	59 97       	sbiw	r26, 0x19	; 25
     c02:	30 82       	st	Z, r3
  
  sbi(*_ucsrb, _rxen);
     c04:	56 96       	adiw	r26, 0x16	; 22
     c06:	ed 91       	ld	r30, X+
     c08:	fc 91       	ld	r31, X
     c0a:	57 97       	sbiw	r26, 0x17	; 23
     c0c:	40 81       	ld	r20, Z
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	c9 01       	movw	r24, r18
     c14:	5c 96       	adiw	r26, 0x1c	; 28
     c16:	0c 90       	ld	r0, X
     c18:	5c 97       	sbiw	r26, 0x1c	; 28
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <_ZN14HardwareSerial5beginEmh+0x124>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <_ZN14HardwareSerial5beginEmh+0x120>
     c24:	84 2b       	or	r24, r20
     c26:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
     c28:	56 96       	adiw	r26, 0x16	; 22
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	57 97       	sbiw	r26, 0x17	; 23
     c30:	40 81       	ld	r20, Z
     c32:	c9 01       	movw	r24, r18
     c34:	5d 96       	adiw	r26, 0x1d	; 29
     c36:	0c 90       	ld	r0, X
     c38:	5d 97       	sbiw	r26, 0x1d	; 29
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <_ZN14HardwareSerial5beginEmh+0x144>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <_ZN14HardwareSerial5beginEmh+0x140>
     c44:	84 2b       	or	r24, r20
     c46:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
     c48:	56 96       	adiw	r26, 0x16	; 22
     c4a:	ed 91       	ld	r30, X+
     c4c:	fc 91       	ld	r31, X
     c4e:	57 97       	sbiw	r26, 0x17	; 23
     c50:	40 81       	ld	r20, Z
     c52:	c9 01       	movw	r24, r18
     c54:	5e 96       	adiw	r26, 0x1e	; 30
     c56:	0c 90       	ld	r0, X
     c58:	5e 97       	sbiw	r26, 0x1e	; 30
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <_ZN14HardwareSerial5beginEmh+0x164>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <_ZN14HardwareSerial5beginEmh+0x160>
     c64:	84 2b       	or	r24, r20
     c66:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
     c68:	56 96       	adiw	r26, 0x16	; 22
     c6a:	ed 91       	ld	r30, X+
     c6c:	fc 91       	ld	r31, X
     c6e:	57 97       	sbiw	r26, 0x17	; 23
     c70:	80 81       	ld	r24, Z
     c72:	5f 96       	adiw	r26, 0x1f	; 31
     c74:	0c 90       	ld	r0, X
     c76:	5f 97       	sbiw	r26, 0x1f	; 31
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <_ZN14HardwareSerial5beginEmh+0x182>
     c7a:	22 0f       	add	r18, r18
     c7c:	33 1f       	adc	r19, r19
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <_ZN14HardwareSerial5beginEmh+0x17e>
     c82:	20 95       	com	r18
     c84:	28 23       	and	r18, r24
     c86:	20 83       	st	Z, r18
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	9f 90       	pop	r9
     c9e:	8f 90       	pop	r8
     ca0:	7f 90       	pop	r7
     ca2:	6f 90       	pop	r6
     ca4:	5f 90       	pop	r5
     ca6:	4f 90       	pop	r4
     ca8:	3f 90       	pop	r3
     caa:	08 95       	ret

00000cac <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
     cb2:	ee 85       	ldd	r30, Y+14	; 0x0e
     cb4:	ff 85       	ldd	r31, Y+15	; 0x0f
     cb6:	df 01       	movw	r26, r30
     cb8:	a0 5c       	subi	r26, 0xC0	; 192
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	ee 5b       	subi	r30, 0xBE	; 190
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	11 97       	sbiw	r26, 0x01	; 1
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	c1 f7       	brne	.-16     	; 0xcc0 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
     cd0:	ee 89       	ldd	r30, Y+22	; 0x16
     cd2:	ff 89       	ldd	r31, Y+23	; 0x17
     cd4:	40 81       	ld	r20, Z
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	c9 01       	movw	r24, r18
     cdc:	0c 8c       	ldd	r0, Y+28	; 0x1c
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <_ZN14HardwareSerial3endEv+0x38>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <_ZN14HardwareSerial3endEv+0x34>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
     cee:	ee 89       	ldd	r30, Y+22	; 0x16
     cf0:	ff 89       	ldd	r31, Y+23	; 0x17
     cf2:	40 81       	ld	r20, Z
     cf4:	c9 01       	movw	r24, r18
     cf6:	0d 8c       	ldd	r0, Y+29	; 0x1d
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <_ZN14HardwareSerial3endEv+0x52>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <_ZN14HardwareSerial3endEv+0x4e>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
     d08:	ee 89       	ldd	r30, Y+22	; 0x16
     d0a:	ff 89       	ldd	r31, Y+23	; 0x17
     d0c:	40 81       	ld	r20, Z
     d0e:	c9 01       	movw	r24, r18
     d10:	0e 8c       	ldd	r0, Y+30	; 0x1e
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <_ZN14HardwareSerial3endEv+0x6c>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <_ZN14HardwareSerial3endEv+0x68>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
     d22:	ee 89       	ldd	r30, Y+22	; 0x16
     d24:	ff 89       	ldd	r31, Y+23	; 0x17
     d26:	80 81       	ld	r24, Z
     d28:	0f 8c       	ldd	r0, Y+31	; 0x1f
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <_ZN14HardwareSerial3endEv+0x84>
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <_ZN14HardwareSerial3endEv+0x80>
     d34:	20 95       	com	r18
     d36:	28 23       	and	r18, r24
     d38:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
     d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3e:	fc 01       	movw	r30, r24
     d40:	ee 5b       	subi	r30, 0xBE	; 190
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	20 81       	ld	r18, Z
     d46:	31 81       	ldd	r19, Z+1	; 0x01
     d48:	80 5c       	subi	r24, 0xC0	; 192
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	fc 01       	movw	r30, r24
     d4e:	31 83       	std	Z+1, r19	; 0x01
     d50:	20 83       	st	Z, r18
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	08 95       	ret

00000d5c <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <_GLOBAL__sub_I_rx_buffer+0x20>
     d7c:	0f 92       	push	r0
     d7e:	0f 92       	push	r0
     d80:	ed b7       	in	r30, 0x3d	; 61
     d82:	fe b7       	in	r31, 0x3e	; 62
     d84:	31 96       	adiw	r30, 0x01	; 1
     d86:	c4 e0       	ldi	r28, 0x04	; 4
     d88:	ad b7       	in	r26, 0x3d	; 61
     d8a:	be b7       	in	r27, 0x3e	; 62
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	cc 93       	st	X, r28
     d90:	d3 e0       	ldi	r29, 0x03	; 3
     d92:	d1 83       	std	Z+1, r29	; 0x01
     d94:	0f 2e       	mov	r0, r31
     d96:	f7 e0       	ldi	r31, 0x07	; 7
     d98:	7f 2e       	mov	r7, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	72 82       	std	Z+2, r7	; 0x02
     d9e:	0f 2e       	mov	r0, r31
     da0:	f5 e0       	ldi	r31, 0x05	; 5
     da2:	6f 2e       	mov	r6, r31
     da4:	f0 2d       	mov	r31, r0
     da6:	63 82       	std	Z+3, r6	; 0x03
     da8:	55 24       	eor	r5, r5
     daa:	53 94       	inc	r5
     dac:	54 82       	std	Z+4, r5	; 0x04
     dae:	82 ea       	ldi	r24, 0xA2	; 162
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	60 ea       	ldi	r22, 0xA0	; 160
     db4:	75 e0       	ldi	r23, 0x05	; 5
     db6:	4c e5       	ldi	r20, 0x5C	; 92
     db8:	55 e0       	ldi	r21, 0x05	; 5
     dba:	25 ec       	ldi	r18, 0xC5	; 197
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	04 ec       	ldi	r16, 0xC4	; 196
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f0 ec       	ldi	r31, 0xC0	; 192
     dc6:	ef 2e       	mov	r14, r31
     dc8:	ff 24       	eor	r15, r15
     dca:	f0 2d       	mov	r31, r0
     dcc:	0f 2e       	mov	r0, r31
     dce:	f1 ec       	ldi	r31, 0xC1	; 193
     dd0:	cf 2e       	mov	r12, r31
     dd2:	dd 24       	eor	r13, r13
     dd4:	f0 2d       	mov	r31, r0
     dd6:	0f 2e       	mov	r0, r31
     dd8:	f2 ec       	ldi	r31, 0xC2	; 194
     dda:	af 2e       	mov	r10, r31
     ddc:	bb 24       	eor	r11, r11
     dde:	f0 2d       	mov	r31, r0
     de0:	0f 2e       	mov	r0, r31
     de2:	f6 ec       	ldi	r31, 0xC6	; 198
     de4:	8f 2e       	mov	r8, r31
     de6:	99 24       	eor	r9, r9
     de8:	f0 2d       	mov	r31, r0
     dea:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
     dee:	ed b7       	in	r30, 0x3d	; 61
     df0:	fe b7       	in	r31, 0x3e	; 62
     df2:	31 96       	adiw	r30, 0x01	; 1
     df4:	ad b7       	in	r26, 0x3d	; 61
     df6:	be b7       	in	r27, 0x3e	; 62
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	cc 93       	st	X, r28
     dfc:	d1 83       	std	Z+1, r29	; 0x01
     dfe:	72 82       	std	Z+2, r7	; 0x02
     e00:	63 82       	std	Z+3, r6	; 0x03
     e02:	54 82       	std	Z+4, r5	; 0x04
     e04:	80 e8       	ldi	r24, 0x80	; 128
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	68 e1       	ldi	r22, 0x18	; 24
     e0a:	75 e0       	ldi	r23, 0x05	; 5
     e0c:	44 ed       	ldi	r20, 0xD4	; 212
     e0e:	54 e0       	ldi	r21, 0x04	; 4
     e10:	2d ec       	ldi	r18, 0xCD	; 205
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	0c ec       	ldi	r16, 0xCC	; 204
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	0f 2e       	mov	r0, r31
     e1a:	f8 ec       	ldi	r31, 0xC8	; 200
     e1c:	ef 2e       	mov	r14, r31
     e1e:	ff 24       	eor	r15, r15
     e20:	f0 2d       	mov	r31, r0
     e22:	0f 2e       	mov	r0, r31
     e24:	f9 ec       	ldi	r31, 0xC9	; 201
     e26:	cf 2e       	mov	r12, r31
     e28:	dd 24       	eor	r13, r13
     e2a:	f0 2d       	mov	r31, r0
     e2c:	0f 2e       	mov	r0, r31
     e2e:	fa ec       	ldi	r31, 0xCA	; 202
     e30:	af 2e       	mov	r10, r31
     e32:	bb 24       	eor	r11, r11
     e34:	f0 2d       	mov	r31, r0
     e36:	0f 2e       	mov	r0, r31
     e38:	fe ec       	ldi	r31, 0xCE	; 206
     e3a:	8f 2e       	mov	r8, r31
     e3c:	99 24       	eor	r9, r9
     e3e:	f0 2d       	mov	r31, r0
     e40:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
     e44:	ed b7       	in	r30, 0x3d	; 61
     e46:	fe b7       	in	r31, 0x3e	; 62
     e48:	31 96       	adiw	r30, 0x01	; 1
     e4a:	ad b7       	in	r26, 0x3d	; 61
     e4c:	be b7       	in	r27, 0x3e	; 62
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	cc 93       	st	X, r28
     e52:	d1 83       	std	Z+1, r29	; 0x01
     e54:	72 82       	std	Z+2, r7	; 0x02
     e56:	63 82       	std	Z+3, r6	; 0x03
     e58:	54 82       	std	Z+4, r5	; 0x04
     e5a:	8e e5       	ldi	r24, 0x5E	; 94
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	60 e9       	ldi	r22, 0x90	; 144
     e60:	74 e0       	ldi	r23, 0x04	; 4
     e62:	4c e4       	ldi	r20, 0x4C	; 76
     e64:	54 e0       	ldi	r21, 0x04	; 4
     e66:	25 ed       	ldi	r18, 0xD5	; 213
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	04 ed       	ldi	r16, 0xD4	; 212
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	0f 2e       	mov	r0, r31
     e70:	f0 ed       	ldi	r31, 0xD0	; 208
     e72:	ef 2e       	mov	r14, r31
     e74:	ff 24       	eor	r15, r15
     e76:	f0 2d       	mov	r31, r0
     e78:	0f 2e       	mov	r0, r31
     e7a:	f1 ed       	ldi	r31, 0xD1	; 209
     e7c:	cf 2e       	mov	r12, r31
     e7e:	dd 24       	eor	r13, r13
     e80:	f0 2d       	mov	r31, r0
     e82:	0f 2e       	mov	r0, r31
     e84:	f2 ed       	ldi	r31, 0xD2	; 210
     e86:	af 2e       	mov	r10, r31
     e88:	bb 24       	eor	r11, r11
     e8a:	f0 2d       	mov	r31, r0
     e8c:	0f 2e       	mov	r0, r31
     e8e:	f6 ed       	ldi	r31, 0xD6	; 214
     e90:	8f 2e       	mov	r8, r31
     e92:	99 24       	eor	r9, r9
     e94:	f0 2d       	mov	r31, r0
     e96:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
     e9a:	ed b7       	in	r30, 0x3d	; 61
     e9c:	fe b7       	in	r31, 0x3e	; 62
     e9e:	31 96       	adiw	r30, 0x01	; 1
     ea0:	ad b7       	in	r26, 0x3d	; 61
     ea2:	be b7       	in	r27, 0x3e	; 62
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	cc 93       	st	X, r28
     ea8:	d1 83       	std	Z+1, r29	; 0x01
     eaa:	72 82       	std	Z+2, r7	; 0x02
     eac:	63 82       	std	Z+3, r6	; 0x03
     eae:	54 82       	std	Z+4, r5	; 0x04
     eb0:	8c e3       	ldi	r24, 0x3C	; 60
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	68 e0       	ldi	r22, 0x08	; 8
     eb6:	74 e0       	ldi	r23, 0x04	; 4
     eb8:	44 ec       	ldi	r20, 0xC4	; 196
     eba:	53 e0       	ldi	r21, 0x03	; 3
     ebc:	25 e3       	ldi	r18, 0x35	; 53
     ebe:	31 e0       	ldi	r19, 0x01	; 1
     ec0:	04 e3       	ldi	r16, 0x34	; 52
     ec2:	11 e0       	ldi	r17, 0x01	; 1
     ec4:	0f 2e       	mov	r0, r31
     ec6:	f0 e3       	ldi	r31, 0x30	; 48
     ec8:	ef 2e       	mov	r14, r31
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f1 e3       	ldi	r31, 0x31	; 49
     ed4:	cf 2e       	mov	r12, r31
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	df 2e       	mov	r13, r31
     eda:	f0 2d       	mov	r31, r0
     edc:	0f 2e       	mov	r0, r31
     ede:	f2 e3       	ldi	r31, 0x32	; 50
     ee0:	af 2e       	mov	r10, r31
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	bf 2e       	mov	r11, r31
     ee6:	f0 2d       	mov	r31, r0
     ee8:	0f 2e       	mov	r0, r31
     eea:	f6 e3       	ldi	r31, 0x36	; 54
     eec:	8f 2e       	mov	r8, r31
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	9f 2e       	mov	r9, r31
     ef2:	f0 2d       	mov	r31, r0
     ef4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	7f 90       	pop	r7
     f1c:	6f 90       	pop	r6
     f1e:	5f 90       	pop	r5
     f20:	08 95       	ret

00000f22 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     f22:	8f 92       	push	r8
     f24:	9f 92       	push	r9
     f26:	af 92       	push	r10
     f28:	bf 92       	push	r11
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	4c 01       	movw	r8, r24
     f3c:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     f3e:	aa 24       	eor	r10, r10
     f40:	bb 24       	eor	r11, r11
     f42:	68 94       	set
     f44:	a1 f8       	bld	r10, 1
     f46:	a8 0e       	add	r10, r24
     f48:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     f4a:	00 e0       	ldi	r16, 0x00	; 0
     f4c:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     f4e:	cc 24       	eor	r12, r12
     f50:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     f52:	f5 01       	movw	r30, r10
     f54:	61 91       	ld	r22, Z+
     f56:	5f 01       	movw	r10, r30
     f58:	c7 01       	movw	r24, r14
     f5a:	4a e0       	ldi	r20, 0x0A	; 10
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN5Print5printEhi>
     f62:	ec 01       	movw	r28, r24
        n += p.print('.');
     f64:	c7 01       	movw	r24, r14
     f66:	6e e2       	ldi	r22, 0x2E	; 46
     f68:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     f6c:	8c 0f       	add	r24, r28
     f6e:	9d 1f       	adc	r25, r29
        n += p.print('.');
     f70:	c8 0e       	add	r12, r24
     f72:	d9 1e       	adc	r13, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	03 30       	cpi	r16, 0x03	; 3
     f7a:	11 05       	cpc	r17, r1
     f7c:	51 f7       	brne	.-44     	; 0xf52 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     f7e:	c7 01       	movw	r24, r14
     f80:	f4 01       	movw	r30, r8
     f82:	65 81       	ldd	r22, Z+5	; 0x05
     f84:	4a e0       	ldi	r20, 0x0A	; 10
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN5Print5printEhi>
     f8c:	8c 0d       	add	r24, r12
     f8e:	9d 1d       	adc	r25, r13
    return n;
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	08 95       	ret

00000faa <_ZN9IPAddressC1Ev>:
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     faa:	fc 01       	movw	r30, r24
     fac:	8a e2       	ldi	r24, 0x2A	; 42
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	13 82       	std	Z+3, r1	; 0x03
     fb8:	14 82       	std	Z+4, r1	; 0x04
     fba:	15 82       	std	Z+5, r1	; 0x05
}
     fbc:	08 95       	ret

00000fbe <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     fbe:	0f 93       	push	r16
     fc0:	fc 01       	movw	r30, r24
     fc2:	8a e2       	ldi	r24, 0x2A	; 42
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     fca:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     fcc:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     fce:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     fd0:	05 83       	std	Z+5, r16	; 0x05
}
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
     fd6:	fc 01       	movw	r30, r24
     fd8:	8a e2       	ldi	r24, 0x2A	; 42
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
     fe0:	42 83       	std	Z+2, r20	; 0x02
     fe2:	53 83       	std	Z+3, r21	; 0x03
     fe4:	64 83       	std	Z+4, r22	; 0x04
     fe6:	75 83       	std	Z+5, r23	; 0x05
}
     fe8:	08 95       	ret

00000fea <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	fc 01       	movw	r30, r24
     ff0:	8a e2       	ldi	r24, 0x2A	; 42
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
     ff8:	eb 01       	movw	r28, r22
     ffa:	88 81       	ld	r24, Y
     ffc:	99 81       	ldd	r25, Y+1	; 0x01
     ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    1000:	bb 81       	ldd	r27, Y+3	; 0x03
    1002:	82 83       	std	Z+2, r24	; 0x02
    1004:	93 83       	std	Z+3, r25	; 0x03
    1006:	a4 83       	std	Z+4, r26	; 0x04
    1008:	b5 83       	std	Z+5, r27	; 0x05
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
    1010:	fb 01       	movw	r30, r22
    1012:	40 81       	ld	r20, Z
    1014:	51 81       	ldd	r21, Z+1	; 0x01
    1016:	62 81       	ldd	r22, Z+2	; 0x02
    1018:	73 81       	ldd	r23, Z+3	; 0x03
    101a:	fc 01       	movw	r30, r24
    101c:	42 83       	std	Z+2, r20	; 0x02
    101e:	53 83       	std	Z+3, r21	; 0x03
    1020:	64 83       	std	Z+4, r22	; 0x04
    1022:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    1024:	08 95       	ret

00001026 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    1026:	fc 01       	movw	r30, r24
    1028:	42 83       	std	Z+2, r20	; 0x02
    102a:	53 83       	std	Z+3, r21	; 0x03
    102c:	64 83       	std	Z+4, r22	; 0x04
    102e:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    1030:	08 95       	ret

00001032 <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    1032:	9c 01       	movw	r18, r24
    1034:	2e 5f       	subi	r18, 0xFE	; 254
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	cb 01       	movw	r24, r22
    103a:	b9 01       	movw	r22, r18
    103c:	44 e0       	ldi	r20, 0x04	; 4
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 fe 59 	call	0xb3fc	; 0xb3fc <memcmp>
    1044:	28 2f       	mov	r18, r24
    1046:	39 2f       	mov	r19, r25
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	21 15       	cp	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	09 f0       	breq	.+2      	; 0x1052 <_ZN9IPAddresseqEPKh+0x20>
    1050:	80 e0       	ldi	r24, 0x00	; 0
}
    1052:	08 95       	ret

00001054 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    1054:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1056:	84 ee       	ldi	r24, 0xE4	; 228
    1058:	95 e0       	ldi	r25, 0x05	; 5
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN9IPAddressC1Ehhhh>
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <atexit>:
*/

#include <Arduino.h>

//Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (*func)()) { return 0; }
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	08 95       	ret

00001070 <initVariant>:

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1070:	08 95       	ret

00001072 <main>:

int main(void)
{
	init();
    1072:	0e 94 6f 15 	call	0x2ade	; 0x2ade <init>

	initVariant();
    1076:	0e 94 38 08 	call	0x1070	; 0x1070 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    107a:	0e 94 84 53 	call	0xa708	; 0xa708 <setup>
    
	for (;;) {
		loop();
    107e:	0e 94 b3 53 	call	0xa766	; 0xa766 <loop>
		if (serialEventRun) serialEventRun();
    1082:	8c e4       	ldi	r24, 0x4C	; 76
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	29 f0       	breq	.+10     	; 0x1094 <main+0x22>
    108a:	0e 94 4c 03 	call	0x698	; 0x698 <_Z14serialEventRunv>
#endif
	
	setup();
    
	for (;;) {
		loop();
    108e:	0e 94 b3 53 	call	0xa766	; 0xa766 <loop>
    1092:	fb cf       	rjmp	.-10     	; 0x108a <main+0x18>
    1094:	0e 94 b3 53 	call	0xa766	; 0xa766 <loop>
    1098:	fd cf       	rjmp	.-6      	; 0x1094 <main+0x22>

0000109a <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    109a:	0e 94 30 54 	call	0xa860	; 0xa860 <malloc>
}
    109e:	08 95       	ret

000010a0 <_Znaj>:

void * operator new[](size_t size)
{
  return malloc(size);
    10a0:	0e 94 30 54 	call	0xa860	; 0xa860 <malloc>
}
    10a4:	08 95       	ret

000010a6 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    10a6:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
}
    10aa:	08 95       	ret

000010ac <_ZdaPv>:

void operator delete[](void * ptr)
{
  free(ptr);
    10ac:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
}
    10b0:	08 95       	ret

000010b2 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	11 f0       	breq	.+4      	; 0x10c2 <__cxa_guard_acquire+0x10>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	82 2f       	mov	r24, r18
    10c4:	93 2f       	mov	r25, r19
    10c6:	08 95       	ret

000010c8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
    10ce:	08 95       	ret

000010d0 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    10d0:	08 95       	ret

000010d2 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    10d2:	08 95       	ret

000010d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	6c 01       	movw	r12, r24
    10e6:	7b 01       	movw	r14, r22
    10e8:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    10ea:	20 97       	sbiw	r28, 0x00	; 0
    10ec:	91 f0       	breq	.+36     	; 0x1112 <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    10ee:	00 e0       	ldi	r16, 0x00	; 0
    10f0:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    10f2:	d7 01       	movw	r26, r14
    10f4:	6d 91       	ld	r22, X+
    10f6:	7d 01       	movw	r14, r26
    10f8:	d6 01       	movw	r26, r12
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	01 90       	ld	r0, Z+
    1100:	f0 81       	ld	r31, Z
    1102:	e0 2d       	mov	r30, r0
    1104:	c6 01       	movw	r24, r12
    1106:	19 95       	eicall
    1108:	08 0f       	add	r16, r24
    110a:	19 1f       	adc	r17, r25
    110c:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    110e:	89 f7       	brne	.-30     	; 0x10f2 <_ZN5Print5writeEPKhj+0x1e>
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    1112:	00 e0       	ldi	r16, 0x00	; 0
    1114:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    1116:	80 2f       	mov	r24, r16
    1118:	91 2f       	mov	r25, r17
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	08 95       	ret

0000112c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	7c 01       	movw	r14, r24
    113a:	eb 01       	movw	r28, r22
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    113c:	fb 01       	movw	r30, r22
    113e:	64 91       	lpm	r22, Z
    if (c == 0) break;
    1140:	66 23       	and	r22, r22
    1142:	91 f0       	breq	.+36     	; 0x1168 <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1144:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    114a:	f7 01       	movw	r30, r14
    114c:	a0 81       	ld	r26, Z
    114e:	b1 81       	ldd	r27, Z+1	; 0x01
    1150:	ed 91       	ld	r30, X+
    1152:	fc 91       	ld	r31, X
    1154:	c7 01       	movw	r24, r14
    1156:	19 95       	eicall
    1158:	08 0f       	add	r16, r24
    115a:	19 1f       	adc	r17, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    115c:	fe 01       	movw	r30, r28
    115e:	21 96       	adiw	r28, 0x01	; 1
    1160:	64 91       	lpm	r22, Z
    if (c == 0) break;
    1162:	66 23       	and	r22, r22
    1164:	91 f7       	brne	.-28     	; 0x114a <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    1166:	02 c0       	rjmp	.+4      	; 0x116c <_ZN5Print5printEPK19__FlashStringHelper+0x40>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    116c:	80 2f       	mov	r24, r16
    116e:	91 2f       	mov	r25, r17
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	08 95       	ret

0000117e <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	fb 01       	movw	r30, r22
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1184:	ec 01       	movw	r28, r24
    1186:	a8 81       	ld	r26, Y
    1188:	b9 81       	ldd	r27, Y+1	; 0x01
    118a:	60 81       	ld	r22, Z
    118c:	71 81       	ldd	r23, Z+1	; 0x01
    118e:	44 81       	ldd	r20, Z+4	; 0x04
    1190:	55 81       	ldd	r21, Z+5	; 0x05
    1192:	12 96       	adiw	r26, 0x02	; 2
    1194:	ed 91       	ld	r30, X+
    1196:	fc 91       	ld	r31, X
    1198:	13 97       	sbiw	r26, 0x03	; 3
    119a:	19 95       	eicall
  return write(s.c_str(), s.length());
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    11a2:	61 15       	cp	r22, r1
    11a4:	71 05       	cpc	r23, r1
    11a6:	91 f0       	breq	.+36     	; 0x11cc <_ZN5Print5printEPKc+0x2a>
      return write((const uint8_t *)str, strlen(str));
    11a8:	e6 2f       	mov	r30, r22
    11aa:	f7 2f       	mov	r31, r23
    11ac:	df 01       	movw	r26, r30
    11ae:	0d 90       	ld	r0, X+
    11b0:	00 20       	and	r0, r0
    11b2:	e9 f7       	brne	.-6      	; 0x11ae <_ZN5Print5printEPKc+0xc>
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	ad 01       	movw	r20, r26
    11b8:	4e 1b       	sub	r20, r30
    11ba:	5f 0b       	sbc	r21, r31
    11bc:	dc 01       	movw	r26, r24
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	02 80       	ldd	r0, Z+2	; 0x02
    11c4:	f3 81       	ldd	r31, Z+3	; 0x03
    11c6:	e0 2d       	mov	r30, r0
    11c8:	19 95       	eicall
    11ca:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
    11d0:	08 95       	ret

000011d2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    11d2:	dc 01       	movw	r26, r24
    11d4:	ed 91       	ld	r30, X+
    11d6:	fc 91       	ld	r31, X
    11d8:	01 90       	ld	r0, Z+
    11da:	f0 81       	ld	r31, Z
    11dc:	e0 2d       	mov	r30, r0
    11de:	19 95       	eicall
}
    11e0:	08 95       	ret

000011e2 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    11e2:	9c 01       	movw	r18, r24
    11e4:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    11e6:	db 01       	movw	r26, r22
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	01 90       	ld	r0, Z+
    11ee:	f0 81       	ld	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	b9 01       	movw	r22, r18
    11f4:	19 95       	eicall
}
    11f6:	08 95       	ret

000011f8 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    1202:	6d e0       	ldi	r22, 0x0D	; 13
    1204:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    1208:	ec 01       	movw	r28, r24
  n += print('\n');
    120a:	c8 01       	movw	r24, r16
    120c:	6a e0       	ldi	r22, 0x0A	; 10
    120e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    1212:	8c 0f       	add	r24, r28
    1214:	9d 1f       	adc	r25, r29
  return n;
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    122a:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN5Print5printEPK19__FlashStringHelper>
    122e:	ec 01       	movw	r28, r24
  n += println();
    1230:	c8 01       	movw	r24, r16
    1232:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    1236:	8c 0f       	add	r24, r28
    1238:	9d 1f       	adc	r25, r29
  return n;
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	8c 01       	movw	r16, r24
  size_t n = print(s);
    124e:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN5Print5printERK6String>
    1252:	ec 01       	movw	r28, r24
  n += println();
    1254:	c8 01       	movw	r24, r16
    1256:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    125a:	8c 0f       	add	r24, r28
    125c:	9d 1f       	adc	r25, r29
  return n;
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	8c 01       	movw	r16, r24
  size_t n = print(c);
    1272:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
    1276:	ec 01       	movw	r28, r24
  n += println();
    1278:	c8 01       	movw	r24, r16
    127a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    127e:	8c 0f       	add	r24, r28
    1280:	9d 1f       	adc	r25, r29
  return n;
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	8c 01       	movw	r16, r24
  size_t n = print(c);
    1296:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    129a:	ec 01       	movw	r28, r24
  n += println();
    129c:	c8 01       	movw	r24, r16
    129e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    12a2:	8c 0f       	add	r24, r28
    12a4:	9d 1f       	adc	r25, r29
  return n;
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	8c 01       	movw	r16, r24
  size_t n = print(x);
    12ba:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_ZN5Print5printERK9Printable>
    12be:	ec 01       	movw	r28, r24
  n += println();
    12c0:	c8 01       	movw	r24, r16
    12c2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    12c6:	8c 0f       	add	r24, r28
    12c8:	9d 1f       	adc	r25, r29
  return n;
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	a1 97       	sbiw	r28, 0x21	; 33
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	4c 01       	movw	r8, r24
    1306:	14 2f       	mov	r17, r20
    1308:	35 2f       	mov	r19, r21
    130a:	86 2f       	mov	r24, r22
    130c:	97 2f       	mov	r25, r23
    130e:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1310:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	08 f4       	brcc	.+2      	; 0x1318 <_ZN5Print11printNumberEmh+0x44>
    1316:	0a e0       	ldi	r16, 0x0A	; 10
    1318:	0f 2e       	mov	r0, r31
    131a:	f1 e2       	ldi	r31, 0x21	; 33
    131c:	af 2e       	mov	r10, r31
    131e:	bb 24       	eor	r11, r11
    1320:	f0 2d       	mov	r31, r0
    1322:	ac 0e       	add	r10, r28
    1324:	bd 1e       	adc	r11, r29

  do {
    unsigned long m = n;
    n /= base;
    1326:	40 2e       	mov	r4, r16
    1328:	55 24       	eor	r5, r5
    132a:	66 24       	eor	r6, r6
    132c:	77 24       	eor	r7, r7
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <_ZN5Print11printNumberEmh+0x62>
    1330:	12 2f       	mov	r17, r18
    1332:	84 2f       	mov	r24, r20
    1334:	95 2f       	mov	r25, r21
    1336:	61 2f       	mov	r22, r17
    1338:	73 2f       	mov	r23, r19
    133a:	a3 01       	movw	r20, r6
    133c:	92 01       	movw	r18, r4
    133e:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    1342:	c2 2e       	mov	r12, r18
    1344:	d3 2e       	mov	r13, r19
    1346:	e4 2e       	mov	r14, r20
    1348:	f5 2e       	mov	r15, r21
    char c = m - base * n;
    134a:	02 9f       	mul	r16, r18
    134c:	80 2d       	mov	r24, r0
    134e:	11 24       	eor	r1, r1
    1350:	18 1b       	sub	r17, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1352:	08 94       	sec
    1354:	a1 08       	sbc	r10, r1
    1356:	b1 08       	sbc	r11, r1
    1358:	1a 30       	cpi	r17, 0x0A	; 10
    135a:	10 f4       	brcc	.+4      	; 0x1360 <_ZN5Print11printNumberEmh+0x8c>
    135c:	10 5d       	subi	r17, 0xD0	; 208
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_ZN5Print11printNumberEmh+0x8e>
    1360:	19 5c       	subi	r17, 0xC9	; 201
    1362:	d5 01       	movw	r26, r10
    1364:	1c 93       	st	X, r17
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1366:	c1 14       	cp	r12, r1
    1368:	d1 04       	cpc	r13, r1
    136a:	e1 04       	cpc	r14, r1
    136c:	f1 04       	cpc	r15, r1
    136e:	01 f7       	brne	.-64     	; 0x1330 <_ZN5Print11printNumberEmh+0x5c>
    1370:	a1 14       	cp	r10, r1
    1372:	b1 04       	cpc	r11, r1
    1374:	a1 f0       	breq	.+40     	; 0x139e <_ZN5Print11printNumberEmh+0xca>
      return write((const uint8_t *)str, strlen(str));
    1376:	ea 2d       	mov	r30, r10
    1378:	fb 2d       	mov	r31, r11
    137a:	df 01       	movw	r26, r30
    137c:	0d 90       	ld	r0, X+
    137e:	00 20       	and	r0, r0
    1380:	e9 f7       	brne	.-6      	; 0x137c <_ZN5Print11printNumberEmh+0xa8>
    1382:	11 97       	sbiw	r26, 0x01	; 1
    1384:	ad 01       	movw	r20, r26
    1386:	4e 1b       	sub	r20, r30
    1388:	5f 0b       	sbc	r21, r31
    138a:	d4 01       	movw	r26, r8
    138c:	ed 91       	ld	r30, X+
    138e:	fc 91       	ld	r31, X
    1390:	02 80       	ldd	r0, Z+2	; 0x02
    1392:	f3 81       	ldd	r31, Z+3	; 0x03
    1394:	e0 2d       	mov	r30, r0
    1396:	c4 01       	movw	r24, r8
    1398:	b5 01       	movw	r22, r10
    139a:	19 95       	eicall
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <_ZN5Print11printNumberEmh+0xce>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    13a2:	a1 96       	adiw	r28, 0x21	; 33
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	5f 90       	pop	r5
    13cc:	4f 90       	pop	r4
    13ce:	08 95       	ret

000013d0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	49 f4       	brne	.+18     	; 0x13e8 <_ZN5Print5printEmi+0x18>
    13d6:	dc 01       	movw	r26, r24
    13d8:	ed 91       	ld	r30, X+
    13da:	fc 91       	ld	r31, X
    13dc:	01 90       	ld	r0, Z+
    13de:	f0 81       	ld	r31, Z
    13e0:	e0 2d       	mov	r30, r0
    13e2:	64 2f       	mov	r22, r20
    13e4:	19 95       	eicall
    13e6:	08 95       	ret
  else return printNumber(n, base);
    13e8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN5Print11printNumberEmh>
}
    13ec:	08 95       	ret

000013ee <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    13f8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
    13fc:	ec 01       	movw	r28, r24
  n += println();
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    1404:	8c 0f       	add	r24, r28
    1406:	9d 1f       	adc	r25, r29
  return n;
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1412:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1414:	ab 01       	movw	r20, r22
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
}
    141e:	08 95       	ret

00001420 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    142a:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN5Print5printEji>
    142e:	ec 01       	movw	r28, r24
  n += println();
    1430:	c8 01       	movw	r24, r16
    1432:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    1436:	8c 0f       	add	r24, r28
    1438:	9d 1f       	adc	r25, r29
  return n;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1444:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1446:	46 2f       	mov	r20, r22
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
}
    1452:	08 95       	ret

00001454 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    145e:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN5Print5printEhi>
    1462:	ec 01       	movw	r28, r24
  n += println();
    1464:	c8 01       	movw	r24, r16
    1466:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    146a:	8c 0f       	add	r24, r28
    146c:	9d 1f       	adc	r25, r29
  return n;
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	6a 01       	movw	r12, r20
    148c:	7b 01       	movw	r14, r22
  if (base == 0) {
    148e:	21 15       	cp	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	41 f4       	brne	.+16     	; 0x14a4 <_ZN5Print5printEli+0x2c>
    return write(n);
    1494:	e8 81       	ld	r30, Y
    1496:	f9 81       	ldd	r31, Y+1	; 0x01
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	64 2f       	mov	r22, r20
    14a0:	19 95       	eicall
    14a2:	1d c0       	rjmp	.+58     	; 0x14de <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    14a4:	2a 30       	cpi	r18, 0x0A	; 10
    14a6:	31 05       	cpc	r19, r1
    14a8:	c1 f4       	brne	.+48     	; 0x14da <_ZN5Print5printEli+0x62>
    if (n < 0) {
    14aa:	77 23       	and	r23, r23
    14ac:	94 f4       	brge	.+36     	; 0x14d2 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    14ae:	6d e2       	ldi	r22, 0x2D	; 45
    14b0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    14b4:	8c 01       	movw	r16, r24
      n = -n;
    14b6:	44 27       	eor	r20, r20
    14b8:	55 27       	eor	r21, r21
    14ba:	ba 01       	movw	r22, r20
    14bc:	4c 19       	sub	r20, r12
    14be:	5d 09       	sbc	r21, r13
    14c0:	6e 09       	sbc	r22, r14
    14c2:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    14c4:	ce 01       	movw	r24, r28
    14c6:	2a e0       	ldi	r18, 0x0A	; 10
    14c8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN5Print11printNumberEmh>
    14cc:	80 0f       	add	r24, r16
    14ce:	91 1f       	adc	r25, r17
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    14d2:	2a e0       	ldi	r18, 0x0A	; 10
    14d4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN5Print11printNumberEmh>
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    14da:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN5Print11printNumberEmh>
  }
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret

000014f0 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    14fa:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print5printEli>
    14fe:	ec 01       	movw	r28, r24
  n += println();
    1500:	c8 01       	movw	r24, r16
    1502:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    1506:	8c 0f       	add	r24, r28
    1508:	9d 1f       	adc	r25, r29
  return n;
}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1514:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1516:	fb 01       	movw	r30, r22
    1518:	af 01       	movw	r20, r30
    151a:	66 27       	eor	r22, r22
    151c:	57 fd       	sbrc	r21, 7
    151e:	60 95       	com	r22
    1520:	76 2f       	mov	r23, r22
    1522:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN5Print5printEli>
}
    1526:	08 95       	ret

00001528 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    1532:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN5Print5printEii>
    1536:	ec 01       	movw	r28, r24
  n += println();
    1538:	c8 01       	movw	r24, r16
    153a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    153e:	8c 0f       	add	r24, r28
    1540:	9d 1f       	adc	r25, r29
  return n;
}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    154c:	2f 92       	push	r2
    154e:	3f 92       	push	r3
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	4c 01       	movw	r8, r24
    1570:	2a 01       	movw	r4, r20
    1572:	3b 01       	movw	r6, r22
    1574:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1576:	cb 01       	movw	r24, r22
    1578:	ba 01       	movw	r22, r20
    157a:	a3 01       	movw	r20, r6
    157c:	92 01       	movw	r18, r4
    157e:	0e 94 86 58 	call	0xb10c	; 0xb10c <__unordsf2>
    1582:	88 23       	and	r24, r24
    1584:	39 f0       	breq	.+14     	; 0x1594 <_ZN5Print10printFloatEdh+0x48>
    1586:	c4 01       	movw	r24, r8
    1588:	62 e3       	ldi	r22, 0x32	; 50
    158a:	72 e0       	ldi	r23, 0x02	; 2
    158c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
    1590:	2c 01       	movw	r4, r24
    1592:	ee c0       	rjmp	.+476    	; 0x1770 <_ZN5Print10printFloatEdh+0x224>
  if (isinf(number)) return print("inf");
    1594:	73 01       	movw	r14, r6
    1596:	62 01       	movw	r12, r4
    1598:	e8 94       	clt
    159a:	f7 f8       	bld	r15, 7
    159c:	c1 e0       	ldi	r28, 0x01	; 1
    159e:	c7 01       	movw	r24, r14
    15a0:	b6 01       	movw	r22, r12
    15a2:	2f ef       	ldi	r18, 0xFF	; 255
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	5f e7       	ldi	r21, 0x7F	; 127
    15aa:	0e 94 86 58 	call	0xb10c	; 0xb10c <__unordsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	59 f4       	brne	.+22     	; 0x15c8 <_ZN5Print10printFloatEdh+0x7c>
    15b2:	c7 01       	movw	r24, r14
    15b4:	b6 01       	movw	r22, r12
    15b6:	2f ef       	ldi	r18, 0xFF	; 255
    15b8:	3f ef       	ldi	r19, 0xFF	; 255
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	5f e7       	ldi	r21, 0x7F	; 127
    15be:	0e 94 d0 56 	call	0xada0	; 0xada0 <__cmpsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	0c f4       	brge	.+2      	; 0x15c8 <_ZN5Print10printFloatEdh+0x7c>
    15c6:	c0 e0       	ldi	r28, 0x00	; 0
    15c8:	cc 23       	and	r28, r28
    15ca:	39 f4       	brne	.+14     	; 0x15da <_ZN5Print10printFloatEdh+0x8e>
    15cc:	c4 01       	movw	r24, r8
    15ce:	66 e3       	ldi	r22, 0x36	; 54
    15d0:	72 e0       	ldi	r23, 0x02	; 2
    15d2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
    15d6:	2c 01       	movw	r4, r24
    15d8:	cb c0       	rjmp	.+406    	; 0x1770 <_ZN5Print10printFloatEdh+0x224>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    15da:	c3 01       	movw	r24, r6
    15dc:	b2 01       	movw	r22, r4
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	5f e4       	ldi	r21, 0x4F	; 79
    15e6:	0e 94 1f 58 	call	0xb03e	; 0xb03e <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	3c f4       	brge	.+14     	; 0x15fc <_ZN5Print10printFloatEdh+0xb0>
    15ee:	c4 01       	movw	r24, r8
    15f0:	6a e3       	ldi	r22, 0x3A	; 58
    15f2:	72 e0       	ldi	r23, 0x02	; 2
    15f4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
    15f8:	2c 01       	movw	r4, r24
    15fa:	ba c0       	rjmp	.+372    	; 0x1770 <_ZN5Print10printFloatEdh+0x224>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    15fc:	c3 01       	movw	r24, r6
    15fe:	b2 01       	movw	r22, r4
    1600:	2f ef       	ldi	r18, 0xFF	; 255
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	5f ec       	ldi	r21, 0xCF	; 207
    1608:	0e 94 d0 56 	call	0xada0	; 0xada0 <__cmpsf2>
    160c:	88 23       	and	r24, r24
    160e:	3c f4       	brge	.+14     	; 0x161e <_ZN5Print10printFloatEdh+0xd2>
    1610:	c4 01       	movw	r24, r8
    1612:	6a e3       	ldi	r22, 0x3A	; 58
    1614:	72 e0       	ldi	r23, 0x02	; 2
    1616:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
    161a:	2c 01       	movw	r4, r24
    161c:	a9 c0       	rjmp	.+338    	; 0x1770 <_ZN5Print10printFloatEdh+0x224>
  
  // Handle negative numbers
  if (number < 0.0)
    161e:	c3 01       	movw	r24, r6
    1620:	b2 01       	movw	r22, r4
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	0e 94 d0 56 	call	0xada0	; 0xada0 <__cmpsf2>
    162c:	88 23       	and	r24, r24
    162e:	54 f4       	brge	.+20     	; 0x1644 <_ZN5Print10printFloatEdh+0xf8>
  {
     n += print('-');
    1630:	c4 01       	movw	r24, r8
    1632:	6d e2       	ldi	r22, 0x2D	; 45
    1634:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    1638:	1c 01       	movw	r2, r24
     number = -number;
    163a:	77 fa       	bst	r7, 7
    163c:	70 94       	com	r7
    163e:	77 f8       	bld	r7, 7
    1640:	70 94       	com	r7
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <_ZN5Print10printFloatEdh+0xfc>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1644:	22 24       	eor	r2, r2
    1646:	33 24       	eor	r3, r3
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1648:	bb 20       	and	r11, r11
    164a:	09 f4       	brne	.+2      	; 0x164e <_ZN5Print10printFloatEdh+0x102>
    164c:	a5 c0       	rjmp	.+330    	; 0x1798 <_ZN5Print10printFloatEdh+0x24c>
    164e:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1658:	85 2f       	mov	r24, r21
    165a:	94 2f       	mov	r25, r20
    165c:	a3 2f       	mov	r26, r19
    165e:	b2 2f       	mov	r27, r18
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 d4 56 	call	0xada8	; 0xada8 <__divsf3>
    1670:	56 2f       	mov	r21, r22
    1672:	47 2f       	mov	r20, r23
    1674:	38 2f       	mov	r19, r24
    1676:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1678:	cf 5f       	subi	r28, 0xFF	; 255
    167a:	cb 15       	cp	r28, r11
    167c:	69 f7       	brne	.-38     	; 0x1658 <_ZN5Print10printFloatEdh+0x10c>
    rounding /= 10.0;
  
  number += rounding;
    167e:	c3 01       	movw	r24, r6
    1680:	b2 01       	movw	r22, r4
    1682:	e2 2f       	mov	r30, r18
    1684:	05 2f       	mov	r16, r21
    1686:	14 2f       	mov	r17, r20
    1688:	23 2f       	mov	r18, r19
    168a:	3e 2f       	mov	r19, r30
    168c:	a9 01       	movw	r20, r18
    168e:	98 01       	movw	r18, r16
    1690:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <__addsf3>
    1694:	16 2f       	mov	r17, r22
    1696:	07 2f       	mov	r16, r23
    1698:	f8 2e       	mov	r15, r24
    169a:	c9 2e       	mov	r12, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    169c:	86 2f       	mov	r24, r22
    169e:	90 2f       	mov	r25, r16
    16a0:	af 2d       	mov	r26, r15
    16a2:	bc 2d       	mov	r27, r12
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 41 57 	call	0xae82	; 0xae82 <__fixunssfsi>
    16ac:	c6 2f       	mov	r28, r22
    16ae:	47 2e       	mov	r4, r23
    16b0:	d8 2f       	mov	r29, r24
    16b2:	e9 2e       	mov	r14, r25
  double remainder = number - (double)int_part;
    16b4:	0e 94 6d 57 	call	0xaeda	; 0xaeda <__floatunsisf>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	81 2f       	mov	r24, r17
    16be:	90 2f       	mov	r25, r16
    16c0:	af 2d       	mov	r26, r15
    16c2:	bc 2d       	mov	r27, r12
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <__subsf3>
    16cc:	06 2f       	mov	r16, r22
    16ce:	f7 2e       	mov	r15, r23
    16d0:	c8 2e       	mov	r12, r24
    16d2:	19 2f       	mov	r17, r25
  n += print(int_part);
    16d4:	c4 01       	movw	r24, r8
    16d6:	4c 2f       	mov	r20, r28
    16d8:	54 2d       	mov	r21, r4
    16da:	6d 2f       	mov	r22, r29
    16dc:	7e 2d       	mov	r23, r14
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
    16e6:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    16e8:	c4 01       	movw	r24, r8
    16ea:	6e e3       	ldi	r22, 0x3E	; 62
    16ec:	72 e0       	ldi	r23, 0x02	; 2
    16ee:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    16f2:	c8 0f       	add	r28, r24
    16f4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    16f6:	2e 01       	movw	r4, r28
    16f8:	42 0c       	add	r4, r2
    16fa:	53 1c       	adc	r5, r3
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    16fc:	80 2f       	mov	r24, r16
    16fe:	9f 2d       	mov	r25, r15
    1700:	ac 2d       	mov	r26, r12
    1702:	b1 2f       	mov	r27, r17
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    1714:	16 2f       	mov	r17, r22
    1716:	c7 2e       	mov	r12, r23
    1718:	08 2f       	mov	r16, r24
    171a:	f9 2e       	mov	r15, r25
    int toPrint = int(remainder);
    171c:	86 2f       	mov	r24, r22
    171e:	9c 2d       	mov	r25, r12
    1720:	a0 2f       	mov	r26, r16
    1722:	bf 2d       	mov	r27, r15
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 3c 57 	call	0xae78	; 0xae78 <__fixsfsi>
    172c:	ab 01       	movw	r20, r22
    172e:	bc 01       	movw	r22, r24
    1730:	ea 01       	movw	r28, r20
    n += print(toPrint);
    1732:	c4 01       	movw	r24, r8
    1734:	ba 01       	movw	r22, r20
    1736:	4a e0       	ldi	r20, 0x0A	; 10
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN5Print5printEii>
    173e:	48 0e       	add	r4, r24
    1740:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    1742:	be 01       	movw	r22, r28
    1744:	88 27       	eor	r24, r24
    1746:	77 fd       	sbrc	r23, 7
    1748:	80 95       	com	r24
    174a:	98 2f       	mov	r25, r24
    174c:	0e 94 6f 57 	call	0xaede	; 0xaede <__floatsisf>
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	81 2f       	mov	r24, r17
    1756:	9c 2d       	mov	r25, r12
    1758:	a0 2f       	mov	r26, r16
    175a:	bf 2d       	mov	r27, r15
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <__subsf3>
    1764:	06 2f       	mov	r16, r22
    1766:	f7 2e       	mov	r15, r23
    1768:	c8 2e       	mov	r12, r24
    176a:	19 2f       	mov	r17, r25
    176c:	ba 94       	dec	r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    176e:	31 f6       	brne	.-116    	; 0x16fc <_ZN5Print10printFloatEdh+0x1b0>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1770:	84 2d       	mov	r24, r4
    1772:	95 2d       	mov	r25, r5
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	bf 90       	pop	r11
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	3f 90       	pop	r3
    1794:	2f 90       	pop	r2
    1796:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1798:	c3 01       	movw	r24, r6
    179a:	b2 01       	movw	r22, r4
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    17a8:	0e 94 41 57 	call	0xae82	; 0xae82 <__fixunssfsi>
    17ac:	ab 01       	movw	r20, r22
    17ae:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    17b0:	c4 01       	movw	r24, r8
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
    17ba:	2c 01       	movw	r4, r24
    17bc:	42 0c       	add	r4, r2
    17be:	53 1c       	adc	r5, r3
    17c0:	d7 cf       	rjmp	.-82     	; 0x1770 <_ZN5Print10printFloatEdh+0x224>

000017c2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    17c2:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN5Print10printFloatEdh>
}
    17c6:	08 95       	ret

000017c8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    17d2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print5printEdi>
    17d6:	ec 01       	movw	r28, r24
  n += println();
    17d8:	c8 01       	movw	r24, r16
    17da:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
    17de:	8c 0f       	add	r24, r28
    17e0:	9d 1f       	adc	r25, r29
  return n;
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    17f2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	88 87       	std	Y+8, r24	; 0x08
    17fc:	99 87       	std	Y+9, r25	; 0x09
    17fe:	aa 87       	std	Y+10, r26	; 0x0a
    1800:	bb 87       	std	Y+11, r27	; 0x0b
  do {
    c = read();
    1802:	e8 81       	ld	r30, Y
    1804:	f9 81       	ldd	r31, Y+1	; 0x01
    1806:	06 80       	ldd	r0, Z+6	; 0x06
    1808:	f7 81       	ldd	r31, Z+7	; 0x07
    180a:	e0 2d       	mov	r30, r0
    180c:	ce 01       	movw	r24, r28
    180e:	19 95       	eicall
    if (c >= 0) return c;
    1810:	99 23       	and	r25, r25
    1812:	bc f4       	brge	.+46     	; 0x1842 <_ZN6Stream9timedReadEv+0x56>
  } while(millis() - _startMillis < _timeout);
    1814:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    1818:	ab 01       	movw	r20, r22
    181a:	bc 01       	movw	r22, r24
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    181c:	88 85       	ldd	r24, Y+8	; 0x08
    181e:	99 85       	ldd	r25, Y+9	; 0x09
    1820:	aa 85       	ldd	r26, Y+10	; 0x0a
    1822:	bb 85       	ldd	r27, Y+11	; 0x0b
    1824:	48 1b       	sub	r20, r24
    1826:	59 0b       	sbc	r21, r25
    1828:	6a 0b       	sbc	r22, r26
    182a:	7b 0b       	sbc	r23, r27
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	ae 81       	ldd	r26, Y+6	; 0x06
    1832:	bf 81       	ldd	r27, Y+7	; 0x07
    1834:	48 17       	cp	r20, r24
    1836:	59 07       	cpc	r21, r25
    1838:	6a 07       	cpc	r22, r26
    183a:	7b 07       	cpc	r23, r27
    183c:	10 f3       	brcs	.-60     	; 0x1802 <_ZN6Stream9timedReadEv+0x16>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	9f ef       	ldi	r25, 0xFF	; 255
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	08 95       	ret

00001848 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    184e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	88 87       	std	Y+8, r24	; 0x08
    1858:	99 87       	std	Y+9, r25	; 0x09
    185a:	aa 87       	std	Y+10, r26	; 0x0a
    185c:	bb 87       	std	Y+11, r27	; 0x0b
  do {
    c = peek();
    185e:	e8 81       	ld	r30, Y
    1860:	f9 81       	ldd	r31, Y+1	; 0x01
    1862:	00 84       	ldd	r0, Z+8	; 0x08
    1864:	f1 85       	ldd	r31, Z+9	; 0x09
    1866:	e0 2d       	mov	r30, r0
    1868:	ce 01       	movw	r24, r28
    186a:	19 95       	eicall
    if (c >= 0) return c;
    186c:	99 23       	and	r25, r25
    186e:	bc f4       	brge	.+46     	; 0x189e <_ZN6Stream9timedPeekEv+0x56>
  } while(millis() - _startMillis < _timeout);
    1870:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    1874:	ab 01       	movw	r20, r22
    1876:	bc 01       	movw	r22, r24
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	99 85       	ldd	r25, Y+9	; 0x09
    187c:	aa 85       	ldd	r26, Y+10	; 0x0a
    187e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1880:	48 1b       	sub	r20, r24
    1882:	59 0b       	sbc	r21, r25
    1884:	6a 0b       	sbc	r22, r26
    1886:	7b 0b       	sbc	r23, r27
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	ae 81       	ldd	r26, Y+6	; 0x06
    188e:	bf 81       	ldd	r27, Y+7	; 0x07
    1890:	48 17       	cp	r20, r24
    1892:	59 07       	cpc	r21, r25
    1894:	6a 07       	cpc	r22, r26
    1896:	7b 07       	cpc	r23, r27
    1898:	10 f3       	brcs	.-60     	; 0x185e <_ZN6Stream9timedPeekEv+0x16>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ec 01       	movw	r28, r24
  int c;
  while (1) {
    c = timedPeek();
    18aa:	ce 01       	movw	r24, r28
    18ac:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6Stream9timedPeekEv>
    if (c < 0) return c;  // timeout
    18b0:	99 23       	and	r25, r25
    18b2:	8c f0       	brlt	.+34     	; 0x18d6 <_ZN6Stream13peekNextDigitEv+0x32>
    if (c == '-') return c;
    18b4:	8d 32       	cpi	r24, 0x2D	; 45
    18b6:	91 05       	cpc	r25, r1
    18b8:	71 f0       	breq	.+28     	; 0x18d6 <_ZN6Stream13peekNextDigitEv+0x32>
    if (c >= '0' && c <= '9') return c;
    18ba:	9c 01       	movw	r18, r24
    18bc:	20 53       	subi	r18, 0x30	; 48
    18be:	30 40       	sbci	r19, 0x00	; 0
    18c0:	2a 30       	cpi	r18, 0x0A	; 10
    18c2:	31 05       	cpc	r19, r1
    18c4:	40 f0       	brcs	.+16     	; 0x18d6 <_ZN6Stream13peekNextDigitEv+0x32>
    read();  // discard non-numeric
    18c6:	e8 81       	ld	r30, Y
    18c8:	f9 81       	ldd	r31, Y+1	; 0x01
    18ca:	06 80       	ldd	r0, Z+6	; 0x06
    18cc:	f7 81       	ldd	r31, Z+7	; 0x07
    18ce:	e0 2d       	mov	r30, r0
    18d0:	ce 01       	movw	r24, r28
    18d2:	19 95       	eicall
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    18d4:	ea cf       	rjmp	.-44     	; 0x18aa <_ZN6Stream13peekNextDigitEv+0x6>
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    18dc:	fc 01       	movw	r30, r24
    18de:	44 83       	std	Z+4, r20	; 0x04
    18e0:	55 83       	std	Z+5, r21	; 0x05
    18e2:	66 83       	std	Z+6, r22	; 0x06
    18e4:	77 83       	std	Z+7, r23	; 0x07
}
    18e6:	08 95       	ret

000018e8 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
    18e8:	4f 92       	push	r4
    18ea:	5f 92       	push	r5
    18ec:	6f 92       	push	r6
    18ee:	7f 92       	push	r7
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	4c 01       	movw	r8, r24
    190a:	7b 01       	movw	r14, r22
    190c:	2a 01       	movw	r4, r20
    190e:	39 01       	movw	r6, r18
    1910:	58 01       	movw	r10, r16
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    1912:	fb 01       	movw	r30, r22
    1914:	80 81       	ld	r24, Z
    1916:	88 23       	and	r24, r24
    1918:	c9 f1       	breq	.+114    	; 0x198c <_ZN6Stream9findUntilEPcjS0_j+0xa4>
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	c0 e0       	ldi	r28, 0x00	; 0
    1920:	d0 e0       	ldi	r29, 0x00	; 0
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1922:	cc 24       	eor	r12, r12
    1924:	dd 24       	eor	r13, r13
    1926:	29 c0       	rjmp	.+82     	; 0x197a <_ZN6Stream9findUntilEPcjS0_j+0x92>
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
    1928:	f7 01       	movw	r30, r14
    192a:	ec 0f       	add	r30, r28
    192c:	fd 1f       	adc	r31, r29
    192e:	80 81       	ld	r24, Z
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	82 17       	cp	r24, r18
    1934:	93 07       	cpc	r25, r19
    1936:	39 f0       	breq	.+14     	; 0x1946 <_ZN6Stream9findUntilEPcjS0_j+0x5e>
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
    1938:	f7 01       	movw	r30, r14
    193a:	80 81       	ld	r24, Z
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	82 17       	cp	r24, r18
    1940:	93 07       	cpc	r25, r19
    1942:	31 f4       	brne	.+12     	; 0x1950 <_ZN6Stream9findUntilEPcjS0_j+0x68>
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1944:	e6 01       	movw	r28, r12
    
    if( c == target[index]){
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
    1946:	21 96       	adiw	r28, 0x01	; 1
    1948:	c4 15       	cp	r28, r4
    194a:	d5 05       	cpc	r29, r5
    194c:	10 f0       	brcs	.+4      	; 0x1952 <_ZN6Stream9findUntilEPcjS0_j+0x6a>
    194e:	20 c0       	rjmp	.+64     	; 0x1990 <_ZN6Stream9findUntilEPcjS0_j+0xa8>
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
      index = 0; // reset index if any char does not match
    1950:	e6 01       	movw	r28, r12
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
    1952:	a1 14       	cp	r10, r1
    1954:	b1 04       	cpc	r11, r1
    1956:	71 f0       	breq	.+28     	; 0x1974 <_ZN6Stream9findUntilEPcjS0_j+0x8c>
    1958:	f3 01       	movw	r30, r6
    195a:	e0 0f       	add	r30, r16
    195c:	f1 1f       	adc	r31, r17
    195e:	80 81       	ld	r24, Z
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	82 17       	cp	r24, r18
    1964:	93 07       	cpc	r25, r19
    1966:	41 f4       	brne	.+16     	; 0x1978 <_ZN6Stream9findUntilEPcjS0_j+0x90>
      if(++termIndex >= termLen)
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	0a 15       	cp	r16, r10
    196e:	1b 05       	cpc	r17, r11
    1970:	20 f0       	brcs	.+8      	; 0x197a <_ZN6Stream9findUntilEPcjS0_j+0x92>
    1972:	10 c0       	rjmp	.+32     	; 0x1994 <_ZN6Stream9findUntilEPcjS0_j+0xac>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
    1974:	86 01       	movw	r16, r12
    1976:	01 c0       	rjmp	.+2      	; 0x197a <_ZN6Stream9findUntilEPcjS0_j+0x92>
    1978:	86 01       	movw	r16, r12
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    197a:	c4 01       	movw	r24, r8
    197c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    1980:	9c 01       	movw	r18, r24
    1982:	18 16       	cp	r1, r24
    1984:	19 06       	cpc	r1, r25
    1986:	84 f2       	brlt	.-96     	; 0x1928 <_ZN6Stream9findUntilEPcjS0_j+0x40>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <_ZN6Stream9findUntilEPcjS0_j+0xae>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <_ZN6Stream9findUntilEPcjS0_j+0xae>
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <_ZN6Stream9findUntilEPcjS0_j+0xae>
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    1994:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
      termIndex = 0;
  }
  return false;
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	bf 90       	pop	r11
    19a8:	af 90       	pop	r10
    19aa:	9f 90       	pop	r9
    19ac:	8f 90       	pop	r8
    19ae:	7f 90       	pop	r7
    19b0:	6f 90       	pop	r6
    19b2:	5f 90       	pop	r5
    19b4:	4f 90       	pop	r4
    19b6:	08 95       	ret

000019b8 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	24 2f       	mov	r18, r20
    19be:	35 2f       	mov	r19, r21
  return findUntil(target, strlen(target), terminator, strlen(terminator));
    19c0:	e6 2f       	mov	r30, r22
    19c2:	f7 2f       	mov	r31, r23
    19c4:	df 01       	movw	r26, r30
    19c6:	0d 90       	ld	r0, X+
    19c8:	00 20       	and	r0, r0
    19ca:	e9 f7       	brne	.-6      	; 0x19c6 <_ZN6Stream9findUntilEPcS0_+0xe>
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	ad 01       	movw	r20, r26
    19d0:	4e 1b       	sub	r20, r30
    19d2:	5f 0b       	sbc	r21, r31
    19d4:	e2 2f       	mov	r30, r18
    19d6:	f3 2f       	mov	r31, r19
    19d8:	df 01       	movw	r26, r30
    19da:	0d 90       	ld	r0, X+
    19dc:	00 20       	and	r0, r0
    19de:	e9 f7       	brne	.-6      	; 0x19da <_ZN6Stream9findUntilEPcS0_+0x22>
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	8d 01       	movw	r16, r26
    19e4:	0e 1b       	sub	r16, r30
    19e6:	1f 0b       	sbc	r17, r31
    19e8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN6Stream9findUntilEPcjS0_j>
}
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <_ZN6Stream4findEPc>:

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  //return findUntil(target, "");
  return findUntil(target, NULL);
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6Stream9findUntilEPcS0_>
}
    19fa:	08 95       	ret

000019fc <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
{
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
  return findUntil(target, length, NULL, 0);
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN6Stream9findUntilEPcjS0_j>
}
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	7c 01       	movw	r14, r24
    1a2c:	c6 2f       	mov	r28, r22
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    1a2e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN6Stream13peekNextDigitEv>
    1a32:	8c 01       	movw	r16, r24
  // ignore non numeric leading characters
  if(c < 0)
    1a34:	99 23       	and	r25, r25
    1a36:	0c f4       	brge	.+2      	; 0x1a3a <_ZN6Stream8parseIntEc+0x28>
    1a38:	53 c0       	rjmp	.+166    	; 0x1ae0 <_ZN6Stream8parseIntEc+0xce>
    1a3a:	88 24       	eor	r8, r8
    1a3c:	99 24       	eor	r9, r9
    1a3e:	54 01       	movw	r10, r8
    1a40:	dd 24       	eor	r13, r13
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1a42:	d0 e0       	ldi	r29, 0x00	; 0
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    1a44:	cc 24       	eor	r12, r12
    1a46:	c3 94       	inc	r12
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1a48:	c0 17       	cp	r28, r16
    1a4a:	d1 07       	cpc	r29, r17
    1a4c:	51 f1       	breq	.+84     	; 0x1aa2 <_ZN6Stream8parseIntEc+0x90>
      ; // ignore this charactor
    else if(c == '-')
    1a4e:	0d 32       	cpi	r16, 0x2D	; 45
    1a50:	11 05       	cpc	r17, r1
    1a52:	31 f1       	breq	.+76     	; 0x1aa0 <_ZN6Stream8parseIntEc+0x8e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    1a54:	c8 01       	movw	r24, r16
    1a56:	c0 97       	sbiw	r24, 0x30	; 48
    1a58:	8a 30       	cpi	r24, 0x0A	; 10
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	10 f5       	brcc	.+68     	; 0x1aa2 <_ZN6Stream8parseIntEc+0x90>
      value = value * 10 + c - '0';
    1a5e:	c5 01       	movw	r24, r10
    1a60:	b4 01       	movw	r22, r8
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	22 27       	eor	r18, r18
    1a74:	17 fd       	sbrc	r17, 7
    1a76:	20 95       	com	r18
    1a78:	32 2f       	mov	r19, r18
    1a7a:	08 0f       	add	r16, r24
    1a7c:	19 1f       	adc	r17, r25
    1a7e:	2a 1f       	adc	r18, r26
    1a80:	3b 1f       	adc	r19, r27
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f0 ed       	ldi	r31, 0xD0	; 208
    1a86:	8f 2e       	mov	r8, r31
    1a88:	ff ef       	ldi	r31, 0xFF	; 255
    1a8a:	9f 2e       	mov	r9, r31
    1a8c:	ff ef       	ldi	r31, 0xFF	; 255
    1a8e:	af 2e       	mov	r10, r31
    1a90:	ff ef       	ldi	r31, 0xFF	; 255
    1a92:	bf 2e       	mov	r11, r31
    1a94:	f0 2d       	mov	r31, r0
    1a96:	80 0e       	add	r8, r16
    1a98:	91 1e       	adc	r9, r17
    1a9a:	a2 1e       	adc	r10, r18
    1a9c:	b3 1e       	adc	r11, r19
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <_ZN6Stream8parseIntEc+0x90>

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    1aa0:	dc 2c       	mov	r13, r12
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    1aa2:	d7 01       	movw	r26, r14
    1aa4:	ed 91       	ld	r30, X+
    1aa6:	fc 91       	ld	r31, X
    1aa8:	06 80       	ldd	r0, Z+6	; 0x06
    1aaa:	f7 81       	ldd	r31, Z+7	; 0x07
    1aac:	e0 2d       	mov	r30, r0
    1aae:	c7 01       	movw	r24, r14
    1ab0:	19 95       	eicall
    c = timedPeek();
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6Stream9timedPeekEv>
    1ab8:	8c 01       	movw	r16, r24
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    1aba:	c0 97       	sbiw	r24, 0x30	; 48
    1abc:	8a 30       	cpi	r24, 0x0A	; 10
    1abe:	91 05       	cpc	r25, r1
    1ac0:	18 f2       	brcs	.-122    	; 0x1a48 <_ZN6Stream8parseIntEc+0x36>
    1ac2:	c0 17       	cp	r28, r16
    1ac4:	d1 07       	cpc	r29, r17
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <_ZN6Stream8parseIntEc+0xb8>
    1ac8:	bf cf       	rjmp	.-130    	; 0x1a48 <_ZN6Stream8parseIntEc+0x36>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    1aca:	dd 20       	and	r13, r13
    1acc:	61 f0       	breq	.+24     	; 0x1ae6 <_ZN6Stream8parseIntEc+0xd4>
    value = -value;
    1ace:	b0 94       	com	r11
    1ad0:	a0 94       	com	r10
    1ad2:	90 94       	com	r9
    1ad4:	80 94       	com	r8
    1ad6:	81 1c       	adc	r8, r1
    1ad8:	91 1c       	adc	r9, r1
    1ada:	a1 1c       	adc	r10, r1
    1adc:	b1 1c       	adc	r11, r1
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <_ZN6Stream8parseIntEc+0xd4>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    1ae0:	88 24       	eor	r8, r8
    1ae2:	99 24       	eor	r9, r9
    1ae4:	54 01       	movw	r10, r8
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    1ae6:	68 2d       	mov	r22, r8
    1ae8:	79 2d       	mov	r23, r9
    1aea:	8a 2d       	mov	r24, r10
    1aec:	9b 2d       	mov	r25, r11
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	08 95       	ret

00001b08 <_ZN6Stream8parseIntEv>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    1b08:	61 e0       	ldi	r22, 0x01	; 1
    1b0a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN6Stream8parseIntEc>
}
    1b0e:	08 95       	ret

00001b10 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    1b10:	5f 92       	push	r5
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	ec 01       	movw	r28, r24
    1b30:	16 2f       	mov	r17, r22
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;

  c = peekNextDigit();
    1b32:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN6Stream13peekNextDigitEv>
    1b36:	08 2f       	mov	r16, r24
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;
    1b38:	88 24       	eor	r8, r8
    1b3a:	77 24       	eor	r7, r7
    1b3c:	0f 2e       	mov	r0, r31
    1b3e:	f0 e8       	ldi	r31, 0x80	; 128
    1b40:	6f 2e       	mov	r6, r31
    1b42:	f0 2d       	mov	r31, r0
    1b44:	0f 2e       	mov	r0, r31
    1b46:	ff e3       	ldi	r31, 0x3F	; 63
    1b48:	5f 2e       	mov	r5, r31
    1b4a:	f0 2d       	mov	r31, r0
// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
  long value = 0;
    1b4c:	cc 24       	eor	r12, r12
    1b4e:	dd 24       	eor	r13, r13
    1b50:	76 01       	movw	r14, r12

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
  boolean isFraction = false;
    1b52:	bb 24       	eor	r11, r11
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
  boolean isNegative = false;
    1b54:	99 24       	eor	r9, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    1b56:	aa 24       	eor	r10, r10
    1b58:	a3 94       	inc	r10
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1b5a:	01 17       	cp	r16, r17
    1b5c:	a1 f1       	breq	.+104    	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb6>
      ; // ignore
    else if(c == '-')
    1b5e:	0d 32       	cpi	r16, 0x2D	; 45
    1b60:	79 f1       	breq	.+94     	; 0x1bc0 <_ZN6Stream10parseFloatEc+0xb0>
      isNegative = true;
    else if (c == '.')
    1b62:	0e 32       	cpi	r16, 0x2E	; 46
    1b64:	79 f1       	breq	.+94     	; 0x1bc4 <_ZN6Stream10parseFloatEc+0xb4>
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    1b66:	80 2f       	mov	r24, r16
    1b68:	80 53       	subi	r24, 0x30	; 48
    1b6a:	8a 30       	cpi	r24, 0x0A	; 10
    1b6c:	60 f5       	brcc	.+88     	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb6>
      value = value * 10 + c - '0';
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    1b7e:	6b 01       	movw	r12, r22
    1b80:	7c 01       	movw	r14, r24
    1b82:	c0 0e       	add	r12, r16
    1b84:	d1 1c       	adc	r13, r1
    1b86:	e1 1c       	adc	r14, r1
    1b88:	f1 1c       	adc	r15, r1
    1b8a:	80 ed       	ldi	r24, 0xD0	; 208
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	af ef       	ldi	r26, 0xFF	; 255
    1b90:	bf ef       	ldi	r27, 0xFF	; 255
    1b92:	c8 0e       	add	r12, r24
    1b94:	d9 1e       	adc	r13, r25
    1b96:	ea 1e       	adc	r14, r26
    1b98:	fb 1e       	adc	r15, r27
      if(isFraction)
    1b9a:	bb 20       	and	r11, r11
    1b9c:	a1 f0       	breq	.+40     	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb6>
         fraction *= 0.1;
    1b9e:	88 2d       	mov	r24, r8
    1ba0:	97 2d       	mov	r25, r7
    1ba2:	a6 2d       	mov	r26, r6
    1ba4:	b5 2d       	mov	r27, r5
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	2d ec       	ldi	r18, 0xCD	; 205
    1bac:	3c ec       	ldi	r19, 0xCC	; 204
    1bae:	4c ec       	ldi	r20, 0xCC	; 204
    1bb0:	5d e3       	ldi	r21, 0x3D	; 61
    1bb2:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    1bb6:	86 2e       	mov	r8, r22
    1bb8:	77 2e       	mov	r7, r23
    1bba:	68 2e       	mov	r6, r24
    1bbc:	59 2e       	mov	r5, r25
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb6>

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    1bc0:	9a 2c       	mov	r9, r10
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <_ZN6Stream10parseFloatEc+0xb6>
    else if (c == '.')
      isFraction = true;
    1bc4:	ba 2c       	mov	r11, r10
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1;
    }
    read();  // consume the character we got with peek
    1bc6:	e8 81       	ld	r30, Y
    1bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bca:	06 80       	ldd	r0, Z+6	; 0x06
    1bcc:	f7 81       	ldd	r31, Z+7	; 0x07
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	19 95       	eicall
    c = timedPeek();
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6Stream9timedPeekEv>
    1bda:	08 2f       	mov	r16, r24
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    1bdc:	80 53       	subi	r24, 0x30	; 48
    1bde:	8a 30       	cpi	r24, 0x0A	; 10
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <_ZN6Stream10parseFloatEc+0xd4>
    1be2:	bb cf       	rjmp	.-138    	; 0x1b5a <_ZN6Stream10parseFloatEc+0x4a>
    1be4:	0e 32       	cpi	r16, 0x2E	; 46
    1be6:	09 f4       	brne	.+2      	; 0x1bea <_ZN6Stream10parseFloatEc+0xda>
    1be8:	b8 cf       	rjmp	.-144    	; 0x1b5a <_ZN6Stream10parseFloatEc+0x4a>
    1bea:	10 17       	cp	r17, r16
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <_ZN6Stream10parseFloatEc+0xe0>
    1bee:	b5 cf       	rjmp	.-150    	; 0x1b5a <_ZN6Stream10parseFloatEc+0x4a>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
    1bf0:	99 20       	and	r9, r9
    1bf2:	41 f0       	breq	.+16     	; 0x1c04 <_ZN6Stream10parseFloatEc+0xf4>
    value = -value;
    1bf4:	f0 94       	com	r15
    1bf6:	e0 94       	com	r14
    1bf8:	d0 94       	com	r13
    1bfa:	c0 94       	com	r12
    1bfc:	c1 1c       	adc	r12, r1
    1bfe:	d1 1c       	adc	r13, r1
    1c00:	e1 1c       	adc	r14, r1
    1c02:	f1 1c       	adc	r15, r1
  if(isFraction)
    1c04:	bb 20       	and	r11, r11
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <_ZN6Stream10parseFloatEc+0x112>
    return value * fraction;
    1c08:	c7 01       	movw	r24, r14
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	0e 94 6f 57 	call	0xaede	; 0xaede <__floatsisf>
    1c10:	08 2d       	mov	r16, r8
    1c12:	17 2d       	mov	r17, r7
    1c14:	26 2d       	mov	r18, r6
    1c16:	35 2d       	mov	r19, r5
    1c18:	a9 01       	movw	r20, r18
    1c1a:	98 01       	movw	r18, r16
    1c1c:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <_ZN6Stream10parseFloatEc+0x11a>
  else
    return value;
    1c22:	c7 01       	movw	r24, r14
    1c24:	b6 01       	movw	r22, r12
    1c26:	0e 94 6f 57 	call	0xaede	; 0xaede <__floatsisf>
}
    1c2a:	38 2f       	mov	r19, r24
    1c2c:	29 2f       	mov	r18, r25
    1c2e:	86 2f       	mov	r24, r22
    1c30:	97 2f       	mov	r25, r23
    1c32:	a3 2f       	mov	r26, r19
    1c34:	b2 2f       	mov	r27, r18
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	bf 90       	pop	r11
    1c4c:	af 90       	pop	r10
    1c4e:	9f 90       	pop	r9
    1c50:	8f 90       	pop	r8
    1c52:	7f 90       	pop	r7
    1c54:	6f 90       	pop	r6
    1c56:	5f 90       	pop	r5
    1c58:	08 95       	ret

00001c5a <_ZN6Stream10parseFloatEv>:


// as parseInt but returns a floating point value
float Stream::parseFloat()
{
  return parseFloat(NO_SKIP_CHAR);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN6Stream10parseFloatEc>
}
    1c60:	46 2f       	mov	r20, r22
    1c62:	57 2f       	mov	r21, r23
    1c64:	68 2f       	mov	r22, r24
    1c66:	79 2f       	mov	r23, r25
    1c68:	cb 01       	movw	r24, r22
    1c6a:	ba 01       	movw	r22, r20
    1c6c:	08 95       	ret

00001c6e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	6c 01       	movw	r12, r24
    1c80:	7b 01       	movw	r14, r22
    1c82:	ea 01       	movw	r28, r20
  size_t count = 0;
  while (count < length) {
    1c84:	20 97       	sbiw	r28, 0x00	; 0
    1c86:	81 f0       	breq	.+32     	; 0x1ca8 <_ZN6Stream9readBytesEPcj+0x3a>
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
  while (count < length) {
    int c = timedRead();
    1c8c:	c6 01       	movw	r24, r12
    1c8e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1c92:	99 23       	and	r25, r25
    1c94:	5c f0       	brlt	.+22     	; 0x1cac <_ZN6Stream9readBytesEPcj+0x3e>
    *buffer++ = (char)c;
    1c96:	f7 01       	movw	r30, r14
    1c98:	81 93       	st	Z+, r24
    1c9a:	7f 01       	movw	r14, r30
    count++;
    1c9c:	0f 5f       	subi	r16, 0xFF	; 255
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1ca0:	0c 17       	cp	r16, r28
    1ca2:	1d 07       	cpc	r17, r29
    1ca4:	99 f7       	brne	.-26     	; 0x1c8c <_ZN6Stream9readBytesEPcj+0x1e>
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <_ZN6Stream9readBytesEPcj+0x3e>
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
    1ca8:	00 e0       	ldi	r16, 0x00	; 0
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1cac:	80 2f       	mov	r24, r16
    1cae:	91 2f       	mov	r25, r17
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	08 95       	ret

00001cc2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	5c 01       	movw	r10, r24
    1cd8:	6a 01       	movw	r12, r20
    1cda:	e9 01       	movw	r28, r18
  if (length < 1) return 0;
    1cdc:	20 97       	sbiw	r28, 0x00	; 0
    1cde:	b1 f0       	breq	.+44     	; 0x1d0c <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    1ce0:	ee 24       	eor	r14, r14
    1ce2:	ff 24       	eor	r15, r15
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    1ce4:	06 2f       	mov	r16, r22
    1ce6:	10 e0       	ldi	r17, 0x00	; 0
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    1ce8:	c5 01       	movw	r24, r10
    1cea:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
    1cee:	99 23       	and	r25, r25
    1cf0:	7c f0       	brlt	.+30     	; 0x1d10 <_ZN6Stream14readBytesUntilEcPcj+0x4e>
    1cf2:	08 17       	cp	r16, r24
    1cf4:	19 07       	cpc	r17, r25
    1cf6:	61 f0       	breq	.+24     	; 0x1d10 <_ZN6Stream14readBytesUntilEcPcj+0x4e>
    *buffer++ = (char)c;
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	81 93       	st	Z+, r24
    1cfc:	6f 01       	movw	r12, r30
    index++;
    1cfe:	08 94       	sec
    1d00:	e1 1c       	adc	r14, r1
    1d02:	f1 1c       	adc	r15, r1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    1d04:	ec 16       	cp	r14, r28
    1d06:	fd 06       	cpc	r15, r29
    1d08:	79 f7       	brne	.-34     	; 0x1ce8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <_ZN6Stream14readBytesUntilEcPcj+0x4e>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    1d0c:	ee 24       	eor	r14, r14
    1d0e:	ff 24       	eor	r15, r15
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    1d10:	8e 2d       	mov	r24, r14
    1d12:	9f 2d       	mov	r25, r15
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	08 95       	ret

00001d2a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	ec 01       	movw	r28, r24
    1d34:	8b 01       	movw	r16, r22
  String ret;
    1d36:	68 e4       	ldi	r22, 0x48	; 72
    1d38:	72 e0       	ldi	r23, 0x02	; 2
    1d3a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN6StringC1EPKc>
  int c = timedRead();
    1d3e:	c8 01       	movw	r24, r16
    1d40:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    1d44:	bc 01       	movw	r22, r24
  while (c >= 0)
    1d46:	99 23       	and	r25, r25
    1d48:	4c f0       	brlt	.+18     	; 0x1d5c <_ZN6Stream10readStringEv+0x32>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
    1d50:	c8 01       	movw	r24, r16
    1d52:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    1d56:	bc 01       	movw	r22, r24

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
    1d58:	99 23       	and	r25, r25
    1d5a:	bc f7       	brge	.-18     	; 0x1d4a <_ZN6Stream10readStringEv+0x20>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	8c 01       	movw	r16, r24
    1d76:	7b 01       	movw	r14, r22
    1d78:	c4 2f       	mov	r28, r20
  String ret;
    1d7a:	68 e4       	ldi	r22, 0x48	; 72
    1d7c:	72 e0       	ldi	r23, 0x02	; 2
    1d7e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN6StringC1EPKc>
  int c = timedRead();
    1d82:	c7 01       	movw	r24, r14
    1d84:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    1d88:	bc 01       	movw	r22, r24
  while (c >= 0 && c != terminator)
    1d8a:	d0 e0       	ldi	r29, 0x00	; 0
    1d8c:	77 23       	and	r23, r23
    1d8e:	5c f0       	brlt	.+22     	; 0x1da6 <_ZN6Stream15readStringUntilEc+0x3e>
    1d90:	c6 17       	cp	r28, r22
    1d92:	d7 07       	cpc	r29, r23
    1d94:	41 f0       	breq	.+16     	; 0x1da6 <_ZN6Stream15readStringUntilEc+0x3e>
    1d96:	c8 01       	movw	r24, r16
    1d98:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN6Stream9timedReadEv>
    1da2:	bc 01       	movw	r22, r24
    1da4:	f3 cf       	rjmp	.-26     	; 0x1d8c <_ZN6Stream15readStringUntilEc+0x24>
  }
  return ret;
}
    1da6:	c8 01       	movw	r24, r16
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	08 95       	ret

00001db6 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1db6:	3f 92       	push	r3
    1db8:	4f 92       	push	r4
    1dba:	5f 92       	push	r5
    1dbc:	6f 92       	push	r6
    1dbe:	7f 92       	push	r7
    1dc0:	8f 92       	push	r8
    1dc2:	9f 92       	push	r9
    1dc4:	af 92       	push	r10
    1dc6:	bf 92       	push	r11
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <_Z4tonehjm+0x24>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	a8 2f       	mov	r26, r24
    1de2:	8b 01       	movw	r16, r22
    1de4:	29 83       	std	Y+1, r18	; 0x01
    1de6:	3a 83       	std	Y+2, r19	; 0x02
    1de8:	4b 83       	std	Y+3, r20	; 0x03
    1dea:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1dec:	80 91 49 02 	lds	r24, 0x0249
    1df0:	a8 17       	cp	r26, r24
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <_Z4tonehjm+0x46>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1df4:	e4 ee       	ldi	r30, 0xE4	; 228
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	34 90       	lpm	r3, Z
    1dfa:	f8 c0       	rjmp	.+496    	; 0x1fec <_Z4tonehjm+0x236>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    1dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <_Z4tonehjm+0x4c>
    1e00:	b5 c2       	rjmp	.+1386   	; 0x236c <__stack+0x16d>
      tone_pins[i] = _pin;
    1e02:	a0 93 49 02 	sts	0x0249, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e06:	e4 ee       	ldi	r30, 0xE4	; 228
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	34 90       	lpm	r3, Z
      break;
    }
  }
  
  if (_timer != -1)
    1e0c:	38 16       	cp	r3, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <_Z4tonehjm+0x5c>
    1e10:	ad c2       	rjmp	.+1370   	; 0x236c <__stack+0x16d>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	39 16       	cp	r3, r25
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <_Z4tonehjm+0x64>
    1e18:	58 c0       	rjmp	.+176    	; 0x1eca <_Z4tonehjm+0x114>
    1e1a:	93 15       	cp	r25, r3
    1e1c:	3c f0       	brlt	.+14     	; 0x1e2c <_Z4tonehjm+0x76>
    1e1e:	33 20       	and	r3, r3
    1e20:	89 f0       	breq	.+34     	; 0x1e44 <_Z4tonehjm+0x8e>
    1e22:	b1 e0       	ldi	r27, 0x01	; 1
    1e24:	3b 16       	cp	r3, r27
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <_Z4tonehjm+0x74>
    1e28:	e1 c0       	rjmp	.+450    	; 0x1fec <_Z4tonehjm+0x236>
    1e2a:	2c c0       	rjmp	.+88     	; 0x1e84 <_Z4tonehjm+0xce>
    1e2c:	e4 e0       	ldi	r30, 0x04	; 4
    1e2e:	3e 16       	cp	r3, r30
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <_Z4tonehjm+0x7e>
    1e32:	96 c0       	rjmp	.+300    	; 0x1f60 <_Z4tonehjm+0x1aa>
    1e34:	3e 16       	cp	r3, r30
    1e36:	0c f4       	brge	.+2      	; 0x1e3a <_Z4tonehjm+0x84>
    1e38:	70 c0       	rjmp	.+224    	; 0x1f1a <_Z4tonehjm+0x164>
    1e3a:	f5 e0       	ldi	r31, 0x05	; 5
    1e3c:	3f 16       	cp	r3, r31
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <_Z4tonehjm+0x8c>
    1e40:	d5 c0       	rjmp	.+426    	; 0x1fec <_Z4tonehjm+0x236>
    1e42:	b1 c0       	rjmp	.+354    	; 0x1fa6 <_Z4tonehjm+0x1f0>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    1e44:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1e46:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1e48:	84 b5       	in	r24, 0x24	; 36
    1e4a:	82 60       	ori	r24, 0x02	; 2
    1e4c:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
    1e4e:	85 b5       	in	r24, 0x25	; 37
    1e50:	81 60       	ori	r24, 0x01	; 1
    1e52:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1e54:	2a 2f       	mov	r18, r26
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	f9 01       	movw	r30, r18
    1e5a:	ef 58       	subi	r30, 0x8F	; 143
    1e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5e:	e4 91       	lpm	r30, Z
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ef 52       	subi	r30, 0x2F	; 47
    1e68:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6a:	85 91       	lpm	r24, Z+
    1e6c:	94 91       	lpm	r25, Z
    1e6e:	80 93 0e 06 	sts	0x060E, r24
    1e72:	90 93 0f 06 	sts	0x060F, r25
        timer0_pin_mask = digitalPinToBitMask(_pin);
    1e76:	f9 01       	movw	r30, r18
    1e78:	e5 5d       	subi	r30, 0xD5	; 213
    1e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7c:	e4 91       	lpm	r30, Z
    1e7e:	e0 93 0d 06 	sts	0x060D, r30
    1e82:	b7 c0       	rjmp	.+366    	; 0x1ff2 <_Z4tonehjm+0x23c>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    1e84:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
    1e88:	e1 e8       	ldi	r30, 0x81	; 129
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 60       	ori	r24, 0x08	; 8
    1e92:	80 83       	st	Z, r24
        bitWrite(TCCR1B, CS10, 1);
    1e94:	80 81       	ld	r24, Z
    1e96:	81 60       	ori	r24, 0x01	; 1
    1e98:	80 83       	st	Z, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1e9a:	2a 2f       	mov	r18, r26
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	ef 58       	subi	r30, 0x8F	; 143
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	e4 91       	lpm	r30, Z
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	ef 52       	subi	r30, 0x2F	; 47
    1eae:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb0:	85 91       	lpm	r24, Z+
    1eb2:	94 91       	lpm	r25, Z
    1eb4:	80 93 07 06 	sts	0x0607, r24
    1eb8:	90 93 08 06 	sts	0x0608, r25
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	e5 5d       	subi	r30, 0xD5	; 213
    1ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec2:	e4 91       	lpm	r30, Z
    1ec4:	e0 93 06 06 	sts	0x0606, r30
    1ec8:	94 c0       	rjmp	.+296    	; 0x1ff2 <_Z4tonehjm+0x23c>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    1eca:	80 eb       	ldi	r24, 0xB0	; 176
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	fc 01       	movw	r30, r24
    1ed0:	10 82       	st	Z, r1
        TCCR2B = 0;
    1ed2:	41 eb       	ldi	r20, 0xB1	; 177
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	fa 01       	movw	r30, r20
    1ed8:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 81       	ld	r18, Z
    1ede:	22 60       	ori	r18, 0x02	; 2
    1ee0:	20 83       	st	Z, r18
        bitWrite(TCCR2B, CS20, 1);
    1ee2:	fa 01       	movw	r30, r20
    1ee4:	80 81       	ld	r24, Z
    1ee6:	81 60       	ori	r24, 0x01	; 1
    1ee8:	80 83       	st	Z, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1eea:	2a 2f       	mov	r18, r26
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	ef 58       	subi	r30, 0x8F	; 143
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	e4 91       	lpm	r30, Z
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	ef 52       	subi	r30, 0x2F	; 47
    1efe:	fe 4f       	sbci	r31, 0xFE	; 254
    1f00:	85 91       	lpm	r24, Z+
    1f02:	94 91       	lpm	r25, Z
    1f04:	80 93 00 06 	sts	0x0600, r24
    1f08:	90 93 01 06 	sts	0x0601, r25
        timer2_pin_mask = digitalPinToBitMask(_pin);
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	e5 5d       	subi	r30, 0xD5	; 213
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	e4 91       	lpm	r30, Z
    1f14:	e0 93 ff 05 	sts	0x05FF, r30
    1f18:	6c c0       	rjmp	.+216    	; 0x1ff2 <_Z4tonehjm+0x23c>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    1f1a:	10 92 90 00 	sts	0x0090, r1
        TCCR3B = 0;
    1f1e:	e1 e9       	ldi	r30, 0x91	; 145
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	10 82       	st	Z, r1
        bitWrite(TCCR3B, WGM32, 1);
    1f24:	80 81       	ld	r24, Z
    1f26:	88 60       	ori	r24, 0x08	; 8
    1f28:	80 83       	st	Z, r24
        bitWrite(TCCR3B, CS30, 1);
    1f2a:	80 81       	ld	r24, Z
    1f2c:	81 60       	ori	r24, 0x01	; 1
    1f2e:	80 83       	st	Z, r24
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f30:	2a 2f       	mov	r18, r26
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	f9 01       	movw	r30, r18
    1f36:	ef 58       	subi	r30, 0x8F	; 143
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	e4 91       	lpm	r30, Z
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	ef 52       	subi	r30, 0x2F	; 47
    1f44:	fe 4f       	sbci	r31, 0xFE	; 254
    1f46:	85 91       	lpm	r24, Z+
    1f48:	94 91       	lpm	r25, Z
    1f4a:	80 93 f9 05 	sts	0x05F9, r24
    1f4e:	90 93 fa 05 	sts	0x05FA, r25
        timer3_pin_mask = digitalPinToBitMask(_pin);
    1f52:	f9 01       	movw	r30, r18
    1f54:	e5 5d       	subi	r30, 0xD5	; 213
    1f56:	fe 4f       	sbci	r31, 0xFE	; 254
    1f58:	e4 91       	lpm	r30, Z
    1f5a:	e0 93 f8 05 	sts	0x05F8, r30
    1f5e:	49 c0       	rjmp	.+146    	; 0x1ff2 <_Z4tonehjm+0x23c>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    1f60:	10 92 a0 00 	sts	0x00A0, r1
        TCCR4B = 0;
    1f64:	e1 ea       	ldi	r30, 0xA1	; 161
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	10 82       	st	Z, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 60       	ori	r24, 0x08	; 8
    1f6e:	80 83       	st	Z, r24
        #elif defined(CS43)
          #warning this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    1f70:	80 81       	ld	r24, Z
    1f72:	81 60       	ori	r24, 0x01	; 1
    1f74:	80 83       	st	Z, r24
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f76:	2a 2f       	mov	r18, r26
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	ef 58       	subi	r30, 0x8F	; 143
    1f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f80:	e4 91       	lpm	r30, Z
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	ef 52       	subi	r30, 0x2F	; 47
    1f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8c:	85 91       	lpm	r24, Z+
    1f8e:	94 91       	lpm	r25, Z
    1f90:	80 93 f2 05 	sts	0x05F2, r24
    1f94:	90 93 f3 05 	sts	0x05F3, r25
        timer4_pin_mask = digitalPinToBitMask(_pin);
    1f98:	f9 01       	movw	r30, r18
    1f9a:	e5 5d       	subi	r30, 0xD5	; 213
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	e4 91       	lpm	r30, Z
    1fa0:	e0 93 f1 05 	sts	0x05F1, r30
    1fa4:	26 c0       	rjmp	.+76     	; 0x1ff2 <_Z4tonehjm+0x23c>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    1fa6:	10 92 20 01 	sts	0x0120, r1
        TCCR5B = 0;
    1faa:	e1 e2       	ldi	r30, 0x21	; 33
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	10 82       	st	Z, r1
        bitWrite(TCCR5B, WGM52, 1);
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 60       	ori	r24, 0x08	; 8
    1fb4:	80 83       	st	Z, r24
        bitWrite(TCCR5B, CS50, 1);
    1fb6:	80 81       	ld	r24, Z
    1fb8:	81 60       	ori	r24, 0x01	; 1
    1fba:	80 83       	st	Z, r24
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1fbc:	2a 2f       	mov	r18, r26
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	ef 58       	subi	r30, 0x8F	; 143
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	e4 91       	lpm	r30, Z
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ef 52       	subi	r30, 0x2F	; 47
    1fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd2:	85 91       	lpm	r24, Z+
    1fd4:	94 91       	lpm	r25, Z
    1fd6:	80 93 eb 05 	sts	0x05EB, r24
    1fda:	90 93 ec 05 	sts	0x05EC, r25
        timer5_pin_mask = digitalPinToBitMask(_pin);
    1fde:	f9 01       	movw	r30, r18
    1fe0:	e5 5d       	subi	r30, 0xD5	; 213
    1fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe4:	e4 91       	lpm	r30, Z
    1fe6:	e0 93 ea 05 	sts	0x05EA, r30
    1fea:	03 c0       	rjmp	.+6      	; 0x1ff2 <_Z4tonehjm+0x23c>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1fec:	33 20       	and	r3, r3
    1fee:	0c f4       	brge	.+2      	; 0x1ff2 <_Z4tonehjm+0x23c>
    1ff0:	bd c1       	rjmp	.+890    	; 0x236c <__stack+0x16d>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1ff2:	8a 2f       	mov	r24, r26
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1ffa:	33 20       	and	r3, r3
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <_Z4tonehjm+0x250>
    1ffe:	f2 e0       	ldi	r31, 0x02	; 2
    2000:	3f 16       	cp	r3, r31
    2002:	09 f0       	breq	.+2      	; 0x2006 <_Z4tonehjm+0x250>
    2004:	c3 c0       	rjmp	.+390    	; 0x218c <_Z4tonehjm+0x3d6>
    {
      ocr = F_CPU / frequency / 2 - 1;
    2006:	68 01       	movw	r12, r16
    2008:	ee 24       	eor	r14, r14
    200a:	ff 24       	eor	r15, r15
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	72 e1       	ldi	r23, 0x12	; 18
    2010:	8a e7       	ldi	r24, 0x7A	; 122
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a7 01       	movw	r20, r14
    2016:	96 01       	movw	r18, r12
    2018:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    201c:	29 01       	movw	r4, r18
    201e:	3a 01       	movw	r6, r20
    2020:	49 01       	movw	r8, r18
    2022:	5a 01       	movw	r10, r20
    2024:	08 94       	sec
    2026:	81 08       	sbc	r8, r1
    2028:	91 08       	sbc	r9, r1
    202a:	a1 08       	sbc	r10, r1
    202c:	b1 08       	sbc	r11, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	88 16       	cp	r8, r24
    2032:	91 04       	cpc	r9, r1
    2034:	a1 04       	cpc	r10, r1
    2036:	b1 04       	cpc	r11, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <_Z4tonehjm+0x286>
    203a:	08 f4       	brcc	.+2      	; 0x203e <_Z4tonehjm+0x288>
    203c:	9a c0       	rjmp	.+308    	; 0x2172 <_Z4tonehjm+0x3bc>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    203e:	60 e4       	ldi	r22, 0x40	; 64
    2040:	72 e4       	ldi	r23, 0x42	; 66
    2042:	8f e0       	ldi	r24, 0x0F	; 15
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a7 01       	movw	r20, r14
    2048:	96 01       	movw	r18, r12
    204a:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    204e:	49 01       	movw	r8, r18
    2050:	5a 01       	movw	r10, r20
    2052:	08 94       	sec
    2054:	81 08       	sbc	r8, r1
    2056:	91 08       	sbc	r9, r1
    2058:	a1 08       	sbc	r10, r1
    205a:	b1 08       	sbc	r11, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	39 16       	cp	r3, r25
    2060:	c9 f4       	brne	.+50     	; 0x2094 <_Z4tonehjm+0x2de>
    2062:	af ef       	ldi	r26, 0xFF	; 255
    2064:	8a 16       	cp	r8, r26
    2066:	91 04       	cpc	r9, r1
    2068:	a1 04       	cpc	r10, r1
    206a:	b1 04       	cpc	r11, r1
    206c:	09 f0       	breq	.+2      	; 0x2070 <_Z4tonehjm+0x2ba>
    206e:	08 f4       	brcc	.+2      	; 0x2072 <_Z4tonehjm+0x2bc>
    2070:	82 c0       	rjmp	.+260    	; 0x2176 <_Z4tonehjm+0x3c0>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2072:	60 e9       	ldi	r22, 0x90	; 144
    2074:	70 ed       	ldi	r23, 0xD0	; 208
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a7 01       	movw	r20, r14
    207c:	96 01       	movw	r18, r12
    207e:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    2082:	49 01       	movw	r8, r18
    2084:	5a 01       	movw	r10, r20
    2086:	08 94       	sec
    2088:	81 08       	sbc	r8, r1
    208a:	91 08       	sbc	r9, r1
    208c:	a1 08       	sbc	r10, r1
    208e:	b1 08       	sbc	r11, r1
          prescalarbits = 0b011;
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <_Z4tonehjm+0x2e0>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2094:	82 e0       	ldi	r24, 0x02	; 2
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2096:	bf ef       	ldi	r27, 0xFF	; 255
    2098:	8b 16       	cp	r8, r27
    209a:	91 04       	cpc	r9, r1
    209c:	a1 04       	cpc	r10, r1
    209e:	b1 04       	cpc	r11, r1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <_Z4tonehjm+0x2ee>
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <_Z4tonehjm+0x2f0>
    20a4:	69 c0       	rjmp	.+210    	; 0x2178 <_Z4tonehjm+0x3c2>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    20a6:	68 e4       	ldi	r22, 0x48	; 72
    20a8:	78 ee       	ldi	r23, 0xE8	; 232
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a7 01       	movw	r20, r14
    20b0:	96 01       	movw	r18, r12
    20b2:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    20b6:	49 01       	movw	r8, r18
    20b8:	5a 01       	movw	r10, r20
    20ba:	08 94       	sec
    20bc:	81 08       	sbc	r8, r1
    20be:	91 08       	sbc	r9, r1
    20c0:	a1 08       	sbc	r10, r1
    20c2:	b1 08       	sbc	r11, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    20c4:	33 20       	and	r3, r3
    20c6:	e1 f0       	breq	.+56     	; 0x2100 <_Z4tonehjm+0x34a>

          if (_timer == 2 && ocr > 255)
    20c8:	e2 e0       	ldi	r30, 0x02	; 2
    20ca:	3e 16       	cp	r3, r30
    20cc:	d9 f4       	brne	.+54     	; 0x2104 <_Z4tonehjm+0x34e>
    20ce:	ff ef       	ldi	r31, 0xFF	; 255
    20d0:	8f 16       	cp	r8, r31
    20d2:	91 04       	cpc	r9, r1
    20d4:	a1 04       	cpc	r10, r1
    20d6:	b1 04       	cpc	r11, r1
    20d8:	09 f0       	breq	.+2      	; 0x20dc <_Z4tonehjm+0x326>
    20da:	08 f4       	brcc	.+2      	; 0x20de <_Z4tonehjm+0x328>
    20dc:	53 c0       	rjmp	.+166    	; 0x2184 <_Z4tonehjm+0x3ce>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    20de:	64 e2       	ldi	r22, 0x24	; 36
    20e0:	74 ef       	ldi	r23, 0xF4	; 244
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a7 01       	movw	r20, r14
    20e8:	96 01       	movw	r18, r12
    20ea:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    20ee:	49 01       	movw	r8, r18
    20f0:	5a 01       	movw	r10, r20
    20f2:	08 94       	sec
    20f4:	81 08       	sbc	r8, r1
    20f6:	91 08       	sbc	r9, r1
    20f8:	a1 08       	sbc	r10, r1
    20fa:	b1 08       	sbc	r11, r1
            prescalarbits = 0b101;
    20fc:	85 e0       	ldi	r24, 0x05	; 5
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <_Z4tonehjm+0x350>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <_Z4tonehjm+0x350>
    2104:	84 e0       	ldi	r24, 0x04	; 4
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    2106:	9f ef       	ldi	r25, 0xFF	; 255
    2108:	89 16       	cp	r8, r25
    210a:	91 04       	cpc	r9, r1
    210c:	a1 04       	cpc	r10, r1
    210e:	b1 04       	cpc	r11, r1
    2110:	99 f1       	breq	.+102    	; 0x2178 <_Z4tonehjm+0x3c2>
    2112:	90 f1       	brcs	.+100    	; 0x2178 <_Z4tonehjm+0x3c2>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2114:	62 e1       	ldi	r22, 0x12	; 18
    2116:	7a e7       	ldi	r23, 0x7A	; 122
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a7 01       	movw	r20, r14
    211e:	96 01       	movw	r18, r12
    2120:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    2124:	49 01       	movw	r8, r18
    2126:	5a 01       	movw	r10, r20
    2128:	08 94       	sec
    212a:	81 08       	sbc	r8, r1
    212c:	91 08       	sbc	r9, r1
    212e:	a1 08       	sbc	r10, r1
    2130:	b1 08       	sbc	r11, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    2132:	33 20       	and	r3, r3
    2134:	11 f4       	brne	.+4      	; 0x213a <_Z4tonehjm+0x384>
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	01 c0       	rjmp	.+2      	; 0x213c <_Z4tonehjm+0x386>
    213a:	86 e0       	ldi	r24, 0x06	; 6
            if (ocr > 255)
    213c:	af ef       	ldi	r26, 0xFF	; 255
    213e:	8a 16       	cp	r8, r26
    2140:	91 04       	cpc	r9, r1
    2142:	a1 04       	cpc	r10, r1
    2144:	b1 04       	cpc	r11, r1
    2146:	c1 f0       	breq	.+48     	; 0x2178 <_Z4tonehjm+0x3c2>
    2148:	b8 f0       	brcs	.+46     	; 0x2178 <_Z4tonehjm+0x3c2>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    214a:	53 01       	movw	r10, r6
    214c:	42 01       	movw	r8, r4
    214e:	07 2e       	mov	r0, r23
    2150:	7a e0       	ldi	r23, 0x0A	; 10
    2152:	b6 94       	lsr	r11
    2154:	a7 94       	ror	r10
    2156:	97 94       	ror	r9
    2158:	87 94       	ror	r8
    215a:	7a 95       	dec	r23
    215c:	d1 f7       	brne	.-12     	; 0x2152 <_Z4tonehjm+0x39c>
    215e:	70 2d       	mov	r23, r0
    2160:	08 94       	sec
    2162:	81 08       	sbc	r8, r1
    2164:	91 08       	sbc	r9, r1
    2166:	a1 08       	sbc	r10, r1
    2168:	b1 08       	sbc	r11, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    216a:	33 20       	and	r3, r3
    216c:	41 f0       	breq	.+16     	; 0x217e <_Z4tonehjm+0x3c8>
    216e:	87 e0       	ldi	r24, 0x07	; 7
    2170:	0a c0       	rjmp	.+20     	; 0x2186 <_Z4tonehjm+0x3d0>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <_Z4tonehjm+0x3c2>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2176:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2178:	33 20       	and	r3, r3
    217a:	11 f0       	breq	.+4      	; 0x2180 <_Z4tonehjm+0x3ca>
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <_Z4tonehjm+0x3d0>
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    217e:	85 e0       	ldi	r24, 0x05	; 5
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = prescalarbits;
    2180:	85 bd       	out	0x25, r24	; 37
    2182:	58 c0       	rjmp	.+176    	; 0x2234 <__stack+0x35>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2184:	84 e0       	ldi	r24, 0x04	; 4
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
    2186:	80 93 b1 00 	sts	0x00B1, r24
    218a:	54 c0       	rjmp	.+168    	; 0x2234 <__stack+0x35>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    218c:	68 01       	movw	r12, r16
    218e:	ee 24       	eor	r14, r14
    2190:	ff 24       	eor	r15, r15
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	72 e1       	ldi	r23, 0x12	; 18
    2196:	8a e7       	ldi	r24, 0x7A	; 122
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a7 01       	movw	r20, r14
    219c:	96 01       	movw	r18, r12
    219e:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    21a2:	49 01       	movw	r8, r18
    21a4:	5a 01       	movw	r10, r20
    21a6:	08 94       	sec
    21a8:	81 08       	sbc	r8, r1
    21aa:	91 08       	sbc	r9, r1
    21ac:	a1 08       	sbc	r10, r1
    21ae:	b1 08       	sbc	r11, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	8b 16       	cp	r8, r27
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	9b 06       	cpc	r9, r27
    21b8:	b1 e0       	ldi	r27, 0x01	; 1
    21ba:	ab 06       	cpc	r10, r27
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	bb 06       	cpc	r11, r27
    21c0:	88 f0       	brcs	.+34     	; 0x21e4 <_Z4tonehjm+0x42e>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    21c2:	68 e4       	ldi	r22, 0x48	; 72
    21c4:	78 ee       	ldi	r23, 0xE8	; 232
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a7 01       	movw	r20, r14
    21cc:	96 01       	movw	r18, r12
    21ce:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    21d2:	49 01       	movw	r8, r18
    21d4:	5a 01       	movw	r10, r20
    21d6:	08 94       	sec
    21d8:	81 08       	sbc	r8, r1
    21da:	91 08       	sbc	r9, r1
    21dc:	a1 08       	sbc	r10, r1
    21de:	b1 08       	sbc	r11, r1
        prescalarbits = 0b011;
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <_Z4tonehjm+0x430>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    21e6:	e1 e0       	ldi	r30, 0x01	; 1
    21e8:	3e 16       	cp	r3, r30
    21ea:	39 f4       	brne	.+14     	; 0x21fa <_Z4tonehjm+0x444>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    21ec:	e1 e8       	ldi	r30, 0x81	; 129
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	90 81       	ld	r25, Z
    21f2:	98 7f       	andi	r25, 0xF8	; 248
    21f4:	89 2b       	or	r24, r25
    21f6:	80 83       	st	Z, r24
    21f8:	1d c0       	rjmp	.+58     	; 0x2234 <__stack+0x35>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    21fa:	f3 e0       	ldi	r31, 0x03	; 3
    21fc:	3f 16       	cp	r3, r31
    21fe:	39 f4       	brne	.+14     	; 0x220e <__stack+0xf>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    2200:	e1 e9       	ldi	r30, 0x91	; 145
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	90 81       	ld	r25, Z
    2206:	98 7f       	andi	r25, 0xF8	; 248
    2208:	89 2b       	or	r24, r25
    220a:	80 83       	st	Z, r24
    220c:	13 c0       	rjmp	.+38     	; 0x2234 <__stack+0x35>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    220e:	94 e0       	ldi	r25, 0x04	; 4
    2210:	39 16       	cp	r3, r25
    2212:	39 f4       	brne	.+14     	; 0x2222 <__stack+0x23>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    2214:	e1 ea       	ldi	r30, 0xA1	; 161
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	90 81       	ld	r25, Z
    221a:	98 7f       	andi	r25, 0xF8	; 248
    221c:	89 2b       	or	r24, r25
    221e:	80 83       	st	Z, r24
    2220:	09 c0       	rjmp	.+18     	; 0x2234 <__stack+0x35>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    2222:	a5 e0       	ldi	r26, 0x05	; 5
    2224:	3a 16       	cp	r3, r26
    2226:	31 f4       	brne	.+12     	; 0x2234 <__stack+0x35>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    2228:	e1 e2       	ldi	r30, 0x21	; 33
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	90 81       	ld	r25, Z
    222e:	98 7f       	andi	r25, 0xF8	; 248
    2230:	89 2b       	or	r24, r25
    2232:	80 83       	st	Z, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	ab 81       	ldd	r26, Y+3	; 0x03
    223a:	bc 81       	ldd	r27, Y+4	; 0x04
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	a1 05       	cpc	r26, r1
    2240:	b1 05       	cpc	r27, r1
    2242:	a1 f0       	breq	.+40     	; 0x226c <__stack+0x6d>
    {
      toggle_count = 2 * frequency * duration / 1000;
    2244:	b8 01       	movw	r22, r16
    2246:	66 0f       	add	r22, r22
    2248:	77 1f       	adc	r23, r23
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	29 81       	ldd	r18, Y+1	; 0x01
    2250:	3a 81       	ldd	r19, Y+2	; 0x02
    2252:	4b 81       	ldd	r20, Y+3	; 0x03
    2254:	5c 81       	ldd	r21, Y+4	; 0x04
    2256:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    225a:	28 ee       	ldi	r18, 0xE8	; 232
    225c:	33 e0       	ldi	r19, 0x03	; 3
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    2266:	89 01       	movw	r16, r18
    2268:	9a 01       	movw	r18, r20
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <__stack+0x73>
    }
    else
    {
      toggle_count = -1;
    226c:	0f ef       	ldi	r16, 0xFF	; 255
    226e:	1f ef       	ldi	r17, 0xFF	; 255
    2270:	98 01       	movw	r18, r16
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	39 16       	cp	r3, r25
    2276:	a9 f1       	breq	.+106    	; 0x22e2 <__stack+0xe3>
    2278:	93 15       	cp	r25, r3
    227a:	3c f0       	brlt	.+14     	; 0x228a <__stack+0x8b>
    227c:	33 20       	and	r3, r3
    227e:	81 f0       	breq	.+32     	; 0x22a0 <__stack+0xa1>
    2280:	a1 e0       	ldi	r26, 0x01	; 1
    2282:	3a 16       	cp	r3, r26
    2284:	09 f0       	breq	.+2      	; 0x2288 <__stack+0x89>
    2286:	72 c0       	rjmp	.+228    	; 0x236c <__stack+0x16d>
    2288:	1a c0       	rjmp	.+52     	; 0x22be <__stack+0xbf>
    228a:	b4 e0       	ldi	r27, 0x04	; 4
    228c:	3b 16       	cp	r3, r27
    228e:	09 f4       	brne	.+2      	; 0x2292 <__stack+0x93>
    2290:	4a c0       	rjmp	.+148    	; 0x2326 <__stack+0x127>
    2292:	3b 16       	cp	r3, r27
    2294:	b4 f1       	brlt	.+108    	; 0x2302 <__stack+0x103>
    2296:	e5 e0       	ldi	r30, 0x05	; 5
    2298:	3e 16       	cp	r3, r30
    229a:	09 f0       	breq	.+2      	; 0x229e <__stack+0x9f>
    229c:	67 c0       	rjmp	.+206    	; 0x236c <__stack+0x16d>
    229e:	55 c0       	rjmp	.+170    	; 0x234a <__stack+0x14b>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    22a0:	87 bc       	out	0x27, r8	; 39
        timer0_toggle_count = toggle_count;
    22a2:	00 93 10 06 	sts	0x0610, r16
    22a6:	10 93 11 06 	sts	0x0611, r17
    22aa:	20 93 12 06 	sts	0x0612, r18
    22ae:	30 93 13 06 	sts	0x0613, r19
        bitWrite(TIMSK0, OCIE0A, 1);
    22b2:	ee e6       	ldi	r30, 0x6E	; 110
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	82 60       	ori	r24, 0x02	; 2
    22ba:	80 83       	st	Z, r24
        break;
    22bc:	57 c0       	rjmp	.+174    	; 0x236c <__stack+0x16d>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    22be:	90 92 89 00 	sts	0x0089, r9
    22c2:	80 92 88 00 	sts	0x0088, r8
        timer1_toggle_count = toggle_count;
    22c6:	00 93 09 06 	sts	0x0609, r16
    22ca:	10 93 0a 06 	sts	0x060A, r17
    22ce:	20 93 0b 06 	sts	0x060B, r18
    22d2:	30 93 0c 06 	sts	0x060C, r19
        bitWrite(TIMSK1, OCIE1A, 1);
    22d6:	ef e6       	ldi	r30, 0x6F	; 111
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	82 60       	ori	r24, 0x02	; 2
    22de:	80 83       	st	Z, r24
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    22e0:	45 c0       	rjmp	.+138    	; 0x236c <__stack+0x16d>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    22e2:	80 92 b3 00 	sts	0x00B3, r8
        timer2_toggle_count = toggle_count;
    22e6:	00 93 02 06 	sts	0x0602, r16
    22ea:	10 93 03 06 	sts	0x0603, r17
    22ee:	20 93 04 06 	sts	0x0604, r18
    22f2:	30 93 05 06 	sts	0x0605, r19
        bitWrite(TIMSK2, OCIE2A, 1);
    22f6:	e0 e7       	ldi	r30, 0x70	; 112
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	82 60       	ori	r24, 0x02	; 2
    22fe:	80 83       	st	Z, r24
        break;
    2300:	35 c0       	rjmp	.+106    	; 0x236c <__stack+0x16d>
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
    2302:	90 92 99 00 	sts	0x0099, r9
    2306:	80 92 98 00 	sts	0x0098, r8
        timer3_toggle_count = toggle_count;
    230a:	00 93 fb 05 	sts	0x05FB, r16
    230e:	10 93 fc 05 	sts	0x05FC, r17
    2312:	20 93 fd 05 	sts	0x05FD, r18
    2316:	30 93 fe 05 	sts	0x05FE, r19
        bitWrite(TIMSK3, OCIE3A, 1);
    231a:	e1 e7       	ldi	r30, 0x71	; 113
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	82 60       	ori	r24, 0x02	; 2
    2322:	80 83       	st	Z, r24
        break;
    2324:	23 c0       	rjmp	.+70     	; 0x236c <__stack+0x16d>
#endif

#if defined(TIMSK4)
      case 4:
        OCR4A = ocr;
    2326:	90 92 a9 00 	sts	0x00A9, r9
    232a:	80 92 a8 00 	sts	0x00A8, r8
        timer4_toggle_count = toggle_count;
    232e:	00 93 f4 05 	sts	0x05F4, r16
    2332:	10 93 f5 05 	sts	0x05F5, r17
    2336:	20 93 f6 05 	sts	0x05F6, r18
    233a:	30 93 f7 05 	sts	0x05F7, r19
        bitWrite(TIMSK4, OCIE4A, 1);
    233e:	e2 e7       	ldi	r30, 0x72	; 114
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	80 83       	st	Z, r24
        break;
    2348:	11 c0       	rjmp	.+34     	; 0x236c <__stack+0x16d>
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    234a:	90 92 29 01 	sts	0x0129, r9
    234e:	80 92 28 01 	sts	0x0128, r8
        timer5_toggle_count = toggle_count;
    2352:	00 93 ed 05 	sts	0x05ED, r16
    2356:	10 93 ee 05 	sts	0x05EE, r17
    235a:	20 93 ef 05 	sts	0x05EF, r18
    235e:	30 93 f0 05 	sts	0x05F0, r19
        bitWrite(TIMSK5, OCIE5A, 1);
    2362:	e3 e7       	ldi	r30, 0x73	; 115
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	82 60       	ori	r24, 0x02	; 2
    236a:	80 83       	st	Z, r24
        break;
#endif

    }
  }
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	08 95       	ret

00002398 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	b9 f0       	breq	.+46     	; 0x23ca <_Z12disableTimerh+0x32>
    239c:	83 30       	cpi	r24, 0x03	; 3
    239e:	28 f4       	brcc	.+10     	; 0x23aa <_Z12disableTimerh+0x12>
    23a0:	88 23       	and	r24, r24
    23a2:	51 f0       	breq	.+20     	; 0x23b8 <_Z12disableTimerh+0x20>
    23a4:	81 30       	cpi	r24, 0x01	; 1
    23a6:	51 f5       	brne	.+84     	; 0x23fc <_Z12disableTimerh+0x64>
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <_Z12disableTimerh+0x26>
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	11 f1       	breq	.+68     	; 0x23f2 <_Z12disableTimerh+0x5a>
    23ae:	84 30       	cpi	r24, 0x04	; 4
    23b0:	e8 f0       	brcs	.+58     	; 0x23ec <_Z12disableTimerh+0x54>
    23b2:	85 30       	cpi	r24, 0x05	; 5
    23b4:	19 f5       	brne	.+70     	; 0x23fc <_Z12disableTimerh+0x64>
    23b6:	20 c0       	rjmp	.+64     	; 0x23f8 <_Z12disableTimerh+0x60>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    23b8:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    23bc:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    23be:	ef e6       	ldi	r30, 0x6F	; 111
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8d 7f       	andi	r24, 0xFD	; 253
    23c6:	80 83       	st	Z, r24
      break;
    23c8:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    23ca:	e0 e7       	ldi	r30, 0x70	; 112
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	8d 7f       	andi	r24, 0xFD	; 253
    23d2:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    23da:	e1 eb       	ldi	r30, 0xB1	; 177
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	88 7f       	andi	r24, 0xF8	; 248
    23e2:	84 60       	ori	r24, 0x04	; 4
    23e4:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    23e6:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    23ea:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    23ec:	10 92 71 00 	sts	0x0071, r1
      break;
    23f0:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    23f2:	10 92 72 00 	sts	0x0072, r1
      break;
    23f6:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    23f8:	10 92 73 00 	sts	0x0073, r1
    23fc:	08 95       	ret

000023fe <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23fe:	cf 93       	push	r28
    2400:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2402:	80 91 49 02 	lds	r24, 0x0249
    2406:	8c 17       	cp	r24, r28
    2408:	39 f4       	brne	.+14     	; 0x2418 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    240a:	e4 ee       	ldi	r30, 0xE4	; 228
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    2410:	9f ef       	ldi	r25, 0xFF	; 255
    2412:	90 93 49 02 	sts	0x0249, r25
    2416:	01 c0       	rjmp	.+2      	; 0x241a <_Z6noToneh+0x1c>
void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2418:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    241a:	0e 94 cc 11 	call	0x2398	; 0x2398 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    241e:	8c 2f       	mov	r24, r28
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
}
    2426:	cf 91       	pop	r28
    2428:	08 95       	ret

0000242a <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    242a:	1f 92       	push	r1
    242c:	0f 92       	push	r0
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	0f 92       	push	r0
    2432:	0b b6       	in	r0, 0x3b	; 59
    2434:	0f 92       	push	r0
    2436:	11 24       	eor	r1, r1
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	4f 93       	push	r20
    243e:	5f 93       	push	r21
    2440:	6f 93       	push	r22
    2442:	7f 93       	push	r23
    2444:	8f 93       	push	r24
    2446:	9f 93       	push	r25
    2448:	af 93       	push	r26
    244a:	bf 93       	push	r27
    244c:	ef 93       	push	r30
    244e:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    2450:	80 91 02 06 	lds	r24, 0x0602
    2454:	90 91 03 06 	lds	r25, 0x0603
    2458:	a0 91 04 06 	lds	r26, 0x0604
    245c:	b0 91 05 06 	lds	r27, 0x0605
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	a1 05       	cpc	r26, r1
    2464:	b1 05       	cpc	r27, r1
    2466:	51 f1       	breq	.+84     	; 0x24bc <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2468:	e0 91 00 06 	lds	r30, 0x0600
    246c:	f0 91 01 06 	lds	r31, 0x0601
    2470:	90 81       	ld	r25, Z
    2472:	80 91 ff 05 	lds	r24, 0x05FF
    2476:	89 27       	eor	r24, r25
    2478:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    247a:	80 91 02 06 	lds	r24, 0x0602
    247e:	90 91 03 06 	lds	r25, 0x0603
    2482:	a0 91 04 06 	lds	r26, 0x0604
    2486:	b0 91 05 06 	lds	r27, 0x0605
    248a:	18 16       	cp	r1, r24
    248c:	19 06       	cpc	r1, r25
    248e:	1a 06       	cpc	r1, r26
    2490:	1b 06       	cpc	r1, r27
    2492:	c4 f4       	brge	.+48     	; 0x24c4 <__vector_13+0x9a>
      timer2_toggle_count--;
    2494:	80 91 02 06 	lds	r24, 0x0602
    2498:	90 91 03 06 	lds	r25, 0x0603
    249c:	a0 91 04 06 	lds	r26, 0x0604
    24a0:	b0 91 05 06 	lds	r27, 0x0605
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	a1 09       	sbc	r26, r1
    24a8:	b1 09       	sbc	r27, r1
    24aa:	80 93 02 06 	sts	0x0602, r24
    24ae:	90 93 03 06 	sts	0x0603, r25
    24b2:	a0 93 04 06 	sts	0x0604, r26
    24b6:	b0 93 05 06 	sts	0x0605, r27
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <__vector_13+0x9a>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    24bc:	80 91 49 02 	lds	r24, 0x0249
    24c0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0b be       	out	0x3b, r0	; 59
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    24ea:	88 30       	cpi	r24, 0x08	; 8
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <attachInterrupt+0x6>
    24ee:	82 c0       	rjmp	.+260    	; 0x25f4 <attachInterrupt+0x10a>
    intFunc[interruptNum] = userFunc;
    24f0:	e8 2f       	mov	r30, r24
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ec 5e       	subi	r30, 0xEC	; 236
    24fa:	f9 4f       	sbci	r31, 0xF9	; 249
    24fc:	71 83       	std	Z+1, r23	; 0x01
    24fe:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	d9 f0       	breq	.+54     	; 0x253a <attachInterrupt+0x50>
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	30 f4       	brcc	.+12     	; 0x2514 <attachInterrupt+0x2a>
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	09 f4       	brne	.+2      	; 0x250e <attachInterrupt+0x24>
    250c:	49 c0       	rjmp	.+146    	; 0x25a0 <attachInterrupt+0xb6>
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	60 f4       	brcc	.+24     	; 0x252a <attachInterrupt+0x40>
    2512:	3e c0       	rjmp	.+124    	; 0x2590 <attachInterrupt+0xa6>
    2514:	85 30       	cpi	r24, 0x05	; 5
    2516:	59 f1       	breq	.+86     	; 0x256e <attachInterrupt+0x84>
    2518:	85 30       	cpi	r24, 0x05	; 5
    251a:	d8 f0       	brcs	.+54     	; 0x2552 <attachInterrupt+0x68>
    251c:	86 30       	cpi	r24, 0x06	; 6
    251e:	09 f4       	brne	.+2      	; 0x2522 <attachInterrupt+0x38>
    2520:	4b c0       	rjmp	.+150    	; 0x25b8 <attachInterrupt+0xce>
    2522:	87 30       	cpi	r24, 0x07	; 7
    2524:	09 f0       	breq	.+2      	; 0x2528 <attachInterrupt+0x3e>
    2526:	66 c0       	rjmp	.+204    	; 0x25f4 <attachInterrupt+0x10a>
    2528:	55 c0       	rjmp	.+170    	; 0x25d4 <attachInterrupt+0xea>
        EICRB = (EICRB & ~((1<<ISC60) | (1<<ISC61))) | (mode << ISC60);
        EIMSK |= (1<<INT6);
        break;
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    252a:	e9 e6       	ldi	r30, 0x69	; 105
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8c 7f       	andi	r24, 0xFC	; 252
    2532:	48 2b       	or	r20, r24
    2534:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    2536:	e8 9a       	sbi	0x1d, 0	; 29
      break;
    2538:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    253a:	e9 e6       	ldi	r30, 0x69	; 105
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	44 0f       	add	r20, r20
    2546:	55 1f       	adc	r21, r21
    2548:	83 7f       	andi	r24, 0xF3	; 243
    254a:	48 2b       	or	r20, r24
    254c:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    254e:	e9 9a       	sbi	0x1d, 1	; 29
      break;
    2550:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    2552:	e9 e6       	ldi	r30, 0x69	; 105
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	42 95       	swap	r20
    255a:	52 95       	swap	r21
    255c:	50 7f       	andi	r21, 0xF0	; 240
    255e:	54 27       	eor	r21, r20
    2560:	40 7f       	andi	r20, 0xF0	; 240
    2562:	54 27       	eor	r21, r20
    2564:	8f 7c       	andi	r24, 0xCF	; 207
    2566:	48 2b       	or	r20, r24
    2568:	40 83       	st	Z, r20
      EIMSK |= (1 << INT2);
    256a:	ea 9a       	sbi	0x1d, 2	; 29
      break;
    256c:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    256e:	e9 e6       	ldi	r30, 0x69	; 105
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	00 24       	eor	r0, r0
    2576:	56 95       	lsr	r21
    2578:	47 95       	ror	r20
    257a:	07 94       	ror	r0
    257c:	56 95       	lsr	r21
    257e:	47 95       	ror	r20
    2580:	07 94       	ror	r0
    2582:	54 2f       	mov	r21, r20
    2584:	40 2d       	mov	r20, r0
    2586:	8f 73       	andi	r24, 0x3F	; 63
    2588:	48 2b       	or	r20, r24
    258a:	40 83       	st	Z, r20
      EIMSK |= (1 << INT3);
    258c:	eb 9a       	sbi	0x1d, 3	; 29
      break;
    258e:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    2590:	ea e6       	ldi	r30, 0x6A	; 106
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8c 7f       	andi	r24, 0xFC	; 252
    2598:	48 2b       	or	r20, r24
    259a:	40 83       	st	Z, r20
      EIMSK |= (1 << INT4);
    259c:	ec 9a       	sbi	0x1d, 4	; 29
      break;
    259e:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    25a0:	ea e6       	ldi	r30, 0x6A	; 106
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	44 0f       	add	r20, r20
    25a8:	55 1f       	adc	r21, r21
    25aa:	44 0f       	add	r20, r20
    25ac:	55 1f       	adc	r21, r21
    25ae:	83 7f       	andi	r24, 0xF3	; 243
    25b0:	48 2b       	or	r20, r24
    25b2:	40 83       	st	Z, r20
      EIMSK |= (1 << INT5);
    25b4:	ed 9a       	sbi	0x1d, 5	; 29
      break;
    25b6:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    25b8:	ea e6       	ldi	r30, 0x6A	; 106
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	42 95       	swap	r20
    25c0:	52 95       	swap	r21
    25c2:	50 7f       	andi	r21, 0xF0	; 240
    25c4:	54 27       	eor	r21, r20
    25c6:	40 7f       	andi	r20, 0xF0	; 240
    25c8:	54 27       	eor	r21, r20
    25ca:	8f 7c       	andi	r24, 0xCF	; 207
    25cc:	48 2b       	or	r20, r24
    25ce:	40 83       	st	Z, r20
      EIMSK |= (1 << INT6);
    25d0:	ee 9a       	sbi	0x1d, 6	; 29
      break;
    25d2:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    25d4:	ea e6       	ldi	r30, 0x6A	; 106
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	00 24       	eor	r0, r0
    25dc:	56 95       	lsr	r21
    25de:	47 95       	ror	r20
    25e0:	07 94       	ror	r0
    25e2:	56 95       	lsr	r21
    25e4:	47 95       	ror	r20
    25e6:	07 94       	ror	r0
    25e8:	54 2f       	mov	r21, r20
    25ea:	40 2d       	mov	r20, r0
    25ec:	8f 73       	andi	r24, 0x3F	; 63
    25ee:	48 2b       	or	r20, r24
    25f0:	40 83       	st	Z, r20
      EIMSK |= (1 << INT7);
    25f2:	ef 9a       	sbi	0x1d, 7	; 29
    25f4:	08 95       	ret

000025f6 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    25f6:	88 30       	cpi	r24, 0x08	; 8
    25f8:	48 f5       	brcc	.+82     	; 0x264c <detachInterrupt+0x56>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    25fa:	83 30       	cpi	r24, 0x03	; 3
    25fc:	91 f0       	breq	.+36     	; 0x2622 <detachInterrupt+0x2c>
    25fe:	84 30       	cpi	r24, 0x04	; 4
    2600:	28 f4       	brcc	.+10     	; 0x260c <detachInterrupt+0x16>
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	b1 f0       	breq	.+44     	; 0x2632 <detachInterrupt+0x3c>
    2606:	82 30       	cpi	r24, 0x02	; 2
    2608:	50 f4       	brcc	.+20     	; 0x261e <detachInterrupt+0x28>
    260a:	11 c0       	rjmp	.+34     	; 0x262e <detachInterrupt+0x38>
    260c:	85 30       	cpi	r24, 0x05	; 5
    260e:	69 f0       	breq	.+26     	; 0x262a <detachInterrupt+0x34>
    2610:	85 30       	cpi	r24, 0x05	; 5
    2612:	48 f0       	brcs	.+18     	; 0x2626 <detachInterrupt+0x30>
    2614:	86 30       	cpi	r24, 0x06	; 6
    2616:	79 f0       	breq	.+30     	; 0x2636 <detachInterrupt+0x40>
    2618:	87 30       	cpi	r24, 0x07	; 7
    261a:	81 f4       	brne	.+32     	; 0x263c <detachInterrupt+0x46>
    261c:	0e c0       	rjmp	.+28     	; 0x263a <detachInterrupt+0x44>
    case 4:
        EIMSK &= ~(1<<INT6);
        break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
    261e:	e8 98       	cbi	0x1d, 0	; 29
      break;
    2620:	0d c0       	rjmp	.+26     	; 0x263c <detachInterrupt+0x46>
    case 3:
      EIMSK &= ~(1 << INT1);
    2622:	e9 98       	cbi	0x1d, 1	; 29
      break;
    2624:	0b c0       	rjmp	.+22     	; 0x263c <detachInterrupt+0x46>
    case 4:
      EIMSK &= ~(1 << INT2);
    2626:	ea 98       	cbi	0x1d, 2	; 29
      break;
    2628:	09 c0       	rjmp	.+18     	; 0x263c <detachInterrupt+0x46>
    case 5:
      EIMSK &= ~(1 << INT3);
    262a:	eb 98       	cbi	0x1d, 3	; 29
      break;
    262c:	07 c0       	rjmp	.+14     	; 0x263c <detachInterrupt+0x46>
    case 0:
      EIMSK &= ~(1 << INT4);
    262e:	ec 98       	cbi	0x1d, 4	; 29
      break;
    2630:	05 c0       	rjmp	.+10     	; 0x263c <detachInterrupt+0x46>
    case 1:
      EIMSK &= ~(1 << INT5);
    2632:	ed 98       	cbi	0x1d, 5	; 29
      break;
    2634:	03 c0       	rjmp	.+6      	; 0x263c <detachInterrupt+0x46>
    case 6:
      EIMSK &= ~(1 << INT6);
    2636:	ee 98       	cbi	0x1d, 6	; 29
      break;
    2638:	01 c0       	rjmp	.+2      	; 0x263c <detachInterrupt+0x46>
    case 7:
      EIMSK &= ~(1 << INT7);
    263a:	ef 98       	cbi	0x1d, 7	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    263c:	e8 2f       	mov	r30, r24
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	ec 5e       	subi	r30, 0xEC	; 236
    2646:	f9 4f       	sbci	r31, 0xF9	; 249
    2648:	11 82       	std	Z+1, r1	; 0x01
    264a:	10 82       	st	Z, r1
    264c:	08 95       	ret

0000264e <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    264e:	1f 92       	push	r1
    2650:	0f 92       	push	r0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	0f 92       	push	r0
    2656:	0b b6       	in	r0, 0x3b	; 59
    2658:	0f 92       	push	r0
    265a:	11 24       	eor	r1, r1
    265c:	2f 93       	push	r18
    265e:	3f 93       	push	r19
    2660:	4f 93       	push	r20
    2662:	5f 93       	push	r21
    2664:	6f 93       	push	r22
    2666:	7f 93       	push	r23
    2668:	8f 93       	push	r24
    266a:	9f 93       	push	r25
    266c:	af 93       	push	r26
    266e:	bf 93       	push	r27
    2670:	ef 93       	push	r30
    2672:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    2674:	80 91 18 06 	lds	r24, 0x0618
    2678:	90 91 19 06 	lds	r25, 0x0619
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	29 f0       	breq	.+10     	; 0x268a <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    2680:	e0 91 18 06 	lds	r30, 0x0618
    2684:	f0 91 19 06 	lds	r31, 0x0619
    2688:	19 95       	eicall
}
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	bf 91       	pop	r27
    2690:	af 91       	pop	r26
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	7f 91       	pop	r23
    2698:	6f 91       	pop	r22
    269a:	5f 91       	pop	r21
    269c:	4f 91       	pop	r20
    269e:	3f 91       	pop	r19
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0b be       	out	0x3b, r0	; 59
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

000026b0 <__vector_2>:

ISR(INT1_vect) {
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	0f 92       	push	r0
    26b8:	0b b6       	in	r0, 0x3b	; 59
    26ba:	0f 92       	push	r0
    26bc:	11 24       	eor	r1, r1
    26be:	2f 93       	push	r18
    26c0:	3f 93       	push	r19
    26c2:	4f 93       	push	r20
    26c4:	5f 93       	push	r21
    26c6:	6f 93       	push	r22
    26c8:	7f 93       	push	r23
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    26d6:	80 91 1a 06 	lds	r24, 0x061A
    26da:	90 91 1b 06 	lds	r25, 0x061B
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	29 f0       	breq	.+10     	; 0x26ec <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    26e2:	e0 91 1a 06 	lds	r30, 0x061A
    26e6:	f0 91 1b 06 	lds	r31, 0x061B
    26ea:	19 95       	eicall
}
    26ec:	ff 91       	pop	r31
    26ee:	ef 91       	pop	r30
    26f0:	bf 91       	pop	r27
    26f2:	af 91       	pop	r26
    26f4:	9f 91       	pop	r25
    26f6:	8f 91       	pop	r24
    26f8:	7f 91       	pop	r23
    26fa:	6f 91       	pop	r22
    26fc:	5f 91       	pop	r21
    26fe:	4f 91       	pop	r20
    2700:	3f 91       	pop	r19
    2702:	2f 91       	pop	r18
    2704:	0f 90       	pop	r0
    2706:	0b be       	out	0x3b, r0	; 59
    2708:	0f 90       	pop	r0
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	0f 90       	pop	r0
    270e:	1f 90       	pop	r1
    2710:	18 95       	reti

00002712 <__vector_3>:

ISR(INT2_vect) {
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	0b b6       	in	r0, 0x3b	; 59
    271c:	0f 92       	push	r0
    271e:	11 24       	eor	r1, r1
    2720:	2f 93       	push	r18
    2722:	3f 93       	push	r19
    2724:	4f 93       	push	r20
    2726:	5f 93       	push	r21
    2728:	6f 93       	push	r22
    272a:	7f 93       	push	r23
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	af 93       	push	r26
    2732:	bf 93       	push	r27
    2734:	ef 93       	push	r30
    2736:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    2738:	80 91 1c 06 	lds	r24, 0x061C
    273c:	90 91 1d 06 	lds	r25, 0x061D
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	29 f0       	breq	.+10     	; 0x274e <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    2744:	e0 91 1c 06 	lds	r30, 0x061C
    2748:	f0 91 1d 06 	lds	r31, 0x061D
    274c:	19 95       	eicall
}
    274e:	ff 91       	pop	r31
    2750:	ef 91       	pop	r30
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	7f 91       	pop	r23
    275c:	6f 91       	pop	r22
    275e:	5f 91       	pop	r21
    2760:	4f 91       	pop	r20
    2762:	3f 91       	pop	r19
    2764:	2f 91       	pop	r18
    2766:	0f 90       	pop	r0
    2768:	0b be       	out	0x3b, r0	; 59
    276a:	0f 90       	pop	r0
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	0f 90       	pop	r0
    2770:	1f 90       	pop	r1
    2772:	18 95       	reti

00002774 <__vector_4>:

ISR(INT3_vect) {
    2774:	1f 92       	push	r1
    2776:	0f 92       	push	r0
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	0f 92       	push	r0
    277c:	0b b6       	in	r0, 0x3b	; 59
    277e:	0f 92       	push	r0
    2780:	11 24       	eor	r1, r1
    2782:	2f 93       	push	r18
    2784:	3f 93       	push	r19
    2786:	4f 93       	push	r20
    2788:	5f 93       	push	r21
    278a:	6f 93       	push	r22
    278c:	7f 93       	push	r23
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    279a:	80 91 1e 06 	lds	r24, 0x061E
    279e:	90 91 1f 06 	lds	r25, 0x061F
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	29 f0       	breq	.+10     	; 0x27b0 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    27a6:	e0 91 1e 06 	lds	r30, 0x061E
    27aa:	f0 91 1f 06 	lds	r31, 0x061F
    27ae:	19 95       	eicall
}
    27b0:	ff 91       	pop	r31
    27b2:	ef 91       	pop	r30
    27b4:	bf 91       	pop	r27
    27b6:	af 91       	pop	r26
    27b8:	9f 91       	pop	r25
    27ba:	8f 91       	pop	r24
    27bc:	7f 91       	pop	r23
    27be:	6f 91       	pop	r22
    27c0:	5f 91       	pop	r21
    27c2:	4f 91       	pop	r20
    27c4:	3f 91       	pop	r19
    27c6:	2f 91       	pop	r18
    27c8:	0f 90       	pop	r0
    27ca:	0b be       	out	0x3b, r0	; 59
    27cc:	0f 90       	pop	r0
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	0f 90       	pop	r0
    27d2:	1f 90       	pop	r1
    27d4:	18 95       	reti

000027d6 <__vector_5>:

ISR(INT4_vect) {
    27d6:	1f 92       	push	r1
    27d8:	0f 92       	push	r0
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	0f 92       	push	r0
    27de:	0b b6       	in	r0, 0x3b	; 59
    27e0:	0f 92       	push	r0
    27e2:	11 24       	eor	r1, r1
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    27fc:	80 91 14 06 	lds	r24, 0x0614
    2800:	90 91 15 06 	lds	r25, 0x0615
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	29 f0       	breq	.+10     	; 0x2812 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    2808:	e0 91 14 06 	lds	r30, 0x0614
    280c:	f0 91 15 06 	lds	r31, 0x0615
    2810:	19 95       	eicall
}
    2812:	ff 91       	pop	r31
    2814:	ef 91       	pop	r30
    2816:	bf 91       	pop	r27
    2818:	af 91       	pop	r26
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	7f 91       	pop	r23
    2820:	6f 91       	pop	r22
    2822:	5f 91       	pop	r21
    2824:	4f 91       	pop	r20
    2826:	3f 91       	pop	r19
    2828:	2f 91       	pop	r18
    282a:	0f 90       	pop	r0
    282c:	0b be       	out	0x3b, r0	; 59
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_6>:

ISR(INT5_vect) {
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	0b b6       	in	r0, 0x3b	; 59
    2842:	0f 92       	push	r0
    2844:	11 24       	eor	r1, r1
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    285e:	80 91 16 06 	lds	r24, 0x0616
    2862:	90 91 17 06 	lds	r25, 0x0617
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	29 f0       	breq	.+10     	; 0x2874 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    286a:	e0 91 16 06 	lds	r30, 0x0616
    286e:	f0 91 17 06 	lds	r31, 0x0617
    2872:	19 95       	eicall
}
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	bf 91       	pop	r27
    287a:	af 91       	pop	r26
    287c:	9f 91       	pop	r25
    287e:	8f 91       	pop	r24
    2880:	7f 91       	pop	r23
    2882:	6f 91       	pop	r22
    2884:	5f 91       	pop	r21
    2886:	4f 91       	pop	r20
    2888:	3f 91       	pop	r19
    288a:	2f 91       	pop	r18
    288c:	0f 90       	pop	r0
    288e:	0b be       	out	0x3b, r0	; 59
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	0f 90       	pop	r0
    2896:	1f 90       	pop	r1
    2898:	18 95       	reti

0000289a <__vector_7>:

ISR(INT6_vect) {
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	0b b6       	in	r0, 0x3b	; 59
    28a4:	0f 92       	push	r0
    28a6:	11 24       	eor	r1, r1
    28a8:	2f 93       	push	r18
    28aa:	3f 93       	push	r19
    28ac:	4f 93       	push	r20
    28ae:	5f 93       	push	r21
    28b0:	6f 93       	push	r22
    28b2:	7f 93       	push	r23
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	af 93       	push	r26
    28ba:	bf 93       	push	r27
    28bc:	ef 93       	push	r30
    28be:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    28c0:	80 91 20 06 	lds	r24, 0x0620
    28c4:	90 91 21 06 	lds	r25, 0x0621
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    28cc:	e0 91 20 06 	lds	r30, 0x0620
    28d0:	f0 91 21 06 	lds	r31, 0x0621
    28d4:	19 95       	eicall
}
    28d6:	ff 91       	pop	r31
    28d8:	ef 91       	pop	r30
    28da:	bf 91       	pop	r27
    28dc:	af 91       	pop	r26
    28de:	9f 91       	pop	r25
    28e0:	8f 91       	pop	r24
    28e2:	7f 91       	pop	r23
    28e4:	6f 91       	pop	r22
    28e6:	5f 91       	pop	r21
    28e8:	4f 91       	pop	r20
    28ea:	3f 91       	pop	r19
    28ec:	2f 91       	pop	r18
    28ee:	0f 90       	pop	r0
    28f0:	0b be       	out	0x3b, r0	; 59
    28f2:	0f 90       	pop	r0
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	0f 90       	pop	r0
    28f8:	1f 90       	pop	r1
    28fa:	18 95       	reti

000028fc <__vector_8>:

ISR(INT7_vect) {
    28fc:	1f 92       	push	r1
    28fe:	0f 92       	push	r0
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	0f 92       	push	r0
    2904:	0b b6       	in	r0, 0x3b	; 59
    2906:	0f 92       	push	r0
    2908:	11 24       	eor	r1, r1
    290a:	2f 93       	push	r18
    290c:	3f 93       	push	r19
    290e:	4f 93       	push	r20
    2910:	5f 93       	push	r21
    2912:	6f 93       	push	r22
    2914:	7f 93       	push	r23
    2916:	8f 93       	push	r24
    2918:	9f 93       	push	r25
    291a:	af 93       	push	r26
    291c:	bf 93       	push	r27
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    2922:	80 91 22 06 	lds	r24, 0x0622
    2926:	90 91 23 06 	lds	r25, 0x0623
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	29 f0       	breq	.+10     	; 0x2938 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    292e:	e0 91 22 06 	lds	r30, 0x0622
    2932:	f0 91 23 06 	lds	r31, 0x0623
    2936:	19 95       	eicall
}
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0b be       	out	0x3b, r0	; 59
    2954:	0f 90       	pop	r0
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	0f 90       	pop	r0
    295a:	1f 90       	pop	r1
    295c:	18 95       	reti

0000295e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    295e:	1f 92       	push	r1
    2960:	0f 92       	push	r0
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	0f 92       	push	r0
    2966:	11 24       	eor	r1, r1
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	8f 93       	push	r24
    296e:	9f 93       	push	r25
    2970:	af 93       	push	r26
    2972:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2974:	80 91 24 06 	lds	r24, 0x0624
    2978:	90 91 25 06 	lds	r25, 0x0625
    297c:	a0 91 26 06 	lds	r26, 0x0626
    2980:	b0 91 27 06 	lds	r27, 0x0627
	unsigned char f = timer0_fract;
    2984:	30 91 2c 06 	lds	r19, 0x062C

	m += MILLIS_INC;
	f += FRACT_INC;
    2988:	23 2f       	mov	r18, r19
    298a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    298c:	2d 37       	cpi	r18, 0x7D	; 125
    298e:	20 f4       	brcc	.+8      	; 0x2998 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	a1 1d       	adc	r26, r1
    2994:	b1 1d       	adc	r27, r1
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2998:	23 2f       	mov	r18, r19
    299a:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    299c:	02 96       	adiw	r24, 0x02	; 2
    299e:	a1 1d       	adc	r26, r1
    29a0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    29a2:	20 93 2c 06 	sts	0x062C, r18
	timer0_millis = m;
    29a6:	80 93 24 06 	sts	0x0624, r24
    29aa:	90 93 25 06 	sts	0x0625, r25
    29ae:	a0 93 26 06 	sts	0x0626, r26
    29b2:	b0 93 27 06 	sts	0x0627, r27
	timer0_overflow_count++;
    29b6:	80 91 28 06 	lds	r24, 0x0628
    29ba:	90 91 29 06 	lds	r25, 0x0629
    29be:	a0 91 2a 06 	lds	r26, 0x062A
    29c2:	b0 91 2b 06 	lds	r27, 0x062B
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	a1 1d       	adc	r26, r1
    29ca:	b1 1d       	adc	r27, r1
    29cc:	80 93 28 06 	sts	0x0628, r24
    29d0:	90 93 29 06 	sts	0x0629, r25
    29d4:	a0 93 2a 06 	sts	0x062A, r26
    29d8:	b0 93 2b 06 	sts	0x062B, r27
}
    29dc:	bf 91       	pop	r27
    29de:	af 91       	pop	r26
    29e0:	9f 91       	pop	r25
    29e2:	8f 91       	pop	r24
    29e4:	3f 91       	pop	r19
    29e6:	2f 91       	pop	r18
    29e8:	0f 90       	pop	r0
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	0f 90       	pop	r0
    29ee:	1f 90       	pop	r1
    29f0:	18 95       	reti

000029f2 <millis>:

unsigned long millis()
{
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    29f6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    29f8:	f8 94       	cli
	m = timer0_millis;
    29fa:	00 91 24 06 	lds	r16, 0x0624
    29fe:	10 91 25 06 	lds	r17, 0x0625
    2a02:	20 91 26 06 	lds	r18, 0x0626
    2a06:	30 91 27 06 	lds	r19, 0x0627
	SREG = oldSREG;
    2a0a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2a0c:	60 2f       	mov	r22, r16
    2a0e:	71 2f       	mov	r23, r17
    2a10:	82 2f       	mov	r24, r18
    2a12:	93 2f       	mov	r25, r19
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	08 95       	ret

00002a1a <micros>:

unsigned long micros() {
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a1e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2a20:	f8 94       	cli
	m = timer0_overflow_count;
    2a22:	00 91 28 06 	lds	r16, 0x0628
    2a26:	10 91 29 06 	lds	r17, 0x0629
    2a2a:	20 91 2a 06 	lds	r18, 0x062A
    2a2e:	30 91 2b 06 	lds	r19, 0x062B
#if defined(TCNT0)
	t = TCNT0;
    2a32:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a34:	a8 9b       	sbis	0x15, 0	; 21
    2a36:	06 c0       	rjmp	.+12     	; 0x2a44 <micros+0x2a>
    2a38:	8f 3f       	cpi	r24, 0xFF	; 255
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <micros+0x2a>
		m++;
    2a3c:	0f 5f       	subi	r16, 0xFF	; 255
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	2f 4f       	sbci	r18, 0xFF	; 255
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a44:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2a46:	32 2f       	mov	r19, r18
    2a48:	21 2f       	mov	r18, r17
    2a4a:	10 2f       	mov	r17, r16
    2a4c:	00 27       	eor	r16, r16
    2a4e:	08 0f       	add	r16, r24
    2a50:	11 1d       	adc	r17, r1
    2a52:	21 1d       	adc	r18, r1
    2a54:	31 1d       	adc	r19, r1
    2a56:	00 0f       	add	r16, r16
    2a58:	11 1f       	adc	r17, r17
    2a5a:	22 1f       	adc	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	00 0f       	add	r16, r16
    2a60:	11 1f       	adc	r17, r17
    2a62:	22 1f       	adc	r18, r18
    2a64:	33 1f       	adc	r19, r19
}
    2a66:	60 2f       	mov	r22, r16
    2a68:	71 2f       	mov	r23, r17
    2a6a:	82 2f       	mov	r24, r18
    2a6c:	93 2f       	mov	r25, r19
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <delay>:

void delay(unsigned long ms)
{
    2a74:	cf 92       	push	r12
    2a76:	df 92       	push	r13
    2a78:	ef 92       	push	r14
    2a7a:	ff 92       	push	r15
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	6b 01       	movw	r12, r22
    2a82:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2a84:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <micros>

	while (ms > 0) {
    2a88:	c1 14       	cp	r12, r1
    2a8a:	d1 04       	cpc	r13, r1
    2a8c:	e1 04       	cpc	r14, r1
    2a8e:	f1 04       	cpc	r15, r1
    2a90:	a9 f0       	breq	.+42     	; 0x2abc <delay+0x48>
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    2a92:	eb 01       	movw	r28, r22

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    2a94:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <micros>
    2a98:	6c 1b       	sub	r22, r28
    2a9a:	7d 0b       	sbc	r23, r29
    2a9c:	83 e0       	ldi	r24, 0x03	; 3
    2a9e:	68 3e       	cpi	r22, 0xE8	; 232
    2aa0:	78 07       	cpc	r23, r24
    2aa2:	38 f0       	brcs	.+14     	; 0x2ab2 <delay+0x3e>
			ms--;
    2aa4:	08 94       	sec
    2aa6:	c1 08       	sbc	r12, r1
    2aa8:	d1 08       	sbc	r13, r1
    2aaa:	e1 08       	sbc	r14, r1
    2aac:	f1 08       	sbc	r15, r1
			start += 1000;
    2aae:	c8 51       	subi	r28, 0x18	; 24
    2ab0:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2ab2:	c1 14       	cp	r12, r1
    2ab4:	d1 04       	cpc	r13, r1
    2ab6:	e1 04       	cpc	r14, r1
    2ab8:	f1 04       	cpc	r15, r1
    2aba:	61 f7       	brne	.-40     	; 0x2a94 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	ff 90       	pop	r15
    2ac2:	ef 90       	pop	r14
    2ac4:	df 90       	pop	r13
    2ac6:	cf 90       	pop	r12
    2ac8:	08 95       	ret

00002aca <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	39 f0       	breq	.+14     	; 0x2adc <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2ad6:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <delayMicroseconds+0xe>
    2adc:	08 95       	ret

00002ade <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2ade:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ae0:	84 b5       	in	r24, 0x24	; 36
    2ae2:	82 60       	ori	r24, 0x02	; 2
    2ae4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ae6:	84 b5       	in	r24, 0x24	; 36
    2ae8:	81 60       	ori	r24, 0x01	; 1
    2aea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2aec:	85 b5       	in	r24, 0x25	; 37
    2aee:	82 60       	ori	r24, 0x02	; 2
    2af0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2af2:	85 b5       	in	r24, 0x25	; 37
    2af4:	81 60       	ori	r24, 0x01	; 1
    2af6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2af8:	ee e6       	ldi	r30, 0x6E	; 110
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	81 60       	ori	r24, 0x01	; 1
    2b00:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b02:	e1 e8       	ldi	r30, 0x81	; 129
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b08:	80 81       	ld	r24, Z
    2b0a:	82 60       	ori	r24, 0x02	; 2
    2b0c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b0e:	80 81       	ld	r24, Z
    2b10:	81 60       	ori	r24, 0x01	; 1
    2b12:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b14:	e0 e8       	ldi	r30, 0x80	; 128
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	81 60       	ori	r24, 0x01	; 1
    2b1c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b1e:	e1 eb       	ldi	r30, 0xB1	; 177
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	84 60       	ori	r24, 0x04	; 4
    2b26:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b28:	e0 eb       	ldi	r30, 0xB0	; 176
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	81 60       	ori	r24, 0x01	; 1
    2b30:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2b32:	e1 e9       	ldi	r30, 0x91	; 145
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	82 60       	ori	r24, 0x02	; 2
    2b3a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2b3c:	80 81       	ld	r24, Z
    2b3e:	81 60       	ori	r24, 0x01	; 1
    2b40:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2b42:	e0 e9       	ldi	r30, 0x90	; 144
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	81 60       	ori	r24, 0x01	; 1
    2b4a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2b4c:	e1 ea       	ldi	r30, 0xA1	; 161
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	82 60       	ori	r24, 0x02	; 2
    2b54:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2b56:	80 81       	ld	r24, Z
    2b58:	81 60       	ori	r24, 0x01	; 1
    2b5a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2b5c:	e0 ea       	ldi	r30, 0xA0	; 160
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	81 60       	ori	r24, 0x01	; 1
    2b64:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2b66:	e1 e2       	ldi	r30, 0x21	; 33
    2b68:	f1 e0       	ldi	r31, 0x01	; 1
    2b6a:	80 81       	ld	r24, Z
    2b6c:	82 60       	ori	r24, 0x02	; 2
    2b6e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2b70:	80 81       	ld	r24, Z
    2b72:	81 60       	ori	r24, 0x01	; 1
    2b74:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2b76:	e0 e2       	ldi	r30, 0x20	; 32
    2b78:	f1 e0       	ldi	r31, 0x01	; 1
    2b7a:	80 81       	ld	r24, Z
    2b7c:	81 60       	ori	r24, 0x01	; 1
    2b7e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2b80:	ea e7       	ldi	r30, 0x7A	; 122
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	84 60       	ori	r24, 0x04	; 4
    2b88:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2b8a:	80 81       	ld	r24, Z
    2b8c:	82 60       	ori	r24, 0x02	; 2
    2b8e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2b90:	80 81       	ld	r24, Z
    2b92:	81 60       	ori	r24, 0x01	; 1
    2b94:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b96:	80 81       	ld	r24, Z
    2b98:	80 68       	ori	r24, 0x80	; 128
    2b9a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b9c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2ba0:	08 95       	ret

00002ba2 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2ba2:	80 93 4a 02 	sts	0x024A, r24
}
    2ba6:	08 95       	ret

00002ba8 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    2ba8:	86 33       	cpi	r24, 0x36	; 54
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <analogRead+0x6>
    2bac:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2bae:	eb e7       	ldi	r30, 0x7B	; 123
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	90 81       	ld	r25, Z
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	26 95       	lsr	r18
    2bb8:	26 95       	lsr	r18
    2bba:	26 95       	lsr	r18
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	21 70       	andi	r18, 0x01	; 1
    2bc0:	30 70       	andi	r19, 0x00	; 0
    2bc2:	22 0f       	add	r18, r18
    2bc4:	33 1f       	adc	r19, r19
    2bc6:	22 0f       	add	r18, r18
    2bc8:	33 1f       	adc	r19, r19
    2bca:	22 0f       	add	r18, r18
    2bcc:	33 1f       	adc	r19, r19
    2bce:	97 7f       	andi	r25, 0xF7	; 247
    2bd0:	29 2b       	or	r18, r25
    2bd2:	20 83       	st	Z, r18
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2bd4:	87 70       	andi	r24, 0x07	; 7
    2bd6:	90 91 4a 02 	lds	r25, 0x024A
    2bda:	92 95       	swap	r25
    2bdc:	99 0f       	add	r25, r25
    2bde:	99 0f       	add	r25, r25
    2be0:	90 7c       	andi	r25, 0xC0	; 192
    2be2:	89 2b       	or	r24, r25
    2be4:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2be8:	ea e7       	ldi	r30, 0x7A	; 122
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	80 64       	ori	r24, 0x40	; 64
    2bf0:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2bf2:	80 81       	ld	r24, Z
    2bf4:	86 fd       	sbrc	r24, 6
    2bf6:	fd cf       	rjmp	.-6      	; 0x2bf2 <analogRead+0x4a>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2bf8:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    2bfc:	90 91 79 00 	lds	r25, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2c00:	39 2f       	mov	r19, r25
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	82 2b       	or	r24, r18
    2c08:	93 2b       	or	r25, r19
}
    2c0a:	08 95       	ret

00002c0c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	c8 2f       	mov	r28, r24
    2c14:	8b 01       	movw	r16, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>
	if (val == 0)
    2c1c:	01 15       	cp	r16, r1
    2c1e:	11 05       	cpc	r17, r1
    2c20:	29 f4       	brne	.+10     	; 0x2c2c <analogWrite+0x20>
	{
		digitalWrite(pin, LOW);
    2c22:	8c 2f       	mov	r24, r28
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    2c2a:	d5 c0       	rjmp	.+426    	; 0x2dd6 <analogWrite+0x1ca>
	}
	else if (val == 255)
    2c2c:	0f 3f       	cpi	r16, 0xFF	; 255
    2c2e:	11 05       	cpc	r17, r1
    2c30:	29 f4       	brne	.+10     	; 0x2c3c <analogWrite+0x30>
	{
		digitalWrite(pin, HIGH);
    2c32:	8c 2f       	mov	r24, r28
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    2c3a:	cd c0       	rjmp	.+410    	; 0x2dd6 <analogWrite+0x1ca>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2c3c:	ec 2f       	mov	r30, r28
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	eb 51       	subi	r30, 0x1B	; 27
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	e4 91       	lpm	r30, Z
    2c46:	e9 30       	cpi	r30, 0x09	; 9
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <analogWrite+0x40>
    2c4a:	66 c0       	rjmp	.+204    	; 0x2d18 <analogWrite+0x10c>
    2c4c:	ea 30       	cpi	r30, 0x0A	; 10
    2c4e:	b0 f4       	brcc	.+44     	; 0x2c7c <analogWrite+0x70>
    2c50:	e4 30       	cpi	r30, 0x04	; 4
    2c52:	f1 f1       	breq	.+124    	; 0x2cd0 <analogWrite+0xc4>
    2c54:	e5 30       	cpi	r30, 0x05	; 5
    2c56:	40 f4       	brcc	.+16     	; 0x2c68 <analogWrite+0x5c>
    2c58:	e2 30       	cpi	r30, 0x02	; 2
    2c5a:	59 f1       	breq	.+86     	; 0x2cb2 <analogWrite+0xa6>
    2c5c:	e3 30       	cpi	r30, 0x03	; 3
    2c5e:	70 f5       	brcc	.+92     	; 0x2cbc <analogWrite+0xb0>
    2c60:	e1 30       	cpi	r30, 0x01	; 1
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <analogWrite+0x5a>
    2c64:	ac c0       	rjmp	.+344    	; 0x2dbe <analogWrite+0x1b2>
    2c66:	20 c0       	rjmp	.+64     	; 0x2ca8 <analogWrite+0x9c>
    2c68:	e7 30       	cpi	r30, 0x07	; 7
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <analogWrite+0x62>
    2c6c:	43 c0       	rjmp	.+134    	; 0x2cf4 <analogWrite+0xe8>
    2c6e:	e8 30       	cpi	r30, 0x08	; 8
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <analogWrite+0x68>
    2c72:	48 c0       	rjmp	.+144    	; 0x2d04 <analogWrite+0xf8>
    2c74:	e6 30       	cpi	r30, 0x06	; 6
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <analogWrite+0x6e>
    2c78:	a2 c0       	rjmp	.+324    	; 0x2dbe <analogWrite+0x1b2>
    2c7a:	34 c0       	rjmp	.+104    	; 0x2ce4 <analogWrite+0xd8>
    2c7c:	ed 30       	cpi	r30, 0x0D	; 13
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <analogWrite+0x76>
    2c80:	76 c0       	rjmp	.+236    	; 0x2d6e <analogWrite+0x162>
    2c82:	ee 30       	cpi	r30, 0x0E	; 14
    2c84:	38 f4       	brcc	.+14     	; 0x2c94 <analogWrite+0x88>
    2c86:	eb 30       	cpi	r30, 0x0B	; 11
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <analogWrite+0x80>
    2c8a:	5a c0       	rjmp	.+180    	; 0x2d40 <analogWrite+0x134>
    2c8c:	ec 30       	cpi	r30, 0x0C	; 12
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <analogWrite+0x86>
    2c90:	64 c0       	rjmp	.+200    	; 0x2d5a <analogWrite+0x14e>
    2c92:	4c c0       	rjmp	.+152    	; 0x2d2c <analogWrite+0x120>
    2c94:	e0 31       	cpi	r30, 0x10	; 16
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <analogWrite+0x8e>
    2c98:	7e c0       	rjmp	.+252    	; 0x2d96 <analogWrite+0x18a>
    2c9a:	e1 31       	cpi	r30, 0x11	; 17
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <analogWrite+0x94>
    2c9e:	85 c0       	rjmp	.+266    	; 0x2daa <analogWrite+0x19e>
    2ca0:	ef 30       	cpi	r30, 0x0F	; 15
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <analogWrite+0x9a>
    2ca4:	8c c0       	rjmp	.+280    	; 0x2dbe <analogWrite+0x1b2>
    2ca6:	6d c0       	rjmp	.+218    	; 0x2d82 <analogWrite+0x176>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2ca8:	84 b5       	in	r24, 0x24	; 36
    2caa:	80 68       	ori	r24, 0x80	; 128
    2cac:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2cae:	07 bd       	out	0x27, r16	; 39
				break;
    2cb0:	92 c0       	rjmp	.+292    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2cb2:	84 b5       	in	r24, 0x24	; 36
    2cb4:	80 62       	ori	r24, 0x20	; 32
    2cb6:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2cb8:	08 bd       	out	0x28, r16	; 40
				break;
    2cba:	8d c0       	rjmp	.+282    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2cbc:	e0 e8       	ldi	r30, 0x80	; 128
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 68       	ori	r24, 0x80	; 128
    2cc4:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    2cc6:	10 93 89 00 	sts	0x0089, r17
    2cca:	00 93 88 00 	sts	0x0088, r16
				break;
    2cce:	83 c0       	rjmp	.+262    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2cd0:	e0 e8       	ldi	r30, 0x80	; 128
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 62       	ori	r24, 0x20	; 32
    2cd8:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    2cda:	10 93 8b 00 	sts	0x008B, r17
    2cde:	00 93 8a 00 	sts	0x008A, r16
				break;
    2ce2:	79 c0       	rjmp	.+242    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2ce4:	e0 eb       	ldi	r30, 0xB0	; 176
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	80 68       	ori	r24, 0x80	; 128
    2cec:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    2cee:	00 93 b3 00 	sts	0x00B3, r16
				break;
    2cf2:	71 c0       	rjmp	.+226    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2cf4:	e0 eb       	ldi	r30, 0xB0	; 176
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 62       	ori	r24, 0x20	; 32
    2cfc:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    2cfe:	00 93 b4 00 	sts	0x00B4, r16
				break;
    2d02:	69 c0       	rjmp	.+210    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    2d04:	e0 e9       	ldi	r30, 0x90	; 144
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	80 68       	ori	r24, 0x80	; 128
    2d0c:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    2d0e:	10 93 99 00 	sts	0x0099, r17
    2d12:	00 93 98 00 	sts	0x0098, r16
				break;
    2d16:	5f c0       	rjmp	.+190    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    2d18:	e0 e9       	ldi	r30, 0x90	; 144
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 62       	ori	r24, 0x20	; 32
    2d20:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    2d22:	10 93 9b 00 	sts	0x009B, r17
    2d26:	00 93 9a 00 	sts	0x009A, r16
				break;
    2d2a:	55 c0       	rjmp	.+170    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    2d2c:	e0 e9       	ldi	r30, 0x90	; 144
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	88 60       	ori	r24, 0x08	; 8
    2d34:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    2d36:	10 93 9d 00 	sts	0x009D, r17
    2d3a:	00 93 9c 00 	sts	0x009C, r16
				break;
    2d3e:	4b c0       	rjmp	.+150    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    2d40:	e0 ea       	ldi	r30, 0xA0	; 160
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	80 68       	ori	r24, 0x80	; 128
    2d48:	80 83       	st	Z, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 7b       	andi	r24, 0xBF	; 191
    2d4e:	80 83       	st	Z, r24
				#endif
				OCR4A = val;	// set pwm duty
    2d50:	10 93 a9 00 	sts	0x00A9, r17
    2d54:	00 93 a8 00 	sts	0x00A8, r16
				break;
    2d58:	3e c0       	rjmp	.+124    	; 0x2dd6 <analogWrite+0x1ca>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    2d5a:	e0 ea       	ldi	r30, 0xA0	; 160
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	80 62       	ori	r24, 0x20	; 32
    2d62:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    2d64:	10 93 ab 00 	sts	0x00AB, r17
    2d68:	00 93 aa 00 	sts	0x00AA, r16
				break;
    2d6c:	34 c0       	rjmp	.+104    	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    2d6e:	e0 ea       	ldi	r30, 0xA0	; 160
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	88 60       	ori	r24, 0x08	; 8
    2d76:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    2d78:	10 93 ad 00 	sts	0x00AD, r17
    2d7c:	00 93 ac 00 	sts	0x00AC, r16
				break;
    2d80:	2a c0       	rjmp	.+84     	; 0x2dd6 <analogWrite+0x1ca>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    2d82:	e0 e2       	ldi	r30, 0x20	; 32
    2d84:	f1 e0       	ldi	r31, 0x01	; 1
    2d86:	80 81       	ld	r24, Z
    2d88:	80 68       	ori	r24, 0x80	; 128
    2d8a:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    2d8c:	10 93 29 01 	sts	0x0129, r17
    2d90:	00 93 28 01 	sts	0x0128, r16
				break;
    2d94:	20 c0       	rjmp	.+64     	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    2d96:	e0 e2       	ldi	r30, 0x20	; 32
    2d98:	f1 e0       	ldi	r31, 0x01	; 1
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 62       	ori	r24, 0x20	; 32
    2d9e:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    2da0:	10 93 2b 01 	sts	0x012B, r17
    2da4:	00 93 2a 01 	sts	0x012A, r16
				break;
    2da8:	16 c0       	rjmp	.+44     	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    2daa:	e0 e2       	ldi	r30, 0x20	; 32
    2dac:	f1 e0       	ldi	r31, 0x01	; 1
    2dae:	80 81       	ld	r24, Z
    2db0:	88 60       	ori	r24, 0x08	; 8
    2db2:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    2db4:	10 93 2d 01 	sts	0x012D, r17
    2db8:	00 93 2c 01 	sts	0x012C, r16
				break;
    2dbc:	0c c0       	rjmp	.+24     	; 0x2dd6 <analogWrite+0x1ca>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2dbe:	00 38       	cpi	r16, 0x80	; 128
    2dc0:	11 05       	cpc	r17, r1
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <analogWrite+0x1c2>
					digitalWrite(pin, LOW);
    2dc4:	8c 2f       	mov	r24, r28
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    2dcc:	04 c0       	rjmp	.+8      	; 0x2dd6 <analogWrite+0x1ca>
				} else {
					digitalWrite(pin, HIGH);
    2dce:	8c 2f       	mov	r24, r28
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
				}
		}
	}
}
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	08 95       	ret

00002dde <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2dde:	89 30       	cpi	r24, 0x09	; 9
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <turnOffPWM+0x6>
    2de2:	52 c0       	rjmp	.+164    	; 0x2e88 <turnOffPWM+0xaa>
    2de4:	8a 30       	cpi	r24, 0x0A	; 10
    2de6:	a0 f4       	brcc	.+40     	; 0x2e10 <turnOffPWM+0x32>
    2de8:	84 30       	cpi	r24, 0x04	; 4
    2dea:	71 f1       	breq	.+92     	; 0x2e48 <turnOffPWM+0x6a>
    2dec:	85 30       	cpi	r24, 0x05	; 5
    2dee:	40 f4       	brcc	.+16     	; 0x2e00 <turnOffPWM+0x22>
    2df0:	82 30       	cpi	r24, 0x02	; 2
    2df2:	a1 f1       	breq	.+104    	; 0x2e5c <turnOffPWM+0x7e>
    2df4:	83 30       	cpi	r24, 0x03	; 3
    2df6:	10 f5       	brcc	.+68     	; 0x2e3c <turnOffPWM+0x5e>
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <turnOffPWM+0x20>
    2dfc:	74 c0       	rjmp	.+232    	; 0x2ee6 <turnOffPWM+0x108>
    2dfe:	2a c0       	rjmp	.+84     	; 0x2e54 <turnOffPWM+0x76>
    2e00:	87 30       	cpi	r24, 0x07	; 7
    2e02:	b1 f1       	breq	.+108    	; 0x2e70 <turnOffPWM+0x92>
    2e04:	88 30       	cpi	r24, 0x08	; 8
    2e06:	d0 f5       	brcc	.+116    	; 0x2e7c <turnOffPWM+0x9e>
    2e08:	86 30       	cpi	r24, 0x06	; 6
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <turnOffPWM+0x30>
    2e0c:	6c c0       	rjmp	.+216    	; 0x2ee6 <turnOffPWM+0x108>
    2e0e:	2a c0       	rjmp	.+84     	; 0x2e64 <turnOffPWM+0x86>
    2e10:	8d 30       	cpi	r24, 0x0D	; 13
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <turnOffPWM+0x38>
    2e14:	51 c0       	rjmp	.+162    	; 0x2eb8 <turnOffPWM+0xda>
    2e16:	8e 30       	cpi	r24, 0x0E	; 14
    2e18:	38 f4       	brcc	.+14     	; 0x2e28 <turnOffPWM+0x4a>
    2e1a:	8b 30       	cpi	r24, 0x0B	; 11
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <turnOffPWM+0x42>
    2e1e:	40 c0       	rjmp	.+128    	; 0x2ea0 <turnOffPWM+0xc2>
    2e20:	8c 30       	cpi	r24, 0x0C	; 12
    2e22:	08 f0       	brcs	.+2      	; 0x2e26 <turnOffPWM+0x48>
    2e24:	43 c0       	rjmp	.+134    	; 0x2eac <turnOffPWM+0xce>
    2e26:	36 c0       	rjmp	.+108    	; 0x2e94 <turnOffPWM+0xb6>
    2e28:	80 31       	cpi	r24, 0x10	; 16
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <turnOffPWM+0x50>
    2e2c:	51 c0       	rjmp	.+162    	; 0x2ed0 <turnOffPWM+0xf2>
    2e2e:	81 31       	cpi	r24, 0x11	; 17
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <turnOffPWM+0x56>
    2e32:	54 c0       	rjmp	.+168    	; 0x2edc <turnOffPWM+0xfe>
    2e34:	8f 30       	cpi	r24, 0x0F	; 15
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <turnOffPWM+0x5c>
    2e38:	56 c0       	rjmp	.+172    	; 0x2ee6 <turnOffPWM+0x108>
    2e3a:	44 c0       	rjmp	.+136    	; 0x2ec4 <turnOffPWM+0xe6>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e3c:	e0 e8       	ldi	r30, 0x80	; 128
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	8f 77       	andi	r24, 0x7F	; 127
    2e44:	80 83       	st	Z, r24
    2e46:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e48:	e0 e8       	ldi	r30, 0x80	; 128
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	8f 7d       	andi	r24, 0xDF	; 223
    2e50:	80 83       	st	Z, r24
    2e52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2e54:	84 b5       	in	r24, 0x24	; 36
    2e56:	8f 77       	andi	r24, 0x7F	; 127
    2e58:	84 bd       	out	0x24, r24	; 36
    2e5a:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e5c:	84 b5       	in	r24, 0x24	; 36
    2e5e:	8f 7d       	andi	r24, 0xDF	; 223
    2e60:	84 bd       	out	0x24, r24	; 36
    2e62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2e64:	e0 eb       	ldi	r30, 0xB0	; 176
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 77       	andi	r24, 0x7F	; 127
    2e6c:	80 83       	st	Z, r24
    2e6e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e70:	e0 eb       	ldi	r30, 0xB0	; 176
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8f 7d       	andi	r24, 0xDF	; 223
    2e78:	80 83       	st	Z, r24
    2e7a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2e7c:	e0 e9       	ldi	r30, 0x90	; 144
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8f 77       	andi	r24, 0x7F	; 127
    2e84:	80 83       	st	Z, r24
    2e86:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2e88:	e0 e9       	ldi	r30, 0x90	; 144
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8f 7d       	andi	r24, 0xDF	; 223
    2e90:	80 83       	st	Z, r24
    2e92:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2e94:	e0 e9       	ldi	r30, 0x90	; 144
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	87 7f       	andi	r24, 0xF7	; 247
    2e9c:	80 83       	st	Z, r24
    2e9e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2ea0:	e0 ea       	ldi	r30, 0xA0	; 160
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8f 77       	andi	r24, 0x7F	; 127
    2ea8:	80 83       	st	Z, r24
    2eaa:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2eac:	e0 ea       	ldi	r30, 0xA0	; 160
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	8f 7d       	andi	r24, 0xDF	; 223
    2eb4:	80 83       	st	Z, r24
    2eb6:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2eb8:	e0 ea       	ldi	r30, 0xA0	; 160
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	87 7f       	andi	r24, 0xF7	; 247
    2ec0:	80 83       	st	Z, r24
    2ec2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2ec4:	e0 e2       	ldi	r30, 0x20	; 32
    2ec6:	f1 e0       	ldi	r31, 0x01	; 1
    2ec8:	80 81       	ld	r24, Z
    2eca:	8f 77       	andi	r24, 0x7F	; 127
    2ecc:	80 83       	st	Z, r24
    2ece:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2ed0:	e0 e2       	ldi	r30, 0x20	; 32
    2ed2:	f1 e0       	ldi	r31, 0x01	; 1
    2ed4:	80 81       	ld	r24, Z
    2ed6:	8f 7d       	andi	r24, 0xDF	; 223
    2ed8:	80 83       	st	Z, r24
    2eda:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2edc:	e0 e2       	ldi	r30, 0x20	; 32
    2ede:	f1 e0       	ldi	r31, 0x01	; 1
    2ee0:	80 81       	ld	r24, Z
    2ee2:	87 7f       	andi	r24, 0xF7	; 247
    2ee4:	80 83       	st	Z, r24
    2ee6:	08 95       	ret

00002ee8 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	fc 01       	movw	r30, r24
    2eec:	e5 5d       	subi	r30, 0xD5	; 213
    2eee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef0:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    2ef2:	8f 58       	subi	r24, 0x8F	; 143
    2ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2efa:	88 23       	and	r24, r24
    2efc:	91 f1       	breq	.+100    	; 0x2f62 <pinMode+0x7a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	fc 01       	movw	r30, r24
    2f06:	e5 51       	subi	r30, 0x15	; 21
    2f08:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0a:	25 91       	lpm	r18, Z+
    2f0c:	34 91       	lpm	r19, Z
    2f0e:	a2 2f       	mov	r26, r18
    2f10:	b3 2f       	mov	r27, r19
	out = portOutputRegister(port);
    2f12:	8f 52       	subi	r24, 0x2F	; 47
    2f14:	9e 4f       	sbci	r25, 0xFE	; 254
    2f16:	fc 01       	movw	r30, r24
    2f18:	25 91       	lpm	r18, Z+
    2f1a:	34 91       	lpm	r19, Z
    2f1c:	e2 2f       	mov	r30, r18
    2f1e:	f3 2f       	mov	r31, r19

	if (mode == INPUT) { 
    2f20:	66 23       	and	r22, r22
    2f22:	59 f4       	brne	.+22     	; 0x2f3a <pinMode+0x52>
		uint8_t oldSREG = SREG;
    2f24:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f26:	f8 94       	cli
		*reg &= ~bit;
    2f28:	9c 91       	ld	r25, X
    2f2a:	40 95       	com	r20
    2f2c:	94 23       	and	r25, r20
    2f2e:	9c 93       	st	X, r25
		*out &= ~bit;
    2f30:	90 81       	ld	r25, Z
    2f32:	49 23       	and	r20, r25
    2f34:	40 83       	st	Z, r20
		SREG = oldSREG;
    2f36:	8f bf       	out	0x3f, r24	; 63
    2f38:	08 95       	ret
	} else if (mode == INPUT_PULLUP) {
    2f3a:	62 30       	cpi	r22, 0x02	; 2
    2f3c:	61 f4       	brne	.+24     	; 0x2f56 <pinMode+0x6e>
		uint8_t oldSREG = SREG;
    2f3e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f40:	f8 94       	cli
		*reg &= ~bit;
    2f42:	2c 91       	ld	r18, X
    2f44:	94 2f       	mov	r25, r20
    2f46:	90 95       	com	r25
    2f48:	92 23       	and	r25, r18
    2f4a:	9c 93       	st	X, r25
		*out |= bit;
    2f4c:	90 81       	ld	r25, Z
    2f4e:	49 2b       	or	r20, r25
    2f50:	40 83       	st	Z, r20
		SREG = oldSREG;
    2f52:	8f bf       	out	0x3f, r24	; 63
    2f54:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    2f56:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2f58:	f8 94       	cli
		*reg |= bit;
    2f5a:	9c 91       	ld	r25, X
    2f5c:	49 2b       	or	r20, r25
    2f5e:	4c 93       	st	X, r20
		SREG = oldSREG;
    2f60:	8f bf       	out	0x3f, r24	; 63
    2f62:	08 95       	ret

00002f64 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	f9 01       	movw	r30, r18
    2f72:	eb 51       	subi	r30, 0x1B	; 27
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2f78:	f9 01       	movw	r30, r18
    2f7a:	e5 5d       	subi	r30, 0xD5	; 213
    2f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2f80:	2f 58       	subi	r18, 0x8F	; 143
    2f82:	3e 4f       	sbci	r19, 0xFE	; 254
    2f84:	f9 01       	movw	r30, r18
    2f86:	14 91       	lpm	r17, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f88:	11 23       	and	r17, r17
    2f8a:	d9 f0       	breq	.+54     	; 0x2fc2 <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f8c:	88 23       	and	r24, r24
    2f8e:	11 f0       	breq	.+4      	; 0x2f94 <digitalWrite+0x30>
    2f90:	0e 94 ef 16 	call	0x2dde	; 0x2dde <turnOffPWM>

	out = portOutputRegister(port);
    2f94:	e1 2f       	mov	r30, r17
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	ee 0f       	add	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	ef 52       	subi	r30, 0x2F	; 47
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	85 91       	lpm	r24, Z+
    2fa2:	94 91       	lpm	r25, Z
    2fa4:	e8 2f       	mov	r30, r24
    2fa6:	f9 2f       	mov	r31, r25

	uint8_t oldSREG = SREG;
    2fa8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2faa:	f8 94       	cli

	if (val == LOW) {
    2fac:	cc 23       	and	r28, r28
    2fae:	29 f4       	brne	.+10     	; 0x2fba <digitalWrite+0x56>
		*out &= ~bit;
    2fb0:	90 81       	ld	r25, Z
    2fb2:	d0 95       	com	r29
    2fb4:	d9 23       	and	r29, r25
    2fb6:	d0 83       	st	Z, r29
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <digitalWrite+0x5c>
	} else {
		*out |= bit;
    2fba:	90 81       	ld	r25, Z
    2fbc:	d9 2b       	or	r29, r25
    2fbe:	d0 83       	st	Z, r29
	}

	SREG = oldSREG;
    2fc0:	8f bf       	out	0x3f, r24	; 63
}
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	08 95       	ret

00002fca <digitalRead>:

int digitalRead(uint8_t pin)
{
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2fce:	28 2f       	mov	r18, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	f9 01       	movw	r30, r18
    2fd4:	eb 51       	subi	r30, 0x1B	; 27
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2fda:	f9 01       	movw	r30, r18
    2fdc:	e5 5d       	subi	r30, 0xD5	; 213
    2fde:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe0:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    2fe2:	2f 58       	subi	r18, 0x8F	; 143
    2fe4:	3e 4f       	sbci	r19, 0xFE	; 254
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    2fea:	dd 23       	and	r29, r29
    2fec:	b1 f0       	breq	.+44     	; 0x301a <digitalRead+0x50>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2fee:	88 23       	and	r24, r24
    2ff0:	11 f0       	breq	.+4      	; 0x2ff6 <digitalRead+0x2c>
    2ff2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2ff6:	ed 2f       	mov	r30, r29
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	ee 0f       	add	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	e9 54       	subi	r30, 0x49	; 73
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	85 91       	lpm	r24, Z+
    3004:	94 91       	lpm	r25, Z
    3006:	e8 2f       	mov	r30, r24
    3008:	f9 2f       	mov	r31, r25
    300a:	80 81       	ld	r24, Z
    300c:	c8 23       	and	r28, r24
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	29 f4       	brne	.+10     	; 0x301e <digitalRead+0x54>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	02 c0       	rjmp	.+4      	; 0x301e <digitalRead+0x54>
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    3024:	6f 92       	push	r6
    3026:	7f 92       	push	r7
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	fc 01       	movw	r30, r24
    3044:	e5 5d       	subi	r30, 0xD5	; 213
    3046:	fe 4f       	sbci	r31, 0xFE	; 254
    3048:	b4 90       	lpm	r11, Z
	uint8_t port = digitalPinToPort(pin);
    304a:	8f 58       	subi	r24, 0x8F	; 143
    304c:	9e 4f       	sbci	r25, 0xFE	; 254
    304e:	fc 01       	movw	r30, r24
    3050:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
    3052:	66 23       	and	r22, r22
    3054:	11 f4       	brne	.+4      	; 0x305a <pulseIn+0x36>
    3056:	aa 24       	eor	r10, r10
    3058:	01 c0       	rjmp	.+2      	; 0x305c <pulseIn+0x38>
    305a:	ab 2c       	mov	r10, r11
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    305c:	0f 2e       	mov	r0, r31
    305e:	ff ef       	ldi	r31, 0xFF	; 255
    3060:	cf 2e       	mov	r12, r31
    3062:	ff ef       	ldi	r31, 0xFF	; 255
    3064:	df 2e       	mov	r13, r31
    3066:	ff ef       	ldi	r31, 0xFF	; 255
    3068:	ef 2e       	mov	r14, r31
    306a:	ff e0       	ldi	r31, 0x0F	; 15
    306c:	ff 2e       	mov	r15, r31
    306e:	f0 2d       	mov	r31, r0
    3070:	c2 22       	and	r12, r18
    3072:	d3 22       	and	r13, r19
    3074:	e4 22       	and	r14, r20
    3076:	f5 22       	and	r15, r21
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	ba 01       	movw	r22, r20
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    307e:	d0 e0       	ldi	r29, 0x00	; 0
    3080:	cc 0f       	add	r28, r28
    3082:	dd 1f       	adc	r29, r29
    3084:	c9 54       	subi	r28, 0x49	; 73
    3086:	de 4f       	sbci	r29, 0xFE	; 254
    3088:	3c 2f       	mov	r19, r28
    308a:	2d 2f       	mov	r18, r29
    308c:	fe 01       	movw	r30, r28
    308e:	05 91       	lpm	r16, Z+
    3090:	14 91       	lpm	r17, Z
    3092:	0d c0       	rjmp	.+26     	; 0x30ae <pulseIn+0x8a>
		if (numloops++ == maxloops)
    3094:	db 01       	movw	r26, r22
    3096:	ca 01       	movw	r24, r20
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	a1 1d       	adc	r26, r1
    309c:	b1 1d       	adc	r27, r1
    309e:	4c 15       	cp	r20, r12
    30a0:	5d 05       	cpc	r21, r13
    30a2:	6e 05       	cpc	r22, r14
    30a4:	7f 05       	cpc	r23, r15
    30a6:	09 f4       	brne	.+2      	; 0x30aa <pulseIn+0x86>
    30a8:	69 c0       	rjmp	.+210    	; 0x317c <pulseIn+0x158>
    30aa:	ac 01       	movw	r20, r24
    30ac:	bd 01       	movw	r22, r26
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    30ae:	4e 01       	movw	r8, r28
    30b0:	63 2e       	mov	r6, r19
    30b2:	72 2e       	mov	r7, r18
    30b4:	e0 2f       	mov	r30, r16
    30b6:	f1 2f       	mov	r31, r17
    30b8:	80 81       	ld	r24, Z
    30ba:	8b 21       	and	r24, r11
    30bc:	a8 16       	cp	r10, r24
    30be:	51 f3       	breq	.-44     	; 0x3094 <pulseIn+0x70>
    30c0:	0e c0       	rjmp	.+28     	; 0x30de <pulseIn+0xba>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    30c2:	db 01       	movw	r26, r22
    30c4:	ca 01       	movw	r24, r20
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	a1 1d       	adc	r26, r1
    30ca:	b1 1d       	adc	r27, r1
    30cc:	4c 15       	cp	r20, r12
    30ce:	5d 05       	cpc	r21, r13
    30d0:	6e 05       	cpc	r22, r14
    30d2:	7f 05       	cpc	r23, r15
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <pulseIn+0xb4>
    30d6:	56 c0       	rjmp	.+172    	; 0x3184 <pulseIn+0x160>
    30d8:	ac 01       	movw	r20, r24
    30da:	bd 01       	movw	r22, r26
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <pulseIn+0xc0>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    30de:	f3 01       	movw	r30, r6
    30e0:	25 91       	lpm	r18, Z+
    30e2:	34 91       	lpm	r19, Z
    30e4:	e2 2f       	mov	r30, r18
    30e6:	f3 2f       	mov	r31, r19
    30e8:	80 81       	ld	r24, Z
    30ea:	8b 21       	and	r24, r11
    30ec:	a8 16       	cp	r10, r24
    30ee:	49 f7       	brne	.-46     	; 0x30c2 <pulseIn+0x9e>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    30f0:	f4 01       	movw	r30, r8
    30f2:	85 91       	lpm	r24, Z+
    30f4:	94 91       	lpm	r25, Z
    30f6:	e8 2f       	mov	r30, r24
    30f8:	f9 2f       	mov	r31, r25
    30fa:	80 81       	ld	r24, Z
    30fc:	8b 21       	and	r24, r11
    30fe:	a8 16       	cp	r10, r24
    3100:	19 f5       	brne	.+70     	; 0x3148 <pulseIn+0x124>
		if (numloops++ == maxloops)
    3102:	c4 16       	cp	r12, r20
    3104:	d5 06       	cpc	r13, r21
    3106:	e6 06       	cpc	r14, r22
    3108:	f7 06       	cpc	r15, r23
    310a:	09 f4       	brne	.+2      	; 0x310e <pulseIn+0xea>
    310c:	3f c0       	rjmp	.+126    	; 0x318c <pulseIn+0x168>
    310e:	00 e0       	ldi	r16, 0x00	; 0
    3110:	10 e0       	ldi	r17, 0x00	; 0
    3112:	98 01       	movw	r18, r16
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    3114:	f3 01       	movw	r30, r6
    3116:	c5 91       	lpm	r28, Z+
    3118:	d4 91       	lpm	r29, Z
    311a:	0b c0       	rjmp	.+22     	; 0x3132 <pulseIn+0x10e>
		if (numloops++ == maxloops)
    311c:	d9 01       	movw	r26, r18
    311e:	c8 01       	movw	r24, r16
    3120:	84 0f       	add	r24, r20
    3122:	95 1f       	adc	r25, r21
    3124:	a6 1f       	adc	r26, r22
    3126:	b7 1f       	adc	r27, r23
    3128:	c8 16       	cp	r12, r24
    312a:	d9 06       	cpc	r13, r25
    312c:	ea 06       	cpc	r14, r26
    312e:	fb 06       	cpc	r15, r27
    3130:	89 f1       	breq	.+98     	; 0x3194 <pulseIn+0x170>
			return 0;
		width++;
    3132:	0f 5f       	subi	r16, 0xFF	; 255
    3134:	1f 4f       	sbci	r17, 0xFF	; 255
    3136:	2f 4f       	sbci	r18, 0xFF	; 255
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    313a:	ec 2f       	mov	r30, r28
    313c:	fd 2f       	mov	r31, r29
    313e:	80 81       	ld	r24, Z
    3140:	8b 21       	and	r24, r11
    3142:	a8 16       	cp	r10, r24
    3144:	59 f3       	breq	.-42     	; 0x311c <pulseIn+0xf8>
    3146:	03 c0       	rjmp	.+6      	; 0x314e <pulseIn+0x12a>
    3148:	00 e0       	ldi	r16, 0x00	; 0
    314a:	10 e0       	ldi	r17, 0x00	; 0
    314c:	98 01       	movw	r18, r16

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    314e:	c9 01       	movw	r24, r18
    3150:	b8 01       	movw	r22, r16
    3152:	25 e1       	ldi	r18, 0x15	; 21
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    315e:	8b 01       	movw	r16, r22
    3160:	9c 01       	movw	r18, r24
    3162:	00 5f       	subi	r16, 0xF0	; 240
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	2f 4f       	sbci	r18, 0xFF	; 255
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	68 94       	set
    316c:	13 f8       	bld	r1, 3
    316e:	36 95       	lsr	r19
    3170:	27 95       	ror	r18
    3172:	17 95       	ror	r17
    3174:	07 95       	ror	r16
    3176:	16 94       	lsr	r1
    3178:	d1 f7       	brne	.-12     	; 0x316e <pulseIn+0x14a>
    317a:	0f c0       	rjmp	.+30     	; 0x319a <pulseIn+0x176>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
    317c:	00 e0       	ldi	r16, 0x00	; 0
    317e:	10 e0       	ldi	r17, 0x00	; 0
    3180:	98 01       	movw	r18, r16
    3182:	0b c0       	rjmp	.+22     	; 0x319a <pulseIn+0x176>
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
    3184:	00 e0       	ldi	r16, 0x00	; 0
    3186:	10 e0       	ldi	r17, 0x00	; 0
    3188:	98 01       	movw	r18, r16
    318a:	07 c0       	rjmp	.+14     	; 0x319a <pulseIn+0x176>
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
    318c:	00 e0       	ldi	r16, 0x00	; 0
    318e:	10 e0       	ldi	r17, 0x00	; 0
    3190:	98 01       	movw	r18, r16
    3192:	03 c0       	rjmp	.+6      	; 0x319a <pulseIn+0x176>
    3194:	00 e0       	ldi	r16, 0x00	; 0
    3196:	10 e0       	ldi	r17, 0x00	; 0
    3198:	98 01       	movw	r18, r16
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
    319a:	60 2f       	mov	r22, r16
    319c:	71 2f       	mov	r23, r17
    319e:	82 2f       	mov	r24, r18
    31a0:	93 2f       	mov	r25, r19
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	df 90       	pop	r13
    31b0:	cf 90       	pop	r12
    31b2:	bf 90       	pop	r11
    31b4:	af 90       	pop	r10
    31b6:	9f 90       	pop	r9
    31b8:	8f 90       	pop	r8
    31ba:	7f 90       	pop	r7
    31bc:	6f 90       	pop	r6
    31be:	08 95       	ret

000031c0 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    31c0:	cf 92       	push	r12
    31c2:	df 92       	push	r13
    31c4:	ef 92       	push	r14
    31c6:	ff 92       	push	r15
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	f8 2e       	mov	r15, r24
    31d2:	06 2f       	mov	r16, r22
    31d4:	e4 2e       	mov	r14, r20
    31d6:	c7 e0       	ldi	r28, 0x07	; 7
    31d8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t value = 0;
    31da:	10 e0       	ldi	r17, 0x00	; 0
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    31dc:	0f 2e       	mov	r0, r31
    31de:	f7 e0       	ldi	r31, 0x07	; 7
    31e0:	cf 2e       	mov	r12, r31
    31e2:	dd 24       	eor	r13, r13
    31e4:	f0 2d       	mov	r31, r0
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    31e6:	80 2f       	mov	r24, r16
    31e8:	61 e0       	ldi	r22, 0x01	; 1
    31ea:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
		if (bitOrder == LSBFIRST)
    31ee:	ee 20       	and	r14, r14
    31f0:	71 f4       	brne	.+28     	; 0x320e <shiftIn+0x4e>
			value |= digitalRead(dataPin) << i;
    31f2:	8f 2d       	mov	r24, r15
    31f4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <digitalRead>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    31f8:	96 01       	movw	r18, r12
    31fa:	2c 1b       	sub	r18, r28
    31fc:	3d 0b       	sbc	r19, r29
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    31fe:	ac 01       	movw	r20, r24
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <shiftIn+0x46>
    3202:	44 0f       	add	r20, r20
    3204:	55 1f       	adc	r21, r21
    3206:	2a 95       	dec	r18
    3208:	e2 f7       	brpl	.-8      	; 0x3202 <shiftIn+0x42>
    320a:	14 2b       	or	r17, r20
    320c:	0a c0       	rjmp	.+20     	; 0x3222 <shiftIn+0x62>
		else
			value |= digitalRead(dataPin) << (7 - i);
    320e:	8f 2d       	mov	r24, r15
    3210:	0e 94 e5 17 	call	0x2fca	; 0x2fca <digitalRead>
    3214:	0c 2e       	mov	r0, r28
    3216:	02 c0       	rjmp	.+4      	; 0x321c <shiftIn+0x5c>
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	0a 94       	dec	r0
    321e:	e2 f7       	brpl	.-8      	; 0x3218 <shiftIn+0x58>
    3220:	18 2b       	or	r17, r24
		digitalWrite(clockPin, LOW);
    3222:	80 2f       	mov	r24, r16
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    322a:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    322c:	8f ef       	ldi	r24, 0xFF	; 255
    322e:	cf 3f       	cpi	r28, 0xFF	; 255
    3230:	d8 07       	cpc	r29, r24
    3232:	c9 f6       	brne	.-78     	; 0x31e6 <shiftIn+0x26>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
    3234:	81 2f       	mov	r24, r17
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	08 95       	ret

00003248 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    3248:	af 92       	push	r10
    324a:	bf 92       	push	r11
    324c:	cf 92       	push	r12
    324e:	df 92       	push	r13
    3250:	ff 92       	push	r15
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	08 2f       	mov	r16, r24
    325c:	16 2f       	mov	r17, r22
    325e:	f4 2e       	mov	r15, r20
    3260:	c7 e0       	ldi	r28, 0x07	; 7
    3262:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3264:	c2 2e       	mov	r12, r18
    3266:	dd 24       	eor	r13, r13
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    3268:	0f 2e       	mov	r0, r31
    326a:	f7 e0       	ldi	r31, 0x07	; 7
    326c:	af 2e       	mov	r10, r31
    326e:	bb 24       	eor	r11, r11
    3270:	f0 2d       	mov	r31, r0
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    3272:	ff 20       	and	r15, r15
    3274:	79 f4       	brne	.+30     	; 0x3294 <shiftOut+0x4c>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    3276:	b5 01       	movw	r22, r10
    3278:	6c 1b       	sub	r22, r28
    327a:	7d 0b       	sbc	r23, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    327c:	c6 01       	movw	r24, r12
    327e:	02 c0       	rjmp	.+4      	; 0x3284 <shiftOut+0x3c>
    3280:	95 95       	asr	r25
    3282:	87 95       	ror	r24
    3284:	6a 95       	dec	r22
    3286:	e2 f7       	brpl	.-8      	; 0x3280 <shiftOut+0x38>
    3288:	bc 01       	movw	r22, r24
    328a:	61 70       	andi	r22, 0x01	; 1
    328c:	80 2f       	mov	r24, r16
    328e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    3292:	0b c0       	rjmp	.+22     	; 0x32aa <shiftOut+0x62>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3294:	b6 01       	movw	r22, r12
    3296:	0c 2e       	mov	r0, r28
    3298:	02 c0       	rjmp	.+4      	; 0x329e <shiftOut+0x56>
    329a:	75 95       	asr	r23
    329c:	67 95       	ror	r22
    329e:	0a 94       	dec	r0
    32a0:	e2 f7       	brpl	.-8      	; 0x329a <shiftOut+0x52>
    32a2:	61 70       	andi	r22, 0x01	; 1
    32a4:	80 2f       	mov	r24, r16
    32a6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    32aa:	81 2f       	mov	r24, r17
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    32b2:	81 2f       	mov	r24, r17
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    32ba:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    32bc:	8f ef       	ldi	r24, 0xFF	; 255
    32be:	cf 3f       	cpi	r28, 0xFF	; 255
    32c0:	d8 07       	cpc	r29, r24
    32c2:	b9 f6       	brne	.-82     	; 0x3272 <shiftOut+0x2a>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	df 90       	pop	r13
    32d0:	cf 90       	pop	r12
    32d2:	bf 90       	pop	r11
    32d4:	af 90       	pop	r10
    32d6:	08 95       	ret

000032d8 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	29 f0       	breq	.+10     	; 0x32e6 <_Z10randomSeedj+0xe>
    srandom(seed);
    32dc:	bc 01       	movw	r22, r24
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 a0 59 	call	0xb340	; 0xb340 <srandom>
    32e6:	08 95       	ret

000032e8 <_Z6randoml>:
  }
}

long random(long howbig)
{
    32e8:	cf 92       	push	r12
    32ea:	df 92       	push	r13
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	6b 01       	movw	r12, r22
    32f6:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    32f8:	61 15       	cp	r22, r1
    32fa:	71 05       	cpc	r23, r1
    32fc:	81 05       	cpc	r24, r1
    32fe:	91 05       	cpc	r25, r1
    3300:	49 f0       	breq	.+18     	; 0x3314 <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    3302:	0e 94 9b 59 	call	0xb336	; 0xb336 <random>
    3306:	a7 01       	movw	r20, r14
    3308:	96 01       	movw	r18, r12
    330a:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divmodsi4>
    330e:	8b 01       	movw	r16, r22
    3310:	9c 01       	movw	r18, r24
    3312:	03 c0       	rjmp	.+6      	; 0x331a <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    3314:	00 e0       	ldi	r16, 0x00	; 0
    3316:	10 e0       	ldi	r17, 0x00	; 0
    3318:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    331a:	60 2f       	mov	r22, r16
    331c:	71 2f       	mov	r23, r17
    331e:	82 2f       	mov	r24, r18
    3320:	93 2f       	mov	r25, r19
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	df 90       	pop	r13
    332c:	cf 90       	pop	r12
    332e:	08 95       	ret

00003330 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    3330:	cf 92       	push	r12
    3332:	df 92       	push	r13
    3334:	ef 92       	push	r14
    3336:	ff 92       	push	r15
    3338:	6b 01       	movw	r12, r22
    333a:	7c 01       	movw	r14, r24
    333c:	da 01       	movw	r26, r20
    333e:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    3340:	c2 16       	cp	r12, r18
    3342:	d3 06       	cpc	r13, r19
    3344:	e4 06       	cpc	r14, r20
    3346:	f5 06       	cpc	r15, r21
    3348:	74 f4       	brge	.+28     	; 0x3366 <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    334a:	8c 19       	sub	r24, r12
    334c:	9d 09       	sbc	r25, r13
    334e:	ae 09       	sbc	r26, r14
    3350:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_Z6randoml>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	c8 0e       	add	r12, r24
    3360:	d9 1e       	adc	r13, r25
    3362:	ea 1e       	adc	r14, r26
    3364:	fb 1e       	adc	r15, r27
}
    3366:	6c 2d       	mov	r22, r12
    3368:	7d 2d       	mov	r23, r13
    336a:	8e 2d       	mov	r24, r14
    336c:	9f 2d       	mov	r25, r15
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	08 95       	ret

00003378 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    3378:	4f 92       	push	r4
    337a:	5f 92       	push	r5
    337c:	6f 92       	push	r6
    337e:	7f 92       	push	r7
    3380:	af 92       	push	r10
    3382:	bf 92       	push	r11
    3384:	cf 92       	push	r12
    3386:	df 92       	push	r13
    3388:	ef 92       	push	r14
    338a:	ff 92       	push	r15
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	00 d0       	rcall	.+0      	; 0x3396 <_Z3maplllll+0x1e>
    3396:	0f 92       	push	r0
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	29 01       	movw	r4, r18
    339e:	3a 01       	movw	r6, r20
    33a0:	e9 82       	std	Y+1, r14	; 0x01
    33a2:	fa 82       	std	Y+2, r15	; 0x02
    33a4:	0b 83       	std	Y+3, r16	; 0x03
    33a6:	1c 83       	std	Y+4, r17	; 0x04
    33a8:	76 01       	movw	r14, r12
    33aa:	65 01       	movw	r12, r10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    33ac:	62 1b       	sub	r22, r18
    33ae:	73 0b       	sbc	r23, r19
    33b0:	84 0b       	sbc	r24, r20
    33b2:	95 0b       	sbc	r25, r21
    33b4:	2e 89       	ldd	r18, Y+22	; 0x16
    33b6:	3f 89       	ldd	r19, Y+23	; 0x17
    33b8:	48 8d       	ldd	r20, Y+24	; 0x18
    33ba:	59 8d       	ldd	r21, Y+25	; 0x19
    33bc:	2c 19       	sub	r18, r12
    33be:	3d 09       	sbc	r19, r13
    33c0:	4e 09       	sbc	r20, r14
    33c2:	5f 09       	sbc	r21, r15
    33c4:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    33c8:	29 81       	ldd	r18, Y+1	; 0x01
    33ca:	3a 81       	ldd	r19, Y+2	; 0x02
    33cc:	4b 81       	ldd	r20, Y+3	; 0x03
    33ce:	5c 81       	ldd	r21, Y+4	; 0x04
    33d0:	24 19       	sub	r18, r4
    33d2:	35 09       	sbc	r19, r5
    33d4:	46 09       	sbc	r20, r6
    33d6:	57 09       	sbc	r21, r7
    33d8:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divmodsi4>
    33dc:	c2 0e       	add	r12, r18
    33de:	d3 1e       	adc	r13, r19
    33e0:	e4 1e       	adc	r14, r20
    33e2:	f5 1e       	adc	r15, r21
}
    33e4:	6c 2d       	mov	r22, r12
    33e6:	7d 2d       	mov	r23, r13
    33e8:	8e 2d       	mov	r24, r14
    33ea:	9f 2d       	mov	r25, r15
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	df 90       	pop	r13
    3402:	cf 90       	pop	r12
    3404:	bf 90       	pop	r11
    3406:	af 90       	pop	r10
    3408:	7f 90       	pop	r7
    340a:	6f 90       	pop	r6
    340c:	5f 90       	pop	r5
    340e:	4f 90       	pop	r4
    3410:	08 95       	ret

00003412 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    3412:	08 95       	ret

00003414 <_Z8makeWordhh>:
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	38 2f       	mov	r19, r24
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	26 2b       	or	r18, r22
    341c:	37 2b       	or	r19, r23
    341e:	82 2f       	mov	r24, r18
    3420:	93 2f       	mov	r25, r19
    3422:	08 95       	ret

00003424 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    3424:	fc 01       	movw	r30, r24
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
}
    342e:	08 95       	ret

00003430 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    3436:	88 81       	ld	r24, Y
    3438:	99 81       	ldd	r25, Y+1	; 0x01
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	11 f0       	breq	.+4      	; 0x3442 <_ZN6String10invalidateEv+0x12>
    343e:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
	buffer = NULL;
    3442:	19 82       	std	Y+1, r1	; 0x01
    3444:	18 82       	st	Y, r1
	capacity = len = 0;
    3446:	1d 82       	std	Y+5, r1	; 0x05
    3448:	1c 82       	std	Y+4, r1	; 0x04
    344a:	1b 82       	std	Y+3, r1	; 0x03
    344c:	1a 82       	std	Y+2, r1	; 0x02
}
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	08 95       	ret

00003454 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	ec 01       	movw	r28, r24
    345e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3460:	6f 5f       	subi	r22, 0xFF	; 255
    3462:	7f 4f       	sbci	r23, 0xFF	; 255
    3464:	88 81       	ld	r24, Y
    3466:	99 81       	ldd	r25, Y+1	; 0x01
    3468:	0e 94 83 55 	call	0xab06	; 0xab06 <realloc>
    346c:	28 2f       	mov	r18, r24
    346e:	39 2f       	mov	r19, r25
	if (newbuffer) {
    3470:	21 15       	cp	r18, r1
    3472:	31 05       	cpc	r19, r1
    3474:	31 f0       	breq	.+12     	; 0x3482 <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    3476:	39 83       	std	Y+1, r19	; 0x01
    3478:	28 83       	st	Y, r18
		capacity = maxStrLen;
    347a:	1b 83       	std	Y+3, r17	; 0x03
    347c:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    3482:	80 e0       	ldi	r24, 0x00	; 0
}
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	08 95       	ret

0000348e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3494:	88 81       	ld	r24, Y
    3496:	99 81       	ldd	r25, Y+1	; 0x01
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	29 f0       	breq	.+10     	; 0x34a6 <_ZN6String7reserveEj+0x18>
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	86 17       	cp	r24, r22
    34a2:	97 07       	cpc	r25, r23
    34a4:	70 f4       	brcc	.+28     	; 0x34c2 <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    34a6:	ce 01       	movw	r24, r28
    34a8:	0e 94 2a 1a 	call	0x3454	; 0x3454 <_ZN6String12changeBufferEj>
    34ac:	88 23       	and	r24, r24
    34ae:	59 f0       	breq	.+22     	; 0x34c6 <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    34b0:	8c 81       	ldd	r24, Y+4	; 0x04
    34b2:	9d 81       	ldd	r25, Y+5	; 0x05
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	49 f4       	brne	.+18     	; 0x34ca <_ZN6String7reserveEj+0x3c>
    34b8:	e8 81       	ld	r30, Y
    34ba:	f9 81       	ldd	r31, Y+1	; 0x01
    34bc:	10 82       	st	Z, r1
		return 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	05 c0       	rjmp	.+10     	; 0x34cc <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	03 c0       	rjmp	.+6      	; 0x34cc <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	08 95       	ret

000034d2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	ec 01       	movw	r28, r24
    34e0:	7b 01       	movw	r14, r22
    34e2:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    34e4:	ba 01       	movw	r22, r20
    34e6:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN6String7reserveEj>
    34ea:	88 23       	and	r24, r24
    34ec:	21 f4       	brne	.+8      	; 0x34f6 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    34ee:	ce 01       	movw	r24, r28
    34f0:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
		return *this;
    34f4:	07 c0       	rjmp	.+14     	; 0x3504 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    34f6:	1d 83       	std	Y+5, r17	; 0x05
    34f8:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    34fa:	88 81       	ld	r24, Y
    34fc:	99 81       	ldd	r25, Y+1	; 0x01
    34fe:	b7 01       	movw	r22, r14
    3500:	0e 94 3a 5a 	call	0xb474	; 0xb474 <strcpy>
	return *this;
}
    3504:	8c 2f       	mov	r24, r28
    3506:	9d 2f       	mov	r25, r29
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	08 95       	ret

00003516 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	dc 01       	movw	r26, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    351c:	11 96       	adiw	r26, 0x01	; 1
    351e:	1c 92       	st	X, r1
    3520:	1e 92       	st	-X, r1
	capacity = 0;
    3522:	13 96       	adiw	r26, 0x03	; 3
    3524:	1c 92       	st	X, r1
    3526:	1e 92       	st	-X, r1
    3528:	12 97       	sbiw	r26, 0x02	; 2
	len = 0;
    352a:	15 96       	adiw	r26, 0x05	; 5
    352c:	1c 92       	st	X, r1
    352e:	1e 92       	st	-X, r1
    3530:	14 97       	sbiw	r26, 0x04	; 4
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3532:	61 15       	cp	r22, r1
    3534:	71 05       	cpc	r23, r1
    3536:	69 f0       	breq	.+26     	; 0x3552 <_ZN6StringC1EPKc+0x3c>
    3538:	e6 2f       	mov	r30, r22
    353a:	f7 2f       	mov	r31, r23
    353c:	ef 01       	movw	r28, r30
    353e:	09 90       	ld	r0, Y+
    3540:	00 20       	and	r0, r0
    3542:	e9 f7       	brne	.-6      	; 0x353e <_ZN6StringC1EPKc+0x28>
    3544:	ae 01       	movw	r20, r28
    3546:	41 50       	subi	r20, 0x01	; 1
    3548:	50 40       	sbci	r21, 0x00	; 0
    354a:	4e 1b       	sub	r20, r30
    354c:	5f 0b       	sbc	r21, r31
    354e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <_ZN6String4copyEPKcj>
}
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	08 95       	ret

00003558 <_ZN6String4copyEPK19__FlashStringHelperj>:
	strcpy(buffer, cstr);
	return *this;
}

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	ec 01       	movw	r28, r24
    3566:	7b 01       	movw	r14, r22
    3568:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    356a:	ba 01       	movw	r22, r20
    356c:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN6String7reserveEj>
    3570:	88 23       	and	r24, r24
    3572:	21 f4       	brne	.+8      	; 0x357c <_ZN6String4copyEPK19__FlashStringHelperj+0x24>
		invalidate();
    3574:	ce 01       	movw	r24, r28
    3576:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
		return *this;
    357a:	07 c0       	rjmp	.+14     	; 0x358a <_ZN6String4copyEPK19__FlashStringHelperj+0x32>
	}
	len = length;
    357c:	1d 83       	std	Y+5, r17	; 0x05
    357e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy_P(buffer, (PGM_P)pstr);
    3580:	88 81       	ld	r24, Y
    3582:	99 81       	ldd	r25, Y+1	; 0x01
    3584:	b7 01       	movw	r22, r14
    3586:	0e 94 ee 59 	call	0xb3dc	; 0xb3dc <strcpy_P>
	return *this;
}
    358a:	8c 2f       	mov	r24, r28
    358c:	9d 2f       	mov	r25, r29
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	0f 91       	pop	r16
    3596:	ff 90       	pop	r15
    3598:	ef 90       	pop	r14
    359a:	08 95       	ret

0000359c <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	ec 01       	movw	r28, r24
    35a2:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    35a4:	86 17       	cp	r24, r22
    35a6:	97 07       	cpc	r25, r23
    35a8:	69 f0       	breq	.+26     	; 0x35c4 <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    35aa:	20 81       	ld	r18, Z
    35ac:	31 81       	ldd	r19, Z+1	; 0x01
    35ae:	21 15       	cp	r18, r1
    35b0:	31 05       	cpc	r19, r1
    35b2:	31 f0       	breq	.+12     	; 0x35c0 <_ZN6StringaSERKS_+0x24>
    35b4:	44 81       	ldd	r20, Z+4	; 0x04
    35b6:	55 81       	ldd	r21, Z+5	; 0x05
    35b8:	b9 01       	movw	r22, r18
    35ba:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <_ZN6String4copyEPKcj>
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <_ZN6StringaSERKS_+0x28>
	else invalidate();
    35c0:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	
	return *this;
}
    35c4:	8c 2f       	mov	r24, r28
    35c6:	9d 2f       	mov	r25, r29
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	08 95       	ret

000035ce <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    35ce:	fc 01       	movw	r30, r24
    35d0:	11 82       	std	Z+1, r1	; 0x01
    35d2:	10 82       	st	Z, r1
	capacity = 0;
    35d4:	13 82       	std	Z+3, r1	; 0x03
    35d6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    35d8:	15 82       	std	Z+5, r1	; 0x05
    35da:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    35dc:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN6StringaSERKS_>
}
    35e0:	08 95       	ret

000035e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    35e2:	cf 93       	push	r28
    35e4:	df 93       	push	r29
    35e6:	c8 2f       	mov	r28, r24
    35e8:	d9 2f       	mov	r29, r25
	if (cstr) copy(cstr, strlen(cstr));
    35ea:	61 15       	cp	r22, r1
    35ec:	71 05       	cpc	r23, r1
    35ee:	71 f0       	breq	.+28     	; 0x360c <_ZN6StringaSEPKc+0x2a>
    35f0:	e6 2f       	mov	r30, r22
    35f2:	f7 2f       	mov	r31, r23
    35f4:	df 01       	movw	r26, r30
    35f6:	0d 90       	ld	r0, X+
    35f8:	00 20       	and	r0, r0
    35fa:	e9 f7       	brne	.-6      	; 0x35f6 <_ZN6StringaSEPKc+0x14>
    35fc:	ad 01       	movw	r20, r26
    35fe:	41 50       	subi	r20, 0x01	; 1
    3600:	50 40       	sbci	r21, 0x00	; 0
    3602:	4e 1b       	sub	r20, r30
    3604:	5f 0b       	sbc	r21, r31
    3606:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <_ZN6String4copyEPKcj>
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    360c:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	
	return *this;
}
    3610:	8c 2f       	mov	r24, r28
    3612:	9d 2f       	mov	r25, r29
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	08 95       	ret

0000361a <_ZN6StringC1Edh>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::String(double value, unsigned char decimalPlaces)
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	a1 97       	sbiw	r28, 0x21	; 33
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	7c 01       	movw	r14, r24
    3638:	cb 01       	movw	r24, r22
    363a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    363c:	f7 01       	movw	r30, r14
    363e:	11 82       	std	Z+1, r1	; 0x01
    3640:	10 82       	st	Z, r1
	capacity = 0;
    3642:	13 82       	std	Z+3, r1	; 0x03
    3644:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3646:	15 82       	std	Z+5, r1	; 0x05
    3648:	14 82       	std	Z+4, r1	; 0x04

String::String(double value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    364a:	42 2f       	mov	r20, r18
    364c:	4e 5f       	subi	r20, 0xFE	; 254
    364e:	8e 01       	movw	r16, r28
    3650:	0f 5f       	subi	r16, 0xFF	; 255
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	0e 94 1d 59 	call	0xb23a	; 0xb23a <dtostrf>
    3658:	bc 01       	movw	r22, r24
    365a:	c7 01       	movw	r24, r14
    365c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    3660:	a1 96       	adiw	r28, 0x21	; 33
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	df 91       	pop	r29
    366e:	cf 91       	pop	r28
    3670:	1f 91       	pop	r17
    3672:	0f 91       	pop	r16
    3674:	ff 90       	pop	r15
    3676:	ef 90       	pop	r14
    3678:	08 95       	ret

0000367a <_ZN6StringC1Efh>:
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, unsigned char decimalPlaces)
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	a1 97       	sbiw	r28, 0x21	; 33
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	7c 01       	movw	r14, r24
    3698:	cb 01       	movw	r24, r22
    369a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    369c:	f7 01       	movw	r30, r14
    369e:	11 82       	std	Z+1, r1	; 0x01
    36a0:	10 82       	st	Z, r1
	capacity = 0;
    36a2:	13 82       	std	Z+3, r1	; 0x03
    36a4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36a6:	15 82       	std	Z+5, r1	; 0x05
    36a8:	14 82       	std	Z+4, r1	; 0x04

String::String(float value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    36aa:	42 2f       	mov	r20, r18
    36ac:	4e 5f       	subi	r20, 0xFE	; 254
    36ae:	8e 01       	movw	r16, r28
    36b0:	0f 5f       	subi	r16, 0xFF	; 255
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	0e 94 1d 59 	call	0xb23a	; 0xb23a <dtostrf>
    36b8:	bc 01       	movw	r22, r24
    36ba:	c7 01       	movw	r24, r14
    36bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    36c0:	a1 96       	adiw	r28, 0x21	; 33
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	08 95       	ret

000036da <_ZN6StringC1Emh>:
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	a1 97       	sbiw	r28, 0x21	; 33
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    36f4:	fc 01       	movw	r30, r24
    36f6:	11 82       	std	Z+1, r1	; 0x01
    36f8:	10 82       	st	Z, r1
	capacity = 0;
    36fa:	13 82       	std	Z+3, r1	; 0x03
    36fc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36fe:	15 82       	std	Z+5, r1	; 0x05
    3700:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
    3702:	cb 01       	movw	r24, r22
    3704:	ba 01       	movw	r22, r20
    3706:	ae 01       	movw	r20, r28
    3708:	4f 5f       	subi	r20, 0xFF	; 255
    370a:	5f 4f       	sbci	r21, 0xFF	; 255
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	0e 94 ed 5a 	call	0xb5da	; 0xb5da <ultoa>
	*this = buf;
    3712:	c8 01       	movw	r24, r16
    3714:	be 01       	movw	r22, r28
    3716:	6f 5f       	subi	r22, 0xFF	; 255
    3718:	7f 4f       	sbci	r23, 0xFF	; 255
    371a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    371e:	a1 96       	adiw	r28, 0x21	; 33
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	cd bf       	out	0x3d, r28	; 61
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	08 95       	ret

00003734 <_ZN6StringC1Elh>:
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	a2 97       	sbiw	r28, 0x22	; 34
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    374e:	fc 01       	movw	r30, r24
    3750:	11 82       	std	Z+1, r1	; 0x01
    3752:	10 82       	st	Z, r1
	capacity = 0;
    3754:	13 82       	std	Z+3, r1	; 0x03
    3756:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3758:	15 82       	std	Z+5, r1	; 0x05
    375a:	14 82       	std	Z+4, r1	; 0x04

String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
    375c:	cb 01       	movw	r24, r22
    375e:	ba 01       	movw	r22, r20
    3760:	ae 01       	movw	r20, r28
    3762:	4f 5f       	subi	r20, 0xFF	; 255
    3764:	5f 4f       	sbci	r21, 0xFF	; 255
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	0e 94 a4 5a 	call	0xb548	; 0xb548 <ltoa>
	*this = buf;
    376c:	c8 01       	movw	r24, r16
    376e:	be 01       	movw	r22, r28
    3770:	6f 5f       	subi	r22, 0xFF	; 255
    3772:	7f 4f       	sbci	r23, 0xFF	; 255
    3774:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    3778:	a2 96       	adiw	r28, 0x22	; 34
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	08 95       	ret

0000378e <_ZN6StringC1Ejh>:
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    3792:	cf 93       	push	r28
    3794:	df 93       	push	r29
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	61 97       	sbiw	r28, 0x11	; 17
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	8c 01       	movw	r16, r24
    37a8:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    37aa:	f8 01       	movw	r30, r16
    37ac:	11 82       	std	Z+1, r1	; 0x01
    37ae:	10 82       	st	Z, r1
	capacity = 0;
    37b0:	13 82       	std	Z+3, r1	; 0x03
    37b2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    37b4:	15 82       	std	Z+5, r1	; 0x05
    37b6:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
    37b8:	be 01       	movw	r22, r28
    37ba:	6f 5f       	subi	r22, 0xFF	; 255
    37bc:	7f 4f       	sbci	r23, 0xFF	; 255
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	0e 94 12 5b 	call	0xb624	; 0xb624 <utoa>
	*this = buf;
    37c4:	c8 01       	movw	r24, r16
    37c6:	be 01       	movw	r22, r28
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    37d0:	61 96       	adiw	r28, 0x11	; 17
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	08 95       	ret

000037e6 <_ZN6StringC1Eih>:
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	62 97       	sbiw	r28, 0x12	; 18
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	8c 01       	movw	r16, r24
    3800:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3802:	f8 01       	movw	r30, r16
    3804:	11 82       	std	Z+1, r1	; 0x01
    3806:	10 82       	st	Z, r1
	capacity = 0;
    3808:	13 82       	std	Z+3, r1	; 0x03
    380a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    380c:	15 82       	std	Z+5, r1	; 0x05
    380e:	14 82       	std	Z+4, r1	; 0x04

String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    3810:	be 01       	movw	r22, r28
    3812:	6f 5f       	subi	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	0e 94 83 5a 	call	0xb506	; 0xb506 <itoa>
	*this = buf;
    381c:	c8 01       	movw	r24, r16
    381e:	be 01       	movw	r22, r28
    3820:	6f 5f       	subi	r22, 0xFF	; 255
    3822:	7f 4f       	sbci	r23, 0xFF	; 255
    3824:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    3828:	62 96       	adiw	r28, 0x12	; 18
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	08 95       	ret

0000383e <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	29 97       	sbiw	r28, 0x09	; 9
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	f8 94       	cli
    3850:	de bf       	out	0x3e, r29	; 62
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	8c 01       	movw	r16, r24
    3858:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    385a:	f8 01       	movw	r30, r16
    385c:	11 82       	std	Z+1, r1	; 0x01
    385e:	10 82       	st	Z, r1
	capacity = 0;
    3860:	13 82       	std	Z+3, r1	; 0x03
    3862:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3864:	15 82       	std	Z+5, r1	; 0x05
    3866:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	be 01       	movw	r22, r28
    386c:	6f 5f       	subi	r22, 0xFF	; 255
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	0e 94 12 5b 	call	0xb624	; 0xb624 <utoa>
	*this = buf;
    3876:	c8 01       	movw	r24, r16
    3878:	be 01       	movw	r22, r28
    387a:	6f 5f       	subi	r22, 0xFF	; 255
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
    387e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    3882:	29 96       	adiw	r28, 0x09	; 9
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	08 95       	ret

00003898 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	0f 92       	push	r0
    389e:	0f 92       	push	r0
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    38a4:	fc 01       	movw	r30, r24
    38a6:	11 82       	std	Z+1, r1	; 0x01
    38a8:	10 82       	st	Z, r1
	capacity = 0;
    38aa:	13 82       	std	Z+3, r1	; 0x03
    38ac:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    38ae:	15 82       	std	Z+5, r1	; 0x05
    38b0:	14 82       	std	Z+4, r1	; 0x04

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    38b2:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    38b4:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    38b6:	be 01       	movw	r22, r28
    38b8:	6f 5f       	subi	r22, 0xFF	; 255
    38ba:	7f 4f       	sbci	r23, 0xFF	; 255
    38bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
}
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	08 95       	ret

000038ca <_ZN6StringaSEPK19__FlashStringHelper>:
	
	return *this;
}

String & String::operator = (const __FlashStringHelper *pstr)
{
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	18 2f       	mov	r17, r24
    38d4:	09 2f       	mov	r16, r25
    38d6:	eb 01       	movw	r28, r22
	if (pstr) copy(pstr, strlen_P((PGM_P)pstr));
    38d8:	20 97       	sbiw	r28, 0x00	; 0
    38da:	51 f0       	breq	.+20     	; 0x38f0 <_ZN6StringaSEPK19__FlashStringHelper+0x26>


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    38dc:	cb 01       	movw	r24, r22
    38de:	0e 94 f5 59 	call	0xb3ea	; 0xb3ea <__strlen_P>
    38e2:	ac 01       	movw	r20, r24
    38e4:	81 2f       	mov	r24, r17
    38e6:	90 2f       	mov	r25, r16
    38e8:	be 01       	movw	r22, r28
    38ea:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN6String4copyEPK19__FlashStringHelperj>
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <_ZN6StringaSEPK19__FlashStringHelper+0x2a>
	else invalidate();
    38f0:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>

	return *this;
}
    38f4:	81 2f       	mov	r24, r17
    38f6:	90 2f       	mov	r25, r16
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	08 95       	ret

00003902 <_ZN6StringC1EPK19__FlashStringHelper>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3902:	fc 01       	movw	r30, r24
    3904:	11 82       	std	Z+1, r1	; 0x01
    3906:	10 82       	st	Z, r1
	capacity = 0;
    3908:	13 82       	std	Z+3, r1	; 0x03
    390a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    390c:	15 82       	std	Z+5, r1	; 0x05
    390e:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const __FlashStringHelper *pstr)
{
	init();
	*this = pstr;
    3910:	0e 94 65 1c 	call	0x38ca	; 0x38ca <_ZN6StringaSEPK19__FlashStringHelper>
}
    3914:	08 95       	ret

00003916 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    3916:	ef 92       	push	r14
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	8c 01       	movw	r16, r24
    3924:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    3926:	fc 01       	movw	r30, r24
    3928:	c4 81       	ldd	r28, Z+4	; 0x04
    392a:	d5 81       	ldd	r29, Z+5	; 0x05
	if (!cstr) return 0;
    392c:	61 15       	cp	r22, r1
    392e:	71 05       	cpc	r23, r1
    3930:	c9 f0       	breq	.+50     	; 0x3964 <_ZN6String6concatEPKcj+0x4e>
	if (length == 0) return 1;
    3932:	41 15       	cp	r20, r1
    3934:	51 05       	cpc	r21, r1
    3936:	c1 f0       	breq	.+48     	; 0x3968 <_ZN6String6concatEPKcj+0x52>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    3938:	c4 0f       	add	r28, r20
    393a:	d5 1f       	adc	r29, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    393c:	be 01       	movw	r22, r28
    393e:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN6String7reserveEj>
    3942:	88 23       	and	r24, r24
    3944:	99 f0       	breq	.+38     	; 0x396c <_ZN6String6concatEPKcj+0x56>
	strcpy(buffer + len, cstr);
    3946:	f8 01       	movw	r30, r16
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	24 81       	ldd	r18, Z+4	; 0x04
    394e:	35 81       	ldd	r19, Z+5	; 0x05
    3950:	82 0f       	add	r24, r18
    3952:	93 1f       	adc	r25, r19
    3954:	b7 01       	movw	r22, r14
    3956:	0e 94 3a 5a 	call	0xb474	; 0xb474 <strcpy>
	len = newlen;
    395a:	f8 01       	movw	r30, r16
    395c:	d5 83       	std	Z+5, r29	; 0x05
    395e:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	05 c0       	rjmp	.+10     	; 0x396e <_ZN6String6concatEPKcj+0x58>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	03 c0       	rjmp	.+6      	; 0x396e <_ZN6String6concatEPKcj+0x58>
	if (length == 0) return 1;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	01 c0       	rjmp	.+2      	; 0x396e <_ZN6String6concatEPKcj+0x58>
	if (!reserve(newlen)) return 0;
    396c:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	08 95       	ret

0000397c <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    397c:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    397e:	20 81       	ld	r18, Z
    3980:	31 81       	ldd	r19, Z+1	; 0x01
    3982:	44 81       	ldd	r20, Z+4	; 0x04
    3984:	55 81       	ldd	r21, Z+5	; 0x05
    3986:	b9 01       	movw	r22, r18
    3988:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    398c:	08 95       	ret

0000398e <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    398e:	61 15       	cp	r22, r1
    3990:	71 05       	cpc	r23, r1
    3992:	71 f0       	breq	.+28     	; 0x39b0 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    3994:	e6 2f       	mov	r30, r22
    3996:	f7 2f       	mov	r31, r23
    3998:	df 01       	movw	r26, r30
    399a:	0d 90       	ld	r0, X+
    399c:	00 20       	and	r0, r0
    399e:	e9 f7       	brne	.-6      	; 0x399a <_ZN6String6concatEPKc+0xc>
    39a0:	ad 01       	movw	r20, r26
    39a2:	41 50       	subi	r20, 0x01	; 1
    39a4:	50 40       	sbci	r21, 0x00	; 0
    39a6:	4e 1b       	sub	r20, r30
    39a8:	5f 0b       	sbc	r21, r31
    39aa:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
    39ae:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    39b0:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    39b2:	08 95       	ret

000039b4 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	0f 92       	push	r0
    39ba:	0f 92       	push	r0
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    39c0:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    39c2:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    39c4:	be 01       	movw	r22, r28
    39c6:	6f 5f       	subi	r22, 0xFF	; 255
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	41 e0       	ldi	r20, 0x01	; 1
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <_ZN6String6concatEh+0xe>
    39ea:	0f 92       	push	r0
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	7c 01       	movw	r14, r24
    39f2:	86 2f       	mov	r24, r22
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	8e 01       	movw	r16, r28
    39f8:	0f 5f       	subi	r16, 0xFF	; 255
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
    39fc:	b8 01       	movw	r22, r16
    39fe:	4a e0       	ldi	r20, 0x0A	; 10
    3a00:	50 e0       	ldi	r21, 0x00	; 0
    3a02:	0e 94 83 5a 	call	0xb506	; 0xb506 <itoa>
	return concat(buf, strlen(buf));
    3a06:	f8 01       	movw	r30, r16
    3a08:	01 90       	ld	r0, Z+
    3a0a:	00 20       	and	r0, r0
    3a0c:	e9 f7       	brne	.-6      	; 0x3a08 <_ZN6String6concatEh+0x2c>
    3a0e:	af 01       	movw	r20, r30
    3a10:	41 50       	subi	r20, 0x01	; 1
    3a12:	50 40       	sbci	r21, 0x00	; 0
    3a14:	40 1b       	sub	r20, r16
    3a16:	51 0b       	sbc	r21, r17
    3a18:	c7 01       	movw	r24, r14
    3a1a:	b8 01       	movw	r22, r16
    3a1c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	08 95       	ret

00003a36 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    3a36:	ef 92       	push	r14
    3a38:	ff 92       	push	r15
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	28 97       	sbiw	r28, 0x08	; 8
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	7c 01       	movw	r14, r24
    3a54:	cb 01       	movw	r24, r22
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
    3a56:	8e 01       	movw	r16, r28
    3a58:	0f 5f       	subi	r16, 0xFF	; 255
    3a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5c:	b8 01       	movw	r22, r16
    3a5e:	4a e0       	ldi	r20, 0x0A	; 10
    3a60:	50 e0       	ldi	r21, 0x00	; 0
    3a62:	0e 94 83 5a 	call	0xb506	; 0xb506 <itoa>
	return concat(buf, strlen(buf));
    3a66:	f8 01       	movw	r30, r16
    3a68:	01 90       	ld	r0, Z+
    3a6a:	00 20       	and	r0, r0
    3a6c:	e9 f7       	brne	.-6      	; 0x3a68 <_ZN6String6concatEi+0x32>
    3a6e:	af 01       	movw	r20, r30
    3a70:	41 50       	subi	r20, 0x01	; 1
    3a72:	50 40       	sbci	r21, 0x00	; 0
    3a74:	40 1b       	sub	r20, r16
    3a76:	51 0b       	sbc	r21, r17
    3a78:	c7 01       	movw	r24, r14
    3a7a:	b8 01       	movw	r22, r16
    3a7c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3a80:	28 96       	adiw	r28, 0x08	; 8
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	ff 90       	pop	r15
    3a96:	ef 90       	pop	r14
    3a98:	08 95       	ret

00003a9a <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    3a9a:	ef 92       	push	r14
    3a9c:	ff 92       	push	r15
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	27 97       	sbiw	r28, 0x07	; 7
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	7c 01       	movw	r14, r24
    3ab8:	cb 01       	movw	r24, r22
	char buf[1 + 3 * sizeof(unsigned int)];
	utoa(num, buf, 10);
    3aba:	8e 01       	movw	r16, r28
    3abc:	0f 5f       	subi	r16, 0xFF	; 255
    3abe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac0:	b8 01       	movw	r22, r16
    3ac2:	4a e0       	ldi	r20, 0x0A	; 10
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	0e 94 12 5b 	call	0xb624	; 0xb624 <utoa>
	return concat(buf, strlen(buf));
    3aca:	f8 01       	movw	r30, r16
    3acc:	01 90       	ld	r0, Z+
    3ace:	00 20       	and	r0, r0
    3ad0:	e9 f7       	brne	.-6      	; 0x3acc <_ZN6String6concatEj+0x32>
    3ad2:	af 01       	movw	r20, r30
    3ad4:	41 50       	subi	r20, 0x01	; 1
    3ad6:	50 40       	sbci	r21, 0x00	; 0
    3ad8:	40 1b       	sub	r20, r16
    3ada:	51 0b       	sbc	r21, r17
    3adc:	c7 01       	movw	r24, r14
    3ade:	b8 01       	movw	r22, r16
    3ae0:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3ae4:	27 96       	adiw	r28, 0x07	; 7
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	08 95       	ret

00003afe <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	2e 97       	sbiw	r28, 0x0e	; 14
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	7c 01       	movw	r14, r24
	char buf[2 + 3 * sizeof(long)];
	ltoa(num, buf, 10);
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	ba 01       	movw	r22, r20
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	a8 01       	movw	r20, r16
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	0e 94 a4 5a 	call	0xb548	; 0xb548 <ltoa>
	return concat(buf, strlen(buf));
    3b30:	f8 01       	movw	r30, r16
    3b32:	01 90       	ld	r0, Z+
    3b34:	00 20       	and	r0, r0
    3b36:	e9 f7       	brne	.-6      	; 0x3b32 <_ZN6String6concatEl+0x34>
    3b38:	af 01       	movw	r20, r30
    3b3a:	41 50       	subi	r20, 0x01	; 1
    3b3c:	50 40       	sbci	r21, 0x00	; 0
    3b3e:	40 1b       	sub	r20, r16
    3b40:	51 0b       	sbc	r21, r17
    3b42:	c7 01       	movw	r24, r14
    3b44:	b8 01       	movw	r22, r16
    3b46:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3b4a:	2e 96       	adiw	r28, 0x0e	; 14
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	08 95       	ret

00003b64 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	2d 97       	sbiw	r28, 0x0d	; 13
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	7c 01       	movw	r14, r24
	char buf[1 + 3 * sizeof(unsigned long)];
	ultoa(num, buf, 10);
    3b82:	cb 01       	movw	r24, r22
    3b84:	ba 01       	movw	r22, r20
    3b86:	8e 01       	movw	r16, r28
    3b88:	0f 5f       	subi	r16, 0xFF	; 255
    3b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8c:	a8 01       	movw	r20, r16
    3b8e:	2a e0       	ldi	r18, 0x0A	; 10
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	0e 94 ed 5a 	call	0xb5da	; 0xb5da <ultoa>
	return concat(buf, strlen(buf));
    3b96:	f8 01       	movw	r30, r16
    3b98:	01 90       	ld	r0, Z+
    3b9a:	00 20       	and	r0, r0
    3b9c:	e9 f7       	brne	.-6      	; 0x3b98 <_ZN6String6concatEm+0x34>
    3b9e:	af 01       	movw	r20, r30
    3ba0:	41 50       	subi	r20, 0x01	; 1
    3ba2:	50 40       	sbci	r21, 0x00	; 0
    3ba4:	40 1b       	sub	r20, r16
    3ba6:	51 0b       	sbc	r21, r17
    3ba8:	c7 01       	movw	r24, r14
    3baa:	b8 01       	movw	r22, r16
    3bac:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3bb0:	2d 96       	adiw	r28, 0x0d	; 13
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	08 95       	ret

00003bca <_ZN6String6concatEf>:

unsigned char String::concat(float num)
{
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	64 97       	sbiw	r28, 0x14	; 20
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	7c 01       	movw	r14, r24
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    3be8:	cb 01       	movw	r24, r22
    3bea:	ba 01       	movw	r22, r20
    3bec:	44 e0       	ldi	r20, 0x04	; 4
    3bee:	22 e0       	ldi	r18, 0x02	; 2
    3bf0:	8e 01       	movw	r16, r28
    3bf2:	0f 5f       	subi	r16, 0xFF	; 255
    3bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf6:	0e 94 1d 59 	call	0xb23a	; 0xb23a <dtostrf>
    3bfa:	68 2f       	mov	r22, r24
    3bfc:	79 2f       	mov	r23, r25
	return concat(string, strlen(string));
    3bfe:	e8 2f       	mov	r30, r24
    3c00:	f9 2f       	mov	r31, r25
    3c02:	df 01       	movw	r26, r30
    3c04:	0d 90       	ld	r0, X+
    3c06:	00 20       	and	r0, r0
    3c08:	e9 f7       	brne	.-6      	; 0x3c04 <_ZN6String6concatEf+0x3a>
    3c0a:	ad 01       	movw	r20, r26
    3c0c:	41 50       	subi	r20, 0x01	; 1
    3c0e:	50 40       	sbci	r21, 0x00	; 0
    3c10:	4e 1b       	sub	r20, r30
    3c12:	5f 0b       	sbc	r21, r31
    3c14:	c7 01       	movw	r24, r14
    3c16:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3c1a:	64 96       	adiw	r28, 0x14	; 20
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	1f 91       	pop	r17
    3c2c:	0f 91       	pop	r16
    3c2e:	ff 90       	pop	r15
    3c30:	ef 90       	pop	r14
    3c32:	08 95       	ret

00003c34 <_ZN6String6concatEd>:

unsigned char String::concat(double num)
{
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	64 97       	sbiw	r28, 0x14	; 20
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	7c 01       	movw	r14, r24
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    3c52:	cb 01       	movw	r24, r22
    3c54:	ba 01       	movw	r22, r20
    3c56:	44 e0       	ldi	r20, 0x04	; 4
    3c58:	22 e0       	ldi	r18, 0x02	; 2
    3c5a:	8e 01       	movw	r16, r28
    3c5c:	0f 5f       	subi	r16, 0xFF	; 255
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	0e 94 1d 59 	call	0xb23a	; 0xb23a <dtostrf>
    3c64:	68 2f       	mov	r22, r24
    3c66:	79 2f       	mov	r23, r25
	return concat(string, strlen(string));
    3c68:	e8 2f       	mov	r30, r24
    3c6a:	f9 2f       	mov	r31, r25
    3c6c:	df 01       	movw	r26, r30
    3c6e:	0d 90       	ld	r0, X+
    3c70:	00 20       	and	r0, r0
    3c72:	e9 f7       	brne	.-6      	; 0x3c6e <_ZN6String6concatEd+0x3a>
    3c74:	ad 01       	movw	r20, r26
    3c76:	41 50       	subi	r20, 0x01	; 1
    3c78:	50 40       	sbci	r21, 0x00	; 0
    3c7a:	4e 1b       	sub	r20, r30
    3c7c:	5f 0b       	sbc	r21, r31
    3c7e:	c7 01       	movw	r24, r14
    3c80:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
}
    3c84:	64 96       	adiw	r28, 0x14	; 20
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	ff 90       	pop	r15
    3c9a:	ef 90       	pop	r14
    3c9c:	08 95       	ret

00003c9e <_ZN6String6concatEPK19__FlashStringHelper>:

unsigned char String::concat(const __FlashStringHelper * str)
{
    3c9e:	ef 92       	push	r14
    3ca0:	ff 92       	push	r15
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	7c 01       	movw	r14, r24
    3cac:	8b 01       	movw	r16, r22
	if (!str) return 0;
    3cae:	61 15       	cp	r22, r1
    3cb0:	71 05       	cpc	r23, r1
    3cb2:	f9 f0       	breq	.+62     	; 0x3cf2 <_ZN6String6concatEPK19__FlashStringHelper+0x54>
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	0e 94 f5 59 	call	0xb3ea	; 0xb3ea <__strlen_P>
	int length = strlen_P((const char *) str);
	if (length == 0) return 1;
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	e1 f0       	breq	.+56     	; 0x3cf6 <_ZN6String6concatEPK19__FlashStringHelper+0x58>
	unsigned int newlen = len + length;
    3cbe:	f7 01       	movw	r30, r14
    3cc0:	c4 81       	ldd	r28, Z+4	; 0x04
    3cc2:	d5 81       	ldd	r29, Z+5	; 0x05
    3cc4:	c8 0f       	add	r28, r24
    3cc6:	d9 1f       	adc	r29, r25
	if (!reserve(newlen)) return 0;
    3cc8:	c7 01       	movw	r24, r14
    3cca:	be 01       	movw	r22, r28
    3ccc:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN6String7reserveEj>
    3cd0:	88 23       	and	r24, r24
    3cd2:	99 f0       	breq	.+38     	; 0x3cfa <_ZN6String6concatEPK19__FlashStringHelper+0x5c>
	strcpy_P(buffer + len, (const char *) str);
    3cd4:	f7 01       	movw	r30, r14
    3cd6:	80 81       	ld	r24, Z
    3cd8:	91 81       	ldd	r25, Z+1	; 0x01
    3cda:	24 81       	ldd	r18, Z+4	; 0x04
    3cdc:	35 81       	ldd	r19, Z+5	; 0x05
    3cde:	82 0f       	add	r24, r18
    3ce0:	93 1f       	adc	r25, r19
    3ce2:	b8 01       	movw	r22, r16
    3ce4:	0e 94 ee 59 	call	0xb3dc	; 0xb3dc <strcpy_P>
	len = newlen;
    3ce8:	f7 01       	movw	r30, r14
    3cea:	d5 83       	std	Z+5, r29	; 0x05
    3cec:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	05 c0       	rjmp	.+10     	; 0x3cfc <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	return concat(string, strlen(string));
}

unsigned char String::concat(const __FlashStringHelper * str)
{
	if (!str) return 0;
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	03 c0       	rjmp	.+6      	; 0x3cfc <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	int length = strlen_P((const char *) str);
	if (length == 0) return 1;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	01 c0       	rjmp	.+2      	; 0x3cfc <_ZN6String6concatEPK19__FlashStringHelper+0x5e>
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	08 95       	ret

00003d0a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	c8 2f       	mov	r28, r24
    3d10:	d9 2f       	mov	r29, r25
    3d12:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3d14:	20 81       	ld	r18, Z
    3d16:	31 81       	ldd	r19, Z+1	; 0x01
    3d18:	44 81       	ldd	r20, Z+4	; 0x04
    3d1a:	55 81       	ldd	r21, Z+5	; 0x05
    3d1c:	b9 01       	movw	r22, r18
    3d1e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
    3d22:	88 23       	and	r24, r24
    3d24:	21 f4       	brne	.+8      	; 0x3d2e <_ZplRK15StringSumHelperRK6String+0x24>
    3d26:	8c 2f       	mov	r24, r28
    3d28:	9d 2f       	mov	r25, r29
    3d2a:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3d2e:	8c 2f       	mov	r24, r28
    3d30:	9d 2f       	mov	r25, r29
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	08 95       	ret

00003d38 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	c8 2f       	mov	r28, r24
    3d3e:	d9 2f       	mov	r29, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3d40:	61 15       	cp	r22, r1
    3d42:	71 05       	cpc	r23, r1
    3d44:	79 f0       	breq	.+30     	; 0x3d64 <_ZplRK15StringSumHelperPKc+0x2c>
    3d46:	e6 2f       	mov	r30, r22
    3d48:	f7 2f       	mov	r31, r23
    3d4a:	df 01       	movw	r26, r30
    3d4c:	0d 90       	ld	r0, X+
    3d4e:	00 20       	and	r0, r0
    3d50:	e9 f7       	brne	.-6      	; 0x3d4c <_ZplRK15StringSumHelperPKc+0x14>
    3d52:	ad 01       	movw	r20, r26
    3d54:	41 50       	subi	r20, 0x01	; 1
    3d56:	50 40       	sbci	r21, 0x00	; 0
    3d58:	4e 1b       	sub	r20, r30
    3d5a:	5f 0b       	sbc	r21, r31
    3d5c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN6String6concatEPKcj>
    3d60:	88 23       	and	r24, r24
    3d62:	21 f4       	brne	.+8      	; 0x3d6c <_ZplRK15StringSumHelperPKc+0x34>
    3d64:	8c 2f       	mov	r24, r28
    3d66:	9d 2f       	mov	r25, r29
    3d68:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3d6c:	8c 2f       	mov	r24, r28
    3d6e:	9d 2f       	mov	r25, r29
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	08 95       	ret

00003d76 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	d8 2f       	mov	r29, r24
    3d7c:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    3d7e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN6String6concatEc>
    3d82:	88 23       	and	r24, r24
    3d84:	21 f4       	brne	.+8      	; 0x3d8e <_ZplRK15StringSumHelperc+0x18>
    3d86:	8d 2f       	mov	r24, r29
    3d88:	9c 2f       	mov	r25, r28
    3d8a:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3d8e:	8d 2f       	mov	r24, r29
    3d90:	9c 2f       	mov	r25, r28
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	08 95       	ret

00003d98 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3d98:	cf 93       	push	r28
    3d9a:	df 93       	push	r29
    3d9c:	d8 2f       	mov	r29, r24
    3d9e:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3da0:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZN6String6concatEh>
    3da4:	88 23       	and	r24, r24
    3da6:	21 f4       	brne	.+8      	; 0x3db0 <_ZplRK15StringSumHelperh+0x18>
    3da8:	8d 2f       	mov	r24, r29
    3daa:	9c 2f       	mov	r25, r28
    3dac:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3db0:	8d 2f       	mov	r24, r29
    3db2:	9c 2f       	mov	r25, r28
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	08 95       	ret

00003dba <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	d8 2f       	mov	r29, r24
    3dc0:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3dc2:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_ZN6String6concatEi>
    3dc6:	88 23       	and	r24, r24
    3dc8:	21 f4       	brne	.+8      	; 0x3dd2 <_ZplRK15StringSumHelperi+0x18>
    3dca:	8d 2f       	mov	r24, r29
    3dcc:	9c 2f       	mov	r25, r28
    3dce:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3dd2:	8d 2f       	mov	r24, r29
    3dd4:	9c 2f       	mov	r25, r28
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	08 95       	ret

00003ddc <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	d8 2f       	mov	r29, r24
    3de2:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3de4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <_ZN6String6concatEj>
    3de8:	88 23       	and	r24, r24
    3dea:	21 f4       	brne	.+8      	; 0x3df4 <_ZplRK15StringSumHelperj+0x18>
    3dec:	8d 2f       	mov	r24, r29
    3dee:	9c 2f       	mov	r25, r28
    3df0:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3df4:	8d 2f       	mov	r24, r29
    3df6:	9c 2f       	mov	r25, r28
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	08 95       	ret

00003dfe <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	d8 2f       	mov	r29, r24
    3e04:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e06:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <_ZN6String6concatEl>
    3e0a:	88 23       	and	r24, r24
    3e0c:	21 f4       	brne	.+8      	; 0x3e16 <_ZplRK15StringSumHelperl+0x18>
    3e0e:	8d 2f       	mov	r24, r29
    3e10:	9c 2f       	mov	r25, r28
    3e12:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3e16:	8d 2f       	mov	r24, r29
    3e18:	9c 2f       	mov	r25, r28
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	08 95       	ret

00003e20 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	d8 2f       	mov	r29, r24
    3e26:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e28:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <_ZN6String6concatEm>
    3e2c:	88 23       	and	r24, r24
    3e2e:	21 f4       	brne	.+8      	; 0x3e38 <_ZplRK15StringSumHelperm+0x18>
    3e30:	8d 2f       	mov	r24, r29
    3e32:	9c 2f       	mov	r25, r28
    3e34:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3e38:	8d 2f       	mov	r24, r29
    3e3a:	9c 2f       	mov	r25, r28
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	08 95       	ret

00003e42 <_ZplRK15StringSumHelperf>:

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29
    3e46:	d8 2f       	mov	r29, r24
    3e48:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e4a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN6String6concatEf>
    3e4e:	88 23       	and	r24, r24
    3e50:	21 f4       	brne	.+8      	; 0x3e5a <_ZplRK15StringSumHelperf+0x18>
    3e52:	8d 2f       	mov	r24, r29
    3e54:	9c 2f       	mov	r25, r28
    3e56:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3e5a:	8d 2f       	mov	r24, r29
    3e5c:	9c 2f       	mov	r25, r28
    3e5e:	df 91       	pop	r29
    3e60:	cf 91       	pop	r28
    3e62:	08 95       	ret

00003e64 <_ZplRK15StringSumHelperd>:

StringSumHelper & operator + (const StringSumHelper &lhs, double num)
{
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	d8 2f       	mov	r29, r24
    3e6a:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3e6c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <_ZN6String6concatEd>
    3e70:	88 23       	and	r24, r24
    3e72:	21 f4       	brne	.+8      	; 0x3e7c <_ZplRK15StringSumHelperd+0x18>
    3e74:	8d 2f       	mov	r24, r29
    3e76:	9c 2f       	mov	r25, r28
    3e78:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3e7c:	8d 2f       	mov	r24, r29
    3e7e:	9c 2f       	mov	r25, r28
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	08 95       	ret

00003e86 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:

StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	d8 2f       	mov	r29, r24
    3e8c:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs))	a.invalidate();
    3e8e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN6String6concatEPK19__FlashStringHelper>
    3e92:	88 23       	and	r24, r24
    3e94:	21 f4       	brne	.+8      	; 0x3e9e <_ZplRK15StringSumHelperPK19__FlashStringHelper+0x18>
    3e96:	8d 2f       	mov	r24, r29
    3e98:	9c 2f       	mov	r25, r28
    3e9a:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZN6String10invalidateEv>
	return a;
}
    3e9e:	8d 2f       	mov	r24, r29
    3ea0:	9c 2f       	mov	r25, r28
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	08 95       	ret

00003ea8 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	fb 01       	movw	r30, r22
	if (!buffer || !s.buffer) {
    3eac:	8d 91       	ld	r24, X+
    3eae:	9c 91       	ld	r25, X
    3eb0:	11 97       	sbiw	r26, 0x01	; 1
    3eb2:	00 97       	sbiw	r24, 0x00	; 0
    3eb4:	31 f0       	breq	.+12     	; 0x3ec2 <_ZNK6String9compareToERKS_+0x1a>
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	61 15       	cp	r22, r1
    3ebc:	71 05       	cpc	r23, r1
    3ebe:	d1 f4       	brne	.+52     	; 0x3ef4 <_ZNK6String9compareToERKS_+0x4c>
    3ec0:	0e c0       	rjmp	.+28     	; 0x3ede <_ZNK6String9compareToERKS_+0x36>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    3ec2:	a0 81       	ld	r26, Z
    3ec4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ec6:	10 97       	sbiw	r26, 0x00	; 0
    3ec8:	d1 f0       	breq	.+52     	; 0x3efe <_ZNK6String9compareToERKS_+0x56>
    3eca:	84 81       	ldd	r24, Z+4	; 0x04
    3ecc:	95 81       	ldd	r25, Z+5	; 0x05
    3ece:	00 97       	sbiw	r24, 0x00	; 0
    3ed0:	c9 f0       	breq	.+50     	; 0x3f04 <_ZNK6String9compareToERKS_+0x5c>
    3ed2:	2c 91       	ld	r18, X
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	30 95       	com	r19
    3ed8:	21 95       	neg	r18
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	18 c0       	rjmp	.+48     	; 0x3f0e <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3ede:	14 96       	adiw	r26, 0x04	; 4
    3ee0:	2d 91       	ld	r18, X+
    3ee2:	3c 91       	ld	r19, X
    3ee4:	15 97       	sbiw	r26, 0x05	; 5
    3ee6:	21 15       	cp	r18, r1
    3ee8:	31 05       	cpc	r19, r1
    3eea:	79 f0       	breq	.+30     	; 0x3f0a <_ZNK6String9compareToERKS_+0x62>
    3eec:	fc 01       	movw	r30, r24
    3eee:	20 81       	ld	r18, Z
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	0d c0       	rjmp	.+26     	; 0x3f0e <_ZNK6String9compareToERKS_+0x66>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3ef4:	0e 94 31 5a 	call	0xb462	; 0xb462 <strcmp>
    3ef8:	28 2f       	mov	r18, r24
    3efa:	39 2f       	mov	r19, r25
    3efc:	08 c0       	rjmp	.+16     	; 0x3f0e <_ZNK6String9compareToERKS_+0x66>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	05 c0       	rjmp	.+10     	; 0x3f0e <_ZNK6String9compareToERKS_+0x66>
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	02 c0       	rjmp	.+4      	; 0x3f0e <_ZNK6String9compareToERKS_+0x66>
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3f0e:	82 2f       	mov	r24, r18
    3f10:	93 2f       	mov	r25, r19
    3f12:	08 95       	ret

00003f14 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3f14:	fc 01       	movw	r30, r24
    3f16:	24 81       	ldd	r18, Z+4	; 0x04
    3f18:	35 81       	ldd	r19, Z+5	; 0x05
    3f1a:	fb 01       	movw	r30, r22
    3f1c:	44 81       	ldd	r20, Z+4	; 0x04
    3f1e:	55 81       	ldd	r21, Z+5	; 0x05
    3f20:	24 17       	cp	r18, r20
    3f22:	35 07       	cpc	r19, r21
    3f24:	39 f4       	brne	.+14     	; 0x3f34 <_ZNK6String6equalsERKS_+0x20>
    3f26:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	19 f0       	breq	.+6      	; 0x3f36 <_ZNK6String6equalsERKS_+0x22>
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	01 c0       	rjmp	.+2      	; 0x3f36 <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    3f34:	20 e0       	ldi	r18, 0x00	; 0
}
    3f36:	82 2f       	mov	r24, r18
    3f38:	08 95       	ret

00003f3a <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3f3a:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3f3c:	84 81       	ldd	r24, Z+4	; 0x04
    3f3e:	95 81       	ldd	r25, Z+5	; 0x05
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	61 f4       	brne	.+24     	; 0x3f5c <_ZNK6String6equalsEPKc+0x22>
    3f44:	61 15       	cp	r22, r1
    3f46:	71 05       	cpc	r23, r1
    3f48:	39 f0       	breq	.+14     	; 0x3f58 <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	fb 01       	movw	r30, r22
    3f4e:	90 81       	ld	r25, Z
    3f50:	99 23       	and	r25, r25
    3f52:	d9 f0       	breq	.+54     	; 0x3f8a <_ZNK6String6equalsEPKc+0x50>
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    3f5c:	61 15       	cp	r22, r1
    3f5e:	71 05       	cpc	r23, r1
    3f60:	49 f4       	brne	.+18     	; 0x3f74 <_ZNK6String6equalsEPKc+0x3a>
    3f62:	01 90       	ld	r0, Z+
    3f64:	f0 81       	ld	r31, Z
    3f66:	e0 2d       	mov	r30, r0
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 81       	ld	r25, Z
    3f6c:	99 23       	and	r25, r25
    3f6e:	69 f0       	breq	.+26     	; 0x3f8a <_ZNK6String6equalsEPKc+0x50>
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    3f74:	80 81       	ld	r24, Z
    3f76:	91 81       	ldd	r25, Z+1	; 0x01
    3f78:	0e 94 31 5a 	call	0xb462	; 0xb462 <strcmp>
    3f7c:	28 2f       	mov	r18, r24
    3f7e:	39 2f       	mov	r19, r25
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	21 15       	cp	r18, r1
    3f84:	31 05       	cpc	r19, r1
    3f86:	09 f0       	breq	.+2      	; 0x3f8a <_ZNK6String6equalsEPKc+0x50>
    3f88:	80 e0       	ldi	r24, 0x00	; 0
}
    3f8a:	08 95       	ret

00003f8c <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3f8c:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZNK6String9compareToERKS_>
}
    3f90:	89 2f       	mov	r24, r25
    3f92:	88 1f       	adc	r24, r24
    3f94:	88 27       	eor	r24, r24
    3f96:	88 1f       	adc	r24, r24
    3f98:	08 95       	ret

00003f9a <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3f9a:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZNK6String9compareToERKS_>
    3f9e:	21 e0       	ldi	r18, 0x01	; 1
    3fa0:	18 16       	cp	r1, r24
    3fa2:	19 06       	cpc	r1, r25
    3fa4:	0c f0       	brlt	.+2      	; 0x3fa8 <_ZNK6StringgtERKS_+0xe>
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
}
    3fa8:	82 2f       	mov	r24, r18
    3faa:	08 95       	ret

00003fac <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3fac:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZNK6String9compareToERKS_>
    3fb0:	21 e0       	ldi	r18, 0x01	; 1
    3fb2:	18 16       	cp	r1, r24
    3fb4:	19 06       	cpc	r1, r25
    3fb6:	0c f4       	brge	.+2      	; 0x3fba <_ZNK6StringleERKS_+0xe>
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
}
    3fba:	82 2f       	mov	r24, r18
    3fbc:	08 95       	ret

00003fbe <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3fbe:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_ZNK6String9compareToERKS_>
    3fc2:	89 2f       	mov	r24, r25
    3fc4:	80 95       	com	r24
}
    3fc6:	88 1f       	adc	r24, r24
    3fc8:	88 27       	eor	r24, r24
    3fca:	88 1f       	adc	r24, r24
    3fcc:	08 95       	ret

00003fce <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3fce:	ef 92       	push	r14
    3fd0:	ff 92       	push	r15
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	dc 01       	movw	r26, r24
    3fdc:	fb 01       	movw	r30, r22
	if (this == &s2) return 1;
    3fde:	86 17       	cp	r24, r22
    3fe0:	97 07       	cpc	r25, r23
    3fe2:	29 f1       	breq	.+74     	; 0x402e <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3fe4:	14 96       	adiw	r26, 0x04	; 4
    3fe6:	8d 91       	ld	r24, X+
    3fe8:	9c 91       	ld	r25, X
    3fea:	15 97       	sbiw	r26, 0x05	; 5
    3fec:	24 81       	ldd	r18, Z+4	; 0x04
    3fee:	35 81       	ldd	r19, Z+5	; 0x05
    3ff0:	82 17       	cp	r24, r18
    3ff2:	93 07       	cpc	r25, r19
    3ff4:	f1 f4       	brne	.+60     	; 0x4032 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3ff6:	00 97       	sbiw	r24, 0x00	; 0
    3ff8:	f1 f0       	breq	.+60     	; 0x4036 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    3ffa:	e0 80       	ld	r14, Z
    3ffc:	f1 80       	ldd	r15, Z+1	; 0x01
    3ffe:	0d 91       	ld	r16, X+
    4000:	1c 91       	ld	r17, X
    4002:	11 97       	sbiw	r26, 0x01	; 1
	while (*p1) {
    4004:	0d c0       	rjmp	.+26     	; 0x4020 <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <tolower>
    400c:	ec 01       	movw	r28, r24
    400e:	f7 01       	movw	r30, r14
    4010:	81 91       	ld	r24, Z+
    4012:	7f 01       	movw	r14, r30
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <tolower>
    401a:	c8 17       	cp	r28, r24
    401c:	d9 07       	cpc	r29, r25
    401e:	69 f4       	brne	.+26     	; 0x403a <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    4020:	f8 01       	movw	r30, r16
    4022:	81 91       	ld	r24, Z+
    4024:	8f 01       	movw	r16, r30
    4026:	88 23       	and	r24, r24
    4028:	71 f7       	brne	.-36     	; 0x4006 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	07 c0       	rjmp	.+14     	; 0x403c <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	05 c0       	rjmp	.+10     	; 0x403c <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	03 c0       	rjmp	.+6      	; 0x403c <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	01 c0       	rjmp	.+2      	; 0x403c <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    403a:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	ff 90       	pop	r15
    4046:	ef 90       	pop	r14
    4048:	08 95       	ret

0000404a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    404a:	fc 01       	movw	r30, r24
    404c:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    404e:	14 96       	adiw	r26, 0x04	; 4
    4050:	2d 91       	ld	r18, X+
    4052:	3c 91       	ld	r19, X
    4054:	15 97       	sbiw	r26, 0x05	; 5
    4056:	84 81       	ldd	r24, Z+4	; 0x04
    4058:	95 81       	ldd	r25, Z+5	; 0x05
    405a:	82 1b       	sub	r24, r18
    405c:	93 0b       	sbc	r25, r19
    405e:	84 17       	cp	r24, r20
    4060:	95 07       	cpc	r25, r21
    4062:	b8 f0       	brcs	.+46     	; 0x4092 <_ZNK6String10startsWithERKS_j+0x48>
    4064:	80 81       	ld	r24, Z
    4066:	91 81       	ldd	r25, Z+1	; 0x01
    4068:	00 97       	sbiw	r24, 0x00	; 0
    406a:	a9 f0       	breq	.+42     	; 0x4096 <_ZNK6String10startsWithERKS_j+0x4c>
    406c:	6d 91       	ld	r22, X+
    406e:	7c 91       	ld	r23, X
    4070:	11 97       	sbiw	r26, 0x01	; 1
    4072:	61 15       	cp	r22, r1
    4074:	71 05       	cpc	r23, r1
    4076:	89 f0       	breq	.+34     	; 0x409a <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    4078:	84 0f       	add	r24, r20
    407a:	95 1f       	adc	r25, r21
    407c:	a9 01       	movw	r20, r18
    407e:	0e 94 41 5a 	call	0xb482	; 0xb482 <strncmp>
    4082:	28 2f       	mov	r18, r24
    4084:	39 2f       	mov	r19, r25
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	21 15       	cp	r18, r1
    408a:	31 05       	cpc	r19, r1
    408c:	39 f0       	breq	.+14     	; 0x409c <_ZNK6String10startsWithERKS_j+0x52>
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	08 95       	ret
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	08 95       	ret
    409a:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    409c:	08 95       	ret

0000409e <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    409e:	fc 01       	movw	r30, r24
    40a0:	24 81       	ldd	r18, Z+4	; 0x04
    40a2:	35 81       	ldd	r19, Z+5	; 0x05
    40a4:	fb 01       	movw	r30, r22
    40a6:	44 81       	ldd	r20, Z+4	; 0x04
    40a8:	55 81       	ldd	r21, Z+5	; 0x05
    40aa:	24 17       	cp	r18, r20
    40ac:	35 07       	cpc	r19, r21
    40ae:	28 f0       	brcs	.+10     	; 0x40ba <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	0e 94 25 20 	call	0x404a	; 0x404a <_ZNK6String10startsWithERKS_j>
    40b8:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    40ba:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    40bc:	08 95       	ret

000040be <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    40be:	fc 01       	movw	r30, r24
    40c0:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    40c2:	84 81       	ldd	r24, Z+4	; 0x04
    40c4:	95 81       	ldd	r25, Z+5	; 0x05
    40c6:	14 96       	adiw	r26, 0x04	; 4
    40c8:	2d 91       	ld	r18, X+
    40ca:	3c 91       	ld	r19, X
    40cc:	15 97       	sbiw	r26, 0x05	; 5
    40ce:	82 17       	cp	r24, r18
    40d0:	93 07       	cpc	r25, r19
    40d2:	c8 f0       	brcs	.+50     	; 0x4106 <_ZNK6String8endsWithERKS_+0x48>
    40d4:	40 81       	ld	r20, Z
    40d6:	51 81       	ldd	r21, Z+1	; 0x01
    40d8:	41 15       	cp	r20, r1
    40da:	51 05       	cpc	r21, r1
    40dc:	b1 f0       	breq	.+44     	; 0x410a <_ZNK6String8endsWithERKS_+0x4c>
    40de:	6d 91       	ld	r22, X+
    40e0:	7c 91       	ld	r23, X
    40e2:	11 97       	sbiw	r26, 0x01	; 1
    40e4:	61 15       	cp	r22, r1
    40e6:	71 05       	cpc	r23, r1
    40e8:	91 f0       	breq	.+36     	; 0x410e <_ZNK6String8endsWithERKS_+0x50>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    40ea:	82 1b       	sub	r24, r18
    40ec:	93 0b       	sbc	r25, r19
    40ee:	84 0f       	add	r24, r20
    40f0:	95 1f       	adc	r25, r21
    40f2:	0e 94 31 5a 	call	0xb462	; 0xb462 <strcmp>
    40f6:	28 2f       	mov	r18, r24
    40f8:	39 2f       	mov	r19, r25
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	21 15       	cp	r18, r1
    40fe:	31 05       	cpc	r19, r1
    4100:	39 f0       	breq	.+14     	; 0x4110 <_ZNK6String8endsWithERKS_+0x52>
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	08 95       	ret
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	08 95       	ret
    410e:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    4110:	08 95       	ret

00004112 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    4112:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    4114:	84 81       	ldd	r24, Z+4	; 0x04
    4116:	95 81       	ldd	r25, Z+5	; 0x05
    4118:	68 17       	cp	r22, r24
    411a:	79 07       	cpc	r23, r25
    411c:	30 f4       	brcc	.+12     	; 0x412a <_ZN6String9setCharAtEjc+0x18>
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	68 0f       	add	r22, r24
    4124:	79 1f       	adc	r23, r25
    4126:	fb 01       	movw	r30, r22
    4128:	40 83       	st	Z, r20
    412a:	08 95       	ret

0000412c <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    412c:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    412e:	84 81       	ldd	r24, Z+4	; 0x04
    4130:	95 81       	ldd	r25, Z+5	; 0x05
    4132:	68 17       	cp	r22, r24
    4134:	79 07       	cpc	r23, r25
    4136:	20 f4       	brcc	.+8      	; 0x4140 <_ZN6StringixEj+0x14>
    4138:	80 81       	ld	r24, Z
    413a:	91 81       	ldd	r25, Z+1	; 0x01
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	29 f4       	brne	.+10     	; 0x414a <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    4140:	10 92 2d 06 	sts	0x062D, r1
		return dummy_writable_char;
    4144:	8d e2       	ldi	r24, 0x2D	; 45
    4146:	96 e0       	ldi	r25, 0x06	; 6
    4148:	08 95       	ret
	}
	return buffer[index];
    414a:	86 0f       	add	r24, r22
    414c:	97 1f       	adc	r25, r23
}
    414e:	08 95       	ret

00004150 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    4150:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    4152:	84 81       	ldd	r24, Z+4	; 0x04
    4154:	95 81       	ldd	r25, Z+5	; 0x05
    4156:	68 17       	cp	r22, r24
    4158:	79 07       	cpc	r23, r25
    415a:	48 f4       	brcc	.+18     	; 0x416e <_ZNK6StringixEj+0x1e>
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	39 f0       	breq	.+14     	; 0x4172 <_ZNK6StringixEj+0x22>
	return buffer[index];
    4164:	68 0f       	add	r22, r24
    4166:	79 1f       	adc	r23, r25
    4168:	fb 01       	movw	r30, r22
    416a:	80 81       	ld	r24, Z
    416c:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	08 95       	ret
    4172:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    4174:	08 95       	ret

00004176 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    4176:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZNK6StringixEj>
}
    417a:	08 95       	ret

0000417c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    417c:	0f 93       	push	r16
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	fc 01       	movw	r30, r24
    4186:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    4188:	41 15       	cp	r20, r1
    418a:	51 05       	cpc	r21, r1
    418c:	e9 f0       	breq	.+58     	; 0x41c8 <_ZNK6String8getBytesEPhjj+0x4c>
    418e:	20 97       	sbiw	r28, 0x00	; 0
    4190:	d9 f0       	breq	.+54     	; 0x41c8 <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    4192:	84 81       	ldd	r24, Z+4	; 0x04
    4194:	95 81       	ldd	r25, Z+5	; 0x05
    4196:	28 17       	cp	r18, r24
    4198:	39 07       	cpc	r19, r25
    419a:	10 f0       	brcs	.+4      	; 0x41a0 <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    419c:	18 82       	st	Y, r1
		return;
    419e:	14 c0       	rjmp	.+40     	; 0x41c8 <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    41a0:	41 50       	subi	r20, 0x01	; 1
    41a2:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    41a4:	8c 01       	movw	r16, r24
    41a6:	02 1b       	sub	r16, r18
    41a8:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    41aa:	40 17       	cp	r20, r16
    41ac:	51 07       	cpc	r21, r17
    41ae:	08 f4       	brcc	.+2      	; 0x41b2 <_ZNK6String8getBytesEPhjj+0x36>
    41b0:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	62 0f       	add	r22, r18
    41b8:	73 1f       	adc	r23, r19
    41ba:	ce 01       	movw	r24, r28
    41bc:	a8 01       	movw	r20, r16
    41be:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <strncpy>
	buf[n] = 0;
    41c2:	c0 0f       	add	r28, r16
    41c4:	d1 1f       	adc	r29, r17
    41c6:	18 82       	st	Y, r1
}
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	1f 91       	pop	r17
    41ce:	0f 91       	pop	r16
    41d0:	08 95       	ret

000041d2 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    41d8:	84 81       	ldd	r24, Z+4	; 0x04
    41da:	95 81       	ldd	r25, Z+5	; 0x05
    41dc:	48 17       	cp	r20, r24
    41de:	59 07       	cpc	r21, r25
    41e0:	68 f4       	brcc	.+26     	; 0x41fc <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    41e2:	c0 81       	ld	r28, Z
    41e4:	d1 81       	ldd	r29, Z+1	; 0x01
    41e6:	ce 01       	movw	r24, r28
    41e8:	84 0f       	add	r24, r20
    41ea:	95 1f       	adc	r25, r21
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	0e 94 26 5a 	call	0xb44c	; 0xb44c <strchr>
	if (temp == NULL) return -1;
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	31 f0       	breq	.+12     	; 0x4202 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    41f6:	8c 1b       	sub	r24, r28
    41f8:	9d 0b       	sbc	r25, r29
    41fa:	05 c0       	rjmp	.+10     	; 0x4206 <_ZNK6String7indexOfEcj+0x34>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    41fc:	8f ef       	ldi	r24, 0xFF	; 255
    41fe:	9f ef       	ldi	r25, 0xFF	; 255
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <_ZNK6String7indexOfEcj+0x34>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    4202:	8f ef       	ldi	r24, 0xFF	; 255
    4204:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    4206:	df 91       	pop	r29
    4208:	cf 91       	pop	r28
    420a:	08 95       	ret

0000420c <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <_ZNK6String7indexOfEcj>
}
    4214:	08 95       	ret

00004216 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    421c:	84 81       	ldd	r24, Z+4	; 0x04
    421e:	95 81       	ldd	r25, Z+5	; 0x05
    4220:	48 17       	cp	r20, r24
    4222:	59 07       	cpc	r21, r25
    4224:	78 f4       	brcc	.+30     	; 0x4244 <_ZNK6String7indexOfERKS_j+0x2e>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    4226:	c0 81       	ld	r28, Z
    4228:	d1 81       	ldd	r29, Z+1	; 0x01
    422a:	fb 01       	movw	r30, r22
    422c:	60 81       	ld	r22, Z
    422e:	71 81       	ldd	r23, Z+1	; 0x01
    4230:	ce 01       	movw	r24, r28
    4232:	84 0f       	add	r24, r20
    4234:	95 1f       	adc	r25, r21
    4236:	0e 94 69 5a 	call	0xb4d2	; 0xb4d2 <strstr>
	if (found == NULL) return -1;
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	31 f0       	breq	.+12     	; 0x424a <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    423e:	8c 1b       	sub	r24, r28
    4240:	9d 0b       	sbc	r25, r29
    4242:	05 c0       	rjmp	.+10     	; 0x424e <_ZNK6String7indexOfERKS_j+0x38>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    4244:	8f ef       	ldi	r24, 0xFF	; 255
    4246:	9f ef       	ldi	r25, 0xFF	; 255
    4248:	02 c0       	rjmp	.+4      	; 0x424e <_ZNK6String7indexOfERKS_j+0x38>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    424a:	8f ef       	ldi	r24, 0xFF	; 255
    424c:	9f ef       	ldi	r25, 0xFF	; 255
	return found - buffer;
}
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	08 95       	ret

00004254 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    4254:	40 e0       	ldi	r20, 0x00	; 0
    4256:	50 e0       	ldi	r21, 0x00	; 0
    4258:	0e 94 0b 21 	call	0x4216	; 0x4216 <_ZNK6String7indexOfERKS_j>
}
    425c:	08 95       	ret

0000425e <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	8c 01       	movw	r16, r24
	if (fromIndex >= len) return -1;
    426e:	dc 01       	movw	r26, r24
    4270:	14 96       	adiw	r26, 0x04	; 4
    4272:	8d 91       	ld	r24, X+
    4274:	9c 91       	ld	r25, X
    4276:	15 97       	sbiw	r26, 0x05	; 5
    4278:	48 17       	cp	r20, r24
    427a:	59 07       	cpc	r21, r25
    427c:	e0 f4       	brcc	.+56     	; 0x42b6 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    427e:	7a 01       	movw	r14, r20
    4280:	08 94       	sec
    4282:	e1 1c       	adc	r14, r1
    4284:	f1 1c       	adc	r15, r1
    4286:	ed 91       	ld	r30, X+
    4288:	fc 91       	ld	r31, X
    428a:	11 97       	sbiw	r26, 0x01	; 1
    428c:	ee 0d       	add	r30, r14
    428e:	ff 1d       	adc	r31, r15
    4290:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    4292:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    4294:	cd 91       	ld	r28, X+
    4296:	dc 91       	ld	r29, X
    4298:	ce 01       	movw	r24, r28
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	0e 94 5e 5a 	call	0xb4bc	; 0xb4bc <strrchr>
	buffer[fromIndex + 1] = tempchar;
    42a0:	ce 0d       	add	r28, r14
    42a2:	df 1d       	adc	r29, r15
    42a4:	d8 82       	st	Y, r13
	if (temp == NULL) return -1;
    42a6:	00 97       	sbiw	r24, 0x00	; 0
    42a8:	49 f0       	breq	.+18     	; 0x42bc <_ZNK6String11lastIndexOfEcj+0x5e>
	return temp - buffer;
    42aa:	f8 01       	movw	r30, r16
    42ac:	20 81       	ld	r18, Z
    42ae:	31 81       	ldd	r19, Z+1	; 0x01
    42b0:	82 1b       	sub	r24, r18
    42b2:	93 0b       	sbc	r25, r19
    42b4:	05 c0       	rjmp	.+10     	; 0x42c0 <_ZNK6String11lastIndexOfEcj+0x62>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    42b6:	8f ef       	ldi	r24, 0xFF	; 255
    42b8:	9f ef       	ldi	r25, 0xFF	; 255
    42ba:	02 c0       	rjmp	.+4      	; 0x42c0 <_ZNK6String11lastIndexOfEcj+0x62>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    42bc:	8f ef       	ldi	r24, 0xFF	; 255
    42be:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	ff 90       	pop	r15
    42ca:	ef 90       	pop	r14
    42cc:	df 90       	pop	r13
    42ce:	08 95       	ret

000042d0 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    42d0:	fc 01       	movw	r30, r24
    42d2:	44 81       	ldd	r20, Z+4	; 0x04
    42d4:	55 81       	ldd	r21, Z+5	; 0x05
    42d6:	41 50       	subi	r20, 0x01	; 1
    42d8:	50 40       	sbci	r21, 0x00	; 0
    42da:	0e 94 2f 21 	call	0x425e	; 0x425e <_ZNK6String11lastIndexOfEcj>
}
    42de:	08 95       	ret

000042e0 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    42e0:	af 92       	push	r10
    42e2:	bf 92       	push	r11
    42e4:	cf 92       	push	r12
    42e6:	df 92       	push	r13
    42e8:	ef 92       	push	r14
    42ea:	ff 92       	push	r15
    42ec:	0f 93       	push	r16
    42ee:	1f 93       	push	r17
    42f0:	cf 93       	push	r28
    42f2:	df 93       	push	r29
    42f4:	fc 01       	movw	r30, r24
    42f6:	6b 01       	movw	r12, r22
    42f8:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    42fa:	db 01       	movw	r26, r22
    42fc:	14 96       	adiw	r26, 0x04	; 4
    42fe:	2d 91       	ld	r18, X+
    4300:	3c 91       	ld	r19, X
    4302:	15 97       	sbiw	r26, 0x05	; 5
    4304:	21 15       	cp	r18, r1
    4306:	31 05       	cpc	r19, r1
    4308:	71 f1       	breq	.+92     	; 0x4366 <_ZNK6String11lastIndexOfERKS_j+0x86>
    430a:	84 81       	ldd	r24, Z+4	; 0x04
    430c:	95 81       	ldd	r25, Z+5	; 0x05
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	71 f1       	breq	.+92     	; 0x436e <_ZNK6String11lastIndexOfERKS_j+0x8e>
    4312:	82 17       	cp	r24, r18
    4314:	93 07       	cpc	r25, r19
    4316:	78 f1       	brcs	.+94     	; 0x4376 <_ZNK6String11lastIndexOfERKS_j+0x96>
	if (fromIndex >= len) fromIndex = len - 1;
    4318:	48 17       	cp	r20, r24
    431a:	59 07       	cpc	r21, r25
    431c:	20 f0       	brcs	.+8      	; 0x4326 <_ZNK6String11lastIndexOfERKS_j+0x46>
    431e:	7c 01       	movw	r14, r24
    4320:	08 94       	sec
    4322:	e1 08       	sbc	r14, r1
    4324:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    4326:	c0 81       	ld	r28, Z
    4328:	d1 81       	ldd	r29, Z+1	; 0x01
    432a:	8e 01       	movw	r16, r28
    432c:	0e 0d       	add	r16, r14
    432e:	1f 1d       	adc	r17, r15
    4330:	0c 17       	cp	r16, r28
    4332:	1d 07       	cpc	r17, r29
    4334:	20 f1       	brcs	.+72     	; 0x437e <_ZNK6String11lastIndexOfERKS_j+0x9e>
    4336:	ce 01       	movw	r24, r28

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    4338:	aa 24       	eor	r10, r10
    433a:	aa 94       	dec	r10
    433c:	ba 2c       	mov	r11, r10
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    433e:	f6 01       	movw	r30, r12
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	0e 94 69 5a 	call	0xb4d2	; 0xb4d2 <strstr>
    4348:	9c 01       	movw	r18, r24
		if (!p) break;
    434a:	00 97       	sbiw	r24, 0x00	; 0
    434c:	d9 f0       	breq	.+54     	; 0x4384 <_ZNK6String11lastIndexOfERKS_j+0xa4>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    434e:	8c 1b       	sub	r24, r28
    4350:	9d 0b       	sbc	r25, r29
    4352:	e8 16       	cp	r14, r24
    4354:	f9 06       	cpc	r15, r25
    4356:	08 f0       	brcs	.+2      	; 0x435a <_ZNK6String11lastIndexOfERKS_j+0x7a>
    4358:	5c 01       	movw	r10, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    435a:	c9 01       	movw	r24, r18
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	08 17       	cp	r16, r24
    4360:	19 07       	cpc	r17, r25
    4362:	68 f7       	brcc	.-38     	; 0x433e <_ZNK6String11lastIndexOfERKS_j+0x5e>
    4364:	0f c0       	rjmp	.+30     	; 0x4384 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    4366:	aa 24       	eor	r10, r10
    4368:	aa 94       	dec	r10
    436a:	ba 2c       	mov	r11, r10
    436c:	0b c0       	rjmp	.+22     	; 0x4384 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    436e:	aa 24       	eor	r10, r10
    4370:	aa 94       	dec	r10
    4372:	ba 2c       	mov	r11, r10
    4374:	07 c0       	rjmp	.+14     	; 0x4384 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    4376:	aa 24       	eor	r10, r10
    4378:	aa 94       	dec	r10
    437a:	ba 2c       	mov	r11, r10
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    437e:	aa 24       	eor	r10, r10
    4380:	aa 94       	dec	r10
    4382:	ba 2c       	mov	r11, r10
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    4384:	8a 2d       	mov	r24, r10
    4386:	9b 2d       	mov	r25, r11
    4388:	df 91       	pop	r29
    438a:	cf 91       	pop	r28
    438c:	1f 91       	pop	r17
    438e:	0f 91       	pop	r16
    4390:	ff 90       	pop	r15
    4392:	ef 90       	pop	r14
    4394:	df 90       	pop	r13
    4396:	cf 90       	pop	r12
    4398:	bf 90       	pop	r11
    439a:	af 90       	pop	r10
    439c:	08 95       	ret

0000439e <_ZNK6String11lastIndexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
    439e:	fc 01       	movw	r30, r24
	return lastIndexOf(s2, len - s2.len);
    43a0:	44 81       	ldd	r20, Z+4	; 0x04
    43a2:	55 81       	ldd	r21, Z+5	; 0x05
    43a4:	db 01       	movw	r26, r22
    43a6:	14 96       	adiw	r26, 0x04	; 4
    43a8:	8d 91       	ld	r24, X+
    43aa:	9c 91       	ld	r25, X
    43ac:	15 97       	sbiw	r26, 0x05	; 5
    43ae:	48 1b       	sub	r20, r24
    43b0:	59 0b       	sbc	r21, r25
    43b2:	cf 01       	movw	r24, r30
    43b4:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_ZNK6String11lastIndexOfERKS_j>
}
    43b8:	08 95       	ret

000043ba <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    43ba:	bf 92       	push	r11
    43bc:	cf 92       	push	r12
    43be:	df 92       	push	r13
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
    43c8:	cf 93       	push	r28
    43ca:	df 93       	push	r29
    43cc:	7c 01       	movw	r14, r24
    43ce:	6b 01       	movw	r12, r22
    43d0:	8a 01       	movw	r16, r20
    43d2:	e9 01       	movw	r28, r18
	if (left > right) {
    43d4:	24 17       	cp	r18, r20
    43d6:	35 07       	cpc	r19, r21
    43d8:	20 f4       	brcc	.+8      	; 0x43e2 <_ZNK6String9substringEjj+0x28>
    43da:	81 2f       	mov	r24, r17
		unsigned int temp = right;
		right = left;
		left = temp;
    43dc:	89 01       	movw	r16, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    43de:	c4 2f       	mov	r28, r20
    43e0:	d8 2f       	mov	r29, r24
		left = temp;
	}
	String out;
    43e2:	c7 01       	movw	r24, r14
    43e4:	6b e4       	ldi	r22, 0x4B	; 75
    43e6:	72 e0       	ldi	r23, 0x02	; 2
    43e8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN6StringC1EPKc>
	if (left > len) return out;
    43ec:	d6 01       	movw	r26, r12
    43ee:	14 96       	adiw	r26, 0x04	; 4
    43f0:	8d 91       	ld	r24, X+
    43f2:	9c 91       	ld	r25, X
    43f4:	15 97       	sbiw	r26, 0x05	; 5
    43f6:	80 17       	cp	r24, r16
    43f8:	91 07       	cpc	r25, r17
    43fa:	c8 f0       	brcs	.+50     	; 0x442e <_ZNK6String9substringEjj+0x74>
    43fc:	8c 17       	cp	r24, r28
    43fe:	9d 07       	cpc	r25, r29
    4400:	08 f4       	brcc	.+2      	; 0x4404 <_ZNK6String9substringEjj+0x4a>
    4402:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    4404:	d6 01       	movw	r26, r12
    4406:	ed 91       	ld	r30, X+
    4408:	fc 91       	ld	r31, X
    440a:	11 97       	sbiw	r26, 0x01	; 1
    440c:	ec 0f       	add	r30, r28
    440e:	fd 1f       	adc	r31, r29
    4410:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    4412:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    4414:	6d 91       	ld	r22, X+
    4416:	7c 91       	ld	r23, X
    4418:	60 0f       	add	r22, r16
    441a:	71 1f       	adc	r23, r17
    441c:	c7 01       	movw	r24, r14
    441e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    4422:	f6 01       	movw	r30, r12
    4424:	80 81       	ld	r24, Z
    4426:	91 81       	ldd	r25, Z+1	; 0x01
    4428:	c8 0f       	add	r28, r24
    442a:	d9 1f       	adc	r29, r25
    442c:	b8 82       	st	Y, r11
	return out;
}
    442e:	c7 01       	movw	r24, r14
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	ff 90       	pop	r15
    443a:	ef 90       	pop	r14
    443c:	df 90       	pop	r13
    443e:	cf 90       	pop	r12
    4440:	bf 90       	pop	r11
    4442:	08 95       	ret

00004444 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    4444:	dc 01       	movw	r26, r24
    4446:	ed 91       	ld	r30, X+
    4448:	fc 91       	ld	r31, X
    444a:	11 97       	sbiw	r26, 0x01	; 1
    444c:	30 97       	sbiw	r30, 0x00	; 0
    444e:	61 f0       	breq	.+24     	; 0x4468 <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    4450:	80 81       	ld	r24, Z
    4452:	88 23       	and	r24, r24
    4454:	49 f0       	breq	.+18     	; 0x4468 <_ZN6String7replaceEcc+0x24>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    4456:	31 96       	adiw	r30, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    4458:	86 17       	cp	r24, r22
    445a:	19 f4       	brne	.+6      	; 0x4462 <_ZN6String7replaceEcc+0x1e>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    445c:	df 01       	movw	r26, r30
    445e:	11 97       	sbiw	r26, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    4460:	4c 93       	st	X, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    4462:	81 91       	ld	r24, Z+
    4464:	88 23       	and	r24, r24
    4466:	c1 f7       	brne	.-16     	; 0x4458 <_ZN6String7replaceEcc+0x14>
    4468:	08 95       	ret

0000446a <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    446a:	4f 92       	push	r4
    446c:	5f 92       	push	r5
    446e:	6f 92       	push	r6
    4470:	7f 92       	push	r7
    4472:	8f 92       	push	r8
    4474:	9f 92       	push	r9
    4476:	af 92       	push	r10
    4478:	bf 92       	push	r11
    447a:	cf 92       	push	r12
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	3c 01       	movw	r6, r24
    448c:	4b 01       	movw	r8, r22
    448e:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    4490:	fc 01       	movw	r30, r24
    4492:	a4 80       	ldd	r10, Z+4	; 0x04
    4494:	b5 80       	ldd	r11, Z+5	; 0x05
    4496:	a1 14       	cp	r10, r1
    4498:	b1 04       	cpc	r11, r1
    449a:	09 f4       	brne	.+2      	; 0x449e <_ZN6String7replaceERKS_S1_+0x34>
    449c:	ca c0       	rjmp	.+404    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
    449e:	fb 01       	movw	r30, r22
    44a0:	c4 80       	ldd	r12, Z+4	; 0x04
    44a2:	d5 80       	ldd	r13, Z+5	; 0x05
    44a4:	c1 14       	cp	r12, r1
    44a6:	d1 04       	cpc	r13, r1
    44a8:	09 f4       	brne	.+2      	; 0x44ac <_ZN6String7replaceERKS_S1_+0x42>
    44aa:	c3 c0       	rjmp	.+390    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
	int diff = replace.len - find.len;
    44ac:	fa 01       	movw	r30, r20
    44ae:	84 81       	ldd	r24, Z+4	; 0x04
    44b0:	95 81       	ldd	r25, Z+5	; 0x05
    44b2:	2c 01       	movw	r4, r24
    44b4:	4c 18       	sub	r4, r12
    44b6:	5d 08       	sbc	r5, r13
    44b8:	c2 01       	movw	r24, r4
	char *readFrom = buffer;
    44ba:	f3 01       	movw	r30, r6
    44bc:	00 81       	ld	r16, Z
    44be:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    44c0:	41 14       	cp	r4, r1
    44c2:	51 04       	cpc	r5, r1
    44c4:	79 f0       	breq	.+30     	; 0x44e4 <_ZN6String7replaceERKS_S1_+0x7a>
    44c6:	18 c0       	rjmp	.+48     	; 0x44f8 <_ZN6String7replaceERKS_S1_+0x8e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    44c8:	f7 01       	movw	r30, r14
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	44 81       	ldd	r20, Z+4	; 0x04
    44d0:	55 81       	ldd	r21, Z+5	; 0x05
    44d2:	8c 2f       	mov	r24, r28
    44d4:	9d 2f       	mov	r25, r29
    44d6:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
			readFrom = foundAt + replace.len;
    44da:	f7 01       	movw	r30, r14
    44dc:	04 81       	ldd	r16, Z+4	; 0x04
    44de:	15 81       	ldd	r17, Z+5	; 0x05
    44e0:	0c 0f       	add	r16, r28
    44e2:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    44e4:	f4 01       	movw	r30, r8
    44e6:	60 81       	ld	r22, Z
    44e8:	71 81       	ldd	r23, Z+1	; 0x01
    44ea:	c8 01       	movw	r24, r16
    44ec:	0e 94 69 5a 	call	0xb4d2	; 0xb4d2 <strstr>
    44f0:	ec 01       	movw	r28, r24
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	49 f7       	brne	.-46     	; 0x44c8 <_ZN6String7replaceERKS_S1_+0x5e>
    44f6:	9d c0       	rjmp	.+314    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    44f8:	99 23       	and	r25, r25
    44fa:	64 f1       	brlt	.+88     	; 0x4554 <_ZN6String7replaceERKS_S1_+0xea>
    44fc:	e5 01       	movw	r28, r10
    44fe:	3e c0       	rjmp	.+124    	; 0x457c <_ZN6String7replaceERKS_S1_+0x112>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    4500:	e6 01       	movw	r28, r12
    4502:	c0 1b       	sub	r28, r16
    4504:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    4506:	8a 2d       	mov	r24, r10
    4508:	9b 2d       	mov	r25, r11
    450a:	60 2f       	mov	r22, r16
    450c:	71 2f       	mov	r23, r17
    450e:	4c 2f       	mov	r20, r28
    4510:	5d 2f       	mov	r21, r29
    4512:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
			writeTo += n;
    4516:	ca 0d       	add	r28, r10
    4518:	db 1d       	adc	r29, r11
			memcpy(writeTo, replace.buffer, replace.len);
    451a:	f7 01       	movw	r30, r14
    451c:	60 81       	ld	r22, Z
    451e:	71 81       	ldd	r23, Z+1	; 0x01
    4520:	44 81       	ldd	r20, Z+4	; 0x04
    4522:	55 81       	ldd	r21, Z+5	; 0x05
    4524:	8c 2f       	mov	r24, r28
    4526:	9d 2f       	mov	r25, r29
    4528:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
			writeTo += replace.len;
    452c:	f7 01       	movw	r30, r14
    452e:	84 81       	ldd	r24, Z+4	; 0x04
    4530:	95 81       	ldd	r25, Z+5	; 0x05
    4532:	5e 01       	movw	r10, r28
    4534:	a8 0e       	add	r10, r24
    4536:	b9 1e       	adc	r11, r25
			readFrom = foundAt + find.len;
    4538:	f4 01       	movw	r30, r8
    453a:	84 81       	ldd	r24, Z+4	; 0x04
    453c:	95 81       	ldd	r25, Z+5	; 0x05
    453e:	86 01       	movw	r16, r12
    4540:	08 0f       	add	r16, r24
    4542:	19 1f       	adc	r17, r25
			len += diff;
    4544:	f3 01       	movw	r30, r6
    4546:	84 81       	ldd	r24, Z+4	; 0x04
    4548:	95 81       	ldd	r25, Z+5	; 0x05
    454a:	84 0d       	add	r24, r4
    454c:	95 1d       	adc	r25, r5
    454e:	95 83       	std	Z+5, r25	; 0x05
    4550:	84 83       	std	Z+4, r24	; 0x04
    4552:	01 c0       	rjmp	.+2      	; 0x4556 <_ZN6String7replaceERKS_S1_+0xec>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    4554:	58 01       	movw	r10, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    4556:	f4 01       	movw	r30, r8
    4558:	60 81       	ld	r22, Z
    455a:	71 81       	ldd	r23, Z+1	; 0x01
    455c:	c8 01       	movw	r24, r16
    455e:	0e 94 69 5a 	call	0xb4d2	; 0xb4d2 <strstr>
    4562:	6c 01       	movw	r12, r24
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	61 f6       	brne	.-104    	; 0x4500 <_ZN6String7replaceERKS_S1_+0x96>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    4568:	c5 01       	movw	r24, r10
    456a:	b8 01       	movw	r22, r16
    456c:	0e 94 3a 5a 	call	0xb474	; 0xb474 <strcpy>
    4570:	60 c0       	rjmp	.+192    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    4572:	8c 01       	movw	r16, r24
    4574:	0c 0d       	add	r16, r12
    4576:	1d 1d       	adc	r17, r13
			size += diff;
    4578:	c4 0d       	add	r28, r4
    457a:	d5 1d       	adc	r29, r5
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    457c:	f4 01       	movw	r30, r8
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	c8 01       	movw	r24, r16
    4584:	0e 94 69 5a 	call	0xb4d2	; 0xb4d2 <strstr>
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	99 f7       	brne	.-26     	; 0x4572 <_ZN6String7replaceERKS_S1_+0x108>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    458c:	ca 15       	cp	r28, r10
    458e:	db 05       	cpc	r29, r11
    4590:	09 f4       	brne	.+2      	; 0x4594 <_ZN6String7replaceERKS_S1_+0x12a>
    4592:	4f c0       	rjmp	.+158    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    4594:	f3 01       	movw	r30, r6
    4596:	82 81       	ldd	r24, Z+2	; 0x02
    4598:	93 81       	ldd	r25, Z+3	; 0x03
    459a:	8c 17       	cp	r24, r28
    459c:	9d 07       	cpc	r25, r29
    459e:	08 f0       	brcs	.+2      	; 0x45a2 <_ZN6String7replaceERKS_S1_+0x138>
    45a0:	42 c0       	rjmp	.+132    	; 0x4626 <_ZN6String7replaceERKS_S1_+0x1bc>
    45a2:	c3 01       	movw	r24, r6
    45a4:	be 01       	movw	r22, r28
    45a6:	0e 94 2a 1a 	call	0x3454	; 0x3454 <_ZN6String12changeBufferEj>
    45aa:	88 23       	and	r24, r24
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <_ZN6String7replaceERKS_S1_+0x146>
    45ae:	41 c0       	rjmp	.+130    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
    45b0:	3a c0       	rjmp	.+116    	; 0x4626 <_ZN6String7replaceERKS_S1_+0x1bc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    45b2:	55 23       	and	r21, r21
    45b4:	f4 f1       	brlt	.+124    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
    45b6:	c3 01       	movw	r24, r6
    45b8:	b4 01       	movw	r22, r8
    45ba:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_ZNK6String11lastIndexOfERKS_j>
    45be:	ec 01       	movw	r28, r24
    45c0:	99 23       	and	r25, r25
    45c2:	bc f1       	brlt	.+110    	; 0x4632 <_ZN6String7replaceERKS_S1_+0x1c8>
			readFrom = buffer + index + find.len;
    45c4:	f3 01       	movw	r30, r6
    45c6:	60 81       	ld	r22, Z
    45c8:	71 81       	ldd	r23, Z+1	; 0x01
    45ca:	f4 01       	movw	r30, r8
    45cc:	84 81       	ldd	r24, Z+4	; 0x04
    45ce:	95 81       	ldd	r25, Z+5	; 0x05
    45d0:	8c 0f       	add	r24, r28
    45d2:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    45d4:	68 0f       	add	r22, r24
    45d6:	79 1f       	adc	r23, r25
    45d8:	f3 01       	movw	r30, r6
    45da:	44 81       	ldd	r20, Z+4	; 0x04
    45dc:	55 81       	ldd	r21, Z+5	; 0x05
    45de:	48 1b       	sub	r20, r24
    45e0:	59 0b       	sbc	r21, r25
    45e2:	cb 01       	movw	r24, r22
    45e4:	84 0d       	add	r24, r4
    45e6:	95 1d       	adc	r25, r5
    45e8:	0e 94 14 5a 	call	0xb428	; 0xb428 <memmove>
			len += diff;
    45ec:	f3 01       	movw	r30, r6
    45ee:	84 81       	ldd	r24, Z+4	; 0x04
    45f0:	95 81       	ldd	r25, Z+5	; 0x05
    45f2:	84 0d       	add	r24, r4
    45f4:	95 1d       	adc	r25, r5
    45f6:	95 83       	std	Z+5, r25	; 0x05
    45f8:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    45fa:	20 81       	ld	r18, Z
    45fc:	31 81       	ldd	r19, Z+1	; 0x01
    45fe:	82 0f       	add	r24, r18
    4600:	93 1f       	adc	r25, r19
    4602:	fc 01       	movw	r30, r24
    4604:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    4606:	f3 01       	movw	r30, r6
    4608:	80 81       	ld	r24, Z
    460a:	91 81       	ldd	r25, Z+1	; 0x01
    460c:	8c 0f       	add	r24, r28
    460e:	9d 1f       	adc	r25, r29
    4610:	f7 01       	movw	r30, r14
    4612:	60 81       	ld	r22, Z
    4614:	71 81       	ldd	r23, Z+1	; 0x01
    4616:	44 81       	ldd	r20, Z+4	; 0x04
    4618:	55 81       	ldd	r21, Z+5	; 0x05
    461a:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
			index--;
    461e:	ae 01       	movw	r20, r28
    4620:	41 50       	subi	r20, 0x01	; 1
    4622:	50 40       	sbci	r21, 0x00	; 0
    4624:	c6 cf       	rjmp	.-116    	; 0x45b2 <_ZN6String7replaceERKS_S1_+0x148>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    4626:	f3 01       	movw	r30, r6
    4628:	44 81       	ldd	r20, Z+4	; 0x04
    462a:	55 81       	ldd	r21, Z+5	; 0x05
    462c:	41 50       	subi	r20, 0x01	; 1
    462e:	50 40       	sbci	r21, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    4630:	c0 cf       	rjmp	.-128    	; 0x45b2 <_ZN6String7replaceERKS_S1_+0x148>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	ff 90       	pop	r15
    463c:	ef 90       	pop	r14
    463e:	df 90       	pop	r13
    4640:	cf 90       	pop	r12
    4642:	bf 90       	pop	r11
    4644:	af 90       	pop	r10
    4646:	9f 90       	pop	r9
    4648:	8f 90       	pop	r8
    464a:	7f 90       	pop	r7
    464c:	6f 90       	pop	r6
    464e:	5f 90       	pop	r5
    4650:	4f 90       	pop	r4
    4652:	08 95       	ret

00004654 <_ZN6String6removeEjj>:
	if (index >= len) { return; }
	int count = len - index;
	remove(index, count);
}

void String::remove(unsigned int index, unsigned int count){
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	ec 01       	movw	r28, r24
	if (index >= len) { return; }
    465a:	2c 81       	ldd	r18, Y+4	; 0x04
    465c:	3d 81       	ldd	r19, Y+5	; 0x05
    465e:	62 17       	cp	r22, r18
    4660:	73 07       	cpc	r23, r19
    4662:	40 f5       	brcc	.+80     	; 0x46b4 <_ZN6String6removeEjj+0x60>
	if (count <= 0) { return; }
    4664:	41 15       	cp	r20, r1
    4666:	51 05       	cpc	r21, r1
    4668:	29 f1       	breq	.+74     	; 0x46b4 <_ZN6String6removeEjj+0x60>
	if (index + count > len) { count = len - index; }
    466a:	ca 01       	movw	r24, r20
    466c:	86 0f       	add	r24, r22
    466e:	97 1f       	adc	r25, r23
    4670:	28 17       	cp	r18, r24
    4672:	39 07       	cpc	r19, r25
    4674:	18 f4       	brcc	.+6      	; 0x467c <_ZN6String6removeEjj+0x28>
    4676:	a9 01       	movw	r20, r18
    4678:	46 1b       	sub	r20, r22
    467a:	57 0b       	sbc	r21, r23
	char *writeTo = buffer + index;
    467c:	e8 81       	ld	r30, Y
    467e:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    4680:	c9 01       	movw	r24, r18
    4682:	84 1b       	sub	r24, r20
    4684:	95 0b       	sbc	r25, r21
    4686:	9d 83       	std	Y+5, r25	; 0x05
    4688:	8c 83       	std	Y+4, r24	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    468a:	46 0f       	add	r20, r22
    468c:	57 1f       	adc	r21, r23
    468e:	9f 01       	movw	r18, r30
    4690:	24 0f       	add	r18, r20
    4692:	35 1f       	adc	r19, r21
    4694:	ac 01       	movw	r20, r24
    4696:	46 1b       	sub	r20, r22
    4698:	57 0b       	sbc	r21, r23
    469a:	cf 01       	movw	r24, r30
    469c:	86 0f       	add	r24, r22
    469e:	97 1f       	adc	r25, r23
    46a0:	b9 01       	movw	r22, r18
    46a2:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <strncpy>
	buffer[len] = 0;
    46a6:	e8 81       	ld	r30, Y
    46a8:	f9 81       	ldd	r31, Y+1	; 0x01
    46aa:	8c 81       	ldd	r24, Y+4	; 0x04
    46ac:	9d 81       	ldd	r25, Y+5	; 0x05
    46ae:	e8 0f       	add	r30, r24
    46b0:	f9 1f       	adc	r31, r25
    46b2:	10 82       	st	Z, r1
}
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	08 95       	ret

000046ba <_ZN6String6removeEj>:
		}
	}
}

void String::remove(unsigned int index){
	if (index >= len) { return; }
    46ba:	fc 01       	movw	r30, r24
    46bc:	44 81       	ldd	r20, Z+4	; 0x04
    46be:	55 81       	ldd	r21, Z+5	; 0x05
    46c0:	64 17       	cp	r22, r20
    46c2:	75 07       	cpc	r23, r21
    46c4:	20 f4       	brcc	.+8      	; 0x46ce <_ZN6String6removeEj+0x14>
	int count = len - index;
    46c6:	46 1b       	sub	r20, r22
    46c8:	57 0b       	sbc	r21, r23
	remove(index, count);
    46ca:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN6String6removeEjj>
    46ce:	08 95       	ret

000046d0 <_ZN6String11toLowerCaseEv>:
	strncpy(writeTo, buffer + index + count,len - index);
	buffer[len] = 0;
}

void String::toLowerCase(void)
{
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
	if (!buffer) return;
    46d8:	fc 01       	movw	r30, r24
    46da:	c0 81       	ld	r28, Z
    46dc:	d1 81       	ldd	r29, Z+1	; 0x01
    46de:	20 97       	sbiw	r28, 0x00	; 0
    46e0:	79 f0       	breq	.+30     	; 0x4700 <_ZN6String11toLowerCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    46e2:	88 81       	ld	r24, Y
    46e4:	88 23       	and	r24, r24
    46e6:	61 f0       	breq	.+24     	; 0x4700 <_ZN6String11toLowerCaseEv+0x30>
	len = len - count;
	strncpy(writeTo, buffer + index + count,len - index);
	buffer[len] = 0;
}

void String::toLowerCase(void)
    46e8:	8e 01       	movw	r16, r28
    46ea:	0f 5f       	subi	r16, 0xFF	; 255
    46ec:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <tolower>
    46f4:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    46f6:	f8 01       	movw	r30, r16
    46f8:	81 91       	ld	r24, Z+
    46fa:	8f 01       	movw	r16, r30
    46fc:	88 23       	and	r24, r24
    46fe:	b9 f7       	brne	.-18     	; 0x46ee <_ZN6String11toLowerCaseEv+0x1e>
		*p = tolower(*p);
	}
}
    4700:	df 91       	pop	r29
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	08 95       	ret

0000470a <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
	if (!buffer) return;
    4712:	fc 01       	movw	r30, r24
    4714:	c0 81       	ld	r28, Z
    4716:	d1 81       	ldd	r29, Z+1	; 0x01
    4718:	20 97       	sbiw	r28, 0x00	; 0
    471a:	79 f0       	breq	.+30     	; 0x473a <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    471c:	88 81       	ld	r24, Y
    471e:	88 23       	and	r24, r24
    4720:	61 f0       	breq	.+24     	; 0x473a <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    4722:	8e 01       	movw	r16, r28
    4724:	0f 5f       	subi	r16, 0xFF	; 255
    4726:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	0e 94 e6 59 	call	0xb3cc	; 0xb3cc <toupper>
    472e:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    4730:	f8 01       	movw	r30, r16
    4732:	81 91       	ld	r24, Z+
    4734:	8f 01       	movw	r16, r30
    4736:	88 23       	and	r24, r24
    4738:	b9 f7       	brne	.-18     	; 0x4728 <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
	}
}
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	08 95       	ret

00004744 <_ZN6String4trimEv>:

void String::trim(void)
{
    4744:	af 92       	push	r10
    4746:	bf 92       	push	r11
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	ff 92       	push	r15
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    475a:	dc 01       	movw	r26, r24
    475c:	cd 90       	ld	r12, X+
    475e:	dc 90       	ld	r13, X
    4760:	11 97       	sbiw	r26, 0x01	; 1
    4762:	c1 14       	cp	r12, r1
    4764:	d1 04       	cpc	r13, r1
    4766:	f1 f1       	breq	.+124    	; 0x47e4 <_ZN6String4trimEv+0xa0>
    4768:	14 96       	adiw	r26, 0x04	; 4
    476a:	ad 90       	ld	r10, X+
    476c:	bc 90       	ld	r11, X
    476e:	15 97       	sbiw	r26, 0x05	; 5
    4770:	a1 14       	cp	r10, r1
    4772:	b1 04       	cpc	r11, r1
    4774:	b9 f1       	breq	.+110    	; 0x47e4 <_ZN6String4trimEv+0xa0>
    4776:	e6 01       	movw	r28, r12
    4778:	8e 01       	movw	r16, r28
    477a:	21 96       	adiw	r28, 0x01	; 1
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    477c:	f8 01       	movw	r30, r16
    477e:	80 81       	ld	r24, Z
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <isspace>
    4786:	00 97       	sbiw	r24, 0x00	; 0
    4788:	b9 f7       	brne	.-18     	; 0x4778 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    478a:	e5 01       	movw	r28, r10
    478c:	21 97       	sbiw	r28, 0x01	; 1
    478e:	cc 0d       	add	r28, r12
    4790:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    4792:	88 81       	ld	r24, Y
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <isspace>
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	c9 f0       	breq	.+50     	; 0x47d0 <_ZN6String4trimEv+0x8c>
    479e:	c0 17       	cp	r28, r16
    47a0:	d1 07       	cpc	r29, r17
    47a2:	b0 f0       	brcs	.+44     	; 0x47d0 <_ZN6String4trimEv+0x8c>
    47a4:	21 97       	sbiw	r28, 0x01	; 1
    47a6:	f5 cf       	rjmp	.-22     	; 0x4792 <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    47a8:	8c 2d       	mov	r24, r12
    47aa:	9d 2d       	mov	r25, r13
    47ac:	60 2f       	mov	r22, r16
    47ae:	71 2f       	mov	r23, r17
    47b0:	4c 2f       	mov	r20, r28
    47b2:	5d 2f       	mov	r21, r29
    47b4:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
	buffer[len] = 0;
    47b8:	d7 01       	movw	r26, r14
    47ba:	ed 91       	ld	r30, X+
    47bc:	fc 91       	ld	r31, X
    47be:	11 97       	sbiw	r26, 0x01	; 1
    47c0:	14 96       	adiw	r26, 0x04	; 4
    47c2:	8d 91       	ld	r24, X+
    47c4:	9c 91       	ld	r25, X
    47c6:	15 97       	sbiw	r26, 0x05	; 5
    47c8:	e8 0f       	add	r30, r24
    47ca:	f9 1f       	adc	r31, r25
    47cc:	10 82       	st	Z, r1
    47ce:	0a c0       	rjmp	.+20     	; 0x47e4 <_ZN6String4trimEv+0xa0>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    47d0:	21 96       	adiw	r28, 0x01	; 1
    47d2:	c0 1b       	sub	r28, r16
    47d4:	d1 0b       	sbc	r29, r17
    47d6:	f7 01       	movw	r30, r14
    47d8:	d5 83       	std	Z+5, r29	; 0x05
    47da:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    47dc:	c0 16       	cp	r12, r16
    47de:	d1 06       	cpc	r13, r17
    47e0:	58 f7       	brcc	.-42     	; 0x47b8 <_ZN6String4trimEv+0x74>
    47e2:	e2 cf       	rjmp	.-60     	; 0x47a8 <_ZN6String4trimEv+0x64>
	buffer[len] = 0;
}
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	ff 90       	pop	r15
    47ee:	ef 90       	pop	r14
    47f0:	df 90       	pop	r13
    47f2:	cf 90       	pop	r12
    47f4:	bf 90       	pop	r11
    47f6:	af 90       	pop	r10
    47f8:	08 95       	ret

000047fa <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
	if (buffer) return atol(buffer);
    47fe:	fc 01       	movw	r30, r24
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	29 f0       	breq	.+10     	; 0x4812 <_ZNK6String5toIntEv+0x18>
    4808:	0e 94 af 59 	call	0xb35e	; 0xb35e <atol>
    480c:	8b 01       	movw	r16, r22
    480e:	9c 01       	movw	r18, r24
    4810:	03 c0       	rjmp	.+6      	; 0x4818 <_ZNK6String5toIntEv+0x1e>
	return 0;
    4812:	00 e0       	ldi	r16, 0x00	; 0
    4814:	10 e0       	ldi	r17, 0x00	; 0
    4816:	98 01       	movw	r18, r16
}
    4818:	60 2f       	mov	r22, r16
    481a:	71 2f       	mov	r23, r17
    481c:	82 2f       	mov	r24, r18
    481e:	93 2f       	mov	r25, r19
    4820:	1f 91       	pop	r17
    4822:	0f 91       	pop	r16
    4824:	08 95       	ret

00004826 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    4826:	fc 01       	movw	r30, r24
    4828:	80 81       	ld	r24, Z
    482a:	91 81       	ldd	r25, Z+1	; 0x01
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	19 f0       	breq	.+6      	; 0x4836 <_ZNK6String7toFloatEv+0x10>
    4830:	0e 94 ab 59 	call	0xb356	; 0xb356 <atof>
    4834:	04 c0       	rjmp	.+8      	; 0x483e <_ZNK6String7toFloatEv+0x18>
	return 0;
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	70 e0       	ldi	r23, 0x00	; 0
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e0       	ldi	r25, 0x00	; 0
}
    483e:	38 2f       	mov	r19, r24
    4840:	29 2f       	mov	r18, r25
    4842:	86 2f       	mov	r24, r22
    4844:	97 2f       	mov	r25, r23
    4846:	a3 2f       	mov	r26, r19
    4848:	b2 2f       	mov	r27, r18
    484a:	bc 01       	movw	r22, r24
    484c:	cd 01       	movw	r24, r26
    484e:	08 95       	ret

00004850 <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	0f 92       	push	r0
    4856:	cd b7       	in	r28, 0x3d	; 61
    4858:	de b7       	in	r29, 0x3e	; 62
    485a:	69 83       	std	Y+1, r22	; 0x01
  return write(&val, 1);
    485c:	dc 01       	movw	r26, r24
    485e:	ed 91       	ld	r30, X+
    4860:	fc 91       	ld	r31, X
    4862:	02 80       	ldd	r0, Z+2	; 0x02
    4864:	f3 81       	ldd	r31, Z+3	; 0x03
    4866:	e0 2d       	mov	r30, r0
    4868:	be 01       	movw	r22, r28
    486a:	6f 5f       	subi	r22, 0xFF	; 255
    486c:	7f 4f       	sbci	r23, 0xFF	; 255
    486e:	41 e0       	ldi	r20, 0x01	; 1
    4870:	50 e0       	ldi	r21, 0x00	; 0
    4872:	19 95       	eicall
}
    4874:	0f 90       	pop	r0
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	08 95       	ret

0000487c <_ZN5SDLib4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    487c:	fc 01       	movw	r30, r24
    487e:	81 8d       	ldd	r24, Z+25	; 0x19
    4880:	92 8d       	ldd	r25, Z+26	; 0x1a
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	11 f0       	breq	.+4      	; 0x488a <_ZN5SDLib4File5flushEv+0xe>
    _file->sync();
    4886:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    488a:	08 95       	ret

0000488c <_ZN5SDLib4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
    488c:	ef 92       	push	r14
    488e:	ff 92       	push	r15
    4890:	0f 93       	push	r16
    4892:	1f 93       	push	r17
    4894:	cf 93       	push	r28
    4896:	df 93       	push	r29
    4898:	0f 92       	push	r0
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	8c 01       	movw	r16, r24
  if (! _file) 
    48a0:	fc 01       	movw	r30, r24
    48a2:	81 8d       	ldd	r24, Z+25	; 0x19
    48a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    48a6:	00 97       	sbiw	r24, 0x00	; 0
    48a8:	d9 f0       	breq	.+54     	; 0x48e0 <_ZN5SDLib4File4peekEv+0x54>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    48aa:	be 01       	movw	r22, r28
    48ac:	6f 5f       	subi	r22, 0xFF	; 255
    48ae:	7f 4f       	sbci	r23, 0xFF	; 255
    48b0:	41 e0       	ldi	r20, 0x01	; 1
    48b2:	50 e0       	ldi	r21, 0x00	; 0
    48b4:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6SdFile4readEPvj>
    48b8:	81 30       	cpi	r24, 0x01	; 1
    48ba:	91 05       	cpc	r25, r1
    48bc:	a1 f4       	brne	.+40     	; 0x48e6 <_ZN5SDLib4File4peekEv+0x5a>
    48be:	e9 80       	ldd	r14, Y+1	; 0x01
    48c0:	ff 24       	eor	r15, r15
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    48c2:	f8 01       	movw	r30, r16
    48c4:	81 8d       	ldd	r24, Z+25	; 0x19
    48c6:	92 8d       	ldd	r25, Z+26	; 0x1a
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    48c8:	fc 01       	movw	r30, r24
    48ca:	42 85       	ldd	r20, Z+10	; 0x0a
    48cc:	53 85       	ldd	r21, Z+11	; 0x0b
    48ce:	64 85       	ldd	r22, Z+12	; 0x0c
    48d0:	75 85       	ldd	r23, Z+13	; 0x0d
    48d2:	41 50       	subi	r20, 0x01	; 1
    48d4:	50 40       	sbci	r21, 0x00	; 0
    48d6:	60 40       	sbci	r22, 0x00	; 0
    48d8:	70 40       	sbci	r23, 0x00	; 0
    48da:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    48de:	06 c0       	rjmp	.+12     	; 0x48ec <_ZN5SDLib4File4peekEv+0x60>
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    48e0:	ee 24       	eor	r14, r14
    48e2:	ff 24       	eor	r15, r15
    48e4:	03 c0       	rjmp	.+6      	; 0x48ec <_ZN5SDLib4File4peekEv+0x60>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    48e6:	ee 24       	eor	r14, r14
    48e8:	ea 94       	dec	r14
    48ea:	fe 2c       	mov	r15, r14

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    48ec:	8e 2d       	mov	r24, r14
    48ee:	9f 2d       	mov	r25, r15
    48f0:	0f 90       	pop	r0
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	1f 91       	pop	r17
    48f8:	0f 91       	pop	r16
    48fa:	ff 90       	pop	r15
    48fc:	ef 90       	pop	r14
    48fe:	08 95       	ret

00004900 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	ec 01       	movw	r28, r24
  size_t t;
  if (!_file) {
    4906:	e9 8d       	ldd	r30, Y+25	; 0x19
    4908:	fa 8d       	ldd	r31, Y+26	; 0x1a
    490a:	30 97       	sbiw	r30, 0x00	; 0
    490c:	39 f4       	brne	.+14     	; 0x491c <_ZN5SDLib4File5writeEPKhj+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	9b 83       	std	Y+3, r25	; 0x03
    4914:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	13 c0       	rjmp	.+38     	; 0x4942 <_ZN5SDLib4File5writeEPKhj+0x42>
    491c:	13 82       	std	Z+3, r1	; 0x03
    491e:	12 82       	std	Z+2, r1	; 0x02
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    4920:	89 8d       	ldd	r24, Y+25	; 0x19
    4922:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4924:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <_ZN6SdFile5writeEPKvj>
  public:
    Print() : write_error(0) {}
  
    int getWriteError() { return write_error; }
    4928:	e9 8d       	ldd	r30, Y+25	; 0x19
    492a:	fa 8d       	ldd	r31, Y+26	; 0x1a
  if (_file->getWriteError()) {
    492c:	22 81       	ldd	r18, Z+2	; 0x02
    492e:	33 81       	ldd	r19, Z+3	; 0x03
    4930:	21 15       	cp	r18, r1
    4932:	31 05       	cpc	r19, r1
    4934:	31 f0       	breq	.+12     	; 0x4942 <_ZN5SDLib4File5writeEPKhj+0x42>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	9b 83       	std	Y+3, r25	; 0x03
    493c:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
  }
  return t;
}
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	08 95       	ret

00004948 <_ZN5SDLib4File4readEv>:
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	0f 92       	push	r0
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
  if (_file) 
    4952:	fc 01       	movw	r30, r24
    4954:	81 8d       	ldd	r24, Z+25	; 0x19
    4956:	92 8d       	ldd	r25, Z+26	; 0x1a
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	81 f0       	breq	.+32     	; 0x497c <_ZN5SDLib4File4readEv+0x34>
    495c:	be 01       	movw	r22, r28
    495e:	6f 5f       	subi	r22, 0xFF	; 255
    4960:	7f 4f       	sbci	r23, 0xFF	; 255
    4962:	41 e0       	ldi	r20, 0x01	; 1
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6SdFile4readEPvj>
    496a:	81 30       	cpi	r24, 0x01	; 1
    496c:	91 05       	cpc	r25, r1
    496e:	19 f4       	brne	.+6      	; 0x4976 <_ZN5SDLib4File4readEv+0x2e>
    4970:	89 81       	ldd	r24, Y+1	; 0x01
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	05 c0       	rjmp	.+10     	; 0x4980 <_ZN5SDLib4File4readEv+0x38>
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	9f ef       	ldi	r25, 0xFF	; 255
    return _file->read();
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <_ZN5SDLib4File4readEv+0x38>
  return -1;
    497c:	8f ef       	ldi	r24, 0xFF	; 255
    497e:	9f ef       	ldi	r25, 0xFF	; 255
}
    4980:	0f 90       	pop	r0
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	08 95       	ret

00004988 <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	ec 01       	movw	r28, r24
    4996:	16 2f       	mov	r17, r22
    4998:	07 2f       	mov	r16, r23
    499a:	7a 01       	movw	r14, r20
  public:
    Print() : write_error(0) {}
    499c:	1b 82       	std	Y+3, r1	; 0x03
    499e:	1a 82       	std	Y+2, r1	; 0x02
    49a0:	88 ee       	ldi	r24, 0xE8	; 232
    49a2:	93 e0       	ldi	r25, 0x03	; 3
    49a4:	a0 e0       	ldi	r26, 0x00	; 0
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	8c 83       	std	Y+4, r24	; 0x04
    49aa:	9d 83       	std	Y+5, r25	; 0x05
    49ac:	ae 83       	std	Y+6, r26	; 0x06
    49ae:	bf 83       	std	Y+7, r27	; 0x07
    49b0:	80 e5       	ldi	r24, 0x50	; 80
    49b2:	92 e0       	ldi	r25, 0x02	; 2
    49b4:	99 83       	std	Y+1, r25	; 0x01
    49b6:	88 83       	st	Y, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    49b8:	8d e1       	ldi	r24, 0x1D	; 29
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	0e 94 30 54 	call	0xa860	; 0xa860 <malloc>
    49c0:	a8 2f       	mov	r26, r24
    49c2:	b9 2f       	mov	r27, r25
    49c4:	ba 8f       	std	Y+26, r27	; 0x1a
    49c6:	a9 8f       	std	Y+25, r26	; 0x19
  if (_file) {
    49c8:	10 97       	sbiw	r26, 0x00	; 0
    49ca:	79 f0       	breq	.+30     	; 0x49ea <_ZN5SDLib4FileC1E6SdFilePKc+0x62>
    memcpy(_file, &f, sizeof(SdFile));
    49cc:	e1 2f       	mov	r30, r17
    49ce:	f0 2f       	mov	r31, r16
    49d0:	8d e1       	ldi	r24, 0x1D	; 29
    49d2:	01 90       	ld	r0, Z+
    49d4:	0d 92       	st	X+, r0
    49d6:	81 50       	subi	r24, 0x01	; 1
    49d8:	e1 f7       	brne	.-8      	; 0x49d2 <_ZN5SDLib4FileC1E6SdFilePKc+0x4a>
    
    strncpy(_name, n, 12);
    49da:	ce 01       	movw	r24, r28
    49dc:	0c 96       	adiw	r24, 0x0c	; 12
    49de:	b7 01       	movw	r22, r14
    49e0:	4c e0       	ldi	r20, 0x0C	; 12
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <strncpy>
    _name[12] = 0;
    49e8:	18 8e       	std	Y+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    49ea:	df 91       	pop	r29
    49ec:	cf 91       	pop	r28
    49ee:	1f 91       	pop	r17
    49f0:	0f 91       	pop	r16
    49f2:	ff 90       	pop	r15
    49f4:	ef 90       	pop	r14
    49f6:	08 95       	ret

000049f8 <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    49f8:	fc 01       	movw	r30, r24
    49fa:	13 82       	std	Z+3, r1	; 0x03
    49fc:	12 82       	std	Z+2, r1	; 0x02
    49fe:	48 ee       	ldi	r20, 0xE8	; 232
    4a00:	53 e0       	ldi	r21, 0x03	; 3
    4a02:	60 e0       	ldi	r22, 0x00	; 0
    4a04:	70 e0       	ldi	r23, 0x00	; 0
    4a06:	44 83       	std	Z+4, r20	; 0x04
    4a08:	55 83       	std	Z+5, r21	; 0x05
    4a0a:	66 83       	std	Z+6, r22	; 0x06
    4a0c:	77 83       	std	Z+7, r23	; 0x07
    4a0e:	80 e5       	ldi	r24, 0x50	; 80
    4a10:	92 e0       	ldi	r25, 0x02	; 2
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
  _file = 0;
    4a16:	12 8e       	std	Z+26, r1	; 0x1a
    4a18:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
    4a1a:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
    4a1c:	08 95       	ret

00004a1e <_ZN5SDLib4File4nameEv>:

// returns a pointer to the file name
char *File::name(void) {
  return _name;
    4a1e:	0c 96       	adiw	r24, 0x0c	; 12
}
    4a20:	08 95       	ret

00004a22 <_ZN5SDLib4File11isDirectoryEv>:

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
    4a22:	dc 01       	movw	r26, r24
    4a24:	59 96       	adiw	r26, 0x19	; 25
    4a26:	ed 91       	ld	r30, X+
    4a28:	fc 91       	ld	r31, X
    4a2a:	5a 97       	sbiw	r26, 0x1a	; 26
    4a2c:	30 97       	sbiw	r30, 0x00	; 0
    4a2e:	31 f0       	breq	.+12     	; 0x4a3c <_ZN5SDLib4File11isDirectoryEv+0x1a>
char *File::name(void) {
  return _name;
}

// a directory is a special type of file
boolean File::isDirectory(void) {
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	95 81       	ldd	r25, Z+5	; 0x05
    4a34:	92 30       	cpi	r25, 0x02	; 2
    4a36:	18 f4       	brcc	.+6      	; 0x4a3e <_ZN5SDLib4File11isDirectoryEv+0x1c>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	08 95       	ret
  return (_file && _file->isDir());
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
}
    4a3e:	08 95       	ret

00004a40 <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    4a40:	fc 01       	movw	r30, r24
    4a42:	81 8d       	ldd	r24, Z+25	; 0x19
    4a44:	92 8d       	ldd	r25, Z+26	; 0x1a
    4a46:	00 97       	sbiw	r24, 0x00	; 0
    4a48:	19 f0       	breq	.+6      	; 0x4a50 <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
    4a4a:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6SdFile4readEPvj>
    4a4e:	08 95       	ret
  return 0;
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e0       	ldi	r25, 0x00	; 0
}
    4a54:	08 95       	ret

00004a56 <_ZN5SDLib4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    4a56:	fc 01       	movw	r30, r24
    4a58:	81 8d       	ldd	r24, Z+25	; 0x19
    4a5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4a5c:	00 97       	sbiw	r24, 0x00	; 0
    4a5e:	19 f0       	breq	.+6      	; 0x4a66 <_ZN5SDLib4File4seekEm+0x10>

  return _file->seekSet(pos);
    4a60:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    4a64:	08 95       	ret
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    4a66:	80 e0       	ldi	r24, 0x00	; 0

  return _file->seekSet(pos);
}
    4a68:	08 95       	ret

00004a6a <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
    4a6a:	0f 93       	push	r16
    4a6c:	1f 93       	push	r17
  if (! _file) return -1;
    4a6e:	dc 01       	movw	r26, r24
    4a70:	59 96       	adiw	r26, 0x19	; 25
    4a72:	ed 91       	ld	r30, X+
    4a74:	fc 91       	ld	r31, X
    4a76:	5a 97       	sbiw	r26, 0x1a	; 26
    4a78:	30 97       	sbiw	r30, 0x00	; 0
    4a7a:	29 f0       	breq	.+10     	; 0x4a86 <_ZN5SDLib4File8positionEv+0x1c>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    4a7c:	02 85       	ldd	r16, Z+10	; 0x0a
    4a7e:	13 85       	ldd	r17, Z+11	; 0x0b
    4a80:	24 85       	ldd	r18, Z+12	; 0x0c
    4a82:	35 85       	ldd	r19, Z+13	; 0x0d
  return _file->curPosition();
    4a84:	03 c0       	rjmp	.+6      	; 0x4a8c <_ZN5SDLib4File8positionEv+0x22>

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    4a86:	0f ef       	ldi	r16, 0xFF	; 255
    4a88:	1f ef       	ldi	r17, 0xFF	; 255
    4a8a:	98 01       	movw	r18, r16
  return _file->curPosition();
}
    4a8c:	60 2f       	mov	r22, r16
    4a8e:	71 2f       	mov	r23, r17
    4a90:	82 2f       	mov	r24, r18
    4a92:	93 2f       	mov	r25, r19
    4a94:	1f 91       	pop	r17
    4a96:	0f 91       	pop	r16
    4a98:	08 95       	ret

00004a9a <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
    4a9a:	0f 93       	push	r16
    4a9c:	1f 93       	push	r17
  if (! _file) return 0;
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	59 96       	adiw	r26, 0x19	; 25
    4aa2:	ed 91       	ld	r30, X+
    4aa4:	fc 91       	ld	r31, X
    4aa6:	5a 97       	sbiw	r26, 0x1a	; 26
    4aa8:	30 97       	sbiw	r30, 0x00	; 0
    4aaa:	29 f0       	breq	.+10     	; 0x4ab6 <_ZN5SDLib4File4sizeEv+0x1c>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    4aac:	03 89       	ldd	r16, Z+19	; 0x13
    4aae:	14 89       	ldd	r17, Z+20	; 0x14
    4ab0:	25 89       	ldd	r18, Z+21	; 0x15
    4ab2:	36 89       	ldd	r19, Z+22	; 0x16
  return _file->fileSize();
    4ab4:	03 c0       	rjmp	.+6      	; 0x4abc <_ZN5SDLib4File4sizeEv+0x22>
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    4ab6:	00 e0       	ldi	r16, 0x00	; 0
    4ab8:	10 e0       	ldi	r17, 0x00	; 0
    4aba:	98 01       	movw	r18, r16
  return _file->fileSize();
}
    4abc:	60 2f       	mov	r22, r16
    4abe:	71 2f       	mov	r23, r17
    4ac0:	82 2f       	mov	r24, r18
    4ac2:	93 2f       	mov	r25, r19
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	08 95       	ret

00004aca <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	ec 01       	movw	r28, r24
  if (! _file) return 0;
    4ad8:	89 8d       	ldd	r24, Y+25	; 0x19
    4ada:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	11 f1       	breq	.+68     	; 0x4b24 <_ZN5SDLib4File9availableEv+0x5a>

  uint32_t n = size() - position();
    4ae0:	ce 01       	movw	r24, r28
    4ae2:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN5SDLib4File4sizeEv>
    4ae6:	6b 01       	movw	r12, r22
    4ae8:	7c 01       	movw	r14, r24
    4aea:	ce 01       	movw	r24, r28
    4aec:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	c8 1a       	sub	r12, r24
    4af6:	d9 0a       	sbc	r13, r25
    4af8:	ea 0a       	sbc	r14, r26
    4afa:	fb 0a       	sbc	r15, r27

  return n > 0X7FFF ? 0X7FFF : n;
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	c8 16       	cp	r12, r24
    4b00:	80 e8       	ldi	r24, 0x80	; 128
    4b02:	d8 06       	cpc	r13, r24
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	e8 06       	cpc	r14, r24
    4b08:	80 e0       	ldi	r24, 0x00	; 0
    4b0a:	f8 06       	cpc	r15, r24
    4b0c:	68 f0       	brcs	.+26     	; 0x4b28 <_ZN5SDLib4File9availableEv+0x5e>
    4b0e:	0f 2e       	mov	r0, r31
    4b10:	ff ef       	ldi	r31, 0xFF	; 255
    4b12:	cf 2e       	mov	r12, r31
    4b14:	ff e7       	ldi	r31, 0x7F	; 127
    4b16:	df 2e       	mov	r13, r31
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	ef 2e       	mov	r14, r31
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	ff 2e       	mov	r15, r31
    4b20:	f0 2d       	mov	r31, r0
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <_ZN5SDLib4File9availableEv+0x5e>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    4b24:	cc 24       	eor	r12, r12
    4b26:	dd 24       	eor	r13, r13

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    4b28:	8c 2d       	mov	r24, r12
    4b2a:	9d 2d       	mov	r25, r13
    4b2c:	df 91       	pop	r29
    4b2e:	cf 91       	pop	r28
    4b30:	ff 90       	pop	r15
    4b32:	ef 90       	pop	r14
    4b34:	df 90       	pop	r13
    4b36:	cf 90       	pop	r12
    4b38:	08 95       	ret

00004b3a <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    4b3a:	cf 93       	push	r28
    4b3c:	df 93       	push	r29
    4b3e:	ec 01       	movw	r28, r24
  if (_file) {
    4b40:	89 8d       	ldd	r24, Y+25	; 0x19
    4b42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	41 f0       	breq	.+16     	; 0x4b58 <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    4b48:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
    free(_file); 
    4b4c:	89 8d       	ldd	r24, Y+25	; 0x19
    4b4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b50:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
    _file = 0;
    4b54:	1a 8e       	std	Y+26, r1	; 0x1a
    4b56:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	08 95       	ret

00004b5e <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    4b5e:	dc 01       	movw	r26, r24
    4b60:	59 96       	adiw	r26, 0x19	; 25
    4b62:	ed 91       	ld	r30, X+
    4b64:	fc 91       	ld	r31, X
    4b66:	5a 97       	sbiw	r26, 0x1a	; 26
    4b68:	30 97       	sbiw	r30, 0x00	; 0
    4b6a:	31 f0       	breq	.+12     	; 0x4b78 <_ZN5SDLib4FilecvbEv+0x1a>
    return  _file->isOpen();
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	95 81       	ldd	r25, Z+5	; 0x05
    4b70:	99 23       	and	r25, r25
    4b72:	19 f4       	brne	.+6      	; 0x4b7a <_ZN5SDLib4FilecvbEv+0x1c>
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	08 95       	ret
  return false;
    4b78:	80 e0       	ldi	r24, 0x00	; 0
}
    4b7a:	08 95       	ret

00004b7c <_ZN5SDLib19callback_pathExistsER6SdFilePKchPv>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, const char *filePathComponent, 
			    boolean /* isLastComponent */, void * /* object */) {
    4b7c:	1f 93       	push	r17
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	6d 97       	sbiw	r28, 0x1d	; 29
    4b88:	0f b6       	in	r0, 0x3f	; 63
    4b8a:	f8 94       	cli
    4b8c:	de bf       	out	0x3e, r29	; 62
    4b8e:	0f be       	out	0x3f, r0	; 63
    4b90:	cd bf       	out	0x3d, r28	; 61
    4b92:	9c 01       	movw	r18, r24
    4b94:	ab 01       	movw	r20, r22
    4b96:	1c 82       	std	Y+4, r1	; 0x04
    4b98:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4b9a:	82 e7       	ldi	r24, 0x72	; 114
    4b9c:	92 e0       	ldi	r25, 0x02	; 2
    4b9e:	9a 83       	std	Y+2, r25	; 0x02
    4ba0:	89 83       	std	Y+1, r24	; 0x01
    4ba2:	1e 82       	std	Y+6, r1	; 0x06
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	01 96       	adiw	r24, 0x01	; 1
    4ba8:	b9 01       	movw	r22, r18
    4baa:	21 e0       	ldi	r18, 0x01	; 1
    4bac:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    4bb0:	18 2f       	mov	r17, r24
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    4bb2:	88 23       	and	r24, r24
    4bb4:	21 f0       	breq	.+8      	; 0x4bbe <_ZN5SDLib19callback_pathExistsER6SdFilePKchPv+0x42>
     child.close(); 
    4bb6:	ce 01       	movw	r24, r28
    4bb8:	01 96       	adiw	r24, 0x01	; 1
    4bba:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
  }
  
  return exists;
}
    4bbe:	81 2f       	mov	r24, r17
    4bc0:	6d 96       	adiw	r28, 0x1d	; 29
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	1f 91       	pop	r17
    4bd2:	08 95       	ret

00004bd4 <_ZN5SDLib14callback_rmdirER6SdFilePKchPv>:
  }
  return true;
}

boolean callback_rmdir(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	6d 97       	sbiw	r28, 0x1d	; 29
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	de bf       	out	0x3e, r29	; 62
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	9c 01       	movw	r18, r24
    4bea:	fb 01       	movw	r30, r22
  if (isLastComponent) {
    4bec:	44 23       	and	r20, r20
    4bee:	a9 f0       	breq	.+42     	; 0x4c1a <_ZN5SDLib14callback_rmdirER6SdFilePKchPv+0x46>
    4bf0:	1c 82       	std	Y+4, r1	; 0x04
    4bf2:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4bf4:	82 e7       	ldi	r24, 0x72	; 114
    4bf6:	92 e0       	ldi	r25, 0x02	; 2
    4bf8:	9a 83       	std	Y+2, r25	; 0x02
    4bfa:	89 83       	std	Y+1, r24	; 0x01
    4bfc:	1e 82       	std	Y+6, r1	; 0x06
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    4bfe:	ce 01       	movw	r24, r28
    4c00:	01 96       	adiw	r24, 0x01	; 1
    4c02:	b9 01       	movw	r22, r18
    4c04:	af 01       	movw	r20, r30
    4c06:	21 e0       	ldi	r18, 0x01	; 1
    4c08:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    SdFile f;
    if (!f.open(parentDir, filePathComponent, O_READ)) return false;
    4c0c:	88 23       	and	r24, r24
    4c0e:	39 f0       	breq	.+14     	; 0x4c1e <_ZN5SDLib14callback_rmdirER6SdFilePKchPv+0x4a>
    return f.rmDir();
    4c10:	ce 01       	movw	r24, r28
    4c12:	01 96       	adiw	r24, 0x01	; 1
    4c14:	0e 94 59 38 	call	0x70b2	; 0x70b2 <_ZN6SdFile5rmDirEv>
    4c18:	03 c0       	rjmp	.+6      	; 0x4c20 <_ZN5SDLib14callback_rmdirER6SdFilePKchPv+0x4c>
  }
  return true;
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	01 c0       	rjmp	.+2      	; 0x4c20 <_ZN5SDLib14callback_rmdirER6SdFilePKchPv+0x4c>

boolean callback_rmdir(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
  if (isLastComponent) {
    SdFile f;
    if (!f.open(parentDir, filePathComponent, O_READ)) return false;
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    return f.rmDir();
  }
  return true;
}
    4c20:	6d 96       	adiw	r28, 0x1d	; 29
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	08 95       	ret

00004c32 <_ZN5SDLib15callback_removeER6SdFilePKchPv>:



boolean callback_remove(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
  if (isLastComponent) {
    4c32:	44 23       	and	r20, r20
    4c34:	19 f0       	breq	.+6      	; 0x4c3c <_ZN5SDLib15callback_removeER6SdFilePKchPv+0xa>
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    4c36:	0e 94 32 3c 	call	0x7864	; 0x7864 <_ZN6SdFile6removeEPS_PKc>
    return SdFile::remove(parentDir, filePathComponent);
    4c3a:	08 95       	ret
  }
  return true;
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
}
    4c3e:	08 95       	ret

00004c40 <_ZN5SDLib20callback_makeDirPathER6SdFilePKchPv>:
}



boolean callback_makeDirPath(SdFile& parentDir, const char *filePathComponent, 
			     boolean isLastComponent, void *object) {
    4c40:	ef 92       	push	r14
    4c42:	ff 92       	push	r15
    4c44:	0f 93       	push	r16
    4c46:	1f 93       	push	r17
    4c48:	cf 93       	push	r28
    4c4a:	df 93       	push	r29
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    4c50:	6d 97       	sbiw	r28, 0x1d	; 29
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	f8 94       	cli
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	0f be       	out	0x3f, r0	; 63
    4c5a:	cd bf       	out	0x3d, r28	; 61
    4c5c:	8c 01       	movw	r16, r24
    4c5e:	7b 01       	movw	r14, r22
    4c60:	1c 82       	std	Y+4, r1	; 0x04
    4c62:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4c64:	82 e7       	ldi	r24, 0x72	; 114
    4c66:	92 e0       	ldi	r25, 0x02	; 2
    4c68:	9a 83       	std	Y+2, r25	; 0x02
    4c6a:	89 83       	std	Y+1, r24	; 0x01
    4c6c:	1e 82       	std	Y+6, r1	; 0x06

  */
  boolean result = false;
  SdFile child;
  
  result = callback_pathExists(parentDir, filePathComponent, isLastComponent, object);
    4c6e:	c8 01       	movw	r24, r16
    4c70:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <_ZN5SDLib19callback_pathExistsER6SdFilePKchPv>
  if (!result) {
    4c74:	88 23       	and	r24, r24
    4c76:	31 f4       	brne	.+12     	; 0x4c84 <_ZN5SDLib20callback_makeDirPathER6SdFilePKchPv+0x44>
  uint8_t dirEntry(dir_t& dir) {return dirEntry(&dir);}  // NOLINT
  /** \deprecated Use:
   * uint8_t SdFile::makeDir(SdFile* dir, const char* dirName);
   */
  uint8_t makeDir(SdFile& dir, const char* dirName) {  // NOLINT
    return makeDir(&dir, dirName);
    4c78:	ce 01       	movw	r24, r28
    4c7a:	01 96       	adiw	r24, 0x01	; 1
    4c7c:	b8 01       	movw	r22, r16
    4c7e:	a7 01       	movw	r20, r14
    4c80:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <_ZN6SdFile7makeDirEPS_PKc>
    result = child.makeDir(parentDir, filePathComponent);
  } 
  
  return result;
}
    4c84:	6d 96       	adiw	r28, 0x1d	; 29
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	f8 94       	cli
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	0f be       	out	0x3f, r0	; 63
    4c8e:	cd bf       	out	0x3d, r28	; 61
    4c90:	df 91       	pop	r29
    4c92:	cf 91       	pop	r28
    4c94:	1f 91       	pop	r17
    4c96:	0f 91       	pop	r16
    4c98:	ff 90       	pop	r15
    4c9a:	ef 90       	pop	r14
    4c9c:	08 95       	ret

00004c9e <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    4c9e:	ef 92       	push	r14
    4ca0:	ff 92       	push	r15
    4ca2:	0f 93       	push	r16
    4ca4:	1f 93       	push	r17
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	ec 01       	movw	r28, r24
    4cac:	7b 01       	movw	r14, r22
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    4cae:	fb 01       	movw	r30, r22
    4cb0:	20 81       	ld	r18, Z
    4cb2:	31 81       	ldd	r19, Z+1	; 0x01

  // Skip root or other separator
  if (path[offset] == '/') {
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	e2 0f       	add	r30, r18
    4cb8:	f3 1f       	adc	r31, r19
    4cba:	80 81       	ld	r24, Z
    4cbc:	8f 32       	cpi	r24, 0x2F	; 47
    4cbe:	11 f4       	brne	.+4      	; 0x4cc4 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x26>
    offset++;
    4cc0:	2f 5f       	subi	r18, 0xFF	; 255
    4cc2:	3f 4f       	sbci	r19, 0xFF	; 255

// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
    4cc4:	de 01       	movw	r26, r28
    4cc6:	a2 0f       	add	r26, r18
    4cc8:	b3 1f       	adc	r27, r19

  int offset = *p_offset;

  // Skip root or other separator
  if (path[offset] == '/') {
    offset++;
    4cca:	8a 01       	movw	r16, r20

// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	90 e0       	ldi	r25, 0x00	; 0
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
    4cd0:	6c 91       	ld	r22, X
    4cd2:	6f 32       	cpi	r22, 0x2F	; 47
    4cd4:	01 f1       	breq	.+64     	; 0x4d16 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x78>
    4cd6:	66 23       	and	r22, r22
    4cd8:	f1 f0       	breq	.+60     	; 0x4d16 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x78>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
    4cda:	11 96       	adiw	r26, 0x01	; 1
    4cdc:	f8 01       	movw	r30, r16
    4cde:	61 93       	st	Z+, r22
    4ce0:	8f 01       	movw	r16, r30
    4ce2:	01 96       	adiw	r24, 0x01	; 1
    4ce4:	2f 5f       	subi	r18, 0xFF	; 255
    4ce6:	3f 4f       	sbci	r19, 0xFF	; 255
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
    4ce8:	8c 30       	cpi	r24, 0x0C	; 12
    4cea:	91 05       	cpc	r25, r1
    4cec:	a1 f0       	breq	.+40     	; 0x4d16 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x78>
    4cee:	f0 cf       	rjmp	.-32     	; 0x4cd0 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x32>
  buffer[bufferOffset] = '\0';

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    4cf0:	2f 5f       	subi	r18, 0xFF	; 255
    4cf2:	3f 4f       	sbci	r19, 0xFF	; 255
  }

  *p_offset = offset;
    4cf4:	f7 01       	movw	r30, r14
    4cf6:	31 83       	std	Z+1, r19	; 0x01
    4cf8:	20 83       	st	Z, r18

  return (path[offset] != '\0');
    4cfa:	c2 0f       	add	r28, r18
    4cfc:	d3 1f       	adc	r29, r19
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	98 81       	ld	r25, Y
    4d02:	99 23       	and	r25, r25
    4d04:	09 f4       	brne	.+2      	; 0x4d08 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6a>
    4d06:	80 e0       	ldi	r24, 0x00	; 0
}
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	1f 91       	pop	r17
    4d0e:	0f 91       	pop	r16
    4d10:	ff 90       	pop	r15
    4d12:	ef 90       	pop	r14
    4d14:	08 95       	ret
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    4d16:	84 0f       	add	r24, r20
    4d18:	95 1f       	adc	r25, r21
    4d1a:	fc 01       	movw	r30, r24
    4d1c:	10 82       	st	Z, r1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e2 0f       	add	r30, r18
    4d22:	f3 1f       	adc	r31, r19
    4d24:	80 81       	ld	r24, Z
    4d26:	8f 32       	cpi	r24, 0x2F	; 47
    4d28:	29 f7       	brne	.-54     	; 0x4cf4 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x56>
    4d2a:	e2 cf       	rjmp	.-60     	; 0x4cf0 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x52>

00004d2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     const char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    4d2c:	3f 92       	push	r3
    4d2e:	4f 92       	push	r4
    4d30:	5f 92       	push	r5
    4d32:	6f 92       	push	r6
    4d34:	7f 92       	push	r7
    4d36:	8f 92       	push	r8
    4d38:	9f 92       	push	r9
    4d3a:	af 92       	push	r10
    4d3c:	bf 92       	push	r11
    4d3e:	cf 92       	push	r12
    4d40:	df 92       	push	r13
    4d42:	ef 92       	push	r14
    4d44:	ff 92       	push	r15
    4d46:	0f 93       	push	r16
    4d48:	1f 93       	push	r17
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	cd b7       	in	r28, 0x3d	; 61
    4d50:	de b7       	in	r29, 0x3e	; 62
    4d52:	cd 54       	subi	r28, 0x4D	; 77
    4d54:	d0 40       	sbci	r29, 0x00	; 0
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	f8 94       	cli
    4d5a:	de bf       	out	0x3e, r29	; 62
    4d5c:	0f be       	out	0x3f, r0	; 63
    4d5e:	cd bf       	out	0x3d, r28	; 61
    4d60:	3c 01       	movw	r6, r24
    4d62:	4b 01       	movw	r8, r22
    4d64:	2e 96       	adiw	r28, 0x0e	; 14
    4d66:	5f af       	sts	0x7f, r21
    4d68:	4e af       	sts	0x7e, r20
    4d6a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d6c:	29 01       	movw	r4, r18
    4d6e:	18 aa       	sts	0x98, r17
    4d70:	1f a6       	lds	r17, 0xbf
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4d72:	82 e7       	ldi	r24, 0x72	; 114
    4d74:	92 e0       	ldi	r25, 0x02	; 2
    4d76:	9e a7       	lds	r25, 0x7e
    4d78:	8d a7       	lds	r24, 0x7d
    4d7a:	1a aa       	sts	0x9a, r17
    4d7c:	1b 8a       	std	Y+19, r1	; 0x13
    4d7e:	1a 8a       	std	Y+18, r1	; 0x12
    4d80:	99 8b       	std	Y+17, r25	; 0x11
    4d82:	88 8b       	std	Y+16, r24	; 0x10
    4d84:	1d 8a       	std	Y+21, r1	; 0x15
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    4d86:	1a 82       	std	Y+2, r1	; 0x02
    4d88:	19 82       	std	Y+1, r1	; 0x01

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
  
  p_parent = &parentDir;
    4d8a:	7b 01       	movw	r14, r22
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    4d8c:	0f 2e       	mov	r0, r31
    4d8e:	fd e2       	ldi	r31, 0x2D	; 45
    4d90:	af 2e       	mov	r10, r31
    4d92:	bb 24       	eor	r11, r11
    4d94:	f0 2d       	mov	r31, r0
    4d96:	ac 0e       	add	r10, r28
    4d98:	bd 1e       	adc	r11, r29
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    4d9a:	0f 2e       	mov	r0, r31
    4d9c:	f3 e0       	ldi	r31, 0x03	; 3
    4d9e:	cf 2e       	mov	r12, r31
    4da0:	dd 24       	eor	r13, r13
    4da2:	f0 2d       	mov	r31, r0
    4da4:	cc 0e       	add	r12, r28
    4da6:	dd 1e       	adc	r13, r29

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    4da8:	01 e0       	ldi	r16, 0x01	; 1
    4daa:	33 24       	eor	r3, r3
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    4dac:	ce 01       	movw	r24, r28
    4dae:	40 96       	adiw	r24, 0x10	; 16
    4db0:	2c 96       	adiw	r28, 0x0c	; 12
    4db2:	9f af       	sts	0x7f, r25
    4db4:	8e af       	sts	0x7e, r24
    4db6:	2c 97       	sbiw	r28, 0x0c	; 12
    4db8:	0c c0       	rjmp	.+24     	; 0x4dd2 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0xa6>
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
    4dba:	9e 2d       	mov	r25, r14
    4dbc:	8f 2d       	mov	r24, r15
    4dbe:	06 c0       	rjmp	.+12     	; 0x4dcc <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0xa0>
        p_parent = &subfile2;
    4dc0:	2b 96       	adiw	r28, 0x0b	; 11
    4dc2:	9f ad       	sts	0x6f, r25
    4dc4:	2b 97       	sbiw	r28, 0x0b	; 11
    4dc6:	2c 96       	adiw	r28, 0x0c	; 12
    4dc8:	8f ad       	sts	0x6f, r24
    4dca:	2c 97       	sbiw	r28, 0x0c	; 12
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    4dcc:	75 01       	movw	r14, r10
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
    4dce:	a9 2e       	mov	r10, r25
    4dd0:	b8 2e       	mov	r11, r24
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    4dd2:	c3 01       	movw	r24, r6
    4dd4:	be 01       	movw	r22, r28
    4dd6:	6f 5f       	subi	r22, 0xFF	; 255
    4dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dda:	a6 01       	movw	r20, r12
    4ddc:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    4de0:	18 2f       	mov	r17, r24

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    4de2:	6c 2d       	mov	r22, r12
    4de4:	7d 2d       	mov	r23, r13
    4de6:	40 2f       	mov	r20, r16
    4de8:	81 11       	cpse	r24, r1
    4dea:	43 2d       	mov	r20, r3
    4dec:	c7 01       	movw	r24, r14
    4dee:	92 01       	movw	r18, r4
    4df0:	2e 96       	adiw	r28, 0x0e	; 14
    4df2:	ee ad       	sts	0x6e, r30
    4df4:	ff ad       	sts	0x6f, r31
    4df6:	2e 97       	sbiw	r28, 0x0e	; 14
    4df8:	19 95       	eicall

    if (!shouldContinue) {
    4dfa:	88 23       	and	r24, r24
    4dfc:	41 f4       	brne	.+16     	; 0x4e0e <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0xe2>
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    4dfe:	e8 14       	cp	r14, r8
    4e00:	f9 04       	cpc	r15, r9
    4e02:	11 f1       	breq	.+68     	; 0x4e48 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x11c>
        (*p_parent).close();
    4e04:	c7 01       	movw	r24, r14
    4e06:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
      }
      return false;
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	22 c0       	rjmp	.+68     	; 0x4e52 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x126>
    }
    
    if (!moreComponents) {
    4e0e:	11 23       	and	r17, r17
    4e10:	99 f0       	breq	.+38     	; 0x4e38 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x10c>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    4e12:	c5 01       	movw	r24, r10
    4e14:	b7 01       	movw	r22, r14
    4e16:	a6 01       	movw	r20, r12
    4e18:	20 2f       	mov	r18, r16
    4e1a:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    4e1e:	18 2f       	mov	r17, r24
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    4e20:	e8 14       	cp	r14, r8
    4e22:	f9 04       	cpc	r15, r9
    4e24:	19 f0       	breq	.+6      	; 0x4e2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x100>
      (*p_parent).close();
    4e26:	c7 01       	movw	r24, r14
    4e28:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    4e2c:	11 23       	and	r17, r17
    4e2e:	71 f0       	breq	.+28     	; 0x4e4c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x120>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
    4e30:	e8 14       	cp	r14, r8
    4e32:	f9 04       	cpc	r15, r9
    4e34:	11 f6       	brne	.-124    	; 0x4dba <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x8e>
    4e36:	c4 cf       	rjmp	.-120    	; 0x4dc0 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x94>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    4e38:	e8 14       	cp	r14, r8
    4e3a:	f9 04       	cpc	r15, r9
    4e3c:	49 f0       	breq	.+18     	; 0x4e50 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x124>
    (*p_parent).close(); // TODO: Return/ handle different?
    4e3e:	c7 01       	movw	r24, r14
    4e40:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
  }

  return true;
    4e44:	81 e0       	ldi	r24, 0x01	; 1
    4e46:	05 c0       	rjmp	.+10     	; 0x4e52 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x126>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	03 c0       	rjmp	.+6      	; 0x4e52 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x126>

      p_tmp_sdfile = p_parent;
      p_parent = p_child;
      p_child = p_tmp_sdfile;
    } else {
      return false;
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	01 c0       	rjmp	.+2      	; 0x4e52 <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_+0x126>
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    4e50:	81 e0       	ldi	r24, 0x01	; 1
}
    4e52:	c3 5b       	subi	r28, 0xB3	; 179
    4e54:	df 4f       	sbci	r29, 0xFF	; 255
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	ff 90       	pop	r15
    4e6a:	ef 90       	pop	r14
    4e6c:	df 90       	pop	r13
    4e6e:	cf 90       	pop	r12
    4e70:	bf 90       	pop	r11
    4e72:	af 90       	pop	r10
    4e74:	9f 90       	pop	r9
    4e76:	8f 90       	pop	r8
    4e78:	7f 90       	pop	r7
    4e7a:	6f 90       	pop	r6
    4e7c:	5f 90       	pop	r5
    4e7e:	4f 90       	pop	r4
    4e80:	3f 90       	pop	r3
    4e82:	08 95       	ret

00004e84 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    4e84:	ef 92       	push	r14
    4e86:	ff 92       	push	r15
    4e88:	0f 93       	push	r16
    4e8a:	1f 93       	push	r17
    4e8c:	cf 93       	push	r28
    4e8e:	df 93       	push	r29
    4e90:	8c 01       	movw	r16, r24
    4e92:	c6 2f       	mov	r28, r22
  if(root.isOpen()) root.close();
    4e94:	fc 01       	movw	r30, r24
    4e96:	87 a5       	lds	r24, 0x67
    4e98:	88 23       	and	r24, r24
    4e9a:	21 f0       	breq	.+8      	; 0x4ea4 <_ZN5SDLib7SDClass5beginEh+0x20>
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	8a 96       	adiw	r24, 0x2a	; 42
    4ea0:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    4ea4:	80 2f       	mov	r24, r16
    4ea6:	91 2f       	mov	r25, r17
    4ea8:	61 e0       	ldi	r22, 0x01	; 1
    4eaa:	4c 2f       	mov	r20, r28
    4eac:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
         root.openRoot(volume);
    4eb0:	88 23       	and	r24, r24
    4eb2:	e1 f0       	breq	.+56     	; 0x4eec <_ZN5SDLib7SDClass5beginEh+0x68>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    4eb4:	e8 01       	movw	r28, r16
    4eb6:	2c 96       	adiw	r28, 0x0c	; 12
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    4eb8:	ce 01       	movw	r24, r28
    4eba:	60 2f       	mov	r22, r16
    4ebc:	71 2f       	mov	r23, r17
    4ebe:	41 e0       	ldi	r20, 0x01	; 1
    4ec0:	0e 94 a9 43 	call	0x8752	; 0x8752 <_ZN8SdVolume4initEP7Sd2Cardh>
    4ec4:	88 23       	and	r24, r24
    4ec6:	41 f4       	brne	.+16     	; 0x4ed8 <_ZN5SDLib7SDClass5beginEh+0x54>
    4ec8:	ce 01       	movw	r24, r28
    4eca:	60 2f       	mov	r22, r16
    4ecc:	71 2f       	mov	r23, r17
    4ece:	40 e0       	ldi	r20, 0x00	; 0
    4ed0:	0e 94 a9 43 	call	0x8752	; 0x8752 <_ZN8SdVolume4initEP7Sd2Cardh>
         root.openRoot(volume);
    4ed4:	88 23       	and	r24, r24
    4ed6:	61 f0       	breq	.+24     	; 0x4ef0 <_ZN5SDLib7SDClass5beginEh+0x6c>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    4ed8:	c8 01       	movw	r24, r16
    4eda:	8a 96       	adiw	r24, 0x2a	; 42
    4edc:	be 01       	movw	r22, r28
    4ede:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <_ZN6SdFile8openRootEP8SdVolume>

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	88 23       	and	r24, r24
    4ee6:	29 f4       	brne	.+10     	; 0x4ef2 <_ZN5SDLib7SDClass5beginEh+0x6e>
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	03 c0       	rjmp	.+6      	; 0x4ef2 <_ZN5SDLib7SDClass5beginEh+0x6e>
    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	01 c0       	rjmp	.+2      	; 0x4ef2 <_ZN5SDLib7SDClass5beginEh+0x6e>
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
}
    4ef2:	89 2f       	mov	r24, r25
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	ff 90       	pop	r15
    4efe:	ef 90       	pop	r14
    4f00:	08 95       	ret

00004f02 <_ZN5SDLib7SDClass5beginEmh>:

boolean SDClass::begin(uint32_t clock, uint8_t csPin) {
    4f02:	af 92       	push	r10
    4f04:	bf 92       	push	r11
    4f06:	cf 92       	push	r12
    4f08:	df 92       	push	r13
    4f0a:	ef 92       	push	r14
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	8c 01       	movw	r16, r24
    4f18:	6a 01       	movw	r12, r20
    4f1a:	7b 01       	movw	r14, r22
    4f1c:	c2 2f       	mov	r28, r18
  if(root.isOpen()) root.close();
    4f1e:	fc 01       	movw	r30, r24
    4f20:	87 a5       	lds	r24, 0x67
    4f22:	88 23       	and	r24, r24
    4f24:	21 f0       	breq	.+8      	; 0x4f2e <_ZN5SDLib7SDClass5beginEmh+0x2c>
    4f26:	c8 01       	movw	r24, r16
    4f28:	8a 96       	adiw	r24, 0x2a	; 42
    4f2a:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>

  return card.init(SPI_HALF_SPEED, csPin) &&
    4f2e:	80 2f       	mov	r24, r16
    4f30:	91 2f       	mov	r25, r17
    4f32:	61 e0       	ldi	r22, 0x01	; 1
    4f34:	4c 2f       	mov	r20, r28
    4f36:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN7Sd2Card4initEhh>
         card.setSpiClock(clock) &&
         volume.init(card) &&
         root.openRoot(volume);
    4f3a:	88 23       	and	r24, r24
    4f3c:	21 f1       	breq	.+72     	; 0x4f86 <_ZN5SDLib7SDClass5beginEmh+0x84>

boolean SDClass::begin(uint32_t clock, uint8_t csPin) {
  if(root.isOpen()) root.close();

  return card.init(SPI_HALF_SPEED, csPin) &&
         card.setSpiClock(clock) &&
    4f3e:	80 2f       	mov	r24, r16
    4f40:	91 2f       	mov	r25, r17
    4f42:	b7 01       	movw	r22, r14
    4f44:	a6 01       	movw	r20, r12
    4f46:	0e 94 c9 2b 	call	0x5792	; 0x5792 <_ZN7Sd2Card11setSpiClockEm>
         volume.init(card) &&
         root.openRoot(volume);
    4f4a:	88 23       	and	r24, r24
    4f4c:	f1 f0       	breq	.+60     	; 0x4f8a <_ZN5SDLib7SDClass5beginEmh+0x88>
boolean SDClass::begin(uint32_t clock, uint8_t csPin) {
  if(root.isOpen()) root.close();

  return card.init(SPI_HALF_SPEED, csPin) &&
         card.setSpiClock(clock) &&
         volume.init(card) &&
    4f4e:	e8 01       	movw	r28, r16
    4f50:	2c 96       	adiw	r28, 0x0c	; 12
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    4f52:	ce 01       	movw	r24, r28
    4f54:	60 2f       	mov	r22, r16
    4f56:	71 2f       	mov	r23, r17
    4f58:	41 e0       	ldi	r20, 0x01	; 1
    4f5a:	0e 94 a9 43 	call	0x8752	; 0x8752 <_ZN8SdVolume4initEP7Sd2Cardh>
    4f5e:	88 23       	and	r24, r24
    4f60:	41 f4       	brne	.+16     	; 0x4f72 <_ZN5SDLib7SDClass5beginEmh+0x70>
    4f62:	ce 01       	movw	r24, r28
    4f64:	60 2f       	mov	r22, r16
    4f66:	71 2f       	mov	r23, r17
    4f68:	40 e0       	ldi	r20, 0x00	; 0
    4f6a:	0e 94 a9 43 	call	0x8752	; 0x8752 <_ZN8SdVolume4initEP7Sd2Cardh>
         root.openRoot(volume);
    4f6e:	88 23       	and	r24, r24
    4f70:	71 f0       	breq	.+28     	; 0x4f8e <_ZN5SDLib7SDClass5beginEmh+0x8c>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    4f72:	c8 01       	movw	r24, r16
    4f74:	8a 96       	adiw	r24, 0x2a	; 42
    4f76:	be 01       	movw	r22, r28
    4f78:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <_ZN6SdFile8openRootEP8SdVolume>
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
}

boolean SDClass::begin(uint32_t clock, uint8_t csPin) {
    4f7c:	91 e0       	ldi	r25, 0x01	; 1
    4f7e:	88 23       	and	r24, r24
    4f80:	39 f4       	brne	.+14     	; 0x4f90 <_ZN5SDLib7SDClass5beginEmh+0x8e>
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	05 c0       	rjmp	.+10     	; 0x4f90 <_ZN5SDLib7SDClass5beginEmh+0x8e>
  if(root.isOpen()) root.close();

  return card.init(SPI_HALF_SPEED, csPin) &&
         card.setSpiClock(clock) &&
         volume.init(card) &&
         root.openRoot(volume);
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	03 c0       	rjmp	.+6      	; 0x4f90 <_ZN5SDLib7SDClass5beginEmh+0x8e>
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	01 c0       	rjmp	.+2      	; 0x4f90 <_ZN5SDLib7SDClass5beginEmh+0x8e>
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
}
    4f90:	89 2f       	mov	r24, r25
    4f92:	df 91       	pop	r29
    4f94:	cf 91       	pop	r28
    4f96:	1f 91       	pop	r17
    4f98:	0f 91       	pop	r16
    4f9a:	ff 90       	pop	r15
    4f9c:	ef 90       	pop	r14
    4f9e:	df 90       	pop	r13
    4fa0:	cf 90       	pop	r12
    4fa2:	bf 90       	pop	r11
    4fa4:	af 90       	pop	r10
    4fa6:	08 95       	ret

00004fa8 <_ZN5SDLib7SDClass3endEv>:

//call this when a card is removed. It will allow you to insert and initialise a new card.
void SDClass::end()
{
  root.close();
    4fa8:	8a 96       	adiw	r24, 0x2a	; 42
    4faa:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
}
    4fae:	08 95       	ret

00004fb0 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    4fb0:	2f 92       	push	r2
    4fb2:	3f 92       	push	r3
    4fb4:	4f 92       	push	r4
    4fb6:	5f 92       	push	r5
    4fb8:	7f 92       	push	r7
    4fba:	8f 92       	push	r8
    4fbc:	9f 92       	push	r9
    4fbe:	af 92       	push	r10
    4fc0:	bf 92       	push	r11
    4fc2:	cf 92       	push	r12
    4fc4:	df 92       	push	r13
    4fc6:	ef 92       	push	r14
    4fc8:	ff 92       	push	r15
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	cd b7       	in	r28, 0x3d	; 61
    4fd4:	de b7       	in	r29, 0x3e	; 62
    4fd6:	c7 54       	subi	r28, 0x47	; 71
    4fd8:	d0 40       	sbci	r29, 0x00	; 0
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	f8 94       	cli
    4fde:	de bf       	out	0x3e, r29	; 62
    4fe0:	0f be       	out	0x3f, r0	; 63
    4fe2:	cd bf       	out	0x3d, r28	; 61
    4fe4:	4c 01       	movw	r8, r24
    4fe6:	2a 01       	movw	r4, r20
    4fe8:	19 01       	movw	r2, r18
    4fea:	1e a6       	lds	r17, 0xbe
    4fec:	1d a6       	lds	r17, 0xbd
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    4fee:	82 e7       	ldi	r24, 0x72	; 114
    4ff0:	92 e0       	ldi	r25, 0x02	; 2
    4ff2:	9c a7       	lds	r25, 0x7c
    4ff4:	8b a7       	lds	r24, 0x7b
    4ff6:	18 aa       	sts	0x98, r17
    4ff8:	19 8a       	std	Y+17, r1	; 0x11
    4ffa:	18 8a       	std	Y+16, r1	; 0x10
    4ffc:	9f 87       	std	Y+15, r25	; 0x0f
    4ffe:	8e 87       	std	Y+14, r24	; 0x0e
    5000:	1b 8a       	std	Y+19, r1	; 0x13
  // get parent directory
  SdFile d1;
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!
    5002:	64 5f       	subi	r22, 0xF4	; 244
    5004:	7f 4f       	sbci	r23, 0xFF	; 255
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    5006:	ce 01       	movw	r24, r28
    5008:	8b 96       	adiw	r24, 0x2b	; 43
    500a:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <_ZN6SdFile8openRootEP8SdVolume>
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    500e:	72 01       	movw	r14, r4

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    5010:	0f 2e       	mov	r0, r31
    5012:	fe e0       	ldi	r31, 0x0E	; 14
    5014:	af 2e       	mov	r10, r31
    5016:	bb 24       	eor	r11, r11
    5018:	f0 2d       	mov	r31, r0
    501a:	ac 0e       	add	r10, r28
    501c:	bd 1e       	adc	r11, r29
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    501e:	0f 2e       	mov	r0, r31
    5020:	fb e2       	ldi	r31, 0x2B	; 43
    5022:	cf 2e       	mov	r12, r31
    5024:	dd 24       	eor	r13, r13
    5026:	f0 2d       	mov	r31, r0
    5028:	cc 0e       	add	r12, r28
    502a:	dd 1e       	adc	r13, r29
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    502c:	0f 2e       	mov	r0, r31
    502e:	fc e0       	ldi	r31, 0x0C	; 12
    5030:	7f 2e       	mov	r7, r31
    5032:	f0 2d       	mov	r31, r0
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    5034:	3b c0       	rjmp	.+118    	; 0x50ac <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfc>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    5036:	f7 01       	movw	r30, r14
    5038:	20 81       	ld	r18, Z
    503a:	2f 32       	cpi	r18, 0x2F	; 47
    503c:	21 f4       	brne	.+8      	; 0x5046 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
      filepath++;
    503e:	08 94       	sec
    5040:	e1 1c       	adc	r14, r1
    5042:	f1 1c       	adc	r15, r1
      continue;
    5044:	33 c0       	rjmp	.+102    	; 0x50ac <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfc>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    5046:	8e 19       	sub	r24, r14
    5048:	8d 30       	cpi	r24, 0x0D	; 13
    504a:	08 f0       	brcs	.+2      	; 0x504e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x9e>
    504c:	87 2d       	mov	r24, r7
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    504e:	08 2f       	mov	r16, r24
    5050:	10 e0       	ldi	r17, 0x00	; 0
    5052:	ce 01       	movw	r24, r28
    5054:	01 96       	adiw	r24, 0x01	; 1
    5056:	b7 01       	movw	r22, r14
    5058:	a8 01       	movw	r20, r16
    505a:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <strncpy>
    subdirname[idx] = 0;
    505e:	e1 e0       	ldi	r30, 0x01	; 1
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	ec 0f       	add	r30, r28
    5064:	fd 1f       	adc	r31, r29
    5066:	e0 0f       	add	r30, r16
    5068:	f1 1f       	adc	r31, r17
    506a:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
    506c:	c5 01       	movw	r24, r10
    506e:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    5072:	c5 01       	movw	r24, r10
    5074:	b6 01       	movw	r22, r12
    5076:	ae 01       	movw	r20, r28
    5078:	4f 5f       	subi	r20, 0xFF	; 255
    507a:	5f 4f       	sbci	r21, 0xFF	; 255
    507c:	21 e0       	ldi	r18, 0x01	; 1
    507e:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    5082:	88 23       	and	r24, r24
    5084:	49 f4       	brne	.+18     	; 0x5098 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe8>
    5086:	f4 01       	movw	r30, r8
    5088:	13 82       	std	Z+3, r1	; 0x03
    508a:	12 82       	std	Z+2, r1	; 0x02
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    508c:	82 e7       	ldi	r24, 0x72	; 114
    508e:	92 e0       	ldi	r25, 0x02	; 2
    5090:	91 83       	std	Z+1, r25	; 0x01
    5092:	80 83       	st	Z, r24
    5094:	15 82       	std	Z+5, r1	; 0x05
    5096:	65 c0       	rjmp	.+202    	; 0x5162 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1b2>
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    5098:	e0 0e       	add	r14, r16
    509a:	f1 1e       	adc	r15, r17

    // we reuse the objects, close it.
    parent->close();
    509c:	c6 01       	movw	r24, r12
    509e:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>
    50a2:	9c 2d       	mov	r25, r12
    50a4:	8d 2d       	mov	r24, r13

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    50a6:	65 01       	movw	r12, r10
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    50a8:	a9 2e       	mov	r10, r25
    50aa:	b8 2e       	mov	r11, r24
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    50ac:	c7 01       	movw	r24, r14
    50ae:	6f e2       	ldi	r22, 0x2F	; 47
    50b0:	70 e0       	ldi	r23, 0x00	; 0
    50b2:	0e 94 26 5a 	call	0xb44c	; 0xb44c <strchr>
    50b6:	00 97       	sbiw	r24, 0x00	; 0
    50b8:	09 f0       	breq	.+2      	; 0x50bc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x10c>
    50ba:	bd cf       	rjmp	.-134    	; 0x5036 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x86>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    50bc:	e4 18       	sub	r14, r4
    50be:	f5 08       	sbc	r15, r5
    50c0:	f1 01       	movw	r30, r2
    50c2:	f1 82       	std	Z+1, r15	; 0x01
    50c4:	e0 82       	st	Z, r14
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    50c6:	f6 01       	movw	r30, r12
    50c8:	82 81       	ldd	r24, Z+2	; 0x02
    50ca:	93 81       	ldd	r25, Z+3	; 0x03
    50cc:	f4 01       	movw	r30, r8
    50ce:	93 83       	std	Z+3, r25	; 0x03
    50d0:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    50d2:	82 e7       	ldi	r24, 0x72	; 114
    50d4:	92 e0       	ldi	r25, 0x02	; 2
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
    50da:	f6 01       	movw	r30, r12
    50dc:	84 81       	ldd	r24, Z+4	; 0x04
    50de:	f4 01       	movw	r30, r8
    50e0:	84 83       	std	Z+4, r24	; 0x04
    50e2:	f6 01       	movw	r30, r12
    50e4:	85 81       	ldd	r24, Z+5	; 0x05
    50e6:	f4 01       	movw	r30, r8
    50e8:	85 83       	std	Z+5, r24	; 0x05
    50ea:	f6 01       	movw	r30, r12
    50ec:	86 81       	ldd	r24, Z+6	; 0x06
    50ee:	97 81       	ldd	r25, Z+7	; 0x07
    50f0:	a0 85       	ldd	r26, Z+8	; 0x08
    50f2:	b1 85       	ldd	r27, Z+9	; 0x09
    50f4:	f4 01       	movw	r30, r8
    50f6:	86 83       	std	Z+6, r24	; 0x06
    50f8:	97 83       	std	Z+7, r25	; 0x07
    50fa:	a0 87       	std	Z+8, r26	; 0x08
    50fc:	b1 87       	std	Z+9, r27	; 0x09
    50fe:	f6 01       	movw	r30, r12
    5100:	82 85       	ldd	r24, Z+10	; 0x0a
    5102:	93 85       	ldd	r25, Z+11	; 0x0b
    5104:	a4 85       	ldd	r26, Z+12	; 0x0c
    5106:	b5 85       	ldd	r27, Z+13	; 0x0d
    5108:	f4 01       	movw	r30, r8
    510a:	82 87       	std	Z+10, r24	; 0x0a
    510c:	93 87       	std	Z+11, r25	; 0x0b
    510e:	a4 87       	std	Z+12, r26	; 0x0c
    5110:	b5 87       	std	Z+13, r27	; 0x0d
    5112:	f6 01       	movw	r30, r12
    5114:	86 85       	ldd	r24, Z+14	; 0x0e
    5116:	97 85       	ldd	r25, Z+15	; 0x0f
    5118:	a0 89       	ldd	r26, Z+16	; 0x10
    511a:	b1 89       	ldd	r27, Z+17	; 0x11
    511c:	f4 01       	movw	r30, r8
    511e:	86 87       	std	Z+14, r24	; 0x0e
    5120:	97 87       	std	Z+15, r25	; 0x0f
    5122:	a0 8b       	std	Z+16, r26	; 0x10
    5124:	b1 8b       	std	Z+17, r27	; 0x11
    5126:	f6 01       	movw	r30, r12
    5128:	82 89       	ldd	r24, Z+18	; 0x12
    512a:	f4 01       	movw	r30, r8
    512c:	82 8b       	std	Z+18, r24	; 0x12
    512e:	f6 01       	movw	r30, r12
    5130:	83 89       	ldd	r24, Z+19	; 0x13
    5132:	94 89       	ldd	r25, Z+20	; 0x14
    5134:	a5 89       	ldd	r26, Z+21	; 0x15
    5136:	b6 89       	ldd	r27, Z+22	; 0x16
    5138:	f4 01       	movw	r30, r8
    513a:	83 8b       	std	Z+19, r24	; 0x13
    513c:	94 8b       	std	Z+20, r25	; 0x14
    513e:	a5 8b       	std	Z+21, r26	; 0x15
    5140:	b6 8b       	std	Z+22, r27	; 0x16
    5142:	f6 01       	movw	r30, r12
    5144:	87 89       	ldd	r24, Z+23	; 0x17
    5146:	90 8d       	ldd	r25, Z+24	; 0x18
    5148:	a1 8d       	ldd	r26, Z+25	; 0x19
    514a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    514c:	f4 01       	movw	r30, r8
    514e:	87 8b       	std	Z+23, r24	; 0x17
    5150:	90 8f       	std	Z+24, r25	; 0x18
    5152:	a1 8f       	std	Z+25, r26	; 0x19
    5154:	b2 8f       	std	Z+26, r27	; 0x1a
    5156:	f6 01       	movw	r30, r12
    5158:	83 8d       	ldd	r24, Z+27	; 0x1b
    515a:	94 8d       	ldd	r25, Z+28	; 0x1c
    515c:	f4 01       	movw	r30, r8
    515e:	94 8f       	std	Z+28, r25	; 0x1c
    5160:	83 8f       	std	Z+27, r24	; 0x1b
  // parent is now the parent diretory of the file!
  return *parent;
}
    5162:	c4 01       	movw	r24, r8
    5164:	c9 5b       	subi	r28, 0xB9	; 185
    5166:	df 4f       	sbci	r29, 0xFF	; 255
    5168:	0f b6       	in	r0, 0x3f	; 63
    516a:	f8 94       	cli
    516c:	de bf       	out	0x3e, r29	; 62
    516e:	0f be       	out	0x3f, r0	; 63
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	df 90       	pop	r13
    5180:	cf 90       	pop	r12
    5182:	bf 90       	pop	r11
    5184:	af 90       	pop	r10
    5186:	9f 90       	pop	r9
    5188:	8f 90       	pop	r8
    518a:	7f 90       	pop	r7
    518c:	5f 90       	pop	r5
    518e:	4f 90       	pop	r4
    5190:	3f 90       	pop	r3
    5192:	2f 90       	pop	r2
    5194:	08 95       	ret

00005196 <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    5196:	df 92       	push	r13
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	c6 57       	subi	r28, 0x76	; 118
    51aa:	d0 40       	sbci	r29, 0x00	; 0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	7c 01       	movw	r14, r24
    51b8:	8a 01       	movw	r16, r20
    51ba:	d2 2e       	mov	r13, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    51bc:	ce 01       	movw	r24, r28
    51be:	86 5a       	subi	r24, 0xA6	; 166
    51c0:	9f 4f       	sbci	r25, 0xFF	; 255
    51c2:	9e 01       	movw	r18, r28
    51c4:	25 5c       	subi	r18, 0xC5	; 197
    51c6:	3f 4f       	sbci	r19, 0xFF	; 255
    51c8:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    51cc:	8b ad       	sts	0x6b, r24
    51ce:	9c ad       	sts	0x6c, r25
    51d0:	08 0f       	add	r16, r24
    51d2:	19 1f       	adc	r17, r25

  if (! filepath[0]) {
    51d4:	f8 01       	movw	r30, r16
    51d6:	80 81       	ld	r24, Z
    51d8:	88 23       	and	r24, r24
    51da:	09 f0       	breq	.+2      	; 0x51de <_ZN5SDLib7SDClass4openEPKch+0x48>
    51dc:	57 c0       	rjmp	.+174    	; 0x528c <_ZN5SDLib7SDClass4openEPKch+0xf6>
    51de:	6e 96       	adiw	r28, 0x1e	; 30
    51e0:	8e ad       	sts	0x6e, r24
    51e2:	9f ad       	sts	0x6f, r25
    51e4:	6e 97       	sbiw	r28, 0x1e	; 30
    51e6:	99 a3       	lds	r25, 0x59
    51e8:	88 a3       	lds	r24, 0x58
    51ea:	82 e7       	ldi	r24, 0x72	; 114
    51ec:	92 e0       	ldi	r25, 0x02	; 2
    51ee:	9f 8f       	std	Y+31, r25	; 0x1f
    51f0:	8e 8f       	std	Y+30, r24	; 0x1e
    51f2:	6f 96       	adiw	r28, 0x1f	; 31
    51f4:	8f ad       	sts	0x6f, r24
    51f6:	6f 97       	sbiw	r28, 0x1f	; 31
    51f8:	8a a3       	lds	r24, 0x5a
    51fa:	a0 96       	adiw	r28, 0x20	; 32
    51fc:	8f ad       	sts	0x6f, r24
    51fe:	a0 97       	sbiw	r28, 0x20	; 32
    5200:	8b a3       	lds	r24, 0x5b
    5202:	a4 96       	adiw	r28, 0x24	; 36
    5204:	8c ad       	sts	0x6c, r24
    5206:	9d ad       	sts	0x6d, r25
    5208:	ae ad       	sts	0x6e, r26
    520a:	bf ad       	sts	0x6f, r27
    520c:	a4 97       	sbiw	r28, 0x24	; 36
    520e:	8c a3       	lds	r24, 0x5c
    5210:	9d a3       	lds	r25, 0x5d
    5212:	ae a3       	lds	r26, 0x5e
    5214:	bf a3       	lds	r27, 0x5f
    5216:	a8 96       	adiw	r28, 0x28	; 40
    5218:	8c ad       	sts	0x6c, r24
    521a:	9d ad       	sts	0x6d, r25
    521c:	ae ad       	sts	0x6e, r26
    521e:	bf ad       	sts	0x6f, r27
    5220:	a8 97       	sbiw	r28, 0x28	; 40
    5222:	88 a7       	lds	r24, 0x78
    5224:	99 a7       	lds	r25, 0x79
    5226:	aa a7       	lds	r26, 0x7a
    5228:	bb a7       	lds	r27, 0x7b
    522a:	ac 96       	adiw	r28, 0x2c	; 44
    522c:	8c ad       	sts	0x6c, r24
    522e:	9d ad       	sts	0x6d, r25
    5230:	ae ad       	sts	0x6e, r26
    5232:	bf ad       	sts	0x6f, r27
    5234:	ac 97       	sbiw	r28, 0x2c	; 44
    5236:	8c a7       	lds	r24, 0x7c
    5238:	9d a7       	lds	r25, 0x7d
    523a:	ae a7       	lds	r26, 0x7e
    523c:	bf a7       	lds	r27, 0x7f
    523e:	ad 96       	adiw	r28, 0x2d	; 45
    5240:	8f ad       	sts	0x6f, r24
    5242:	ad 97       	sbiw	r28, 0x2d	; 45
    5244:	88 ab       	sts	0x58, r24
    5246:	e1 96       	adiw	r28, 0x31	; 49
    5248:	8c ad       	sts	0x6c, r24
    524a:	9d ad       	sts	0x6d, r25
    524c:	ae ad       	sts	0x6e, r26
    524e:	bf ad       	sts	0x6f, r27
    5250:	e1 97       	sbiw	r28, 0x31	; 49
    5252:	89 ab       	sts	0x59, r24
    5254:	9a ab       	sts	0x5a, r25
    5256:	ab ab       	sts	0x5b, r26
    5258:	bc ab       	sts	0x5c, r27
    525a:	e5 96       	adiw	r28, 0x35	; 53
    525c:	8c ad       	sts	0x6c, r24
    525e:	9d ad       	sts	0x6d, r25
    5260:	ae ad       	sts	0x6e, r26
    5262:	bf ad       	sts	0x6f, r27
    5264:	e5 97       	sbiw	r28, 0x35	; 53
    5266:	8d ab       	sts	0x5d, r24
    5268:	9e ab       	sts	0x5e, r25
    526a:	af ab       	sts	0x5f, r26
    526c:	b8 af       	sts	0x78, r27
    526e:	e7 96       	adiw	r28, 0x37	; 55
    5270:	8e ad       	sts	0x6e, r24
    5272:	9f ad       	sts	0x6f, r25
    5274:	e7 97       	sbiw	r28, 0x37	; 55
    5276:	9a af       	sts	0x7a, r25
    5278:	89 af       	sts	0x79, r24
    // it was the directory itself!
    return File(parentdir, "/");
    527a:	c7 01       	movw	r24, r14
    527c:	be 01       	movw	r22, r28
    527e:	62 5e       	subi	r22, 0xE2	; 226
    5280:	7f 4f       	sbci	r23, 0xFF	; 255
    5282:	4c e6       	ldi	r20, 0x6C	; 108
    5284:	52 e0       	ldi	r21, 0x02	; 2
    5286:	0e 94 c4 24 	call	0x4988	; 0x4988 <_ZN5SDLib4FileC1E6SdFilePKc>
    528a:	8b c0       	rjmp	.+278    	; 0x53a2 <_ZN5SDLib7SDClass4openEPKch+0x20c>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    528c:	21 96       	adiw	r28, 0x01	; 1
    528e:	1f ae       	sts	0xbf, r17
    5290:	1e ae       	sts	0xbe, r17
    5292:	21 97       	sbiw	r28, 0x01	; 1
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    5294:	82 e7       	ldi	r24, 0x72	; 114
    5296:	92 e0       	ldi	r25, 0x02	; 2
    5298:	9e af       	sts	0x7e, r25
    529a:	8d af       	sts	0x7d, r24
    529c:	23 96       	adiw	r28, 0x03	; 3
    529e:	1f ae       	sts	0xbf, r17
    52a0:	23 97       	sbiw	r28, 0x03	; 3

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    52a2:	a0 96       	adiw	r28, 0x20	; 32
    52a4:	8f ad       	sts	0x6f, r24
    52a6:	a0 97       	sbiw	r28, 0x20	; 32
    52a8:	88 23       	and	r24, r24
    52aa:	21 f4       	brne	.+8      	; 0x52b4 <_ZN5SDLib7SDClass4openEPKch+0x11e>
    return File();
    52ac:	c7 01       	movw	r24, r14
    52ae:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
    52b2:	77 c0       	rjmp	.+238    	; 0x53a2 <_ZN5SDLib7SDClass4openEPKch+0x20c>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    52b4:	ce 01       	movw	r24, r28
    52b6:	cd 96       	adiw	r24, 0x3d	; 61
    52b8:	be 01       	movw	r22, r28
    52ba:	66 5a       	subi	r22, 0xA6	; 166
    52bc:	7f 4f       	sbci	r23, 0xFF	; 255
    52be:	a8 01       	movw	r20, r16
    52c0:	2d 2d       	mov	r18, r13
    52c2:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>

  if ( ! file.open(parentdir, filepath, mode)) {
    52c6:	88 23       	and	r24, r24
    52c8:	21 f4       	brne	.+8      	; 0x52d2 <_ZN5SDLib7SDClass4openEPKch+0x13c>
    return File();
    52ca:	c7 01       	movw	r24, r14
    52cc:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
    52d0:	68 c0       	rjmp	.+208    	; 0x53a2 <_ZN5SDLib7SDClass4openEPKch+0x20c>
  }
  // close the parent
  parentdir.close();
    52d2:	ce 01       	movw	r24, r28
    52d4:	86 5a       	subi	r24, 0xA6	; 166
    52d6:	9f 4f       	sbci	r25, 0xFF	; 255
    52d8:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    52dc:	8d 2d       	mov	r24, r13
    52de:	86 70       	andi	r24, 0x06	; 6
    52e0:	86 30       	cpi	r24, 0x06	; 6
    52e2:	51 f4       	brne	.+20     	; 0x52f8 <_ZN5SDLib7SDClass4openEPKch+0x162>
    file.seekSet(file.fileSize());
    52e4:	64 96       	adiw	r28, 0x14	; 20
    52e6:	4c ad       	sts	0x6c, r20
    52e8:	5d ad       	sts	0x6d, r21
    52ea:	6e ad       	sts	0x6e, r22
    52ec:	7f ad       	sts	0x6f, r23
    52ee:	64 97       	sbiw	r28, 0x14	; 20
    52f0:	ce 01       	movw	r24, r28
    52f2:	cd 96       	adiw	r24, 0x3d	; 61
    52f4:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    52f8:	21 96       	adiw	r28, 0x01	; 1
    52fa:	8e ad       	sts	0x6e, r24
    52fc:	9f ad       	sts	0x6f, r25
    52fe:	21 97       	sbiw	r28, 0x01	; 1
    5300:	9c 83       	std	Y+4, r25	; 0x04
    5302:	8b 83       	std	Y+3, r24	; 0x03
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    5304:	82 e7       	ldi	r24, 0x72	; 114
    5306:	92 e0       	ldi	r25, 0x02	; 2
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	22 96       	adiw	r28, 0x02	; 2
    530e:	8f ad       	sts	0x6f, r24
    5310:	22 97       	sbiw	r28, 0x02	; 2
    5312:	8d 83       	std	Y+5, r24	; 0x05
    5314:	23 96       	adiw	r28, 0x03	; 3
    5316:	8f ad       	sts	0x6f, r24
    5318:	23 97       	sbiw	r28, 0x03	; 3
    531a:	8e 83       	std	Y+6, r24	; 0x06
    531c:	27 96       	adiw	r28, 0x07	; 7
    531e:	8c ad       	sts	0x6c, r24
    5320:	9d ad       	sts	0x6d, r25
    5322:	ae ad       	sts	0x6e, r26
    5324:	bf ad       	sts	0x6f, r27
    5326:	27 97       	sbiw	r28, 0x07	; 7
    5328:	8f 83       	std	Y+7, r24	; 0x07
    532a:	98 87       	std	Y+8, r25	; 0x08
    532c:	a9 87       	std	Y+9, r26	; 0x09
    532e:	ba 87       	std	Y+10, r27	; 0x0a
    5330:	2b 96       	adiw	r28, 0x0b	; 11
    5332:	8c ad       	sts	0x6c, r24
    5334:	9d ad       	sts	0x6d, r25
    5336:	ae ad       	sts	0x6e, r26
    5338:	bf ad       	sts	0x6f, r27
    533a:	2b 97       	sbiw	r28, 0x0b	; 11
    533c:	8b 87       	std	Y+11, r24	; 0x0b
    533e:	9c 87       	std	Y+12, r25	; 0x0c
    5340:	ad 87       	std	Y+13, r26	; 0x0d
    5342:	be 87       	std	Y+14, r27	; 0x0e
    5344:	2f 96       	adiw	r28, 0x0f	; 15
    5346:	8c ad       	sts	0x6c, r24
    5348:	9d ad       	sts	0x6d, r25
    534a:	ae ad       	sts	0x6e, r26
    534c:	bf ad       	sts	0x6f, r27
    534e:	2f 97       	sbiw	r28, 0x0f	; 15
    5350:	8f 87       	std	Y+15, r24	; 0x0f
    5352:	98 8b       	std	Y+16, r25	; 0x10
    5354:	a9 8b       	std	Y+17, r26	; 0x11
    5356:	ba 8b       	std	Y+18, r27	; 0x12
    5358:	60 96       	adiw	r28, 0x10	; 16
    535a:	8f ad       	sts	0x6f, r24
    535c:	60 97       	sbiw	r28, 0x10	; 16
    535e:	8b 8b       	std	Y+19, r24	; 0x13
    5360:	64 96       	adiw	r28, 0x14	; 20
    5362:	8c ad       	sts	0x6c, r24
    5364:	9d ad       	sts	0x6d, r25
    5366:	ae ad       	sts	0x6e, r26
    5368:	bf ad       	sts	0x6f, r27
    536a:	64 97       	sbiw	r28, 0x14	; 20
    536c:	8c 8b       	std	Y+20, r24	; 0x14
    536e:	9d 8b       	std	Y+21, r25	; 0x15
    5370:	ae 8b       	std	Y+22, r26	; 0x16
    5372:	bf 8b       	std	Y+23, r27	; 0x17
    5374:	68 96       	adiw	r28, 0x18	; 24
    5376:	8c ad       	sts	0x6c, r24
    5378:	9d ad       	sts	0x6d, r25
    537a:	ae ad       	sts	0x6e, r26
    537c:	bf ad       	sts	0x6f, r27
    537e:	68 97       	sbiw	r28, 0x18	; 24
    5380:	88 8f       	std	Y+24, r24	; 0x18
    5382:	99 8f       	std	Y+25, r25	; 0x19
    5384:	aa 8f       	std	Y+26, r26	; 0x1a
    5386:	bb 8f       	std	Y+27, r27	; 0x1b
    5388:	6a 96       	adiw	r28, 0x1a	; 26
    538a:	8e ad       	sts	0x6e, r24
    538c:	9f ad       	sts	0x6f, r25
    538e:	6a 97       	sbiw	r28, 0x1a	; 26
    5390:	9d 8f       	std	Y+29, r25	; 0x1d
    5392:	8c 8f       	std	Y+28, r24	; 0x1c
  return File(file, filepath);
    5394:	c7 01       	movw	r24, r14
    5396:	be 01       	movw	r22, r28
    5398:	6f 5f       	subi	r22, 0xFF	; 255
    539a:	7f 4f       	sbci	r23, 0xFF	; 255
    539c:	a8 01       	movw	r20, r16
    539e:	0e 94 c4 24 	call	0x4988	; 0x4988 <_ZN5SDLib4FileC1E6SdFilePKc>
}
    53a2:	c7 01       	movw	r24, r14
    53a4:	ca 58       	subi	r28, 0x8A	; 138
    53a6:	df 4f       	sbci	r29, 0xFF	; 255
    53a8:	0f b6       	in	r0, 0x3f	; 63
    53aa:	f8 94       	cli
    53ac:	de bf       	out	0x3e, r29	; 62
    53ae:	0f be       	out	0x3f, r0	; 63
    53b0:	cd bf       	out	0x3d, r28	; 61
    53b2:	df 91       	pop	r29
    53b4:	cf 91       	pop	r28
    53b6:	1f 91       	pop	r17
    53b8:	0f 91       	pop	r16
    53ba:	ff 90       	pop	r15
    53bc:	ef 90       	pop	r14
    53be:	df 90       	pop	r13
    53c0:	08 95       	ret

000053c2 <_ZN5SDLib7SDClass6existsEPKc>:
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    53c2:	9c 01       	movw	r18, r24
    53c4:	26 5d       	subi	r18, 0xD6	; 214
    53c6:	3f 4f       	sbci	r19, 0xFF	; 255
    53c8:	cb 01       	movw	r24, r22
    53ca:	b9 01       	movw	r22, r18
    53cc:	4e eb       	ldi	r20, 0xBE	; 190
    53ce:	55 e2       	ldi	r21, 0x25	; 37
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_>
}
    53d8:	08 95       	ret

000053da <_ZN5SDLib7SDClass5mkdirEPKc>:
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
    53da:	9c 01       	movw	r18, r24
    53dc:	26 5d       	subi	r18, 0xD6	; 214
    53de:	3f 4f       	sbci	r19, 0xFF	; 255
    53e0:	cb 01       	movw	r24, r22
    53e2:	b9 01       	movw	r22, r18
    53e4:	40 e2       	ldi	r20, 0x20	; 32
    53e6:	56 e2       	ldi	r21, 0x26	; 38
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_>
}
    53f0:	08 95       	ret

000053f2 <_ZN5SDLib7SDClass5rmdirEPKc>:
    Remove a single directory or a heirarchy of directories.

    A rough equivalent to `rm -rf`.
  
   */
  return walkPath(filepath, root, callback_rmdir);
    53f2:	9c 01       	movw	r18, r24
    53f4:	26 5d       	subi	r18, 0xD6	; 214
    53f6:	3f 4f       	sbci	r19, 0xFF	; 255
    53f8:	cb 01       	movw	r24, r22
    53fa:	b9 01       	movw	r22, r18
    53fc:	4a ee       	ldi	r20, 0xEA	; 234
    53fe:	55 e2       	ldi	r21, 0x25	; 37
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_>
}
    5408:	08 95       	ret

0000540a <_ZN5SDLib7SDClass6removeEPKc>:

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
    540a:	9c 01       	movw	r18, r24
    540c:	26 5d       	subi	r18, 0xD6	; 214
    540e:	3f 4f       	sbci	r19, 0xFF	; 255
    5410:	cb 01       	movw	r24, r22
    5412:	b9 01       	movw	r22, r18
    5414:	49 e1       	ldi	r20, 0x19	; 25
    5416:	56 e2       	ldi	r21, 0x26	; 38
    5418:	20 e0       	ldi	r18, 0x00	; 0
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <_ZN5SDLib8walkPathEPKcR6SdFilePFhS3_S1_hPvES4_>
}
    5420:	08 95       	ret

00005422 <_ZN5SDLib4File12openNextFileEh>:


// allows you to recurse into a directory
File File::openNextFile(uint8_t mode) {
    5422:	df 92       	push	r13
    5424:	ef 92       	push	r14
    5426:	ff 92       	push	r15
    5428:	0f 93       	push	r16
    542a:	1f 93       	push	r17
    542c:	cf 93       	push	r28
    542e:	df 93       	push	r29
    5430:	cd b7       	in	r28, 0x3d	; 61
    5432:	de b7       	in	r29, 0x3e	; 62
    5434:	c7 56       	subi	r28, 0x67	; 103
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	0f b6       	in	r0, 0x3f	; 63
    543a:	f8 94       	cli
    543c:	de bf       	out	0x3e, r29	; 62
    543e:	0f be       	out	0x3f, r0	; 63
    5440:	cd bf       	out	0x3d, r28	; 61
    5442:	7c 01       	movw	r14, r24
    5444:	8b 01       	movw	r16, r22
    5446:	d4 2e       	mov	r13, r20
  dir_t p;

  //Serial.print("\t\treading dir...");
  while (_file->readDir(&p) > 0) {
    5448:	7f c0       	rjmp	.+254    	; 0x5548 <_ZN5SDLib4File12openNextFileEh+0x126>

    // done if past last used entry
    if (p.name[0] == DIR_NAME_FREE) {
    544a:	29 96       	adiw	r28, 0x09	; 9
    544c:	8f ad       	sts	0x6f, r24
    544e:	29 97       	sbiw	r28, 0x09	; 9
    5450:	88 23       	and	r24, r24
    5452:	21 f4       	brne	.+8      	; 0x545c <_ZN5SDLib4File12openNextFileEh+0x3a>
      //Serial.println("end");
      return File();
    5454:	c7 01       	movw	r24, r14
    5456:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
    545a:	84 c0       	rjmp	.+264    	; 0x5564 <_ZN5SDLib4File12openNextFileEh+0x142>
    }

    // skip deleted entry and entries for . and  ..
    if (p.name[0] == DIR_NAME_DELETED || p.name[0] == '.') {
    545c:	85 3e       	cpi	r24, 0xE5	; 229
    545e:	09 f4       	brne	.+2      	; 0x5462 <_ZN5SDLib4File12openNextFileEh+0x40>
    5460:	73 c0       	rjmp	.+230    	; 0x5548 <_ZN5SDLib4File12openNextFileEh+0x126>
    5462:	8e 32       	cpi	r24, 0x2E	; 46
    5464:	09 f4       	brne	.+2      	; 0x5468 <_ZN5SDLib4File12openNextFileEh+0x46>
    5466:	70 c0       	rjmp	.+224    	; 0x5548 <_ZN5SDLib4File12openNextFileEh+0x126>
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
}
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    5468:	64 96       	adiw	r28, 0x14	; 20
    546a:	8f ad       	sts	0x6f, r24
    546c:	64 97       	sbiw	r28, 0x14	; 20
      //Serial.println("dots");
      continue;
    }

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(&p)) {
    546e:	83 fd       	sbrc	r24, 3
    5470:	6b c0       	rjmp	.+214    	; 0x5548 <_ZN5SDLib4File12openNextFileEh+0x126>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5472:	1e a6       	lds	r17, 0xbe
    5474:	1d a6       	lds	r17, 0xbd
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    5476:	82 e7       	ldi	r24, 0x72	; 114
    5478:	92 e0       	ldi	r25, 0x02	; 2
    547a:	9c a7       	lds	r25, 0x7c
    547c:	8b a7       	lds	r24, 0x7b
    547e:	18 aa       	sts	0x98, r17
    }

    // print file name with possible blank fill
    SdFile f;
    char name[13];
    _file->dirName(p, name);
    5480:	ce 01       	movw	r24, r28
    5482:	88 5b       	subi	r24, 0xB8	; 184
    5484:	9f 4f       	sbci	r25, 0xFF	; 255
    5486:	be 01       	movw	r22, r28
    5488:	62 5e       	subi	r22, 0xE2	; 226
    548a:	7f 4f       	sbci	r23, 0xFF	; 255
    548c:	0e 94 11 32 	call	0x6422	; 0x6422 <_ZN6SdFile7dirNameERK14directoryEntryPc>
    //Serial.print("try to open file ");
    //Serial.println(name);

    if (f.open(_file, name, mode)) {
    5490:	f8 01       	movw	r30, r16
    5492:	61 8d       	ldd	r22, Z+25	; 0x19
    5494:	72 8d       	ldd	r23, Z+26	; 0x1a
    5496:	ce 01       	movw	r24, r28
    5498:	8b 96       	adiw	r24, 0x2b	; 43
    549a:	ae 01       	movw	r20, r28
    549c:	42 5e       	subi	r20, 0xE2	; 226
    549e:	5f 4f       	sbci	r21, 0xFF	; 255
    54a0:	2d 2d       	mov	r18, r13
    54a2:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    54a6:	88 23       	and	r24, r24
    54a8:	09 f4       	brne	.+2      	; 0x54ac <_ZN5SDLib4File12openNextFileEh+0x8a>
    54aa:	4a c0       	rjmp	.+148    	; 0x5540 <_ZN5SDLib4File12openNextFileEh+0x11e>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    54ac:	8d a5       	lds	r24, 0x6d
    54ae:	9e a5       	lds	r25, 0x6e
    54b0:	9c 83       	std	Y+4, r25	; 0x04
    54b2:	8b 83       	std	Y+3, r24	; 0x03
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    54b4:	82 e7       	ldi	r24, 0x72	; 114
    54b6:	92 e0       	ldi	r25, 0x02	; 2
    54b8:	9a 83       	std	Y+2, r25	; 0x02
    54ba:	89 83       	std	Y+1, r24	; 0x01
    54bc:	8f a5       	lds	r24, 0x6f
    54be:	8d 83       	std	Y+5, r24	; 0x05
    54c0:	88 a9       	sts	0x48, r24
    54c2:	8e 83       	std	Y+6, r24	; 0x06
    54c4:	89 a9       	sts	0x49, r24
    54c6:	9a a9       	sts	0x4a, r25
    54c8:	ab a9       	sts	0x4b, r26
    54ca:	bc a9       	sts	0x4c, r27
    54cc:	8f 83       	std	Y+7, r24	; 0x07
    54ce:	98 87       	std	Y+8, r25	; 0x08
    54d0:	a9 87       	std	Y+9, r26	; 0x09
    54d2:	ba 87       	std	Y+10, r27	; 0x0a
    54d4:	8d a9       	sts	0x4d, r24
    54d6:	9e a9       	sts	0x4e, r25
    54d8:	af a9       	sts	0x4f, r26
    54da:	b8 ad       	sts	0x68, r27
    54dc:	8b 87       	std	Y+11, r24	; 0x0b
    54de:	9c 87       	std	Y+12, r25	; 0x0c
    54e0:	ad 87       	std	Y+13, r26	; 0x0d
    54e2:	be 87       	std	Y+14, r27	; 0x0e
    54e4:	89 ad       	sts	0x69, r24
    54e6:	9a ad       	sts	0x6a, r25
    54e8:	ab ad       	sts	0x6b, r26
    54ea:	bc ad       	sts	0x6c, r27
    54ec:	8f 87       	std	Y+15, r24	; 0x0f
    54ee:	98 8b       	std	Y+16, r25	; 0x10
    54f0:	a9 8b       	std	Y+17, r26	; 0x11
    54f2:	ba 8b       	std	Y+18, r27	; 0x12
    54f4:	8d ad       	sts	0x6d, r24
    54f6:	8b 8b       	std	Y+19, r24	; 0x13
    54f8:	22 96       	adiw	r28, 0x02	; 2
    54fa:	8c ad       	sts	0x6c, r24
    54fc:	9d ad       	sts	0x6d, r25
    54fe:	ae ad       	sts	0x6e, r26
    5500:	bf ad       	sts	0x6f, r27
    5502:	22 97       	sbiw	r28, 0x02	; 2
    5504:	8c 8b       	std	Y+20, r24	; 0x14
    5506:	9d 8b       	std	Y+21, r25	; 0x15
    5508:	ae 8b       	std	Y+22, r26	; 0x16
    550a:	bf 8b       	std	Y+23, r27	; 0x17
    550c:	26 96       	adiw	r28, 0x06	; 6
    550e:	8c ad       	sts	0x6c, r24
    5510:	9d ad       	sts	0x6d, r25
    5512:	ae ad       	sts	0x6e, r26
    5514:	bf ad       	sts	0x6f, r27
    5516:	26 97       	sbiw	r28, 0x06	; 6
    5518:	88 8f       	std	Y+24, r24	; 0x18
    551a:	99 8f       	std	Y+25, r25	; 0x19
    551c:	aa 8f       	std	Y+26, r26	; 0x1a
    551e:	bb 8f       	std	Y+27, r27	; 0x1b
    5520:	28 96       	adiw	r28, 0x08	; 8
    5522:	8e ad       	sts	0x6e, r24
    5524:	9f ad       	sts	0x6f, r25
    5526:	28 97       	sbiw	r28, 0x08	; 8
    5528:	9d 8f       	std	Y+29, r25	; 0x1d
    552a:	8c 8f       	std	Y+28, r24	; 0x1c
      //Serial.println("OK!");
      return File(f, name);    
    552c:	c7 01       	movw	r24, r14
    552e:	be 01       	movw	r22, r28
    5530:	6f 5f       	subi	r22, 0xFF	; 255
    5532:	7f 4f       	sbci	r23, 0xFF	; 255
    5534:	ae 01       	movw	r20, r28
    5536:	42 5e       	subi	r20, 0xE2	; 226
    5538:	5f 4f       	sbci	r21, 0xFF	; 255
    553a:	0e 94 c4 24 	call	0x4988	; 0x4988 <_ZN5SDLib4FileC1E6SdFilePKc>
    553e:	12 c0       	rjmp	.+36     	; 0x5564 <_ZN5SDLib4File12openNextFileEh+0x142>
    } else {
      //Serial.println("ugh");
      return File();
    5540:	c7 01       	movw	r24, r14
    5542:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
    5546:	0e c0       	rjmp	.+28     	; 0x5564 <_ZN5SDLib4File12openNextFileEh+0x142>
// allows you to recurse into a directory
File File::openNextFile(uint8_t mode) {
  dir_t p;

  //Serial.print("\t\treading dir...");
  while (_file->readDir(&p) > 0) {
    5548:	f8 01       	movw	r30, r16
    554a:	81 8d       	ldd	r24, Z+25	; 0x19
    554c:	92 8d       	ldd	r25, Z+26	; 0x1a
    554e:	be 01       	movw	r22, r28
    5550:	68 5b       	subi	r22, 0xB8	; 184
    5552:	7f 4f       	sbci	r23, 0xFF	; 255
    5554:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <_ZN6SdFile7readDirEP14directoryEntry>
    5558:	18 16       	cp	r1, r24
    555a:	0c f4       	brge	.+2      	; 0x555e <_ZN5SDLib4File12openNextFileEh+0x13c>
    555c:	76 cf       	rjmp	.-276    	; 0x544a <_ZN5SDLib4File12openNextFileEh+0x28>
      return File();
    }
  }

  //Serial.println("nothing");
  return File();
    555e:	c7 01       	movw	r24, r14
    5560:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
}
    5564:	c7 01       	movw	r24, r14
    5566:	c9 59       	subi	r28, 0x99	; 153
    5568:	df 4f       	sbci	r29, 0xFF	; 255
    556a:	0f b6       	in	r0, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	de bf       	out	0x3e, r29	; 62
    5570:	0f be       	out	0x3f, r0	; 63
    5572:	cd bf       	out	0x3d, r28	; 61
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	1f 91       	pop	r17
    557a:	0f 91       	pop	r16
    557c:	ff 90       	pop	r15
    557e:	ef 90       	pop	r14
    5580:	df 90       	pop	r13
    5582:	08 95       	ret

00005584 <_ZN5SDLib4File15rewindDirectoryEv>:

void File::rewindDirectory(void) {  
    5584:	cf 93       	push	r28
    5586:	df 93       	push	r29
    5588:	ec 01       	movw	r28, r24
  if (isDirectory())
    558a:	0e 94 11 25 	call	0x4a22	; 0x4a22 <_ZN5SDLib4File11isDirectoryEv>
    558e:	88 23       	and	r24, r24
    5590:	51 f0       	breq	.+20     	; 0x55a6 <_ZN5SDLib4File15rewindDirectoryEv+0x22>
    _file->rewind();
    5592:	e9 8d       	ldd	r30, Y+25	; 0x19
    5594:	fa 8d       	ldd	r31, Y+26	; 0x1a
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    5596:	16 82       	std	Z+6, r1	; 0x06
    5598:	17 82       	std	Z+7, r1	; 0x07
    559a:	10 86       	std	Z+8, r1	; 0x08
    559c:	11 86       	std	Z+9, r1	; 0x09
    559e:	12 86       	std	Z+10, r1	; 0x0a
    55a0:	13 86       	std	Z+11, r1	; 0x0b
    55a2:	14 86       	std	Z+12, r1	; 0x0c
    55a4:	15 86       	std	Z+13, r1	; 0x0d
}
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	08 95       	ret

000055ac <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    55ac:	10 92 33 06 	sts	0x0633, r1
    55b0:	10 92 34 06 	sts	0x0634, r1
    55b4:	10 92 37 06 	sts	0x0637, r1
    55b8:	10 92 39 06 	sts	0x0639, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    55bc:	82 e0       	ldi	r24, 0x02	; 2
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	a0 e0       	ldi	r26, 0x00	; 0
    55c2:	b0 e0       	ldi	r27, 0x00	; 0
    55c4:	80 93 3a 06 	sts	0x063A, r24
    55c8:	90 93 3b 06 	sts	0x063B, r25
    55cc:	a0 93 3c 06 	sts	0x063C, r26
    55d0:	b0 93 3d 06 	sts	0x063D, r27
    55d4:	10 92 51 06 	sts	0x0651, r1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    55d8:	10 92 5b 06 	sts	0x065B, r1
    55dc:	10 92 5a 06 	sts	0x065A, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    55e0:	82 e7       	ldi	r24, 0x72	; 114
    55e2:	92 e0       	ldi	r25, 0x02	; 2
    55e4:	90 93 59 06 	sts	0x0659, r25
    55e8:	80 93 58 06 	sts	0x0658, r24
    55ec:	10 92 5d 06 	sts	0x065D, r1

SDClass SD;

};
    55f0:	08 95       	ret

000055f2 <_ZL7spiSendh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    55f2:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    55f4:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    55f6:	0d b4       	in	r0, 0x2d	; 45
    55f8:	07 fe       	sbrs	r0, 7
    55fa:	fd cf       	rjmp	.-6      	; 0x55f6 <_ZL7spiSendh+0x4>
    return SPDR;
    55fc:	8e b5       	in	r24, 0x2e	; 46
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
#endif
}
    55fe:	08 95       	ret

00005600 <_ZL6spiRecv>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    5600:	8f ef       	ldi	r24, 0xFF	; 255
    5602:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    5604:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    5606:	0d b4       	in	r0, 0x2d	; 45
    5608:	07 fe       	sbrs	r0, 7
    560a:	fd cf       	rjmp	.-6      	; 0x5606 <_ZL6spiRecv+0x6>
    return SPDR;
    560c:	8e b5       	in	r24, 0x2e	; 46
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
#endif
}
    560e:	08 95       	ret

00005610 <_ZN7Sd2Card14chipSelectHighEv>:
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    5610:	fc 01       	movw	r30, r24
    5612:	84 81       	ldd	r24, Z+4	; 0x04
    5614:	61 e0       	ldi	r22, 0x01	; 1
    5616:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    561a:	80 91 77 06 	lds	r24, 0x0677
    561e:	88 23       	and	r24, r24
    5620:	a1 f0       	breq	.+40     	; 0x564a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    chip_select_asserted = 0;
    5622:	10 92 77 06 	sts	0x0677, r1
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    5626:	80 91 87 08 	lds	r24, 0x0887
    562a:	88 23       	and	r24, r24
    562c:	71 f0       	breq	.+28     	; 0x564a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    562e:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    5630:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    5632:	80 91 87 08 	lds	r24, 0x0887
    5636:	81 30       	cpi	r24, 0x01	; 1
    5638:	29 f4       	brne	.+10     	; 0x5644 <_ZN7Sd2Card14chipSelectHighEv+0x34>
        SPI_AVR_EIMSK = interruptSave;
    563a:	80 91 85 08 	lds	r24, 0x0885
    563e:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    5640:	9f bf       	out	0x3f, r25	; 63
    5642:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    5644:	80 91 85 08 	lds	r24, 0x0885
    5648:	8f bf       	out	0x3f, r24	; 63
    564a:	08 95       	ret

0000564c <_ZN7Sd2Card13chipSelectLowEv>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    564c:	20 91 77 06 	lds	r18, 0x0677
    5650:	22 23       	and	r18, r18
    5652:	01 f5       	brne	.+64     	; 0x5694 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    chip_select_asserted = 1;
    5654:	21 e0       	ldi	r18, 0x01	; 1
    5656:	20 93 77 06 	sts	0x0677, r18
    565a:	30 91 78 06 	lds	r19, 0x0678
    565e:	20 91 79 06 	lds	r18, 0x0679

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    5662:	40 91 87 08 	lds	r20, 0x0887
    5666:	44 23       	and	r20, r20
    5668:	99 f0       	breq	.+38     	; 0x5690 <_ZN7Sd2Card13chipSelectLowEv+0x44>
      uint8_t sreg = SREG;
    566a:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    566c:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    566e:	50 91 87 08 	lds	r21, 0x0887
    5672:	51 30       	cpi	r21, 0x01	; 1
    5674:	59 f4       	brne	.+22     	; 0x568c <_ZN7Sd2Card13chipSelectLowEv+0x40>
        interruptSave = SPI_AVR_EIMSK;
    5676:	5d b3       	in	r21, 0x1d	; 29
    5678:	50 93 85 08 	sts	0x0885, r21
        SPI_AVR_EIMSK &= ~interruptMask;
    567c:	6d b3       	in	r22, 0x1d	; 29
    567e:	50 91 86 08 	lds	r21, 0x0886
    5682:	50 95       	com	r21
    5684:	56 23       	and	r21, r22
    5686:	5d bb       	out	0x1d, r21	; 29
        SREG = sreg;
    5688:	4f bf       	out	0x3f, r20	; 63
    568a:	02 c0       	rjmp	.+4      	; 0x5690 <_ZN7Sd2Card13chipSelectLowEv+0x44>
      } else
      #endif
      {
        interruptSave = sreg;
    568c:	40 93 85 08 	sts	0x0885, r20
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    5690:	3c bd       	out	0x2c, r19	; 44
    SPSR = settings.spsr;
    5692:	2d bd       	out	0x2d, r18	; 45
    SDCARD_SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    5694:	fc 01       	movw	r30, r24
    5696:	84 81       	ldd	r24, Z+4	; 0x04
    5698:	60 e0       	ldi	r22, 0x00	; 0
    569a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
}
    569e:	08 95       	ret

000056a0 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    56a0:	cf 93       	push	r28
    56a2:	df 93       	push	r29
    56a4:	ec 01       	movw	r28, r24
  if (inBlock_) {
    56a6:	8e 81       	ldd	r24, Y+6	; 0x06
    56a8:	88 23       	and	r24, r24
    56aa:	e1 f0       	breq	.+56     	; 0x56e4 <_ZN7Sd2Card7readEndEv+0x44>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    56ac:	8f 81       	ldd	r24, Y+7	; 0x07
    56ae:	98 85       	ldd	r25, Y+8	; 0x08
    56b0:	9c 01       	movw	r18, r24
    56b2:	2f 5f       	subi	r18, 0xFF	; 255
    56b4:	3f 4f       	sbci	r19, 0xFF	; 255
    56b6:	38 87       	std	Y+8, r19	; 0x08
    56b8:	2f 83       	std	Y+7, r18	; 0x07
    56ba:	22 e0       	ldi	r18, 0x02	; 2
    56bc:	82 30       	cpi	r24, 0x02	; 2
    56be:	92 07       	cpc	r25, r18
    56c0:	68 f4       	brcc	.+26     	; 0x56dc <_ZN7Sd2Card7readEndEv+0x3c>
    56c2:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    56c6:	8f 81       	ldd	r24, Y+7	; 0x07
    56c8:	98 85       	ldd	r25, Y+8	; 0x08
    56ca:	9c 01       	movw	r18, r24
    56cc:	2f 5f       	subi	r18, 0xFF	; 255
    56ce:	3f 4f       	sbci	r19, 0xFF	; 255
    56d0:	38 87       	std	Y+8, r19	; 0x08
    56d2:	2f 83       	std	Y+7, r18	; 0x07
    56d4:	22 e0       	ldi	r18, 0x02	; 2
    56d6:	82 30       	cpi	r24, 0x02	; 2
    56d8:	92 07       	cpc	r25, r18
    56da:	98 f3       	brcs	.-26     	; 0x56c2 <_ZN7Sd2Card7readEndEv+0x22>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    56dc:	ce 01       	movw	r24, r28
    56de:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    56e2:	1e 82       	std	Y+6, r1	; 0x06
  }
}
    56e4:	df 91       	pop	r29
    56e6:	cf 91       	pop	r28
    56e8:	08 95       	ret

000056ea <_ZN7Sd2Card16partialBlockReadEh>:
 *
 * Use this for applications like the Adafruit Wave Shield.
 *
 * \param[in] value The value TRUE (non-zero) or FALSE (zero).)
 */
void Sd2Card::partialBlockRead(uint8_t value) {
    56ea:	1f 93       	push	r17
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	ec 01       	movw	r28, r24
    56f2:	16 2f       	mov	r17, r22
  readEnd();
    56f4:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <_ZN7Sd2Card7readEndEv>
  partialBlockRead_ = value;
    56f8:	19 87       	std	Y+9, r17	; 0x09
}
    56fa:	df 91       	pop	r29
    56fc:	cf 91       	pop	r28
    56fe:	1f 91       	pop	r17
    5700:	08 95       	ret

00005702 <_ZN7Sd2Card10setSckRateEh>:
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
  if (sckRateID > 6) {
    5702:	67 30       	cpi	r22, 0x07	; 7
    5704:	28 f0       	brcs	.+10     	; 0x5710 <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5706:	26 e1       	ldi	r18, 0x16	; 22
    5708:	fc 01       	movw	r30, r24
    570a:	25 83       	std	Z+5, r18	; 0x05
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	08 95       	ret
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    5710:	62 30       	cpi	r22, 0x02	; 2
    5712:	e1 f0       	breq	.+56     	; 0x574c <_ZN7Sd2Card10setSckRateEh+0x4a>
    5714:	63 30       	cpi	r22, 0x03	; 3
    5716:	28 f4       	brcc	.+10     	; 0x5722 <_ZN7Sd2Card10setSckRateEh+0x20>
    5718:	66 23       	and	r22, r22
    571a:	51 f0       	breq	.+20     	; 0x5730 <_ZN7Sd2Card10setSckRateEh+0x2e>
    571c:	61 30       	cpi	r22, 0x01	; 1
    571e:	91 f5       	brne	.+100    	; 0x5784 <_ZN7Sd2Card10setSckRateEh+0x82>
    5720:	0e c0       	rjmp	.+28     	; 0x573e <_ZN7Sd2Card10setSckRateEh+0x3c>
    5722:	64 30       	cpi	r22, 0x04	; 4
    5724:	09 f1       	breq	.+66     	; 0x5768 <_ZN7Sd2Card10setSckRateEh+0x66>
    5726:	64 30       	cpi	r22, 0x04	; 4
    5728:	c0 f0       	brcs	.+48     	; 0x575a <_ZN7Sd2Card10setSckRateEh+0x58>
    572a:	65 30       	cpi	r22, 0x05	; 5
    572c:	59 f5       	brne	.+86     	; 0x5784 <_ZN7Sd2Card10setSckRateEh+0x82>
    572e:	23 c0       	rjmp	.+70     	; 0x5776 <_ZN7Sd2Card10setSckRateEh+0x74>
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    5730:	80 e5       	ldi	r24, 0x50	; 80
    5732:	80 93 78 06 	sts	0x0678, r24
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	80 93 79 06 	sts	0x0679, r24
    573c:	08 95       	ret
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    573e:	80 e5       	ldi	r24, 0x50	; 80
    5740:	80 93 78 06 	sts	0x0678, r24
    5744:	10 92 79 06 	sts	0x0679, r1
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
  }
#endif // USE_SPI_LIB
  return true;
    5748:	81 e0       	ldi	r24, 0x01	; 1
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    574a:	08 95       	ret
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    574c:	81 e5       	ldi	r24, 0x51	; 81
    574e:	80 93 78 06 	sts	0x0678, r24
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	80 93 79 06 	sts	0x0679, r24
    5758:	08 95       	ret
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    575a:	81 e5       	ldi	r24, 0x51	; 81
    575c:	80 93 78 06 	sts	0x0678, r24
    5760:	10 92 79 06 	sts	0x0679, r1
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
  }
#endif // USE_SPI_LIB
  return true;
    5764:	81 e0       	ldi	r24, 0x01	; 1
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    5766:	08 95       	ret
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    5768:	82 e5       	ldi	r24, 0x52	; 82
    576a:	80 93 78 06 	sts	0x0678, r24
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	80 93 79 06 	sts	0x0679, r24
    5774:	08 95       	ret
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    5776:	82 e5       	ldi	r24, 0x52	; 82
    5778:	80 93 78 06 	sts	0x0678, r24
    577c:	10 92 79 06 	sts	0x0679, r1
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
  }
#endif // USE_SPI_LIB
  return true;
    5780:	81 e0       	ldi	r24, 0x01	; 1
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    5782:	08 95       	ret
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    5784:	83 e5       	ldi	r24, 0x53	; 83
    5786:	80 93 78 06 	sts	0x0678, r24
    578a:	10 92 79 06 	sts	0x0679, r1
  }
#endif // USE_SPI_LIB
  return true;
    578e:	81 e0       	ldi	r24, 0x01	; 1
}
    5790:	08 95       	ret

00005792 <_ZN7Sd2Card11setSpiClockEm>:
#ifdef USE_SPI_LIB
//------------------------------------------------------------------------------
// set the SPI clock frequency
uint8_t Sd2Card::setSpiClock(uint32_t clock)
{
    5792:	20 e0       	ldi	r18, 0x00	; 0
    5794:	80 e0       	ldi	r24, 0x00	; 0
    5796:	92 e1       	ldi	r25, 0x12	; 18
    5798:	aa e7       	ldi	r26, 0x7A	; 122
    579a:	b0 e0       	ldi	r27, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    579c:	48 17       	cp	r20, r24
    579e:	59 07       	cpc	r21, r25
    57a0:	6a 07       	cpc	r22, r26
    57a2:	7b 07       	cpc	r23, r27
    57a4:	c8 f4       	brcc	.+50     	; 0x57d8 <_ZN7Sd2Card11setSpiClockEm+0x46>
        clockSetting /= 2;
    57a6:	b6 95       	lsr	r27
    57a8:	a7 95       	ror	r26
    57aa:	97 95       	ror	r25
    57ac:	87 95       	ror	r24
        clockDiv++;
    57ae:	2f 5f       	subi	r18, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    57b0:	26 30       	cpi	r18, 0x06	; 6
    57b2:	a1 f7       	brne	.-24     	; 0x579c <_ZN7Sd2Card11setSpiClockEm+0xa>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    57b4:	27 e0       	ldi	r18, 0x07	; 7
    57b6:	01 c0       	rjmp	.+2      	; 0x57ba <_ZN7Sd2Card11setSpiClockEm+0x28>
    57b8:	27 e0       	ldi	r18, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    57be:	82 2f       	mov	r24, r18
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	95 95       	asr	r25
    57c4:	87 95       	ror	r24
    57c6:	83 70       	andi	r24, 0x03	; 3
    57c8:	80 65       	ori	r24, 0x50	; 80
  settings = SPISettings(clock, MSBFIRST, SPI_MODE0);
    57ca:	80 93 78 06 	sts	0x0678, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    57ce:	21 70       	andi	r18, 0x01	; 1
    57d0:	20 93 79 06 	sts	0x0679, r18
  return true;
}
    57d4:	81 e0       	ldi	r24, 0x01	; 1
    57d6:	08 95       	ret
        clockDiv++;
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    57d8:	26 30       	cpi	r18, 0x06	; 6
    57da:	79 f7       	brne	.-34     	; 0x57ba <_ZN7Sd2Card11setSpiClockEm+0x28>
    57dc:	ed cf       	rjmp	.-38     	; 0x57b8 <_ZN7Sd2Card11setSpiClockEm+0x26>

000057de <_ZN7Sd2Card11waitNotBusyEj>:
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	cf 93       	push	r28
    57e4:	df 93       	push	r29
    57e6:	eb 01       	movw	r28, r22
  unsigned int t0 = millis();
    57e8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    57ec:	8b 01       	movw	r16, r22
    57ee:	9c 01       	movw	r18, r24
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    57f0:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    57f4:	8f 3f       	cpi	r24, 0xFF	; 255
    57f6:	49 f0       	breq	.+18     	; 0x580a <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    d = millis() - t0;
    57f8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    57fc:	60 1b       	sub	r22, r16
    57fe:	71 0b       	sbc	r23, r17
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    5800:	6c 17       	cp	r22, r28
    5802:	7d 07       	cpc	r23, r29
    5804:	a8 f3       	brcs	.-22     	; 0x57f0 <_ZN7Sd2Card11waitNotBusyEj+0x12>
    if (spiRec() == 0XFF) return true;
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	01 c0       	rjmp	.+2      	; 0x580c <_ZN7Sd2Card11waitNotBusyEj+0x2e>
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    580a:	81 e0       	ldi	r24, 0x01	; 1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	0f 91       	pop	r16
    5814:	08 95       	ret

00005816 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    5816:	bf 92       	push	r11
    5818:	cf 92       	push	r12
    581a:	df 92       	push	r13
    581c:	ef 92       	push	r14
    581e:	ff 92       	push	r15
    5820:	0f 93       	push	r16
    5822:	1f 93       	push	r17
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	ec 01       	movw	r28, r24
    582a:	b6 2e       	mov	r11, r22
    582c:	69 01       	movw	r12, r18
    582e:	7a 01       	movw	r14, r20
  // end read if in partialBlockRead mode
  readEnd();
    5830:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    5834:	ce 01       	movw	r24, r28
    5836:	0e 94 26 2b 	call	0x564c	; 0x564c <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    583a:	ce 01       	movw	r24, r28
    583c:	6c e2       	ldi	r22, 0x2C	; 44
    583e:	71 e0       	ldi	r23, 0x01	; 1
    5840:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    5844:	8b 2d       	mov	r24, r11
    5846:	80 64       	ori	r24, 0x40	; 64
    5848:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
    584c:	08 e1       	ldi	r16, 0x18	; 24
    584e:	10 e0       	ldi	r17, 0x00	; 0

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    5850:	d7 01       	movw	r26, r14
    5852:	c6 01       	movw	r24, r12
    5854:	00 2e       	mov	r0, r16
    5856:	04 c0       	rjmp	.+8      	; 0x5860 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    5858:	b6 95       	lsr	r27
    585a:	a7 95       	ror	r26
    585c:	97 95       	ror	r25
    585e:	87 95       	ror	r24
    5860:	0a 94       	dec	r0
    5862:	d2 f7       	brpl	.-12     	; 0x5858 <_ZN7Sd2Card11cardCommandEhm+0x42>
    5864:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
    5868:	08 50       	subi	r16, 0x08	; 8
    586a:	10 40       	sbci	r17, 0x00	; 0
    586c:	8f ef       	ldi	r24, 0xFF	; 255
    586e:	08 3f       	cpi	r16, 0xF8	; 248
    5870:	18 07       	cpc	r17, r24
    5872:	71 f7       	brne	.-36     	; 0x5850 <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    5874:	bb 20       	and	r11, r11
    5876:	29 f0       	breq	.+10     	; 0x5882 <_ZN7Sd2Card11cardCommandEhm+0x6c>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    5878:	88 e0       	ldi	r24, 0x08	; 8
    587a:	b8 16       	cp	r11, r24
    587c:	21 f0       	breq	.+8      	; 0x5886 <_ZN7Sd2Card11cardCommandEhm+0x70>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	03 c0       	rjmp	.+6      	; 0x5888 <_ZN7Sd2Card11cardCommandEhm+0x72>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    5882:	85 e9       	ldi	r24, 0x95	; 149
    5884:	01 c0       	rjmp	.+2      	; 0x5888 <_ZN7Sd2Card11cardCommandEhm+0x72>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    5886:	87 e8       	ldi	r24, 0x87	; 135
  spiSend(crc);
    5888:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    588c:	00 e0       	ldi	r16, 0x00	; 0
    588e:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5892:	8a 87       	std	Y+10, r24	; 0x0a
    5894:	88 23       	and	r24, r24
    5896:	24 f4       	brge	.+8      	; 0x58a0 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    5898:	0f 3f       	cpi	r16, 0xFF	; 255
    589a:	11 f0       	breq	.+4      	; 0x58a0 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    589c:	0f 5f       	subi	r16, 0xFF	; 255
    589e:	f7 cf       	rjmp	.-18     	; 0x588e <_ZN7Sd2Card11cardCommandEhm+0x78>
    ;
  return status_;
}
    58a0:	df 91       	pop	r29
    58a2:	cf 91       	pop	r28
    58a4:	1f 91       	pop	r17
    58a6:	0f 91       	pop	r16
    58a8:	ff 90       	pop	r15
    58aa:	ef 90       	pop	r14
    58ac:	df 90       	pop	r13
    58ae:	cf 90       	pop	r12
    58b0:	bf 90       	pop	r11
    58b2:	08 95       	ret

000058b4 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    58b4:	8f 92       	push	r8
    58b6:	9f 92       	push	r9
    58b8:	af 92       	push	r10
    58ba:	bf 92       	push	r11
    58bc:	ef 92       	push	r14
    58be:	ff 92       	push	r15
    58c0:	0f 93       	push	r16
    58c2:	1f 93       	push	r17
    58c4:	cf 93       	push	r28
    58c6:	df 93       	push	r29
    58c8:	8c 01       	movw	r16, r24
    58ca:	d6 2f       	mov	r29, r22
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    58cc:	fc 01       	movw	r30, r24
    58ce:	13 86       	std	Z+11, r1	; 0x0b
    58d0:	11 86       	std	Z+9, r1	; 0x09
    58d2:	16 82       	std	Z+6, r1	; 0x06
    58d4:	15 82       	std	Z+5, r1	; 0x05
  chipSelectPin_ = chipSelectPin;
    58d6:	44 83       	std	Z+4, r20	; 0x04
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
    58d8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    58dc:	dc 01       	movw	r26, r24
    58de:	cb 01       	movw	r24, r22
    58e0:	7c 01       	movw	r14, r24
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    58e2:	f8 01       	movw	r30, r16
    58e4:	84 81       	ldd	r24, Z+4	; 0x04
    58e6:	61 e0       	ldi	r22, 0x01	; 1
    58e8:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    58ec:	f8 01       	movw	r30, r16
    58ee:	84 81       	ldd	r24, Z+4	; 0x04
    58f0:	61 e0       	ldi	r22, 0x01	; 1
    58f2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    58f6:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    58fa:	82 e5       	ldi	r24, 0x52	; 82
    58fc:	80 93 78 06 	sts	0x0678, r24
    5900:	10 92 79 06 	sts	0x0679, r1

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    5904:	80 91 87 08 	lds	r24, 0x0887
    5908:	88 23       	and	r24, r24
    590a:	99 f0       	breq	.+38     	; 0x5932 <_ZN7Sd2Card4initEhh+0x7e>
      uint8_t sreg = SREG;
    590c:	8f b7       	in	r24, 0x3f	; 63
      noInterrupts();
    590e:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    5910:	90 91 87 08 	lds	r25, 0x0887
    5914:	91 30       	cpi	r25, 0x01	; 1
    5916:	59 f4       	brne	.+22     	; 0x592e <_ZN7Sd2Card4initEhh+0x7a>
        interruptSave = SPI_AVR_EIMSK;
    5918:	9d b3       	in	r25, 0x1d	; 29
    591a:	90 93 85 08 	sts	0x0885, r25
        SPI_AVR_EIMSK &= ~interruptMask;
    591e:	2d b3       	in	r18, 0x1d	; 29
    5920:	90 91 86 08 	lds	r25, 0x0886
    5924:	90 95       	com	r25
    5926:	92 23       	and	r25, r18
    5928:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
    592a:	8f bf       	out	0x3f, r24	; 63
    592c:	02 c0       	rjmp	.+4      	; 0x5932 <_ZN7Sd2Card4initEhh+0x7e>
      } else
      #endif
      {
        interruptSave = sreg;
    592e:	80 93 85 08 	sts	0x0885, r24
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    5932:	82 e5       	ldi	r24, 0x52	; 82
    5934:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    5936:	1d bc       	out	0x2d, r1	; 45
    5938:	ca e0       	ldi	r28, 0x0A	; 10

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    593a:	8f ef       	ldi	r24, 0xFF	; 255
    593c:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
    5940:	c1 50       	subi	r28, 0x01	; 1
    5942:	d9 f7       	brne	.-10     	; 0x593a <_ZN7Sd2Card4initEhh+0x86>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    5944:	80 91 87 08 	lds	r24, 0x0887
    5948:	88 23       	and	r24, r24
    594a:	71 f0       	breq	.+28     	; 0x5968 <_ZN7Sd2Card4initEhh+0xb4>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    594c:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    594e:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    5950:	80 91 87 08 	lds	r24, 0x0887
    5954:	81 30       	cpi	r24, 0x01	; 1
    5956:	29 f4       	brne	.+10     	; 0x5962 <_ZN7Sd2Card4initEhh+0xae>
        SPI_AVR_EIMSK = interruptSave;
    5958:	80 91 85 08 	lds	r24, 0x0885
    595c:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    595e:	9f bf       	out	0x3f, r25	; 63
    5960:	03 c0       	rjmp	.+6      	; 0x5968 <_ZN7Sd2Card4initEhh+0xb4>
      } else
      #endif
      {
        SREG = interruptSave;
    5962:	80 91 85 08 	lds	r24, 0x0885
    5966:	8f bf       	out	0x3f, r24	; 63
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
#endif

  chipSelectLow();
    5968:	c8 01       	movw	r24, r16
    596a:	0e 94 26 2b 	call	0x564c	; 0x564c <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    596e:	0c c0       	rjmp	.+24     	; 0x5988 <_ZN7Sd2Card4initEhh+0xd4>
    unsigned int d = millis() - t0;
    5970:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    5974:	6e 19       	sub	r22, r14
    5976:	7f 09       	sbc	r23, r15
    if (d > SD_INIT_TIMEOUT) {
    5978:	f7 e0       	ldi	r31, 0x07	; 7
    597a:	61 3d       	cpi	r22, 0xD1	; 209
    597c:	7f 07       	cpc	r23, r31
    597e:	20 f0       	brcs	.+8      	; 0x5988 <_ZN7Sd2Card4initEhh+0xd4>
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	f8 01       	movw	r30, r16
    5984:	85 83       	std	Z+5, r24	; 0x05
    5986:	79 c0       	rjmp	.+242    	; 0x5a7a <_ZN7Sd2Card4initEhh+0x1c6>
#endif

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    5988:	c8 01       	movw	r24, r16
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	a9 01       	movw	r20, r18
    5992:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5996:	f8 01       	movw	r30, r16
    5998:	82 87       	std	Z+10, r24	; 0x0a
    599a:	81 30       	cpi	r24, 0x01	; 1
    599c:	49 f7       	brne	.-46     	; 0x5970 <_ZN7Sd2Card4initEhh+0xbc>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    599e:	c8 01       	movw	r24, r16
    59a0:	68 e0       	ldi	r22, 0x08	; 8
    59a2:	2a ea       	ldi	r18, 0xAA	; 170
    59a4:	31 e0       	ldi	r19, 0x01	; 1
    59a6:	40 e0       	ldi	r20, 0x00	; 0
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    59ae:	82 ff       	sbrs	r24, 2
    59b0:	04 c0       	rjmp	.+8      	; 0x59ba <_ZN7Sd2Card4initEhh+0x106>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	f8 01       	movw	r30, r16
    59b6:	83 87       	std	Z+11, r24	; 0x0b
    59b8:	0f c0       	rjmp	.+30     	; 0x59d8 <_ZN7Sd2Card4initEhh+0x124>
    59ba:	c4 e0       	ldi	r28, 0x04	; 4
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    59bc:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    59c0:	f8 01       	movw	r30, r16
    59c2:	82 87       	std	Z+10, r24	; 0x0a
    59c4:	c1 50       	subi	r28, 0x01	; 1
    59c6:	d1 f7       	brne	.-12     	; 0x59bc <_ZN7Sd2Card4initEhh+0x108>
    if (status_ != 0XAA) {
    59c8:	8a 3a       	cpi	r24, 0xAA	; 170
    59ca:	19 f0       	breq	.+6      	; 0x59d2 <_ZN7Sd2Card4initEhh+0x11e>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    59cc:	82 e0       	ldi	r24, 0x02	; 2
    59ce:	85 83       	std	Z+5, r24	; 0x05
    59d0:	54 c0       	rjmp	.+168    	; 0x5a7a <_ZN7Sd2Card4initEhh+0x1c6>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    59d2:	82 e0       	ldi	r24, 0x02	; 2
    59d4:	f8 01       	movw	r30, r16
    59d6:	83 87       	std	Z+11, r24	; 0x0b
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    59d8:	f8 01       	movw	r30, r16
    59da:	83 85       	ldd	r24, Z+11	; 0x0b
    59dc:	82 30       	cpi	r24, 0x02	; 2
    59de:	31 f4       	brne	.+12     	; 0x59ec <_ZN7Sd2Card4initEhh+0x138>
    59e0:	88 24       	eor	r8, r8
    59e2:	99 24       	eor	r9, r9
    59e4:	54 01       	movw	r10, r8
    59e6:	68 94       	set
    59e8:	b6 f8       	bld	r11, 6
    59ea:	10 c0       	rjmp	.+32     	; 0x5a0c <_ZN7Sd2Card4initEhh+0x158>
    59ec:	88 24       	eor	r8, r8
    59ee:	99 24       	eor	r9, r9
    59f0:	54 01       	movw	r10, r8

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    59f2:	0c c0       	rjmp	.+24     	; 0x5a0c <_ZN7Sd2Card4initEhh+0x158>
    // check for timeout
    unsigned int d = millis() - t0;
    59f4:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    59f8:	6e 19       	sub	r22, r14
    59fa:	7f 09       	sbc	r23, r15
    if (d > SD_INIT_TIMEOUT) {
    59fc:	f7 e0       	ldi	r31, 0x07	; 7
    59fe:	61 3d       	cpi	r22, 0xD1	; 209
    5a00:	7f 07       	cpc	r23, r31
    5a02:	20 f0       	brcs	.+8      	; 0x5a0c <_ZN7Sd2Card4initEhh+0x158>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5a04:	88 e0       	ldi	r24, 0x08	; 8
    5a06:	f8 01       	movw	r30, r16
    5a08:	85 83       	std	Z+5, r24	; 0x05
    5a0a:	37 c0       	rjmp	.+110    	; 0x5a7a <_ZN7Sd2Card4initEhh+0x1c6>
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    5a0c:	c8 01       	movw	r24, r16
    5a0e:	67 e3       	ldi	r22, 0x37	; 55
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	a9 01       	movw	r20, r18
    5a16:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    5a1a:	c8 01       	movw	r24, r16
    5a1c:	69 e2       	ldi	r22, 0x29	; 41
    5a1e:	a5 01       	movw	r20, r10
    5a20:	94 01       	movw	r18, r8
    5a22:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    5a26:	f8 01       	movw	r30, r16
    5a28:	82 87       	std	Z+10, r24	; 0x0a
    5a2a:	88 23       	and	r24, r24
    5a2c:	19 f7       	brne	.-58     	; 0x59f4 <_ZN7Sd2Card4initEhh+0x140>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    5a2e:	83 85       	ldd	r24, Z+11	; 0x0b
    5a30:	82 30       	cpi	r24, 0x02	; 2
    5a32:	d9 f4       	brne	.+54     	; 0x5a6a <_ZN7Sd2Card4initEhh+0x1b6>
    if (cardCommand(CMD58, 0)) {
    5a34:	c8 01       	movw	r24, r16
    5a36:	6a e3       	ldi	r22, 0x3A	; 58
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	a9 01       	movw	r20, r18
    5a3e:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5a42:	88 23       	and	r24, r24
    5a44:	21 f0       	breq	.+8      	; 0x5a4e <_ZN7Sd2Card4initEhh+0x19a>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5a46:	86 e0       	ldi	r24, 0x06	; 6
    5a48:	f8 01       	movw	r30, r16
    5a4a:	85 83       	std	Z+5, r24	; 0x05
    5a4c:	16 c0       	rjmp	.+44     	; 0x5a7a <_ZN7Sd2Card4initEhh+0x1c6>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    5a4e:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5a52:	80 7c       	andi	r24, 0xC0	; 192
    5a54:	80 3c       	cpi	r24, 0xC0	; 192
    5a56:	19 f4       	brne	.+6      	; 0x5a5e <_ZN7Sd2Card4initEhh+0x1aa>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    5a58:	83 e0       	ldi	r24, 0x03	; 3
    5a5a:	f8 01       	movw	r30, r16
    5a5c:	83 87       	std	Z+11, r24	; 0x0b
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    5a5e:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5a62:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5a66:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
  }
  chipSelectHigh();
    5a6a:	c8 01       	movw	r24, r16
    5a6c:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    5a70:	c8 01       	movw	r24, r16
    5a72:	6d 2f       	mov	r22, r29
    5a74:	0e 94 81 2b 	call	0x5702	; 0x5702 <_ZN7Sd2Card10setSckRateEh>
    5a78:	04 c0       	rjmp	.+8      	; 0x5a82 <_ZN7Sd2Card4initEhh+0x1ce>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    5a7a:	c8 01       	movw	r24, r16
    5a7c:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    5a80:	80 e0       	ldi	r24, 0x00	; 0
}
    5a82:	df 91       	pop	r29
    5a84:	cf 91       	pop	r28
    5a86:	1f 91       	pop	r17
    5a88:	0f 91       	pop	r16
    5a8a:	ff 90       	pop	r15
    5a8c:	ef 90       	pop	r14
    5a8e:	bf 90       	pop	r11
    5a90:	af 90       	pop	r10
    5a92:	9f 90       	pop	r9
    5a94:	8f 90       	pop	r8
    5a96:	08 95       	ret

00005a98 <_ZN7Sd2Card14waitStartBlockEv>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	cf 93       	push	r28
    5a9e:	df 93       	push	r29
    5aa0:	ec 01       	movw	r28, r24
  unsigned int t0 = millis();
    5aa2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    5aa6:	8b 01       	movw	r16, r22
    5aa8:	9c 01       	movw	r18, r24
  while ((status_ = spiRec()) == 0XFF) {
    5aaa:	0b c0       	rjmp	.+22     	; 0x5ac2 <_ZN7Sd2Card14waitStartBlockEv+0x2a>
    unsigned int d = millis() - t0;
    5aac:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <millis>
    5ab0:	60 1b       	sub	r22, r16
    5ab2:	71 0b       	sbc	r23, r17
    if (d > SD_READ_TIMEOUT) {
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	6d 32       	cpi	r22, 0x2D	; 45
    5ab8:	78 07       	cpc	r23, r24
    5aba:	18 f0       	brcs	.+6      	; 0x5ac2 <_ZN7Sd2Card14waitStartBlockEv+0x2a>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5abc:	8f e0       	ldi	r24, 0x0F	; 15
    5abe:	8d 83       	std	Y+5, r24	; 0x05
    5ac0:	09 c0       	rjmp	.+18     	; 0x5ad4 <_ZN7Sd2Card14waitStartBlockEv+0x3c>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    5ac2:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5ac6:	8a 87       	std	Y+10, r24	; 0x0a
    5ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    5aca:	81 f3       	breq	.-32     	; 0x5aac <_ZN7Sd2Card14waitStartBlockEv+0x14>
    if (d > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    5acc:	8e 3f       	cpi	r24, 0xFE	; 254
    5ace:	39 f0       	breq	.+14     	; 0x5ade <_ZN7Sd2Card14waitStartBlockEv+0x46>
    5ad0:	8d e0       	ldi	r24, 0x0D	; 13
    5ad2:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    5ad4:	ce 01       	movw	r24, r28
    5ad6:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <_ZN7Sd2Card14waitStartBlockEv+0x48>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    5ade:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <_ZN7Sd2Card12readRegisterEhPv>:
    inBlock_ = 0;
  }
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
uint8_t Sd2Card::readRegister(uint8_t cmd, void* buf) {
    5aea:	ef 92       	push	r14
    5aec:	ff 92       	push	r15
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	7c 01       	movw	r14, r24
    5af8:	c4 2f       	mov	r28, r20
    5afa:	d5 2f       	mov	r29, r21
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	a9 01       	movw	r20, r18
    5b02:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5b06:	88 23       	and	r24, r24
    5b08:	21 f0       	breq	.+8      	; 0x5b12 <_ZN7Sd2Card12readRegisterEhPv+0x28>
    5b0a:	8e e0       	ldi	r24, 0x0E	; 14
    5b0c:	f7 01       	movw	r30, r14
    5b0e:	85 83       	std	Z+5, r24	; 0x05
    5b10:	1b c0       	rjmp	.+54     	; 0x5b48 <_ZN7Sd2Card12readRegisterEhPv+0x5e>
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!waitStartBlock()) goto fail;
    5b12:	c7 01       	movw	r24, r14
    5b14:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7Sd2Card14waitStartBlockEv>
    5b18:	88 23       	and	r24, r24
    5b1a:	b1 f0       	breq	.+44     	; 0x5b48 <_ZN7Sd2Card12readRegisterEhPv+0x5e>
    5b1c:	0c 2f       	mov	r16, r28
    5b1e:	1d 2f       	mov	r17, r29
    5b20:	c0 e0       	ldi	r28, 0x00	; 0
    5b22:	d0 e0       	ldi	r29, 0x00	; 0
  // transfer data
  for (uint16_t i = 0; i < 16; i++) dst[i] = spiRec();
    5b24:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5b28:	f8 01       	movw	r30, r16
    5b2a:	81 93       	st	Z+, r24
    5b2c:	8f 01       	movw	r16, r30
    5b2e:	21 96       	adiw	r28, 0x01	; 1
    5b30:	c0 31       	cpi	r28, 0x10	; 16
    5b32:	d1 05       	cpc	r29, r1
    5b34:	b9 f7       	brne	.-18     	; 0x5b24 <_ZN7Sd2Card12readRegisterEhPv+0x3a>
  spiRec();  // get first crc byte
    5b36:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
  spiRec();  // get second crc byte
    5b3a:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
  chipSelectHigh();
    5b3e:	c7 01       	movw	r24, r14
    5b40:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	04 c0       	rjmp	.+8      	; 0x5b50 <_ZN7Sd2Card12readRegisterEhPv+0x66>

 fail:
  chipSelectHigh();
    5b48:	c7 01       	movw	r24, r14
    5b4a:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
}
    5b50:	df 91       	pop	r29
    5b52:	cf 91       	pop	r28
    5b54:	1f 91       	pop	r17
    5b56:	0f 91       	pop	r16
    5b58:	ff 90       	pop	r15
    5b5a:	ef 90       	pop	r14
    5b5c:	08 95       	ret

00005b5e <_ZN7Sd2Card22eraseSingleBlockEnableEv>:
/** Determine if card supports single block erase.
 *
 * \return The value one, true, is returned if single block erase is supported.
 * The value zero, false, is returned if single block erase is not supported.
 */
uint8_t Sd2Card::eraseSingleBlockEnable(void) {
    5b5e:	cf 93       	push	r28
    5b60:	df 93       	push	r29
    5b62:	cd b7       	in	r28, 0x3d	; 61
    5b64:	de b7       	in	r29, 0x3e	; 62
    5b66:	60 97       	sbiw	r28, 0x10	; 16
    5b68:	0f b6       	in	r0, 0x3f	; 63
    5b6a:	f8 94       	cli
    5b6c:	de bf       	out	0x3e, r29	; 62
    5b6e:	0f be       	out	0x3f, r0	; 63
    5b70:	cd bf       	out	0x3d, r28	; 61
  }
  /**
   * Read a cards CSD register. The CSD contains Card-Specific Data that
   * provides information regarding access to the card's contents. */
  uint8_t readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    5b72:	69 e0       	ldi	r22, 0x09	; 9
    5b74:	ae 01       	movw	r20, r28
    5b76:	4f 5f       	subi	r20, 0xFF	; 255
    5b78:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7a:	0e 94 75 2d 	call	0x5aea	; 0x5aea <_ZN7Sd2Card12readRegisterEhPv>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : 0;
    5b7e:	88 23       	and	r24, r24
    5b80:	39 f0       	breq	.+14     	; 0x5b90 <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x32>
    5b82:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b84:	82 95       	swap	r24
    5b86:	86 95       	lsr	r24
    5b88:	86 95       	lsr	r24
    5b8a:	83 70       	andi	r24, 0x03	; 3
    5b8c:	81 70       	andi	r24, 0x01	; 1
    5b8e:	01 c0       	rjmp	.+2      	; 0x5b92 <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x34>
    5b90:	80 e0       	ldi	r24, 0x00	; 0
}
    5b92:	60 96       	adiw	r28, 0x10	; 16
    5b94:	0f b6       	in	r0, 0x3f	; 63
    5b96:	f8 94       	cli
    5b98:	de bf       	out	0x3e, r29	; 62
    5b9a:	0f be       	out	0x3f, r0	; 63
    5b9c:	cd bf       	out	0x3d, r28	; 61
    5b9e:	df 91       	pop	r29
    5ba0:	cf 91       	pop	r28
    5ba2:	08 95       	ret

00005ba4 <_ZN7Sd2Card5eraseEmm>:
 * single block erase.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::erase(uint32_t firstBlock, uint32_t lastBlock) {
    5ba4:	8f 92       	push	r8
    5ba6:	9f 92       	push	r9
    5ba8:	af 92       	push	r10
    5baa:	bf 92       	push	r11
    5bac:	cf 92       	push	r12
    5bae:	df 92       	push	r13
    5bb0:	ef 92       	push	r14
    5bb2:	ff 92       	push	r15
    5bb4:	0f 93       	push	r16
    5bb6:	1f 93       	push	r17
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	ec 01       	movw	r28, r24
    5bbe:	6a 01       	movw	r12, r20
    5bc0:	7b 01       	movw	r14, r22
    5bc2:	48 01       	movw	r8, r16
    5bc4:	59 01       	movw	r10, r18
  if (!eraseSingleBlockEnable()) {
    5bc6:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <_ZN7Sd2Card22eraseSingleBlockEnableEv>
    5bca:	88 23       	and	r24, r24
    5bcc:	19 f4       	brne	.+6      	; 0x5bd4 <_ZN7Sd2Card5eraseEmm+0x30>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5bce:	8b e0       	ldi	r24, 0x0B	; 11
    5bd0:	8d 83       	std	Y+5, r24	; 0x05
    5bd2:	39 c0       	rjmp	.+114    	; 0x5c46 <_ZN7Sd2Card5eraseEmm+0xa2>
    error(SD_CARD_ERROR_ERASE_SINGLE_BLOCK);
    goto fail;
  }
  if (type_ != SD_CARD_TYPE_SDHC) {
    5bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bd6:	83 30       	cpi	r24, 0x03	; 3
    5bd8:	91 f0       	breq	.+36     	; 0x5bfe <_ZN7Sd2Card5eraseEmm+0x5a>
    firstBlock <<= 9;
    5bda:	0b 2e       	mov	r0, r27
    5bdc:	b9 e0       	ldi	r27, 0x09	; 9
    5bde:	cc 0c       	add	r12, r12
    5be0:	dd 1c       	adc	r13, r13
    5be2:	ee 1c       	adc	r14, r14
    5be4:	ff 1c       	adc	r15, r15
    5be6:	ba 95       	dec	r27
    5be8:	d1 f7       	brne	.-12     	; 0x5bde <_ZN7Sd2Card5eraseEmm+0x3a>
    5bea:	b0 2d       	mov	r27, r0
    lastBlock <<= 9;
    5bec:	07 2e       	mov	r0, r23
    5bee:	79 e0       	ldi	r23, 0x09	; 9
    5bf0:	88 0c       	add	r8, r8
    5bf2:	99 1c       	adc	r9, r9
    5bf4:	aa 1c       	adc	r10, r10
    5bf6:	bb 1c       	adc	r11, r11
    5bf8:	7a 95       	dec	r23
    5bfa:	d1 f7       	brne	.-12     	; 0x5bf0 <_ZN7Sd2Card5eraseEmm+0x4c>
    5bfc:	70 2d       	mov	r23, r0
  }
  if (cardCommand(CMD32, firstBlock)
    5bfe:	ce 01       	movw	r24, r28
    5c00:	60 e2       	ldi	r22, 0x20	; 32
    5c02:	a7 01       	movw	r20, r14
    5c04:	96 01       	movw	r18, r12
    5c06:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5c0a:	88 23       	and	r24, r24
    5c0c:	89 f4       	brne	.+34     	; 0x5c30 <_ZN7Sd2Card5eraseEmm+0x8c>
    || cardCommand(CMD33, lastBlock)
    5c0e:	ce 01       	movw	r24, r28
    5c10:	61 e2       	ldi	r22, 0x21	; 33
    5c12:	a5 01       	movw	r20, r10
    5c14:	94 01       	movw	r18, r8
    5c16:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
  }
  if (type_ != SD_CARD_TYPE_SDHC) {
    firstBlock <<= 9;
    lastBlock <<= 9;
  }
  if (cardCommand(CMD32, firstBlock)
    5c1a:	88 23       	and	r24, r24
    5c1c:	49 f4       	brne	.+18     	; 0x5c30 <_ZN7Sd2Card5eraseEmm+0x8c>
    || cardCommand(CMD33, lastBlock)
    || cardCommand(CMD38, 0)) {
    5c1e:	ce 01       	movw	r24, r28
    5c20:	66 e2       	ldi	r22, 0x26	; 38
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	a9 01       	movw	r20, r18
    5c28:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
  }
  if (type_ != SD_CARD_TYPE_SDHC) {
    firstBlock <<= 9;
    lastBlock <<= 9;
  }
  if (cardCommand(CMD32, firstBlock)
    5c2c:	88 23       	and	r24, r24
    5c2e:	e1 f0       	breq	.+56     	; 0x5c68 <_ZN7Sd2Card5eraseEmm+0xc4>
    5c30:	8a e0       	ldi	r24, 0x0A	; 10
    5c32:	8d 83       	std	Y+5, r24	; 0x05
    5c34:	08 c0       	rjmp	.+16     	; 0x5c46 <_ZN7Sd2Card5eraseEmm+0xa2>
    5c36:	8c e0       	ldi	r24, 0x0C	; 12
    5c38:	8d 83       	std	Y+5, r24	; 0x05
    5c3a:	05 c0       	rjmp	.+10     	; 0x5c46 <_ZN7Sd2Card5eraseEmm+0xa2>
  }
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  chipSelectHigh();
    5c3c:	ce 01       	movw	r24, r28
    5c3e:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    5c42:	81 e0       	ldi	r24, 0x01	; 1
    5c44:	04 c0       	rjmp	.+8      	; 0x5c4e <_ZN7Sd2Card5eraseEmm+0xaa>

 fail:
  chipSelectHigh();
    5c46:	ce 01       	movw	r24, r28
    5c48:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    5c4c:	80 e0       	ldi	r24, 0x00	; 0
}
    5c4e:	df 91       	pop	r29
    5c50:	cf 91       	pop	r28
    5c52:	1f 91       	pop	r17
    5c54:	0f 91       	pop	r16
    5c56:	ff 90       	pop	r15
    5c58:	ef 90       	pop	r14
    5c5a:	df 90       	pop	r13
    5c5c:	cf 90       	pop	r12
    5c5e:	bf 90       	pop	r11
    5c60:	af 90       	pop	r10
    5c62:	9f 90       	pop	r9
    5c64:	8f 90       	pop	r8
    5c66:	08 95       	ret
    || cardCommand(CMD33, lastBlock)
    || cardCommand(CMD38, 0)) {
      error(SD_CARD_ERROR_ERASE);
      goto fail;
  }
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    5c68:	ce 01       	movw	r24, r28
    5c6a:	60 e1       	ldi	r22, 0x10	; 16
    5c6c:	77 e2       	ldi	r23, 0x27	; 39
    5c6e:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>
    5c72:	88 23       	and	r24, r24
    5c74:	01 f3       	breq	.-64     	; 0x5c36 <_ZN7Sd2Card5eraseEmm+0x92>
    5c76:	e2 cf       	rjmp	.-60     	; 0x5c3c <_ZN7Sd2Card5eraseEmm+0x98>

00005c78 <_ZN7Sd2Card8cardSizeEv>:
 * Determine the size of an SD flash memory card.
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t Sd2Card::cardSize(void) {
    5c78:	0f 93       	push	r16
    5c7a:	1f 93       	push	r17
    5c7c:	cf 93       	push	r28
    5c7e:	df 93       	push	r29
    5c80:	cd b7       	in	r28, 0x3d	; 61
    5c82:	de b7       	in	r29, 0x3e	; 62
    5c84:	60 97       	sbiw	r28, 0x10	; 16
    5c86:	0f b6       	in	r0, 0x3f	; 63
    5c88:	f8 94       	cli
    5c8a:	de bf       	out	0x3e, r29	; 62
    5c8c:	0f be       	out	0x3f, r0	; 63
    5c8e:	cd bf       	out	0x3d, r28	; 61
    5c90:	8c 01       	movw	r16, r24
  }
  /**
   * Read a cards CSD register. The CSD contains Card-Specific Data that
   * provides information regarding access to the card's contents. */
  uint8_t readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    5c92:	69 e0       	ldi	r22, 0x09	; 9
    5c94:	ae 01       	movw	r20, r28
    5c96:	4f 5f       	subi	r20, 0xFF	; 255
    5c98:	5f 4f       	sbci	r21, 0xFF	; 255
    5c9a:	0e 94 75 2d 	call	0x5aea	; 0x5aea <_ZN7Sd2Card12readRegisterEhPv>
  csd_t csd;
  if (!readCSD(&csd)) return 0;
    5c9e:	88 23       	and	r24, r24
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <_ZN7Sd2Card8cardSizeEv+0x2c>
    5ca2:	69 c0       	rjmp	.+210    	; 0x5d76 <_ZN7Sd2Card8cardSizeEv+0xfe>
  if (csd.v1.csd_ver == 0) {
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	80 7c       	andi	r24, 0xC0	; 192
    5ca8:	a1 f5       	brne	.+104    	; 0x5d12 <_ZN7Sd2Card8cardSizeEv+0x9a>
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    5caa:	8f 81       	ldd	r24, Y+7	; 0x07
    5cac:	83 70       	andi	r24, 0x03	; 3
    5cae:	38 2f       	mov	r19, r24
    5cb0:	33 0f       	add	r19, r19
    5cb2:	33 0f       	add	r19, r19
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	88 85       	ldd	r24, Y+8	; 0x08
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	88 0f       	add	r24, r24
    5cbc:	99 1f       	adc	r25, r25
    5cbe:	88 0f       	add	r24, r24
    5cc0:	99 1f       	adc	r25, r25
    5cc2:	82 2b       	or	r24, r18
    5cc4:	93 2b       	or	r25, r19
    5cc6:	49 85       	ldd	r20, Y+9	; 0x09
    5cc8:	42 95       	swap	r20
    5cca:	46 95       	lsr	r20
    5ccc:	46 95       	lsr	r20
    5cce:	43 70       	andi	r20, 0x03	; 3
    5cd0:	50 e0       	ldi	r21, 0x00	; 0
    5cd2:	84 2b       	or	r24, r20
    5cd4:	95 2b       	or	r25, r21
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5cd6:	01 96       	adiw	r24, 0x01	; 1
    5cd8:	a0 e0       	ldi	r26, 0x00	; 0
    5cda:	b0 e0       	ldi	r27, 0x00	; 0
  if (csd.v1.csd_ver == 0) {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    5cdc:	2a 85       	ldd	r18, Y+10	; 0x0a
    5cde:	23 70       	andi	r18, 0x03	; 3
    5ce0:	22 0f       	add	r18, r18
    5ce2:	3b 85       	ldd	r19, Y+11	; 0x0b
    5ce4:	33 1f       	adc	r19, r19
    5ce6:	33 27       	eor	r19, r19
    5ce8:	33 1f       	adc	r19, r19
    5cea:	23 2b       	or	r18, r19
 */
uint32_t Sd2Card::cardSize(void) {
  csd_t csd;
  if (!readCSD(&csd)) return 0;
  if (csd.v1.csd_ver == 0) {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    5cec:	0e 81       	ldd	r16, Y+6	; 0x06
    5cee:	0f 70       	andi	r16, 0x0F	; 15
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5cf0:	10 e0       	ldi	r17, 0x00	; 0
    5cf2:	02 0f       	add	r16, r18
    5cf4:	11 1d       	adc	r17, r1
    5cf6:	07 50       	subi	r16, 0x07	; 7
    5cf8:	10 40       	sbci	r17, 0x00	; 0
    5cfa:	ac 01       	movw	r20, r24
    5cfc:	bd 01       	movw	r22, r26
    5cfe:	04 c0       	rjmp	.+8      	; 0x5d08 <_ZN7Sd2Card8cardSizeEv+0x90>
    5d00:	44 0f       	add	r20, r20
    5d02:	55 1f       	adc	r21, r21
    5d04:	66 1f       	adc	r22, r22
    5d06:	77 1f       	adc	r23, r23
    5d08:	0a 95       	dec	r16
    5d0a:	d2 f7       	brpl	.-12     	; 0x5d00 <_ZN7Sd2Card8cardSizeEv+0x88>
    5d0c:	8a 01       	movw	r16, r20
    5d0e:	9b 01       	movw	r18, r22
    5d10:	35 c0       	rjmp	.+106    	; 0x5d7c <_ZN7Sd2Card8cardSizeEv+0x104>
  } else if (csd.v2.csd_ver == 1) {
    5d12:	80 34       	cpi	r24, 0x40	; 64
    5d14:	49 f5       	brne	.+82     	; 0x5d68 <_ZN7Sd2Card8cardSizeEv+0xf0>
    uint32_t c_size = ((uint32_t)csd.v2.c_size_high << 16)
                      | (csd.v2.c_size_mid << 8) | csd.v2.c_size_low;
    5d16:	08 85       	ldd	r16, Y+8	; 0x08
    5d18:	06 95       	lsr	r16
    5d1a:	06 95       	lsr	r16
    5d1c:	10 e0       	ldi	r17, 0x00	; 0
    5d1e:	20 e0       	ldi	r18, 0x00	; 0
    5d20:	30 e0       	ldi	r19, 0x00	; 0
    5d22:	98 01       	movw	r18, r16
    5d24:	11 27       	eor	r17, r17
    5d26:	00 27       	eor	r16, r16
    5d28:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	a0 e0       	ldi	r26, 0x00	; 0
    5d2e:	b0 e0       	ldi	r27, 0x00	; 0
    5d30:	08 2b       	or	r16, r24
    5d32:	19 2b       	or	r17, r25
    5d34:	2a 2b       	or	r18, r26
    5d36:	3b 2b       	or	r19, r27
    5d38:	99 85       	ldd	r25, Y+9	; 0x09
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	aa 27       	eor	r26, r26
    5d3e:	97 fd       	sbrc	r25, 7
    5d40:	a0 95       	com	r26
    5d42:	ba 2f       	mov	r27, r26
    5d44:	08 2b       	or	r16, r24
    5d46:	19 2b       	or	r17, r25
    5d48:	2a 2b       	or	r18, r26
    5d4a:	3b 2b       	or	r19, r27
    return (c_size + 1) << 10;
    5d4c:	0f 5f       	subi	r16, 0xFF	; 255
    5d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d50:	2f 4f       	sbci	r18, 0xFF	; 255
    5d52:	3f 4f       	sbci	r19, 0xFF	; 255
    5d54:	0f 2e       	mov	r0, r31
    5d56:	fa e0       	ldi	r31, 0x0A	; 10
    5d58:	00 0f       	add	r16, r16
    5d5a:	11 1f       	adc	r17, r17
    5d5c:	22 1f       	adc	r18, r18
    5d5e:	33 1f       	adc	r19, r19
    5d60:	fa 95       	dec	r31
    5d62:	d1 f7       	brne	.-12     	; 0x5d58 <_ZN7Sd2Card8cardSizeEv+0xe0>
    5d64:	f0 2d       	mov	r31, r0
    5d66:	0a c0       	rjmp	.+20     	; 0x5d7c <_ZN7Sd2Card8cardSizeEv+0x104>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    5d68:	89 e0       	ldi	r24, 0x09	; 9
    5d6a:	f8 01       	movw	r30, r16
    5d6c:	85 83       	std	Z+5, r24	; 0x05
  } else {
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
    5d6e:	00 e0       	ldi	r16, 0x00	; 0
    5d70:	10 e0       	ldi	r17, 0x00	; 0
    5d72:	98 01       	movw	r18, r16
    5d74:	03 c0       	rjmp	.+6      	; 0x5d7c <_ZN7Sd2Card8cardSizeEv+0x104>
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t Sd2Card::cardSize(void) {
  csd_t csd;
  if (!readCSD(&csd)) return 0;
    5d76:	00 e0       	ldi	r16, 0x00	; 0
    5d78:	10 e0       	ldi	r17, 0x00	; 0
    5d7a:	98 01       	movw	r18, r16
    return (c_size + 1) << 10;
  } else {
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    5d7c:	60 2f       	mov	r22, r16
    5d7e:	71 2f       	mov	r23, r17
    5d80:	82 2f       	mov	r24, r18
    5d82:	93 2f       	mov	r25, r19
    5d84:	60 96       	adiw	r28, 0x10	; 16
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	f8 94       	cli
    5d8a:	de bf       	out	0x3e, r29	; 62
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	cd bf       	out	0x3d, r28	; 61
    5d90:	df 91       	pop	r29
    5d92:	cf 91       	pop	r28
    5d94:	1f 91       	pop	r17
    5d96:	0f 91       	pop	r16
    5d98:	08 95       	ret

00005d9a <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    5d9a:	8f 92       	push	r8
    5d9c:	9f 92       	push	r9
    5d9e:	af 92       	push	r10
    5da0:	bf 92       	push	r11
    5da2:	cf 92       	push	r12
    5da4:	df 92       	push	r13
    5da6:	ef 92       	push	r14
    5da8:	ff 92       	push	r15
    5daa:	0f 93       	push	r16
    5dac:	1f 93       	push	r17
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	6c 01       	movw	r12, r24
    5db4:	4a 01       	movw	r8, r20
    5db6:	5b 01       	movw	r10, r22
    5db8:	e9 01       	movw	r28, r18
  if (count == 0) return true;
    5dba:	01 15       	cp	r16, r1
    5dbc:	11 05       	cpc	r17, r1
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <_ZN7Sd2Card8readDataEmjjPh+0x28>
    5dc0:	79 c0       	rjmp	.+242    	; 0x5eb4 <_ZN7Sd2Card8readDataEmjjPh+0x11a>
  if ((count + offset) > 512) {
    5dc2:	c8 01       	movw	r24, r16
    5dc4:	82 0f       	add	r24, r18
    5dc6:	93 1f       	adc	r25, r19
    5dc8:	22 e0       	ldi	r18, 0x02	; 2
    5dca:	81 30       	cpi	r24, 0x01	; 1
    5dcc:	92 07       	cpc	r25, r18
    5dce:	08 f0       	brcs	.+2      	; 0x5dd2 <_ZN7Sd2Card8readDataEmjjPh+0x38>
    5dd0:	6c c0       	rjmp	.+216    	; 0x5eaa <_ZN7Sd2Card8readDataEmjjPh+0x110>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    5dd2:	f6 01       	movw	r30, r12
    5dd4:	86 81       	ldd	r24, Z+6	; 0x06
    5dd6:	88 23       	and	r24, r24
    5dd8:	71 f0       	breq	.+28     	; 0x5df6 <_ZN7Sd2Card8readDataEmjjPh+0x5c>
    5dda:	80 81       	ld	r24, Z
    5ddc:	91 81       	ldd	r25, Z+1	; 0x01
    5dde:	a2 81       	ldd	r26, Z+2	; 0x02
    5de0:	b3 81       	ldd	r27, Z+3	; 0x03
    5de2:	84 17       	cp	r24, r20
    5de4:	95 07       	cpc	r25, r21
    5de6:	a6 07       	cpc	r26, r22
    5de8:	b7 07       	cpc	r27, r23
    5dea:	29 f4       	brne	.+10     	; 0x5df6 <_ZN7Sd2Card8readDataEmjjPh+0x5c>
    5dec:	87 81       	ldd	r24, Z+7	; 0x07
    5dee:	90 85       	ldd	r25, Z+8	; 0x08
    5df0:	c8 17       	cp	r28, r24
    5df2:	d9 07       	cpc	r29, r25
    5df4:	38 f5       	brcc	.+78     	; 0x5e44 <_ZN7Sd2Card8readDataEmjjPh+0xaa>
    block_ = block;
    5df6:	f6 01       	movw	r30, r12
    5df8:	80 82       	st	Z, r8
    5dfa:	91 82       	std	Z+1, r9	; 0x01
    5dfc:	a2 82       	std	Z+2, r10	; 0x02
    5dfe:	b3 82       	std	Z+3, r11	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    5e00:	83 85       	ldd	r24, Z+11	; 0x0b
    5e02:	83 30       	cpi	r24, 0x03	; 3
    5e04:	49 f0       	breq	.+18     	; 0x5e18 <_ZN7Sd2Card8readDataEmjjPh+0x7e>
    5e06:	07 2e       	mov	r0, r23
    5e08:	79 e0       	ldi	r23, 0x09	; 9
    5e0a:	88 0c       	add	r8, r8
    5e0c:	99 1c       	adc	r9, r9
    5e0e:	aa 1c       	adc	r10, r10
    5e10:	bb 1c       	adc	r11, r11
    5e12:	7a 95       	dec	r23
    5e14:	d1 f7       	brne	.-12     	; 0x5e0a <_ZN7Sd2Card8readDataEmjjPh+0x70>
    5e16:	70 2d       	mov	r23, r0
    if (cardCommand(CMD17, block)) {
    5e18:	c6 01       	movw	r24, r12
    5e1a:	61 e1       	ldi	r22, 0x11	; 17
    5e1c:	a5 01       	movw	r20, r10
    5e1e:	94 01       	movw	r18, r8
    5e20:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5e24:	88 23       	and	r24, r24
    5e26:	21 f0       	breq	.+8      	; 0x5e30 <_ZN7Sd2Card8readDataEmjjPh+0x96>
    5e28:	83 e0       	ldi	r24, 0x03	; 3
    5e2a:	f6 01       	movw	r30, r12
    5e2c:	85 83       	std	Z+5, r24	; 0x05
    5e2e:	3d c0       	rjmp	.+122    	; 0x5eaa <_ZN7Sd2Card8readDataEmjjPh+0x110>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    5e30:	c6 01       	movw	r24, r12
    5e32:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7Sd2Card14waitStartBlockEv>
    5e36:	88 23       	and	r24, r24
    5e38:	c1 f1       	breq	.+112    	; 0x5eaa <_ZN7Sd2Card8readDataEmjjPh+0x110>
      goto fail;
    }
    offset_ = 0;
    5e3a:	f6 01       	movw	r30, r12
    5e3c:	10 86       	std	Z+8, r1	; 0x08
    5e3e:	17 82       	std	Z+7, r1	; 0x07
    inBlock_ = 1;
    5e40:	81 e0       	ldi	r24, 0x01	; 1
    5e42:	86 83       	std	Z+6, r24	; 0x06
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    5e44:	f6 01       	movw	r30, r12
    5e46:	87 81       	ldd	r24, Z+7	; 0x07
    5e48:	90 85       	ldd	r25, Z+8	; 0x08
    5e4a:	8c 17       	cp	r24, r28
    5e4c:	9d 07       	cpc	r25, r29
    5e4e:	28 f0       	brcs	.+10     	; 0x5e5a <_ZN7Sd2Card8readDataEmjjPh+0xc0>
    5e50:	8e 2c       	mov	r8, r14
    5e52:	9f 2c       	mov	r9, r15
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    5e54:	c0 e0       	ldi	r28, 0x00	; 0
    5e56:	d0 e0       	ldi	r29, 0x00	; 0
    5e58:	0c c0       	rjmp	.+24     	; 0x5e72 <_ZN7Sd2Card8readDataEmjjPh+0xd8>

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
    5e5a:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    5e5e:	f6 01       	movw	r30, r12
    5e60:	87 81       	ldd	r24, Z+7	; 0x07
    5e62:	90 85       	ldd	r25, Z+8	; 0x08
    5e64:	01 96       	adiw	r24, 0x01	; 1
    5e66:	90 87       	std	Z+8, r25	; 0x08
    5e68:	87 83       	std	Z+7, r24	; 0x07
    5e6a:	8c 17       	cp	r24, r28
    5e6c:	9d 07       	cpc	r25, r29
    5e6e:	a8 f3       	brcs	.-22     	; 0x5e5a <_ZN7Sd2Card8readDataEmjjPh+0xc0>
    5e70:	ef cf       	rjmp	.-34     	; 0x5e50 <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
    5e72:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5e76:	f4 01       	movw	r30, r8
    5e78:	81 93       	st	Z+, r24
    5e7a:	4f 01       	movw	r8, r30
  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    5e7c:	21 96       	adiw	r28, 0x01	; 1
    5e7e:	c0 17       	cp	r28, r16
    5e80:	d1 07       	cpc	r29, r17
    5e82:	b9 f7       	brne	.-18     	; 0x5e72 <_ZN7Sd2Card8readDataEmjjPh+0xd8>
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    5e84:	f6 01       	movw	r30, r12
    5e86:	87 81       	ldd	r24, Z+7	; 0x07
    5e88:	90 85       	ldd	r25, Z+8	; 0x08
    5e8a:	08 0f       	add	r16, r24
    5e8c:	19 1f       	adc	r17, r25
    5e8e:	10 87       	std	Z+8, r17	; 0x08
    5e90:	07 83       	std	Z+7, r16	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
    5e92:	81 85       	ldd	r24, Z+9	; 0x09
    5e94:	88 23       	and	r24, r24
    5e96:	21 f0       	breq	.+8      	; 0x5ea0 <_ZN7Sd2Card8readDataEmjjPh+0x106>
    5e98:	f2 e0       	ldi	r31, 0x02	; 2
    5e9a:	00 30       	cpi	r16, 0x00	; 0
    5e9c:	1f 07       	cpc	r17, r31
    5e9e:	60 f0       	brcs	.+24     	; 0x5eb8 <_ZN7Sd2Card8readDataEmjjPh+0x11e>
    // read rest of data, checksum and set chip select high
    readEnd();
    5ea0:	c6 01       	movw	r24, r12
    5ea2:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    5ea6:	81 e0       	ldi	r24, 0x01	; 1
    5ea8:	08 c0       	rjmp	.+16     	; 0x5eba <_ZN7Sd2Card8readDataEmjjPh+0x120>

 fail:
  chipSelectHigh();
    5eaa:	c6 01       	movw	r24, r12
    5eac:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    5eb0:	80 e0       	ldi	r24, 0x00	; 0
    5eb2:	03 c0       	rjmp	.+6      	; 0x5eba <_ZN7Sd2Card8readDataEmjjPh+0x120>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	01 c0       	rjmp	.+2      	; 0x5eba <_ZN7Sd2Card8readDataEmjjPh+0x120>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    5eb8:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    5eba:	df 91       	pop	r29
    5ebc:	cf 91       	pop	r28
    5ebe:	1f 91       	pop	r17
    5ec0:	0f 91       	pop	r16
    5ec2:	ff 90       	pop	r15
    5ec4:	ef 90       	pop	r14
    5ec6:	df 90       	pop	r13
    5ec8:	cf 90       	pop	r12
    5eca:	bf 90       	pop	r11
    5ecc:	af 90       	pop	r10
    5ece:	9f 90       	pop	r9
    5ed0:	8f 90       	pop	r8
    5ed2:	08 95       	ret

00005ed4 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    5ed4:	ef 92       	push	r14
    5ed6:	ff 92       	push	r15
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    5ede:	20 e0       	ldi	r18, 0x00	; 0
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	00 e0       	ldi	r16, 0x00	; 0
    5ee4:	12 e0       	ldi	r17, 0x02	; 2
    5ee6:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <_ZN7Sd2Card8readDataEmjjPh>
}
    5eea:	1f 91       	pop	r17
    5eec:	0f 91       	pop	r16
    5eee:	ff 90       	pop	r15
    5ef0:	ef 90       	pop	r14
    5ef2:	08 95       	ret

00005ef4 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    5ef4:	ef 92       	push	r14
    5ef6:	ff 92       	push	r15
    5ef8:	0f 93       	push	r16
    5efa:	1f 93       	push	r17
    5efc:	cf 93       	push	r28
    5efe:	df 93       	push	r29
    5f00:	7c 01       	movw	r14, r24
    5f02:	86 2f       	mov	r24, r22
    5f04:	c4 2f       	mov	r28, r20
    5f06:	d5 2f       	mov	r29, r21
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    5f08:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
    5f0c:	0c 2f       	mov	r16, r28
    5f0e:	1d 2f       	mov	r17, r29
  for (uint16_t i = 0; i < 512; i++) {
    5f10:	c0 e0       	ldi	r28, 0x00	; 0
    5f12:	d0 e0       	ldi	r29, 0x00	; 0
    spiSend(src[i]);
    5f14:	f8 01       	movw	r30, r16
    5f16:	81 91       	ld	r24, Z+
    5f18:	8f 01       	movw	r16, r30
    5f1a:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    5f1e:	21 96       	adiw	r28, 0x01	; 1
    5f20:	f2 e0       	ldi	r31, 0x02	; 2
    5f22:	c0 30       	cpi	r28, 0x00	; 0
    5f24:	df 07       	cpc	r29, r31
    5f26:	b1 f7       	brne	.-20     	; 0x5f14 <_ZN7Sd2Card9writeDataEhPKh+0x20>
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    5f28:	8f ef       	ldi	r24, 0xFF	; 255
    5f2a:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    5f2e:	8f ef       	ldi	r24, 0xFF	; 255
    5f30:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>

  status_ = spiRec();
    5f34:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    5f38:	f7 01       	movw	r30, r14
    5f3a:	82 87       	std	Z+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5f3c:	8f 71       	andi	r24, 0x1F	; 31
    5f3e:	85 30       	cpi	r24, 0x05	; 5
    5f40:	39 f0       	breq	.+14     	; 0x5f50 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    5f42:	81 e1       	ldi	r24, 0x11	; 17
    5f44:	85 83       	std	Z+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    5f46:	c7 01       	movw	r24, r14
    5f48:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    5f4c:	80 e0       	ldi	r24, 0x00	; 0
    5f4e:	01 c0       	rjmp	.+2      	; 0x5f52 <_ZN7Sd2Card9writeDataEhPKh+0x5e>
  }
  return true;
    5f50:	81 e0       	ldi	r24, 0x01	; 1
}
    5f52:	df 91       	pop	r29
    5f54:	cf 91       	pop	r28
    5f56:	1f 91       	pop	r17
    5f58:	0f 91       	pop	r16
    5f5a:	ff 90       	pop	r15
    5f5c:	ef 90       	pop	r14
    5f5e:	08 95       	ret

00005f60 <_ZN7Sd2Card9writeDataEPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Write one data block in a multiple block write sequence */
uint8_t Sd2Card::writeData(const uint8_t* src) {
    5f60:	0f 93       	push	r16
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
    5f68:	ec 01       	movw	r28, r24
    5f6a:	8b 01       	movw	r16, r22
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    5f6c:	68 e5       	ldi	r22, 0x58	; 88
    5f6e:	72 e0       	ldi	r23, 0x02	; 2
    5f70:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>
    5f74:	88 23       	and	r24, r24
    5f76:	39 f4       	brne	.+14     	; 0x5f86 <_ZN7Sd2Card9writeDataEPKh+0x26>
    5f78:	83 e1       	ldi	r24, 0x13	; 19
    5f7a:	8d 83       	std	Y+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE_MULTIPLE);
    chipSelectHigh();
    5f7c:	ce 01       	movw	r24, r28
    5f7e:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    5f82:	80 e0       	ldi	r24, 0x00	; 0
    5f84:	05 c0       	rjmp	.+10     	; 0x5f90 <_ZN7Sd2Card9writeDataEPKh+0x30>
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
    5f86:	ce 01       	movw	r24, r28
    5f88:	6c ef       	ldi	r22, 0xFC	; 252
    5f8a:	a8 01       	movw	r20, r16
    5f8c:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <_ZN7Sd2Card9writeDataEhPKh>
}
    5f90:	df 91       	pop	r29
    5f92:	cf 91       	pop	r28
    5f94:	1f 91       	pop	r17
    5f96:	0f 91       	pop	r16
    5f98:	08 95       	ret

00005f9a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    5f9a:	cf 92       	push	r12
    5f9c:	df 92       	push	r13
    5f9e:	ef 92       	push	r14
    5fa0:	ff 92       	push	r15
    5fa2:	0f 93       	push	r16
    5fa4:	1f 93       	push	r17
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	ec 01       	movw	r28, r24
    5fac:	6a 01       	movw	r12, r20
    5fae:	7b 01       	movw	r14, r22
    5fb0:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    5fb2:	41 15       	cp	r20, r1
    5fb4:	51 05       	cpc	r21, r1
    5fb6:	61 05       	cpc	r22, r1
    5fb8:	71 05       	cpc	r23, r1
    5fba:	19 f4       	brne	.+6      	; 0x5fc2 <_ZN7Sd2Card10writeBlockEmPKh+0x28>
    5fbc:	82 e1       	ldi	r24, 0x12	; 18
    5fbe:	8d 83       	std	Y+5, r24	; 0x05
    5fc0:	37 c0       	rjmp	.+110    	; 0x6030 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    5fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5fc4:	83 30       	cpi	r24, 0x03	; 3
    5fc6:	49 f0       	breq	.+18     	; 0x5fda <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    5fc8:	0b 2e       	mov	r0, r27
    5fca:	b9 e0       	ldi	r27, 0x09	; 9
    5fcc:	cc 0c       	add	r12, r12
    5fce:	dd 1c       	adc	r13, r13
    5fd0:	ee 1c       	adc	r14, r14
    5fd2:	ff 1c       	adc	r15, r15
    5fd4:	ba 95       	dec	r27
    5fd6:	d1 f7       	brne	.-12     	; 0x5fcc <_ZN7Sd2Card10writeBlockEmPKh+0x32>
    5fd8:	b0 2d       	mov	r27, r0
  if (cardCommand(CMD24, blockNumber)) {
    5fda:	ce 01       	movw	r24, r28
    5fdc:	68 e1       	ldi	r22, 0x18	; 24
    5fde:	a7 01       	movw	r20, r14
    5fe0:	96 01       	movw	r18, r12
    5fe2:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    5fe6:	88 23       	and	r24, r24
    5fe8:	19 f0       	breq	.+6      	; 0x5ff0 <_ZN7Sd2Card10writeBlockEmPKh+0x56>
    5fea:	84 e0       	ldi	r24, 0x04	; 4
    5fec:	8d 83       	std	Y+5, r24	; 0x05
    5fee:	20 c0       	rjmp	.+64     	; 0x6030 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    5ff0:	ce 01       	movw	r24, r28
    5ff2:	6e ef       	ldi	r22, 0xFE	; 254
    5ff4:	a8 01       	movw	r20, r16
    5ff6:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <_ZN7Sd2Card9writeDataEhPKh>
    5ffa:	88 23       	and	r24, r24
    5ffc:	c9 f0       	breq	.+50     	; 0x6030 <_ZN7Sd2Card10writeBlockEmPKh+0x96>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    5ffe:	ce 01       	movw	r24, r28
    6000:	68 e5       	ldi	r22, 0x58	; 88
    6002:	72 e0       	ldi	r23, 0x02	; 2
    6004:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>
    6008:	88 23       	and	r24, r24
    600a:	19 f4       	brne	.+6      	; 0x6012 <_ZN7Sd2Card10writeBlockEmPKh+0x78>
    600c:	85 e1       	ldi	r24, 0x15	; 21
    600e:	8d 83       	std	Y+5, r24	; 0x05
    6010:	0f c0       	rjmp	.+30     	; 0x6030 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    6012:	ce 01       	movw	r24, r28
    6014:	6d e0       	ldi	r22, 0x0D	; 13
    6016:	20 e0       	ldi	r18, 0x00	; 0
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	a9 01       	movw	r20, r18
    601c:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    6020:	88 23       	and	r24, r24
    6022:	21 f4       	brne	.+8      	; 0x602c <_ZN7Sd2Card10writeBlockEmPKh+0x92>
    6024:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZL6spiRecv>
    6028:	88 23       	and	r24, r24
    602a:	79 f0       	breq	.+30     	; 0x604a <_ZN7Sd2Card10writeBlockEmPKh+0xb0>
    602c:	84 e1       	ldi	r24, 0x14	; 20
    602e:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    6030:	ce 01       	movw	r24, r28
    6032:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    6036:	80 e0       	ldi	r24, 0x00	; 0
}
    6038:	df 91       	pop	r29
    603a:	cf 91       	pop	r28
    603c:	1f 91       	pop	r17
    603e:	0f 91       	pop	r16
    6040:	ff 90       	pop	r15
    6042:	ef 90       	pop	r14
    6044:	df 90       	pop	r13
    6046:	cf 90       	pop	r12
    6048:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    604a:	ce 01       	movw	r24, r28
    604c:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	f2 cf       	rjmp	.-28     	; 0x6038 <_ZN7Sd2Card10writeBlockEmPKh+0x9e>

00006054 <_ZN7Sd2Card10writeStartEmm>:
 * for optimized multiple block writes.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
    6054:	8f 92       	push	r8
    6056:	9f 92       	push	r9
    6058:	af 92       	push	r10
    605a:	bf 92       	push	r11
    605c:	cf 92       	push	r12
    605e:	df 92       	push	r13
    6060:	ef 92       	push	r14
    6062:	ff 92       	push	r15
    6064:	0f 93       	push	r16
    6066:	1f 93       	push	r17
    6068:	cf 93       	push	r28
    606a:	df 93       	push	r29
    606c:	ec 01       	movw	r28, r24
    606e:	6a 01       	movw	r12, r20
    6070:	7b 01       	movw	r14, r22
    6072:	48 01       	movw	r8, r16
    6074:	59 01       	movw	r10, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    6076:	41 15       	cp	r20, r1
    6078:	51 05       	cpc	r21, r1
    607a:	61 05       	cpc	r22, r1
    607c:	71 05       	cpc	r23, r1
    607e:	19 f4       	brne	.+6      	; 0x6086 <_ZN7Sd2Card10writeStartEmm+0x32>
    6080:	82 e1       	ldi	r24, 0x12	; 18
    6082:	8d 83       	std	Y+5, r24	; 0x05
    6084:	27 c0       	rjmp	.+78     	; 0x60d4 <_ZN7Sd2Card10writeStartEmm+0x80>
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    6086:	67 e3       	ldi	r22, 0x37	; 55
    6088:	20 e0       	ldi	r18, 0x00	; 0
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	a9 01       	movw	r20, r18
    608e:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    6092:	ce 01       	movw	r24, r28
    6094:	67 e1       	ldi	r22, 0x17	; 23
    6096:	a5 01       	movw	r20, r10
    6098:	94 01       	movw	r18, r8
    609a:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
    609e:	88 23       	and	r24, r24
    60a0:	19 f0       	breq	.+6      	; 0x60a8 <_ZN7Sd2Card10writeStartEmm+0x54>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    60a2:	87 e0       	ldi	r24, 0x07	; 7
    60a4:	8d 83       	std	Y+5, r24	; 0x05
    60a6:	16 c0       	rjmp	.+44     	; 0x60d4 <_ZN7Sd2Card10writeStartEmm+0x80>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    60a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    60aa:	83 30       	cpi	r24, 0x03	; 3
    60ac:	49 f0       	breq	.+18     	; 0x60c0 <_ZN7Sd2Card10writeStartEmm+0x6c>
    60ae:	0b 2e       	mov	r0, r27
    60b0:	b9 e0       	ldi	r27, 0x09	; 9
    60b2:	cc 0c       	add	r12, r12
    60b4:	dd 1c       	adc	r13, r13
    60b6:	ee 1c       	adc	r14, r14
    60b8:	ff 1c       	adc	r15, r15
    60ba:	ba 95       	dec	r27
    60bc:	d1 f7       	brne	.-12     	; 0x60b2 <_ZN7Sd2Card10writeStartEmm+0x5e>
    60be:	b0 2d       	mov	r27, r0
  if (cardCommand(CMD25, blockNumber)) {
    60c0:	ce 01       	movw	r24, r28
    60c2:	69 e1       	ldi	r22, 0x19	; 25
    60c4:	a7 01       	movw	r20, r14
    60c6:	96 01       	movw	r18, r12
    60c8:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN7Sd2Card11cardCommandEhm>
    60cc:	88 23       	and	r24, r24
    60ce:	39 f0       	breq	.+14     	; 0x60de <_ZN7Sd2Card10writeStartEmm+0x8a>
    60d0:	85 e0       	ldi	r24, 0x05	; 5
    60d2:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    60d4:	ce 01       	movw	r24, r28
    60d6:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	01 c0       	rjmp	.+2      	; 0x60e0 <_ZN7Sd2Card10writeStartEmm+0x8c>
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    60de:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    60e0:	df 91       	pop	r29
    60e2:	cf 91       	pop	r28
    60e4:	1f 91       	pop	r17
    60e6:	0f 91       	pop	r16
    60e8:	ff 90       	pop	r15
    60ea:	ef 90       	pop	r14
    60ec:	df 90       	pop	r13
    60ee:	cf 90       	pop	r12
    60f0:	bf 90       	pop	r11
    60f2:	af 90       	pop	r10
    60f4:	9f 90       	pop	r9
    60f6:	8f 90       	pop	r8
    60f8:	08 95       	ret

000060fa <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	ec 01       	movw	r28, r24
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    6100:	68 e5       	ldi	r22, 0x58	; 88
    6102:	72 e0       	ldi	r23, 0x02	; 2
    6104:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>
    6108:	88 23       	and	r24, r24
    610a:	79 f0       	breq	.+30     	; 0x612a <_ZN7Sd2Card9writeStopEv+0x30>
  spiSend(STOP_TRAN_TOKEN);
    610c:	8d ef       	ldi	r24, 0xFD	; 253
    610e:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZL7spiSendh>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    6112:	ce 01       	movw	r24, r28
    6114:	68 e5       	ldi	r22, 0x58	; 88
    6116:	72 e0       	ldi	r23, 0x02	; 2
    6118:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7Sd2Card11waitNotBusyEj>
    611c:	88 23       	and	r24, r24
    611e:	29 f0       	breq	.+10     	; 0x612a <_ZN7Sd2Card9writeStopEv+0x30>
  chipSelectHigh();
    6120:	ce 01       	movw	r24, r28
    6122:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    6126:	81 e0       	ldi	r24, 0x01	; 1
    6128:	06 c0       	rjmp	.+12     	; 0x6136 <_ZN7Sd2Card9writeStopEv+0x3c>
    612a:	80 e1       	ldi	r24, 0x10	; 16
    612c:	8d 83       	std	Y+5, r24	; 0x05

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
    612e:	ce 01       	movw	r24, r28
    6130:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    6134:	80 e0       	ldi	r24, 0x00	; 0
}
    6136:	df 91       	pop	r29
    6138:	cf 91       	pop	r28
    613a:	08 95       	ret

0000613c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    613c:	80 e5       	ldi	r24, 0x50	; 80
    613e:	80 93 78 06 	sts	0x0678, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    6142:	10 92 79 06 	sts	0x0679, r1
    6146:	08 95       	ret

00006148 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    6148:	cf 93       	push	r28
    614a:	df 93       	push	r29
    614c:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    614e:	9c 01       	movw	r18, r24
    6150:	2a 5f       	subi	r18, 0xFA	; 250
    6152:	3f 4f       	sbci	r19, 0xFF	; 255
    6154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6158:	41 e0       	ldi	r20, 0x01	; 1
    615a:	50 e0       	ldi	r21, 0x00	; 0
    615c:	60 e0       	ldi	r22, 0x00	; 0
    615e:	70 e0       	ldi	r23, 0x00	; 0
    6160:	0e 94 17 42 	call	0x842e	; 0x842e <_ZN8SdVolume15allocContiguousEmPm>
    6164:	88 23       	and	r24, r24
    6166:	a9 f0       	breq	.+42     	; 0x6192 <_ZN6SdFile10addClusterEv+0x4a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    6168:	8f 89       	ldd	r24, Y+23	; 0x17
    616a:	98 8d       	ldd	r25, Y+24	; 0x18
    616c:	a9 8d       	ldd	r26, Y+25	; 0x19
    616e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6170:	00 97       	sbiw	r24, 0x00	; 0
    6172:	a1 05       	cpc	r26, r1
    6174:	b1 05       	cpc	r27, r1
    6176:	79 f4       	brne	.+30     	; 0x6196 <_ZN6SdFile10addClusterEv+0x4e>
    firstCluster_ = curCluster_;
    6178:	8e 81       	ldd	r24, Y+6	; 0x06
    617a:	9f 81       	ldd	r25, Y+7	; 0x07
    617c:	a8 85       	ldd	r26, Y+8	; 0x08
    617e:	b9 85       	ldd	r27, Y+9	; 0x09
    6180:	8f 8b       	std	Y+23, r24	; 0x17
    6182:	98 8f       	std	Y+24, r25	; 0x18
    6184:	a9 8f       	std	Y+25, r26	; 0x19
    6186:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    6188:	8c 81       	ldd	r24, Y+4	; 0x04
    618a:	80 68       	ori	r24, 0x80	; 128
    618c:	8c 83       	std	Y+4, r24	; 0x04
  }
  return true;
    618e:	81 e0       	ldi	r24, 0x01	; 1
    6190:	03 c0       	rjmp	.+6      	; 0x6198 <_ZN6SdFile10addClusterEv+0x50>
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    6192:	80 e0       	ldi	r24, 0x00	; 0
    6194:	01 c0       	rjmp	.+2      	; 0x6198 <_ZN6SdFile10addClusterEv+0x50>
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    6196:	81 e0       	ldi	r24, 0x01	; 1
}
    6198:	df 91       	pop	r29
    619a:	cf 91       	pop	r28
    619c:	08 95       	ret

0000619e <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    619e:	cf 92       	push	r12
    61a0:	df 92       	push	r13
    61a2:	ef 92       	push	r14
    61a4:	ff 92       	push	r15
    61a6:	0f 93       	push	r16
    61a8:	1f 93       	push	r17
    61aa:	cf 93       	push	r28
    61ac:	df 93       	push	r29
    61ae:	8c 01       	movw	r16, r24
  if (!addCluster()) return false;
    61b0:	0e 94 a4 30 	call	0x6148	; 0x6148 <_ZN6SdFile10addClusterEv>
    61b4:	88 23       	and	r24, r24
    61b6:	09 f4       	brne	.+2      	; 0x61ba <_ZN6SdFile13addDirClusterEv+0x1c>
    61b8:	51 c0       	rjmp	.+162    	; 0x625c <_ZN6SdFile13addDirClusterEv+0xbe>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    61ba:	d8 01       	movw	r26, r16
    61bc:	5b 96       	adiw	r26, 0x1b	; 27
    61be:	ed 91       	ld	r30, X+
    61c0:	fc 91       	ld	r31, X
    61c2:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    61c4:	16 96       	adiw	r26, 0x06	; 6
    61c6:	8d 91       	ld	r24, X+
    61c8:	9d 91       	ld	r25, X+
    61ca:	0d 90       	ld	r0, X+
    61cc:	bc 91       	ld	r27, X
    61ce:	a0 2d       	mov	r26, r0
    61d0:	02 97       	sbiw	r24, 0x02	; 2
    61d2:	a1 09       	sbc	r26, r1
    61d4:	b1 09       	sbc	r27, r1
    61d6:	6c 01       	movw	r12, r24
    61d8:	7d 01       	movw	r14, r26
    61da:	05 84       	ldd	r0, Z+13	; 0x0d
    61dc:	04 c0       	rjmp	.+8      	; 0x61e6 <_ZN6SdFile13addDirClusterEv+0x48>
    61de:	cc 0c       	add	r12, r12
    61e0:	dd 1c       	adc	r13, r13
    61e2:	ee 1c       	adc	r14, r14
    61e4:	ff 1c       	adc	r15, r15
    61e6:	0a 94       	dec	r0
    61e8:	d2 f7       	brpl	.-12     	; 0x61de <_ZN6SdFile13addDirClusterEv+0x40>
    61ea:	86 85       	ldd	r24, Z+14	; 0x0e
    61ec:	97 85       	ldd	r25, Z+15	; 0x0f
    61ee:	a0 89       	ldd	r26, Z+16	; 0x10
    61f0:	b1 89       	ldd	r27, Z+17	; 0x11
    61f2:	c8 0e       	add	r12, r24
    61f4:	d9 1e       	adc	r13, r25
    61f6:	ea 1e       	adc	r14, r26
    61f8:	fb 1e       	adc	r15, r27
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    61fa:	c4 81       	ldd	r28, Z+4	; 0x04
    61fc:	cc 23       	and	r28, r28
    61fe:	89 f0       	breq	.+34     	; 0x6222 <_ZN6SdFile13addDirClusterEv+0x84>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    6200:	08 94       	sec
    6202:	c1 08       	sbc	r12, r1
    6204:	d1 08       	sbc	r13, r1
    6206:	e1 08       	sbc	r14, r1
    6208:	f1 08       	sbc	r15, r1
    620a:	c7 01       	movw	r24, r14
    620c:	b6 01       	movw	r22, r12
    620e:	6c 0f       	add	r22, r28
    6210:	71 1d       	adc	r23, r1
    6212:	81 1d       	adc	r24, r1
    6214:	91 1d       	adc	r25, r1
    6216:	0e 94 3d 40 	call	0x807a	; 0x807a <_ZN8SdVolume14cacheZeroBlockEm>
    621a:	88 23       	and	r24, r24
    621c:	09 f1       	breq	.+66     	; 0x6260 <_ZN6SdFile13addDirClusterEv+0xc2>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    621e:	c1 50       	subi	r28, 0x01	; 1
    6220:	a1 f7       	brne	.-24     	; 0x620a <_ZN6SdFile13addDirClusterEv+0x6c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    6222:	e8 01       	movw	r28, r16
    6224:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6226:	fc 8d       	ldd	r31, Y+28	; 0x1c
    6228:	80 e0       	ldi	r24, 0x00	; 0
    622a:	92 e0       	ldi	r25, 0x02	; 2
    622c:	a0 e0       	ldi	r26, 0x00	; 0
    622e:	b0 e0       	ldi	r27, 0x00	; 0
    6230:	05 84       	ldd	r0, Z+13	; 0x0d
    6232:	04 c0       	rjmp	.+8      	; 0x623c <_ZN6SdFile13addDirClusterEv+0x9e>
    6234:	88 0f       	add	r24, r24
    6236:	99 1f       	adc	r25, r25
    6238:	aa 1f       	adc	r26, r26
    623a:	bb 1f       	adc	r27, r27
    623c:	0a 94       	dec	r0
    623e:	d2 f7       	brpl	.-12     	; 0x6234 <_ZN6SdFile13addDirClusterEv+0x96>
    6240:	4b 89       	ldd	r20, Y+19	; 0x13
    6242:	5c 89       	ldd	r21, Y+20	; 0x14
    6244:	6d 89       	ldd	r22, Y+21	; 0x15
    6246:	7e 89       	ldd	r23, Y+22	; 0x16
    6248:	84 0f       	add	r24, r20
    624a:	95 1f       	adc	r25, r21
    624c:	a6 1f       	adc	r26, r22
    624e:	b7 1f       	adc	r27, r23
    6250:	8b 8b       	std	Y+19, r24	; 0x13
    6252:	9c 8b       	std	Y+20, r25	; 0x14
    6254:	ad 8b       	std	Y+21, r26	; 0x15
    6256:	be 8b       	std	Y+22, r27	; 0x16
  return true;
    6258:	81 e0       	ldi	r24, 0x01	; 1
    625a:	03 c0       	rjmp	.+6      	; 0x6262 <_ZN6SdFile13addDirClusterEv+0xc4>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    625c:	80 e0       	ldi	r24, 0x00	; 0
    625e:	01 c0       	rjmp	.+2      	; 0x6262 <_ZN6SdFile13addDirClusterEv+0xc4>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    6260:	80 e0       	ldi	r24, 0x00	; 0
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
  return true;
}
    6262:	df 91       	pop	r29
    6264:	cf 91       	pop	r28
    6266:	1f 91       	pop	r17
    6268:	0f 91       	pop	r16
    626a:	ff 90       	pop	r15
    626c:	ef 90       	pop	r14
    626e:	df 90       	pop	r13
    6270:	cf 90       	pop	r12
    6272:	08 95       	ret

00006274 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    6274:	cf 93       	push	r28
    6276:	df 93       	push	r29
    6278:	ec 01       	movw	r28, r24
    627a:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    627c:	8e 85       	ldd	r24, Y+14	; 0x0e
    627e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6280:	a8 89       	ldd	r26, Y+16	; 0x10
    6282:	b9 89       	ldd	r27, Y+17	; 0x11
    6284:	bc 01       	movw	r22, r24
    6286:	cd 01       	movw	r24, r26
    6288:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    628c:	88 23       	and	r24, r24
    628e:	69 f0       	breq	.+26     	; 0x62aa <_ZN6SdFile13cacheDirEntryEh+0x36>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    6290:	8a 89       	ldd	r24, Y+18	; 0x12
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	88 0f       	add	r24, r24
    6296:	99 1f       	adc	r25, r25
    6298:	82 95       	swap	r24
    629a:	92 95       	swap	r25
    629c:	90 7f       	andi	r25, 0xF0	; 240
    629e:	98 27       	eor	r25, r24
    62a0:	80 7f       	andi	r24, 0xF0	; 240
    62a2:	98 27       	eor	r25, r24
    62a4:	8b 57       	subi	r24, 0x7B	; 123
    62a6:	99 4f       	sbci	r25, 0xF9	; 249
    62a8:	02 c0       	rjmp	.+4      	; 0x62ae <_ZN6SdFile13cacheDirEntryEh+0x3a>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
    62ae:	df 91       	pop	r29
    62b0:	cf 91       	pop	r28
    62b2:	08 95       	ret

000062b4 <_ZN6SdFile15contiguousRangeEPmS0_>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is not contiguous, file has zero length
 * or an I/O error occurred.
 */
uint8_t SdFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {
    62b4:	8f 92       	push	r8
    62b6:	9f 92       	push	r9
    62b8:	af 92       	push	r10
    62ba:	bf 92       	push	r11
    62bc:	cf 92       	push	r12
    62be:	df 92       	push	r13
    62c0:	ef 92       	push	r14
    62c2:	ff 92       	push	r15
    62c4:	0f 93       	push	r16
    62c6:	1f 93       	push	r17
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
    62cc:	00 d0       	rcall	.+0      	; 0x62ce <_ZN6SdFile15contiguousRangeEPmS0_+0x1a>
    62ce:	0f 92       	push	r0
    62d0:	cd b7       	in	r28, 0x3d	; 61
    62d2:	de b7       	in	r29, 0x3e	; 62
    62d4:	8c 01       	movw	r16, r24
    62d6:	5b 01       	movw	r10, r22
    62d8:	4a 01       	movw	r8, r20
  // error if no blocks
  if (firstCluster_ == 0) return false;
    62da:	dc 01       	movw	r26, r24
    62dc:	57 96       	adiw	r26, 0x17	; 23
    62de:	cd 90       	ld	r12, X+
    62e0:	dd 90       	ld	r13, X+
    62e2:	ed 90       	ld	r14, X+
    62e4:	fc 90       	ld	r15, X
    62e6:	5a 97       	sbiw	r26, 0x1a	; 26
    62e8:	c1 14       	cp	r12, r1
    62ea:	d1 04       	cpc	r13, r1
    62ec:	e1 04       	cpc	r14, r1
    62ee:	f1 04       	cpc	r15, r1
    62f0:	19 f4       	brne	.+6      	; 0x62f8 <_ZN6SdFile15contiguousRangeEPmS0_+0x44>
    62f2:	81 c0       	rjmp	.+258    	; 0x63f6 <_ZN6SdFile15contiguousRangeEPmS0_+0x142>

  for (uint32_t c = firstCluster_; ; c++) {
    62f4:	6c 01       	movw	r12, r24
    62f6:	7d 01       	movw	r14, r26
    uint32_t next;
    if (!vol_->fatGet(c, &next)) return false;
    62f8:	f8 01       	movw	r30, r16
    62fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    62fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    62fe:	b7 01       	movw	r22, r14
    6300:	a6 01       	movw	r20, r12
    6302:	9e 01       	movw	r18, r28
    6304:	2f 5f       	subi	r18, 0xFF	; 255
    6306:	3f 4f       	sbci	r19, 0xFF	; 255
    6308:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    630c:	88 23       	and	r24, r24
    630e:	09 f4       	brne	.+2      	; 0x6312 <_ZN6SdFile15contiguousRangeEPmS0_+0x5e>
    6310:	74 c0       	rjmp	.+232    	; 0x63fa <_ZN6SdFile15contiguousRangeEPmS0_+0x146>

    // check for contiguous
    if (next != (c + 1)) {
    6312:	d7 01       	movw	r26, r14
    6314:	c6 01       	movw	r24, r12
    6316:	01 96       	adiw	r24, 0x01	; 1
    6318:	a1 1d       	adc	r26, r1
    631a:	b1 1d       	adc	r27, r1
    631c:	49 81       	ldd	r20, Y+1	; 0x01
    631e:	5a 81       	ldd	r21, Y+2	; 0x02
    6320:	6b 81       	ldd	r22, Y+3	; 0x03
    6322:	7c 81       	ldd	r23, Y+4	; 0x04
    6324:	84 17       	cp	r24, r20
    6326:	95 07       	cpc	r25, r21
    6328:	a6 07       	cpc	r26, r22
    632a:	b7 07       	cpc	r27, r23
    632c:	19 f3       	breq	.-58     	; 0x62f4 <_ZN6SdFile15contiguousRangeEPmS0_+0x40>
      // error if not end of chain
      if (!vol_->isEOC(next)) return false;
    632e:	d8 01       	movw	r26, r16
    6330:	5b 96       	adiw	r26, 0x1b	; 27
    6332:	ed 91       	ld	r30, X+
    6334:	fc 91       	ld	r31, X
    6336:	5c 97       	sbiw	r26, 0x1c	; 28
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    6338:	87 89       	ldd	r24, Z+23	; 0x17
    633a:	80 31       	cpi	r24, 0x10	; 16
    633c:	29 f4       	brne	.+10     	; 0x6348 <_ZN6SdFile15contiguousRangeEPmS0_+0x94>
    633e:	88 ef       	ldi	r24, 0xF8	; 248
    6340:	9f ef       	ldi	r25, 0xFF	; 255
    6342:	a0 e0       	ldi	r26, 0x00	; 0
    6344:	b0 e0       	ldi	r27, 0x00	; 0
    6346:	04 c0       	rjmp	.+8      	; 0x6350 <_ZN6SdFile15contiguousRangeEPmS0_+0x9c>
    6348:	88 ef       	ldi	r24, 0xF8	; 248
    634a:	9f ef       	ldi	r25, 0xFF	; 255
    634c:	af ef       	ldi	r26, 0xFF	; 255
    634e:	bf e0       	ldi	r27, 0x0F	; 15
    6350:	48 17       	cp	r20, r24
    6352:	59 07       	cpc	r21, r25
    6354:	6a 07       	cpc	r22, r26
    6356:	7b 07       	cpc	r23, r27
    6358:	08 f4       	brcc	.+2      	; 0x635c <_ZN6SdFile15contiguousRangeEPmS0_+0xa8>
    635a:	51 c0       	rjmp	.+162    	; 0x63fe <_ZN6SdFile15contiguousRangeEPmS0_+0x14a>
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    635c:	d8 01       	movw	r26, r16
    635e:	57 96       	adiw	r26, 0x17	; 23
    6360:	4d 91       	ld	r20, X+
    6362:	5d 91       	ld	r21, X+
    6364:	6d 91       	ld	r22, X+
    6366:	7c 91       	ld	r23, X
    6368:	5a 97       	sbiw	r26, 0x1a	; 26
    636a:	db 01       	movw	r26, r22
    636c:	ca 01       	movw	r24, r20
    636e:	02 97       	sbiw	r24, 0x02	; 2
    6370:	a1 09       	sbc	r26, r1
    6372:	b1 09       	sbc	r27, r1
    6374:	ac 01       	movw	r20, r24
    6376:	bd 01       	movw	r22, r26
    6378:	05 84       	ldd	r0, Z+13	; 0x0d
    637a:	04 c0       	rjmp	.+8      	; 0x6384 <_ZN6SdFile15contiguousRangeEPmS0_+0xd0>
    637c:	44 0f       	add	r20, r20
    637e:	55 1f       	adc	r21, r21
    6380:	66 1f       	adc	r22, r22
    6382:	77 1f       	adc	r23, r23
    6384:	0a 94       	dec	r0
    6386:	d2 f7       	brpl	.-12     	; 0x637c <_ZN6SdFile15contiguousRangeEPmS0_+0xc8>
    6388:	86 85       	ldd	r24, Z+14	; 0x0e
    638a:	97 85       	ldd	r25, Z+15	; 0x0f
    638c:	a0 89       	ldd	r26, Z+16	; 0x10
    638e:	b1 89       	ldd	r27, Z+17	; 0x11
    6390:	84 0f       	add	r24, r20
    6392:	95 1f       	adc	r25, r21
    6394:	a6 1f       	adc	r26, r22
    6396:	b7 1f       	adc	r27, r23
      *bgnBlock = vol_->clusterStartBlock(firstCluster_);
    6398:	f5 01       	movw	r30, r10
    639a:	80 83       	st	Z, r24
    639c:	91 83       	std	Z+1, r25	; 0x01
    639e:	a2 83       	std	Z+2, r26	; 0x02
    63a0:	b3 83       	std	Z+3, r27	; 0x03
      *endBlock = vol_->clusterStartBlock(c)
    63a2:	d8 01       	movw	r26, r16
    63a4:	5b 96       	adiw	r26, 0x1b	; 27
    63a6:	ed 91       	ld	r30, X+
    63a8:	fc 91       	ld	r31, X
    63aa:	5c 97       	sbiw	r26, 0x1c	; 28
    63ac:	86 85       	ldd	r24, Z+14	; 0x0e
    63ae:	97 85       	ldd	r25, Z+15	; 0x0f
    63b0:	a0 89       	ldd	r26, Z+16	; 0x10
    63b2:	b1 89       	ldd	r27, Z+17	; 0x11
    63b4:	01 97       	sbiw	r24, 0x01	; 1
    63b6:	a1 09       	sbc	r26, r1
    63b8:	b1 09       	sbc	r27, r1
                  + vol_->blocksPerCluster_ - 1;
    63ba:	24 81       	ldd	r18, Z+4	; 0x04
    63bc:	82 0f       	add	r24, r18
    63be:	91 1d       	adc	r25, r1
    63c0:	a1 1d       	adc	r26, r1
    63c2:	b1 1d       	adc	r27, r1
    63c4:	b7 01       	movw	r22, r14
    63c6:	a6 01       	movw	r20, r12
    63c8:	42 50       	subi	r20, 0x02	; 2
    63ca:	50 40       	sbci	r21, 0x00	; 0
    63cc:	60 40       	sbci	r22, 0x00	; 0
    63ce:	70 40       	sbci	r23, 0x00	; 0
    63d0:	05 84       	ldd	r0, Z+13	; 0x0d
    63d2:	04 c0       	rjmp	.+8      	; 0x63dc <_ZN6SdFile15contiguousRangeEPmS0_+0x128>
    63d4:	44 0f       	add	r20, r20
    63d6:	55 1f       	adc	r21, r21
    63d8:	66 1f       	adc	r22, r22
    63da:	77 1f       	adc	r23, r23
    63dc:	0a 94       	dec	r0
    63de:	d2 f7       	brpl	.-12     	; 0x63d4 <_ZN6SdFile15contiguousRangeEPmS0_+0x120>
    63e0:	84 0f       	add	r24, r20
    63e2:	95 1f       	adc	r25, r21
    63e4:	a6 1f       	adc	r26, r22
    63e6:	b7 1f       	adc	r27, r23
    63e8:	f4 01       	movw	r30, r8
    63ea:	80 83       	st	Z, r24
    63ec:	91 83       	std	Z+1, r25	; 0x01
    63ee:	a2 83       	std	Z+2, r26	; 0x02
    63f0:	b3 83       	std	Z+3, r27	; 0x03
      return true;
    63f2:	81 e0       	ldi	r24, 0x01	; 1
    63f4:	05 c0       	rjmp	.+10     	; 0x6400 <_ZN6SdFile15contiguousRangeEPmS0_+0x14c>
 * Reasons for failure include file is not contiguous, file has zero length
 * or an I/O error occurred.
 */
uint8_t SdFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {
  // error if no blocks
  if (firstCluster_ == 0) return false;
    63f6:	80 e0       	ldi	r24, 0x00	; 0
    63f8:	03 c0       	rjmp	.+6      	; 0x6400 <_ZN6SdFile15contiguousRangeEPmS0_+0x14c>

  for (uint32_t c = firstCluster_; ; c++) {
    uint32_t next;
    if (!vol_->fatGet(c, &next)) return false;
    63fa:	80 e0       	ldi	r24, 0x00	; 0
    63fc:	01 c0       	rjmp	.+2      	; 0x6400 <_ZN6SdFile15contiguousRangeEPmS0_+0x14c>

    // check for contiguous
    if (next != (c + 1)) {
      // error if not end of chain
      if (!vol_->isEOC(next)) return false;
    63fe:	80 e0       	ldi	r24, 0x00	; 0
      *endBlock = vol_->clusterStartBlock(c)
                  + vol_->blocksPerCluster_ - 1;
      return true;
    }
  }
}
    6400:	0f 90       	pop	r0
    6402:	0f 90       	pop	r0
    6404:	0f 90       	pop	r0
    6406:	0f 90       	pop	r0
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	1f 91       	pop	r17
    640e:	0f 91       	pop	r16
    6410:	ff 90       	pop	r15
    6412:	ef 90       	pop	r14
    6414:	df 90       	pop	r13
    6416:	cf 90       	pop	r12
    6418:	bf 90       	pop	r11
    641a:	af 90       	pop	r10
    641c:	9f 90       	pop	r9
    641e:	8f 90       	pop	r8
    6420:	08 95       	ret

00006422 <_ZN6SdFile7dirNameERK14directoryEntryPc>:
 * \a name in standard 8.3 short name format.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
    6422:	cf 93       	push	r28
    6424:	df 93       	push	r29
  uint8_t j = 0;
    6426:	e8 2f       	mov	r30, r24
    6428:	f9 2f       	mov	r31, r25
  for (uint8_t i = 0; i < 11; i++) {
    642a:	80 e0       	ldi	r24, 0x00	; 0
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
    642c:	90 e0       	ldi	r25, 0x00	; 0
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    642e:	3e e2       	ldi	r19, 0x2E	; 46
 * \a name in standard 8.3 short name format.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
    6430:	ef 01       	movw	r28, r30
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    6432:	20 81       	ld	r18, Z
    6434:	20 32       	cpi	r18, 0x20	; 32
    6436:	69 f0       	breq	.+26     	; 0x6452 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x30>
    if (i == 8) name[j++] = '.';
    6438:	88 30       	cpi	r24, 0x08	; 8
    643a:	29 f4       	brne	.+10     	; 0x6446 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x24>
    643c:	db 01       	movw	r26, r22
    643e:	a9 0f       	add	r26, r25
    6440:	b1 1d       	adc	r27, r1
    6442:	3c 93       	st	X, r19
    6444:	9f 5f       	subi	r25, 0xFF	; 255
    name[j++] = dir.name[i];
    6446:	28 81       	ld	r18, Y
    6448:	db 01       	movw	r26, r22
    644a:	a9 0f       	add	r26, r25
    644c:	b1 1d       	adc	r27, r1
    644e:	2c 93       	st	X, r18
    6450:	9f 5f       	subi	r25, 0xFF	; 255
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6452:	8f 5f       	subi	r24, 0xFF	; 255
    6454:	31 96       	adiw	r30, 0x01	; 1
    6456:	8b 30       	cpi	r24, 0x0B	; 11
    6458:	59 f7       	brne	.-42     	; 0x6430 <_ZN6SdFile7dirNameERK14directoryEntryPc+0xe>
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    name[j++] = dir.name[i];
  }
  name[j] = 0;
    645a:	69 0f       	add	r22, r25
    645c:	71 1d       	adc	r23, r1
    645e:	fb 01       	movw	r30, r22
    6460:	10 82       	st	Z, r1
}
    6462:	df 91       	pop	r29
    6464:	cf 91       	pop	r28
    6466:	08 95       	ret

00006468 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    6468:	1f 93       	push	r17
    646a:	cf 93       	push	r28
    646c:	df 93       	push	r29
    646e:	dc 01       	movw	r26, r24
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    6470:	fb 01       	movw	r30, r22
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    6472:	8b e0       	ldi	r24, 0x0B	; 11
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    6474:	90 e2       	ldi	r25, 0x20	; 32
    6476:	91 93       	st	Z+, r25
    6478:	81 50       	subi	r24, 0x01	; 1
    647a:	e9 f7       	brne	.-6      	; 0x6476 <_ZN6SdFile10make83NameEPKcPh+0xe>
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	47 e0       	ldi	r20, 0x07	; 7
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    6480:	c5 e0       	ldi	r28, 0x05	; 5
    6482:	d2 e0       	ldi	r29, 0x02	; 2
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    6484:	58 e0       	ldi	r21, 0x08	; 8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    6486:	1a e0       	ldi	r17, 0x0A	; 10
    6488:	20 c0       	rjmp	.+64     	; 0x64ca <_ZN6SdFile10make83NameEPKcPh+0x62>
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    648a:	2e 32       	cpi	r18, 0x2E	; 46
    648c:	41 f4       	brne	.+16     	; 0x649e <_ZN6SdFile10make83NameEPKcPh+0x36>
      if (n == 10) return false;  // only one dot allowed
    648e:	4a 30       	cpi	r20, 0x0A	; 10
    6490:	31 f1       	breq	.+76     	; 0x64de <_ZN6SdFile10make83NameEPKcPh+0x76>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    6492:	35 2f       	mov	r19, r21
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    6494:	41 2f       	mov	r20, r17
    6496:	19 c0       	rjmp	.+50     	; 0x64ca <_ZN6SdFile10make83NameEPKcPh+0x62>
    } else {
      // illegal FAT characters
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    6498:	2e 17       	cp	r18, r30
    649a:	11 f4       	brne	.+4      	; 0x64a0 <_ZN6SdFile10make83NameEPKcPh+0x38>
    649c:	22 c0       	rjmp	.+68     	; 0x64e2 <_ZN6SdFile10make83NameEPKcPh+0x7a>
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    649e:	ce 01       	movw	r24, r28
    } else {
      // illegal FAT characters
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    64a0:	fc 01       	movw	r30, r24
    64a2:	01 96       	adiw	r24, 0x01	; 1
    64a4:	e4 91       	lpm	r30, Z
    64a6:	ee 23       	and	r30, r30
    64a8:	b9 f7       	brne	.-18     	; 0x6498 <_ZN6SdFile10make83NameEPKcPh+0x30>
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    64aa:	43 17       	cp	r20, r19
    64ac:	e0 f0       	brcs	.+56     	; 0x64e6 <_ZN6SdFile10make83NameEPKcPh+0x7e>
    64ae:	21 32       	cpi	r18, 0x21	; 33
    64b0:	e0 f0       	brcs	.+56     	; 0x64ea <_ZN6SdFile10make83NameEPKcPh+0x82>
    64b2:	2f 37       	cpi	r18, 0x7F	; 127
    64b4:	e0 f4       	brcc	.+56     	; 0x64ee <_ZN6SdFile10make83NameEPKcPh+0x86>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    64b6:	fb 01       	movw	r30, r22
    64b8:	e3 0f       	add	r30, r19
    64ba:	f1 1d       	adc	r31, r1
    64bc:	82 2f       	mov	r24, r18
    64be:	81 56       	subi	r24, 0x61	; 97
    64c0:	8a 31       	cpi	r24, 0x1A	; 26
    64c2:	08 f4       	brcc	.+2      	; 0x64c6 <_ZN6SdFile10make83NameEPKcPh+0x5e>
    64c4:	20 52       	subi	r18, 0x20	; 32
    64c6:	20 83       	st	Z, r18
    64c8:	3f 5f       	subi	r19, 0xFF	; 255
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    64ca:	2d 91       	ld	r18, X+
    64cc:	22 23       	and	r18, r18
    64ce:	e9 f6       	brne	.-70     	; 0x648a <_ZN6SdFile10make83NameEPKcPh+0x22>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	fb 01       	movw	r30, r22
    64d4:	90 81       	ld	r25, Z
    64d6:	90 32       	cpi	r25, 0x20	; 32
    64d8:	59 f4       	brne	.+22     	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
    64da:	80 e0       	ldi	r24, 0x00	; 0
    64dc:	09 c0       	rjmp	.+18     	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    64de:	80 e0       	ldi	r24, 0x00	; 0
    64e0:	07 c0       	rjmp	.+14     	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
    } else {
      // illegal FAT characters
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    64e2:	80 e0       	ldi	r24, 0x00	; 0
    64e4:	05 c0       	rjmp	.+10     	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    64e6:	80 e0       	ldi	r24, 0x00	; 0
    64e8:	03 c0       	rjmp	.+6      	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
    64ea:	80 e0       	ldi	r24, 0x00	; 0
    64ec:	01 c0       	rjmp	.+2      	; 0x64f0 <_ZN6SdFile10make83NameEPKcPh+0x88>
    64ee:	80 e0       	ldi	r24, 0x00	; 0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    64f0:	df 91       	pop	r29
    64f2:	cf 91       	pop	r28
    64f4:	1f 91       	pop	r17
    64f6:	08 95       	ret

000064f8 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    64f8:	0f 93       	push	r16
    64fa:	1f 93       	push	r17
    64fc:	cf 93       	push	r28
    64fe:	df 93       	push	r29
    6500:	ec 01       	movw	r28, r24
    6502:	8b 01       	movw	r16, r22
  // error if file is already open
  if (isOpen()) return false;
    6504:	8d 81       	ldd	r24, Y+5	; 0x05
    6506:	88 23       	and	r24, r24
    6508:	09 f0       	breq	.+2      	; 0x650c <_ZN6SdFile8openRootEP8SdVolume+0x14>
    650a:	4e c0       	rjmp	.+156    	; 0x65a8 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
  /** \return The number of FAT structures on the volume. */
  uint8_t fatCount(void) const {return fatCount_;}
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
    650c:	fb 01       	movw	r30, r22
    650e:	87 89       	ldd	r24, Z+23	; 0x17

  if (vol->fatType() == 16) {
    6510:	80 31       	cpi	r24, 0x10	; 16
    6512:	19 f5       	brne	.+70     	; 0x655a <_ZN6SdFile8openRootEP8SdVolume+0x62>
    type_ = FAT_FILE_TYPE_ROOT16;
    6514:	82 e0       	ldi	r24, 0x02	; 2
    6516:	8d 83       	std	Y+5, r24	; 0x05
    firstCluster_ = 0;
    6518:	1f 8a       	std	Y+23, r1	; 0x17
    651a:	18 8e       	std	Y+24, r1	; 0x18
    651c:	19 8e       	std	Y+25, r1	; 0x19
    651e:	1a 8e       	std	Y+26, r1	; 0x1a
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    6520:	80 8d       	ldd	r24, Z+24	; 0x18
    6522:	91 8d       	ldd	r25, Z+25	; 0x19
    6524:	a0 e0       	ldi	r26, 0x00	; 0
    6526:	b0 e0       	ldi	r27, 0x00	; 0
    fileSize_ = 32 * vol->rootDirEntryCount();
    6528:	88 0f       	add	r24, r24
    652a:	99 1f       	adc	r25, r25
    652c:	aa 1f       	adc	r26, r26
    652e:	bb 1f       	adc	r27, r27
    6530:	88 0f       	add	r24, r24
    6532:	99 1f       	adc	r25, r25
    6534:	aa 1f       	adc	r26, r26
    6536:	bb 1f       	adc	r27, r27
    6538:	88 0f       	add	r24, r24
    653a:	99 1f       	adc	r25, r25
    653c:	aa 1f       	adc	r26, r26
    653e:	bb 1f       	adc	r27, r27
    6540:	88 0f       	add	r24, r24
    6542:	99 1f       	adc	r25, r25
    6544:	aa 1f       	adc	r26, r26
    6546:	bb 1f       	adc	r27, r27
    6548:	88 0f       	add	r24, r24
    654a:	99 1f       	adc	r25, r25
    654c:	aa 1f       	adc	r26, r26
    654e:	bb 1f       	adc	r27, r27
    6550:	8b 8b       	std	Y+19, r24	; 0x13
    6552:	9c 8b       	std	Y+20, r25	; 0x14
    6554:	ad 8b       	std	Y+21, r26	; 0x15
    6556:	be 8b       	std	Y+22, r27	; 0x16
    6558:	15 c0       	rjmp	.+42     	; 0x6584 <_ZN6SdFile8openRootEP8SdVolume+0x8c>
  } else if (vol->fatType() == 32) {
    655a:	80 32       	cpi	r24, 0x20	; 32
    655c:	39 f5       	brne	.+78     	; 0x65ac <_ZN6SdFile8openRootEP8SdVolume+0xb4>
    type_ = FAT_FILE_TYPE_ROOT32;
    655e:	83 e0       	ldi	r24, 0x03	; 3
    6560:	8d 83       	std	Y+5, r24	; 0x05
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    6562:	fb 01       	movw	r30, r22
    6564:	42 8d       	ldd	r20, Z+26	; 0x1a
    6566:	53 8d       	ldd	r21, Z+27	; 0x1b
    6568:	64 8d       	ldd	r22, Z+28	; 0x1c
    656a:	75 8d       	ldd	r23, Z+29	; 0x1d
    firstCluster_ = vol->rootDirStart();
    656c:	4f 8b       	std	Y+23, r20	; 0x17
    656e:	58 8f       	std	Y+24, r21	; 0x18
    6570:	69 8f       	std	Y+25, r22	; 0x19
    6572:	7a 8f       	std	Y+26, r23	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    6574:	9e 01       	movw	r18, r28
    6576:	2d 5e       	subi	r18, 0xED	; 237
    6578:	3f 4f       	sbci	r19, 0xFF	; 255
    657a:	c8 01       	movw	r24, r16
    657c:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <_ZNK8SdVolume9chainSizeEmPm>
    6580:	88 23       	and	r24, r24
    6582:	b1 f0       	breq	.+44     	; 0x65b0 <_ZN6SdFile8openRootEP8SdVolume+0xb8>
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    6584:	1c 8f       	std	Y+28, r17	; 0x1c
    6586:	0b 8f       	std	Y+27, r16	; 0x1b
  // read only
  flags_ = O_READ;
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    658c:	1e 82       	std	Y+6, r1	; 0x06
    658e:	1f 82       	std	Y+7, r1	; 0x07
    6590:	18 86       	std	Y+8, r1	; 0x08
    6592:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    6594:	1a 86       	std	Y+10, r1	; 0x0a
    6596:	1b 86       	std	Y+11, r1	; 0x0b
    6598:	1c 86       	std	Y+12, r1	; 0x0c
    659a:	1d 86       	std	Y+13, r1	; 0x0d

  // root has no directory entry
  dirBlock_ = 0;
    659c:	1e 86       	std	Y+14, r1	; 0x0e
    659e:	1f 86       	std	Y+15, r1	; 0x0f
    65a0:	18 8a       	std	Y+16, r1	; 0x10
    65a2:	19 8a       	std	Y+17, r1	; 0x11
  dirIndex_ = 0;
    65a4:	1a 8a       	std	Y+18, r1	; 0x12
  return true;
    65a6:	05 c0       	rjmp	.+10     	; 0x65b2 <_ZN6SdFile8openRootEP8SdVolume+0xba>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    65a8:	80 e0       	ldi	r24, 0x00	; 0
    65aa:	03 c0       	rjmp	.+6      	; 0x65b2 <_ZN6SdFile8openRootEP8SdVolume+0xba>
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	01 c0       	rjmp	.+2      	; 0x65b2 <_ZN6SdFile8openRootEP8SdVolume+0xba>
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    65b0:	80 e0       	ldi	r24, 0x00	; 0

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
}
    65b2:	df 91       	pop	r29
    65b4:	cf 91       	pop	r28
    65b6:	1f 91       	pop	r17
    65b8:	0f 91       	pop	r16
    65ba:	08 95       	ret

000065bc <_ZN6SdFile12printDirNameERK14directoryEntryh>:
/** %Print the name field of a directory entry in 8.3 format to Serial.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
    65bc:	8f 92       	push	r8
    65be:	9f 92       	push	r9
    65c0:	af 92       	push	r10
    65c2:	bf 92       	push	r11
    65c4:	df 92       	push	r13
    65c6:	ef 92       	push	r14
    65c8:	ff 92       	push	r15
    65ca:	0f 93       	push	r16
    65cc:	1f 93       	push	r17
    65ce:	cf 93       	push	r28
    65d0:	df 93       	push	r29
    65d2:	4c 01       	movw	r8, r24
    65d4:	d6 2e       	mov	r13, r22
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    65d6:	7c 01       	movw	r14, r24
    65d8:	00 e0       	ldi	r16, 0x00	; 0
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
  uint8_t w = 0;
    65da:	10 e0       	ldi	r17, 0x00	; 0
    if (dir.name[i] == ' ')continue;
    if (i == 8) {
      Serial.print('.');
      w++;
    }
    Serial.write(dir.name[i]);
    65dc:	0f 2e       	mov	r0, r31
    65de:	f2 ea       	ldi	r31, 0xA2	; 162
    65e0:	af 2e       	mov	r10, r31
    65e2:	f3 e0       	ldi	r31, 0x03	; 3
    65e4:	bf 2e       	mov	r11, r31
    65e6:	f0 2d       	mov	r31, r0
/** %Print the name field of a directory entry in 8.3 format to Serial.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
    65e8:	e7 01       	movw	r28, r14
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    65ea:	88 81       	ld	r24, Y
    65ec:	80 32       	cpi	r24, 0x20	; 32
    65ee:	61 f0       	breq	.+24     	; 0x6608 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x4c>
    if (i == 8) {
    65f0:	08 30       	cpi	r16, 0x08	; 8
    65f2:	29 f4       	brne	.+10     	; 0x65fe <_ZN6SdFile12printDirNameERK14directoryEntryh+0x42>
      Serial.print('.');
    65f4:	c5 01       	movw	r24, r10
    65f6:	6e e2       	ldi	r22, 0x2E	; 46
    65f8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
      w++;
    65fc:	1f 5f       	subi	r17, 0xFF	; 255
    }
    Serial.write(dir.name[i]);
    65fe:	c5 01       	movw	r24, r10
    6600:	68 81       	ld	r22, Y
    6602:	0e 94 48 02 	call	0x490	; 0x490 <_ZN14HardwareSerial5writeEh>
    w++;
    6606:	1f 5f       	subi	r17, 0xFF	; 255
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6608:	0f 5f       	subi	r16, 0xFF	; 255
    660a:	08 94       	sec
    660c:	e1 1c       	adc	r14, r1
    660e:	f1 1c       	adc	r15, r1
    6610:	0b 30       	cpi	r16, 0x0B	; 11
    6612:	51 f7       	brne	.-44     	; 0x65e8 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x2c>
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
}
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    6614:	f4 01       	movw	r30, r8
    6616:	83 85       	ldd	r24, Z+11	; 0x0b
    6618:	88 71       	andi	r24, 0x18	; 24
      w++;
    }
    Serial.write(dir.name[i]);
    w++;
  }
  if (DIR_IS_SUBDIR(&dir)) {
    661a:	80 31       	cpi	r24, 0x10	; 16
    661c:	31 f4       	brne	.+12     	; 0x662a <_ZN6SdFile12printDirNameERK14directoryEntryh+0x6e>
    Serial.print('/');
    661e:	82 ea       	ldi	r24, 0xA2	; 162
    6620:	93 e0       	ldi	r25, 0x03	; 3
    6622:	6f e2       	ldi	r22, 0x2F	; 47
    6624:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    w++;
    6628:	1f 5f       	subi	r17, 0xFF	; 255
  }
  while (w < width) {
    662a:	1d 15       	cp	r17, r13
    662c:	48 f4       	brcc	.+18     	; 0x6640 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x84>
    Serial.print(' ');
    662e:	c2 ea       	ldi	r28, 0xA2	; 162
    6630:	d3 e0       	ldi	r29, 0x03	; 3
    6632:	ce 01       	movw	r24, r28
    6634:	60 e2       	ldi	r22, 0x20	; 32
    6636:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    w++;
    663a:	1f 5f       	subi	r17, 0xFF	; 255
  }
  if (DIR_IS_SUBDIR(&dir)) {
    Serial.print('/');
    w++;
  }
  while (w < width) {
    663c:	1d 15       	cp	r17, r13
    663e:	c8 f3       	brcs	.-14     	; 0x6632 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x76>
    Serial.print(' ');
    w++;
  }
}
    6640:	df 91       	pop	r29
    6642:	cf 91       	pop	r28
    6644:	1f 91       	pop	r17
    6646:	0f 91       	pop	r16
    6648:	ff 90       	pop	r15
    664a:	ef 90       	pop	r14
    664c:	df 90       	pop	r13
    664e:	bf 90       	pop	r11
    6650:	af 90       	pop	r10
    6652:	9f 90       	pop	r9
    6654:	8f 90       	pop	r8
    6656:	08 95       	ret

00006658 <_ZN6SdFile14printTwoDigitsEh>:
//------------------------------------------------------------------------------
/** %Print a value as two digits to Serial.
 *
 * \param[in] v Value to be printed, 0 <= \a v <= 99
 */
void SdFile::printTwoDigits(uint8_t v) {
    6658:	cf 93       	push	r28
    665a:	df 93       	push	r29
    665c:	00 d0       	rcall	.+0      	; 0x665e <_ZN6SdFile14printTwoDigitsEh+0x6>
    665e:	cd b7       	in	r28, 0x3d	; 61
    6660:	de b7       	in	r29, 0x3e	; 62
  char str[3];
  str[0] = '0' + v/10;
    6662:	6a e0       	ldi	r22, 0x0A	; 10
    6664:	0e 94 a9 58 	call	0xb152	; 0xb152 <__udivmodqi4>
    6668:	80 5d       	subi	r24, 0xD0	; 208
    666a:	89 83       	std	Y+1, r24	; 0x01
  str[1] = '0' + v % 10;
    666c:	90 5d       	subi	r25, 0xD0	; 208
    666e:	9a 83       	std	Y+2, r25	; 0x02
  str[2] = 0;
    6670:	1b 82       	std	Y+3, r1	; 0x03
  Serial.print(str);
    6672:	82 ea       	ldi	r24, 0xA2	; 162
    6674:	93 e0       	ldi	r25, 0x03	; 3
    6676:	be 01       	movw	r22, r28
    6678:	6f 5f       	subi	r22, 0xFF	; 255
    667a:	7f 4f       	sbci	r23, 0xFF	; 255
    667c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print5printEPKc>
}
    6680:	0f 90       	pop	r0
    6682:	0f 90       	pop	r0
    6684:	0f 90       	pop	r0
    6686:	df 91       	pop	r29
    6688:	cf 91       	pop	r28
    668a:	08 95       	ret

0000668c <_ZN6SdFile12printFatTimeEj>:
 *
 * Format is hh:mm:ss.
 *
 * \param[in] fatTime The time field from a directory entry.
 */
void SdFile::printFatTime(uint16_t fatTime) {
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	df 93       	push	r29
    6694:	ec 01       	movw	r28, r24
  printTwoDigits(FAT_HOUR(fatTime));
    6696:	8d 2f       	mov	r24, r29
    6698:	86 95       	lsr	r24
    669a:	86 95       	lsr	r24
    669c:	86 95       	lsr	r24
    669e:	0e 94 2c 33 	call	0x6658	; 0x6658 <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
    66a2:	02 ea       	ldi	r16, 0xA2	; 162
    66a4:	13 e0       	ldi	r17, 0x03	; 3
    66a6:	c8 01       	movw	r24, r16
    66a8:	6a e3       	ldi	r22, 0x3A	; 58
    66aa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
static inline uint8_t FAT_HOUR(uint16_t fatTime) {
  return fatTime >> 11;
}
/** minute part of FAT directory time field */
static inline uint8_t FAT_MINUTE(uint16_t fatTime) {
  return(fatTime >> 5) & 0X3F;
    66ae:	ce 01       	movw	r24, r28
    66b0:	96 95       	lsr	r25
    66b2:	87 95       	ror	r24
    66b4:	92 95       	swap	r25
    66b6:	82 95       	swap	r24
    66b8:	8f 70       	andi	r24, 0x0F	; 15
    66ba:	89 27       	eor	r24, r25
    66bc:	9f 70       	andi	r25, 0x0F	; 15
    66be:	89 27       	eor	r24, r25
  printTwoDigits(FAT_MINUTE(fatTime));
    66c0:	8f 73       	andi	r24, 0x3F	; 63
    66c2:	0e 94 2c 33 	call	0x6658	; 0x6658 <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
    66c6:	c8 01       	movw	r24, r16
    66c8:	6a e3       	ldi	r22, 0x3A	; 58
    66ca:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
}
/** second part of FAT directory time field */
static inline uint8_t FAT_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    66ce:	8c 2f       	mov	r24, r28
    66d0:	8f 71       	andi	r24, 0x1F	; 31
  printTwoDigits(FAT_SECOND(fatTime));
    66d2:	88 0f       	add	r24, r24
    66d4:	0e 94 2c 33 	call	0x6658	; 0x6658 <_ZN6SdFile14printTwoDigitsEh>
}
    66d8:	df 91       	pop	r29
    66da:	cf 91       	pop	r28
    66dc:	1f 91       	pop	r17
    66de:	0f 91       	pop	r16
    66e0:	08 95       	ret

000066e2 <_ZN6SdFile12printFatDateEj>:
 *
 *  Format is yyyy-mm-dd.
 *
 * \param[in] fatDate The date field from a directory entry.
 */
void SdFile::printFatDate(uint16_t fatDate) {
    66e2:	0f 93       	push	r16
    66e4:	1f 93       	push	r17
    66e6:	cf 93       	push	r28
    66e8:	df 93       	push	r29
    66ea:	8c 01       	movw	r16, r24
  Serial.print(FAT_YEAR(fatDate));
    66ec:	c2 ea       	ldi	r28, 0xA2	; 162
    66ee:	d3 e0       	ldi	r29, 0x03	; 3
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
}
/** year part of FAT directory date field */
static inline uint16_t FAT_YEAR(uint16_t fatDate) {
  return 1980 + (fatDate >> 9);
    66f0:	bc 01       	movw	r22, r24
    66f2:	67 2f       	mov	r22, r23
    66f4:	77 27       	eor	r23, r23
    66f6:	66 95       	lsr	r22
    66f8:	64 54       	subi	r22, 0x44	; 68
    66fa:	78 4f       	sbci	r23, 0xF8	; 248
    66fc:	ce 01       	movw	r24, r28
    66fe:	4a e0       	ldi	r20, 0x0A	; 10
    6700:	50 e0       	ldi	r21, 0x00	; 0
    6702:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN5Print5printEji>
  Serial.print('-');
    6706:	ce 01       	movw	r24, r28
    6708:	6d e2       	ldi	r22, 0x2D	; 45
    670a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
}
/** month part of FAT directory date field */
static inline uint8_t FAT_MONTH(uint16_t fatDate) {
  return (fatDate >> 5) & 0XF;
    670e:	c8 01       	movw	r24, r16
    6710:	96 95       	lsr	r25
    6712:	87 95       	ror	r24
    6714:	92 95       	swap	r25
    6716:	82 95       	swap	r24
    6718:	8f 70       	andi	r24, 0x0F	; 15
    671a:	89 27       	eor	r24, r25
    671c:	9f 70       	andi	r25, 0x0F	; 15
    671e:	89 27       	eor	r24, r25
  printTwoDigits(FAT_MONTH(fatDate));
    6720:	8f 70       	andi	r24, 0x0F	; 15
    6722:	0e 94 2c 33 	call	0x6658	; 0x6658 <_ZN6SdFile14printTwoDigitsEh>
  Serial.print('-');
    6726:	ce 01       	movw	r24, r28
    6728:	6d e2       	ldi	r22, 0x2D	; 45
    672a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
  printTwoDigits(FAT_DAY(fatDate));
    672e:	80 2f       	mov	r24, r16
    6730:	8f 71       	andi	r24, 0x1F	; 31
    6732:	0e 94 2c 33 	call	0x6658	; 0x6658 <_ZN6SdFile14printTwoDigitsEh>
}
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	1f 91       	pop	r17
    673c:	0f 91       	pop	r16
    673e:	08 95       	ret

00006740 <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    6740:	2f 92       	push	r2
    6742:	3f 92       	push	r3
    6744:	4f 92       	push	r4
    6746:	5f 92       	push	r5
    6748:	6f 92       	push	r6
    674a:	7f 92       	push	r7
    674c:	8f 92       	push	r8
    674e:	9f 92       	push	r9
    6750:	af 92       	push	r10
    6752:	bf 92       	push	r11
    6754:	cf 92       	push	r12
    6756:	df 92       	push	r13
    6758:	ef 92       	push	r14
    675a:	ff 92       	push	r15
    675c:	0f 93       	push	r16
    675e:	1f 93       	push	r17
    6760:	cf 93       	push	r28
    6762:	df 93       	push	r29
    6764:	00 d0       	rcall	.+0      	; 0x6766 <_ZN6SdFile4readEPvj+0x26>
    6766:	0f 92       	push	r0
    6768:	cd b7       	in	r28, 0x3d	; 61
    676a:	de b7       	in	r29, 0x3e	; 62
    676c:	9c 83       	std	Y+4, r25	; 0x04
    676e:	8b 83       	std	Y+3, r24	; 0x03
    6770:	66 2e       	mov	r6, r22
    6772:	47 2e       	mov	r4, r23
    6774:	1a 01       	movw	r2, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    6776:	dc 01       	movw	r26, r24
    6778:	15 96       	adiw	r26, 0x05	; 5
    677a:	8c 91       	ld	r24, X
    677c:	15 97       	sbiw	r26, 0x05	; 5
    677e:	88 23       	and	r24, r24
    6780:	09 f4       	brne	.+2      	; 0x6784 <_ZN6SdFile4readEPvj+0x44>
    6782:	1d c1       	rjmp	.+570    	; 0x69be <_ZN6SdFile4readEPvj+0x27e>
    6784:	14 96       	adiw	r26, 0x04	; 4
    6786:	8c 91       	ld	r24, X
    6788:	14 97       	sbiw	r26, 0x04	; 4
    678a:	80 ff       	sbrs	r24, 0
    678c:	1b c1       	rjmp	.+566    	; 0x69c4 <_ZN6SdFile4readEPvj+0x284>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    678e:	53 96       	adiw	r26, 0x13	; 19
    6790:	4d 91       	ld	r20, X+
    6792:	5d 91       	ld	r21, X+
    6794:	6d 91       	ld	r22, X+
    6796:	7c 91       	ld	r23, X
    6798:	56 97       	sbiw	r26, 0x16	; 22
    679a:	1a 96       	adiw	r26, 0x0a	; 10
    679c:	8d 91       	ld	r24, X+
    679e:	9d 91       	ld	r25, X+
    67a0:	0d 90       	ld	r0, X+
    67a2:	bc 91       	ld	r27, X
    67a4:	a0 2d       	mov	r26, r0
    67a6:	81 01       	movw	r16, r2
    67a8:	20 e0       	ldi	r18, 0x00	; 0
    67aa:	30 e0       	ldi	r19, 0x00	; 0
    67ac:	6a 01       	movw	r12, r20
    67ae:	7b 01       	movw	r14, r22
    67b0:	c8 1a       	sub	r12, r24
    67b2:	d9 0a       	sbc	r13, r25
    67b4:	ea 0a       	sbc	r14, r26
    67b6:	fb 0a       	sbc	r15, r27
    67b8:	c0 16       	cp	r12, r16
    67ba:	d1 06       	cpc	r13, r17
    67bc:	e2 06       	cpc	r14, r18
    67be:	f3 06       	cpc	r15, r19
    67c0:	18 f4       	brcc	.+6      	; 0x67c8 <_ZN6SdFile4readEPvj+0x88>
    67c2:	1a 01       	movw	r2, r20
    67c4:	28 1a       	sub	r2, r24
    67c6:	39 0a       	sbc	r3, r25

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    67c8:	21 14       	cp	r2, r1
    67ca:	31 04       	cpc	r3, r1
    67cc:	09 f4       	brne	.+2      	; 0x67d0 <_ZN6SdFile4readEPvj+0x90>
    67ce:	f5 c0       	rjmp	.+490    	; 0x69ba <_ZN6SdFile4readEPvj+0x27a>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
    67d0:	51 01       	movw	r10, r2
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    67d2:	86 2c       	mov	r8, r6
    67d4:	94 2c       	mov	r9, r4
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    67d6:	eb 81       	ldd	r30, Y+3	; 0x03
    67d8:	fc 81       	ldd	r31, Y+4	; 0x04
    67da:	36 96       	adiw	r30, 0x06	; 6
    67dc:	fa 83       	std	Y+2, r31	; 0x02
    67de:	e9 83       	std	Y+1, r30	; 0x01
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    67e0:	66 24       	eor	r6, r6
    67e2:	77 24       	eor	r7, r7
    67e4:	68 94       	set
    67e6:	71 f8       	bld	r7, 1
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    67e8:	44 24       	eor	r4, r4
    67ea:	55 24       	eor	r5, r5
    67ec:	43 94       	inc	r4

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    67ee:	eb 81       	ldd	r30, Y+3	; 0x03
    67f0:	fc 81       	ldd	r31, Y+4	; 0x04
    67f2:	82 85       	ldd	r24, Z+10	; 0x0a
    67f4:	93 85       	ldd	r25, Z+11	; 0x0b
    67f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    67f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    67fa:	0f 2e       	mov	r0, r31
    67fc:	ff ef       	ldi	r31, 0xFF	; 255
    67fe:	ef 2e       	mov	r14, r31
    6800:	f1 e0       	ldi	r31, 0x01	; 1
    6802:	ff 2e       	mov	r15, r31
    6804:	f0 2d       	mov	r31, r0
    6806:	e8 22       	and	r14, r24
    6808:	f9 22       	and	r15, r25
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    680a:	25 81       	ldd	r18, Z+5	; 0x05
    680c:	22 30       	cpi	r18, 0x02	; 2
    680e:	b9 f4       	brne	.+46     	; 0x683e <_ZN6SdFile4readEPvj+0xfe>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    6810:	ac 01       	movw	r20, r24
    6812:	bd 01       	movw	r22, r26
    6814:	03 2e       	mov	r0, r19
    6816:	39 e0       	ldi	r19, 0x09	; 9
    6818:	76 95       	lsr	r23
    681a:	67 95       	ror	r22
    681c:	57 95       	ror	r21
    681e:	47 95       	ror	r20
    6820:	3a 95       	dec	r19
    6822:	d1 f7       	brne	.-12     	; 0x6818 <_ZN6SdFile4readEPvj+0xd8>
    6824:	30 2d       	mov	r19, r0
  uint8_t fatType(void) const {return fatType_;}
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    6826:	03 8c       	ldd	r0, Z+27	; 0x1b
    6828:	f4 8d       	ldd	r31, Z+28	; 0x1c
    682a:	e0 2d       	mov	r30, r0
    682c:	82 8d       	ldd	r24, Z+26	; 0x1a
    682e:	93 8d       	ldd	r25, Z+27	; 0x1b
    6830:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6832:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6834:	48 0f       	add	r20, r24
    6836:	59 1f       	adc	r21, r25
    6838:	6a 1f       	adc	r22, r26
    683a:	7b 1f       	adc	r23, r27
    683c:	5c c0       	rjmp	.+184    	; 0x68f6 <_ZN6SdFile4readEPvj+0x1b6>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    683e:	eb 81       	ldd	r30, Y+3	; 0x03
    6840:	fc 81       	ldd	r31, Y+4	; 0x04
    6842:	c3 8c       	ldd	r12, Z+27	; 0x1b
    6844:	d4 8c       	ldd	r13, Z+28	; 0x1c
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    6846:	ac 01       	movw	r20, r24
    6848:	bd 01       	movw	r22, r26
    684a:	03 2e       	mov	r0, r19
    684c:	39 e0       	ldi	r19, 0x09	; 9
    684e:	76 95       	lsr	r23
    6850:	67 95       	ror	r22
    6852:	57 95       	ror	r21
    6854:	47 95       	ror	r20
    6856:	3a 95       	dec	r19
    6858:	d1 f7       	brne	.-12     	; 0x684e <_ZN6SdFile4readEPvj+0x10e>
    685a:	30 2d       	mov	r19, r0
    685c:	f6 01       	movw	r30, r12
    685e:	24 81       	ldd	r18, Z+4	; 0x04
    6860:	21 50       	subi	r18, 0x01	; 1
    6862:	02 2f       	mov	r16, r18
    6864:	04 23       	and	r16, r20
      if (offset == 0 && blockOfCluster == 0) {
    6866:	e1 14       	cp	r14, r1
    6868:	f1 04       	cpc	r15, r1
    686a:	09 f5       	brne	.+66     	; 0x68ae <_ZN6SdFile4readEPvj+0x16e>
    686c:	00 23       	and	r16, r16
    686e:	f9 f4       	brne	.+62     	; 0x68ae <_ZN6SdFile4readEPvj+0x16e>
        // start of new cluster
        if (curPosition_ == 0) {
    6870:	00 97       	sbiw	r24, 0x00	; 0
    6872:	a1 05       	cpc	r26, r1
    6874:	b1 05       	cpc	r27, r1
    6876:	59 f4       	brne	.+22     	; 0x688e <_ZN6SdFile4readEPvj+0x14e>
          // use first cluster in file
          curCluster_ = firstCluster_;
    6878:	eb 81       	ldd	r30, Y+3	; 0x03
    687a:	fc 81       	ldd	r31, Y+4	; 0x04
    687c:	87 89       	ldd	r24, Z+23	; 0x17
    687e:	90 8d       	ldd	r25, Z+24	; 0x18
    6880:	a1 8d       	ldd	r26, Z+25	; 0x19
    6882:	b2 8d       	ldd	r27, Z+26	; 0x1a
    6884:	86 83       	std	Z+6, r24	; 0x06
    6886:	97 83       	std	Z+7, r25	; 0x07
    6888:	a0 87       	std	Z+8, r26	; 0x08
    688a:	b1 87       	std	Z+9, r27	; 0x09
    688c:	10 c0       	rjmp	.+32     	; 0x68ae <_ZN6SdFile4readEPvj+0x16e>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    688e:	ab 81       	ldd	r26, Y+3	; 0x03
    6890:	bc 81       	ldd	r27, Y+4	; 0x04
    6892:	16 96       	adiw	r26, 0x06	; 6
    6894:	4d 91       	ld	r20, X+
    6896:	5d 91       	ld	r21, X+
    6898:	6d 91       	ld	r22, X+
    689a:	7c 91       	ld	r23, X
    689c:	19 97       	sbiw	r26, 0x09	; 9
    689e:	c6 01       	movw	r24, r12
    68a0:	29 81       	ldd	r18, Y+1	; 0x01
    68a2:	3a 81       	ldd	r19, Y+2	; 0x02
    68a4:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    68a8:	88 23       	and	r24, r24
    68aa:	09 f4       	brne	.+2      	; 0x68ae <_ZN6SdFile4readEPvj+0x16e>
    68ac:	8e c0       	rjmp	.+284    	; 0x69ca <_ZN6SdFile4readEPvj+0x28a>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    68ae:	eb 81       	ldd	r30, Y+3	; 0x03
    68b0:	fc 81       	ldd	r31, Y+4	; 0x04
    68b2:	23 8d       	ldd	r18, Z+27	; 0x1b
    68b4:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    68b6:	86 81       	ldd	r24, Z+6	; 0x06
    68b8:	97 81       	ldd	r25, Z+7	; 0x07
    68ba:	a0 85       	ldd	r26, Z+8	; 0x08
    68bc:	b1 85       	ldd	r27, Z+9	; 0x09
    68be:	02 97       	sbiw	r24, 0x02	; 2
    68c0:	a1 09       	sbc	r26, r1
    68c2:	b1 09       	sbc	r27, r1
    68c4:	ac 01       	movw	r20, r24
    68c6:	bd 01       	movw	r22, r26
    68c8:	f9 01       	movw	r30, r18
    68ca:	05 84       	ldd	r0, Z+13	; 0x0d
    68cc:	04 c0       	rjmp	.+8      	; 0x68d6 <_ZN6SdFile4readEPvj+0x196>
    68ce:	44 0f       	add	r20, r20
    68d0:	55 1f       	adc	r21, r21
    68d2:	66 1f       	adc	r22, r22
    68d4:	77 1f       	adc	r23, r23
    68d6:	0a 94       	dec	r0
    68d8:	d2 f7       	brpl	.-12     	; 0x68ce <_ZN6SdFile4readEPvj+0x18e>
    68da:	86 85       	ldd	r24, Z+14	; 0x0e
    68dc:	97 85       	ldd	r25, Z+15	; 0x0f
    68de:	a0 89       	ldd	r26, Z+16	; 0x10
    68e0:	b1 89       	ldd	r27, Z+17	; 0x11
    68e2:	84 0f       	add	r24, r20
    68e4:	95 1f       	adc	r25, r21
    68e6:	a6 1f       	adc	r26, r22
    68e8:	b7 1f       	adc	r27, r23
    68ea:	ac 01       	movw	r20, r24
    68ec:	bd 01       	movw	r22, r26
    68ee:	40 0f       	add	r20, r16
    68f0:	51 1d       	adc	r21, r1
    68f2:	61 1d       	adc	r22, r1
    68f4:	71 1d       	adc	r23, r1
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    68f6:	c3 01       	movw	r24, r6
    68f8:	8e 19       	sub	r24, r14
    68fa:	9f 09       	sbc	r25, r15
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    68fc:	65 01       	movw	r12, r10
    68fe:	8a 15       	cp	r24, r10
    6900:	9b 05       	cpc	r25, r11
    6902:	08 f4       	brcc	.+2      	; 0x6906 <_ZN6SdFile4readEPvj+0x1c6>
    6904:	6c 01       	movw	r12, r24
   */
  uint8_t type(void) const {return type_;}
  uint8_t truncate(uint32_t size);
  /** \return Unbuffered read flag. */
  uint8_t unbufferedRead(void) const {
    return flags_ & F_FILE_UNBUFFERED_READ;
    6906:	ab 81       	ldd	r26, Y+3	; 0x03
    6908:	bc 81       	ldd	r27, Y+4	; 0x04
    690a:	14 96       	adiw	r26, 0x04	; 4
    690c:	8c 91       	ld	r24, X
    690e:	14 97       	sbiw	r26, 0x04	; 4

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    6910:	86 fd       	sbrc	r24, 6
    6912:	06 c0       	rjmp	.+12     	; 0x6920 <_ZN6SdFile4readEPvj+0x1e0>
    6914:	b0 e0       	ldi	r27, 0x00	; 0
    6916:	cb 16       	cp	r12, r27
    6918:	b2 e0       	ldi	r27, 0x02	; 2
    691a:	db 06       	cpc	r13, r27
    691c:	09 f0       	breq	.+2      	; 0x6920 <_ZN6SdFile4readEPvj+0x1e0>
    691e:	74 c0       	rjmp	.+232    	; 0x6a08 <_ZN6SdFile4readEPvj+0x2c8>
    6920:	80 91 76 02 	lds	r24, 0x0276
    6924:	90 91 77 02 	lds	r25, 0x0277
    6928:	a0 91 78 02 	lds	r26, 0x0278
    692c:	b0 91 79 02 	lds	r27, 0x0279
    6930:	48 17       	cp	r20, r24
    6932:	59 07       	cpc	r21, r25
    6934:	6a 07       	cpc	r22, r26
    6936:	7b 07       	cpc	r23, r27
    6938:	09 f4       	brne	.+2      	; 0x693c <_ZN6SdFile4readEPvj+0x1fc>
    693a:	66 c0       	rjmp	.+204    	; 0x6a08 <_ZN6SdFile4readEPvj+0x2c8>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    693c:	80 91 83 06 	lds	r24, 0x0683
    6940:	90 91 84 06 	lds	r25, 0x0684
    6944:	97 01       	movw	r18, r14
    6946:	86 01       	movw	r16, r12
    6948:	74 01       	movw	r14, r8
    694a:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <_ZN7Sd2Card8readDataEmjjPh>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    694e:	88 23       	and	r24, r24
    6950:	09 f4       	brne	.+2      	; 0x6954 <_ZN6SdFile4readEPvj+0x214>
    6952:	3e c0       	rjmp	.+124    	; 0x69d0 <_ZN6SdFile4readEPvj+0x290>
      dst += n;
    6954:	8c 0c       	add	r8, r12
    6956:	9d 1c       	adc	r9, r13
    6958:	1b c0       	rjmp	.+54     	; 0x6990 <_ZN6SdFile4readEPvj+0x250>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    695a:	a7 01       	movw	r20, r14
    695c:	4b 57       	subi	r20, 0x7B	; 123
    695e:	59 4f       	sbci	r21, 0xF9	; 249
      uint8_t* end = src + n;
    6960:	ba 01       	movw	r22, r20
    6962:	6c 0d       	add	r22, r12
    6964:	7d 1d       	adc	r23, r13
      while (src != end) *dst++ = *src++;
    6966:	46 17       	cp	r20, r22
    6968:	57 07       	cpc	r21, r23
    696a:	91 f0       	breq	.+36     	; 0x6990 <_ZN6SdFile4readEPvj+0x250>
    696c:	fa 01       	movw	r30, r20
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    696e:	9b 01       	movw	r18, r22
    6970:	d4 01       	movw	r26, r8
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    6972:	81 91       	ld	r24, Z+
    6974:	8d 93       	st	X+, r24
    6976:	e2 17       	cp	r30, r18
    6978:	f3 07       	cpc	r31, r19
    697a:	d9 f7       	brne	.-10     	; 0x6972 <_ZN6SdFile4readEPvj+0x232>
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    697c:	ca 01       	movw	r24, r20
    697e:	01 96       	adiw	r24, 0x01	; 1
    6980:	f2 01       	movw	r30, r4
    6982:	e8 1b       	sub	r30, r24
    6984:	f9 0b       	sbc	r31, r25
    6986:	cf 01       	movw	r24, r30
    6988:	86 0f       	add	r24, r22
    698a:	97 1f       	adc	r25, r23
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    698c:	88 0e       	add	r8, r24
    698e:	99 1e       	adc	r9, r25
    }
    curPosition_ += n;
    6990:	a6 01       	movw	r20, r12
    6992:	60 e0       	ldi	r22, 0x00	; 0
    6994:	70 e0       	ldi	r23, 0x00	; 0
    6996:	eb 81       	ldd	r30, Y+3	; 0x03
    6998:	fc 81       	ldd	r31, Y+4	; 0x04
    699a:	82 85       	ldd	r24, Z+10	; 0x0a
    699c:	93 85       	ldd	r25, Z+11	; 0x0b
    699e:	a4 85       	ldd	r26, Z+12	; 0x0c
    69a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    69a2:	84 0f       	add	r24, r20
    69a4:	95 1f       	adc	r25, r21
    69a6:	a6 1f       	adc	r26, r22
    69a8:	b7 1f       	adc	r27, r23
    69aa:	82 87       	std	Z+10, r24	; 0x0a
    69ac:	93 87       	std	Z+11, r25	; 0x0b
    69ae:	a4 87       	std	Z+12, r26	; 0x0c
    69b0:	b5 87       	std	Z+13, r27	; 0x0d
    toRead -= n;
    69b2:	ac 18       	sub	r10, r12
    69b4:	bd 08       	sbc	r11, r13
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    69b6:	09 f0       	breq	.+2      	; 0x69ba <_ZN6SdFile4readEPvj+0x27a>
    69b8:	1a cf       	rjmp	.-460    	; 0x67ee <_ZN6SdFile4readEPvj+0xae>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    69ba:	c1 01       	movw	r24, r2
    69bc:	0e c0       	rjmp	.+28     	; 0x69da <_ZN6SdFile4readEPvj+0x29a>
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    69be:	8f ef       	ldi	r24, 0xFF	; 255
    69c0:	9f ef       	ldi	r25, 0xFF	; 255
    69c2:	0b c0       	rjmp	.+22     	; 0x69da <_ZN6SdFile4readEPvj+0x29a>
    69c4:	8f ef       	ldi	r24, 0xFF	; 255
    69c6:	9f ef       	ldi	r25, 0xFF	; 255
    69c8:	08 c0       	rjmp	.+16     	; 0x69da <_ZN6SdFile4readEPvj+0x29a>
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    69ca:	8f ef       	ldi	r24, 0xFF	; 255
    69cc:	9f ef       	ldi	r25, 0xFF	; 255
    69ce:	05 c0       	rjmp	.+10     	; 0x69da <_ZN6SdFile4readEPvj+0x29a>
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    69d0:	8f ef       	ldi	r24, 0xFF	; 255
    69d2:	9f ef       	ldi	r25, 0xFF	; 255
    69d4:	02 c0       	rjmp	.+4      	; 0x69da <_ZN6SdFile4readEPvj+0x29a>
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    69d6:	8f ef       	ldi	r24, 0xFF	; 255
    69d8:	9f ef       	ldi	r25, 0xFF	; 255
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    69da:	0f 90       	pop	r0
    69dc:	0f 90       	pop	r0
    69de:	0f 90       	pop	r0
    69e0:	0f 90       	pop	r0
    69e2:	df 91       	pop	r29
    69e4:	cf 91       	pop	r28
    69e6:	1f 91       	pop	r17
    69e8:	0f 91       	pop	r16
    69ea:	ff 90       	pop	r15
    69ec:	ef 90       	pop	r14
    69ee:	df 90       	pop	r13
    69f0:	cf 90       	pop	r12
    69f2:	bf 90       	pop	r11
    69f4:	af 90       	pop	r10
    69f6:	9f 90       	pop	r9
    69f8:	8f 90       	pop	r8
    69fa:	7f 90       	pop	r7
    69fc:	6f 90       	pop	r6
    69fe:	5f 90       	pop	r5
    6a00:	4f 90       	pop	r4
    6a02:	3f 90       	pop	r3
    6a04:	2f 90       	pop	r2
    6a06:	08 95       	ret
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    6a08:	cb 01       	movw	r24, r22
    6a0a:	ba 01       	movw	r22, r20
    6a0c:	40 e0       	ldi	r20, 0x00	; 0
    6a0e:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    6a12:	88 23       	and	r24, r24
    6a14:	09 f0       	breq	.+2      	; 0x6a18 <_ZN6SdFile4readEPvj+0x2d8>
    6a16:	a1 cf       	rjmp	.-190    	; 0x695a <_ZN6SdFile4readEPvj+0x21a>
    6a18:	de cf       	rjmp	.-68     	; 0x69d6 <_ZN6SdFile4readEPvj+0x296>

00006a1a <_ZN6SdFile7readDirEP14directoryEntry>:
 * A value of zero will be returned if end of file is reached.
 * If an error occurs, readDir() returns -1.  Possible errors include
 * readDir() called before a directory has been opened, this is not
 * a directory file or an I/O error occurred.
 */
int8_t SdFile::readDir(dir_t* dir) {
    6a1a:	0f 93       	push	r16
    6a1c:	1f 93       	push	r17
    6a1e:	cf 93       	push	r28
    6a20:	df 93       	push	r29
    6a22:	8c 01       	movw	r16, r24
    6a24:	eb 01       	movw	r28, r22
  int8_t n;
  // if not a directory file or miss-positioned return an error
  if (!isDir() || (0X1F & curPosition_)) return -1;
    6a26:	fc 01       	movw	r30, r24
    6a28:	85 81       	ldd	r24, Z+5	; 0x05
    6a2a:	82 30       	cpi	r24, 0x02	; 2
    6a2c:	10 f1       	brcs	.+68     	; 0x6a72 <_ZN6SdFile7readDirEP14directoryEntry+0x58>
    6a2e:	82 85       	ldd	r24, Z+10	; 0x0a
    6a30:	93 85       	ldd	r25, Z+11	; 0x0b
    6a32:	a4 85       	ldd	r26, Z+12	; 0x0c
    6a34:	b5 85       	ldd	r27, Z+13	; 0x0d
    6a36:	8f 71       	andi	r24, 0x1F	; 31
    6a38:	90 70       	andi	r25, 0x00	; 0
    6a3a:	a0 70       	andi	r26, 0x00	; 0
    6a3c:	b0 70       	andi	r27, 0x00	; 0
    6a3e:	00 97       	sbiw	r24, 0x00	; 0
    6a40:	a1 05       	cpc	r26, r1
    6a42:	b1 05       	cpc	r27, r1
    6a44:	59 f0       	breq	.+22     	; 0x6a5c <_ZN6SdFile7readDirEP14directoryEntry+0x42>
    6a46:	17 c0       	rjmp	.+46     	; 0x6a76 <_ZN6SdFile7readDirEP14directoryEntry+0x5c>

  while ((n = read(dir, sizeof(dir_t))) == sizeof(dir_t)) {
    // last entry if DIR_NAME_FREE
    if (dir->name[0] == DIR_NAME_FREE) break;
    6a48:	98 81       	ld	r25, Y
    6a4a:	99 23       	and	r25, r25
    6a4c:	b1 f0       	breq	.+44     	; 0x6a7a <_ZN6SdFile7readDirEP14directoryEntry+0x60>
    // skip empty entries and entry for .  and ..
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') continue;
    6a4e:	95 3e       	cpi	r25, 0xE5	; 229
    6a50:	29 f0       	breq	.+10     	; 0x6a5c <_ZN6SdFile7readDirEP14directoryEntry+0x42>
    6a52:	9e 32       	cpi	r25, 0x2E	; 46
    6a54:	19 f0       	breq	.+6      	; 0x6a5c <_ZN6SdFile7readDirEP14directoryEntry+0x42>
}
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    6a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    // return if normal file or subdirectory
    if (DIR_IS_FILE_OR_SUBDIR(dir)) return n;
    6a58:	93 ff       	sbrs	r25, 3
    6a5a:	10 c0       	rjmp	.+32     	; 0x6a7c <_ZN6SdFile7readDirEP14directoryEntry+0x62>
int8_t SdFile::readDir(dir_t* dir) {
  int8_t n;
  // if not a directory file or miss-positioned return an error
  if (!isDir() || (0X1F & curPosition_)) return -1;

  while ((n = read(dir, sizeof(dir_t))) == sizeof(dir_t)) {
    6a5c:	c8 01       	movw	r24, r16
    6a5e:	be 01       	movw	r22, r28
    6a60:	40 e2       	ldi	r20, 0x20	; 32
    6a62:	50 e0       	ldi	r21, 0x00	; 0
    6a64:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6SdFile4readEPvj>
    6a68:	80 32       	cpi	r24, 0x20	; 32
    6a6a:	71 f3       	breq	.-36     	; 0x6a48 <_ZN6SdFile7readDirEP14directoryEntry+0x2e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') continue;
    // return if normal file or subdirectory
    if (DIR_IS_FILE_OR_SUBDIR(dir)) return n;
  }
  // error, end of file, or past last entry
  return n < 0 ? -1 : 0;
    6a6c:	88 0f       	add	r24, r24
    6a6e:	88 0b       	sbc	r24, r24
    6a70:	05 c0       	rjmp	.+10     	; 0x6a7c <_ZN6SdFile7readDirEP14directoryEntry+0x62>
 * a directory file or an I/O error occurred.
 */
int8_t SdFile::readDir(dir_t* dir) {
  int8_t n;
  // if not a directory file or miss-positioned return an error
  if (!isDir() || (0X1F & curPosition_)) return -1;
    6a72:	8f ef       	ldi	r24, 0xFF	; 255
    6a74:	03 c0       	rjmp	.+6      	; 0x6a7c <_ZN6SdFile7readDirEP14directoryEntry+0x62>
    6a76:	8f ef       	ldi	r24, 0xFF	; 255
    6a78:	01 c0       	rjmp	.+2      	; 0x6a7c <_ZN6SdFile7readDirEP14directoryEntry+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') continue;
    // return if normal file or subdirectory
    if (DIR_IS_FILE_OR_SUBDIR(dir)) return n;
  }
  // error, end of file, or past last entry
  return n < 0 ? -1 : 0;
    6a7a:	80 e0       	ldi	r24, 0x00	; 0
}
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	1f 91       	pop	r17
    6a82:	0f 91       	pop	r16
    6a84:	08 95       	ret

00006a86 <_ZN6SdFile12readDirCacheEv>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    6a86:	cf 92       	push	r12
    6a88:	df 92       	push	r13
    6a8a:	ef 92       	push	r14
    6a8c:	ff 92       	push	r15
    6a8e:	0f 93       	push	r16
    6a90:	1f 93       	push	r17
    6a92:	cf 93       	push	r28
    6a94:	df 93       	push	r29
    6a96:	0f 92       	push	r0
    6a98:	cd b7       	in	r28, 0x3d	; 61
    6a9a:	de b7       	in	r29, 0x3e	; 62
    6a9c:	8c 01       	movw	r16, r24
  // error if not directory
  if (!isDir()) return NULL;
    6a9e:	fc 01       	movw	r30, r24
    6aa0:	85 81       	ldd	r24, Z+5	; 0x05
    6aa2:	82 30       	cpi	r24, 0x02	; 2
    6aa4:	90 f1       	brcs	.+100    	; 0x6b0a <_ZN6SdFile12readDirCacheEv+0x84>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    6aa6:	c2 84       	ldd	r12, Z+10	; 0x0a
    6aa8:	d3 84       	ldd	r13, Z+11	; 0x0b
    6aaa:	e4 84       	ldd	r14, Z+12	; 0x0c
    6aac:	f5 84       	ldd	r15, Z+13	; 0x0d
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6aae:	c8 01       	movw	r24, r16
    6ab0:	be 01       	movw	r22, r28
    6ab2:	6f 5f       	subi	r22, 0xFF	; 255
    6ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab6:	41 e0       	ldi	r20, 0x01	; 1
    6ab8:	50 e0       	ldi	r21, 0x00	; 0
    6aba:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6SdFile4readEPvj>
    6abe:	81 30       	cpi	r24, 0x01	; 1
    6ac0:	91 05       	cpc	r25, r1
    6ac2:	31 f5       	brne	.+76     	; 0x6b10 <_ZN6SdFile12readDirCacheEv+0x8a>

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    6ac4:	f8 01       	movw	r30, r16
    6ac6:	82 85       	ldd	r24, Z+10	; 0x0a
    6ac8:	93 85       	ldd	r25, Z+11	; 0x0b
    6aca:	a4 85       	ldd	r26, Z+12	; 0x0c
    6acc:	b5 85       	ldd	r27, Z+13	; 0x0d
    6ace:	4f 96       	adiw	r24, 0x1f	; 31
    6ad0:	a1 1d       	adc	r26, r1
    6ad2:	b1 1d       	adc	r27, r1
    6ad4:	82 87       	std	Z+10, r24	; 0x0a
    6ad6:	93 87       	std	Z+11, r25	; 0x0b
    6ad8:	a4 87       	std	Z+12, r26	; 0x0c
    6ada:	b5 87       	std	Z+13, r27	; 0x0d
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    6adc:	d7 01       	movw	r26, r14
    6ade:	c6 01       	movw	r24, r12
    6ae0:	68 94       	set
    6ae2:	14 f8       	bld	r1, 4
    6ae4:	b6 95       	lsr	r27
    6ae6:	a7 95       	ror	r26
    6ae8:	97 95       	ror	r25
    6aea:	87 95       	ror	r24
    6aec:	16 94       	lsr	r1
    6aee:	d1 f7       	brne	.-12     	; 0x6ae4 <_ZN6SdFile12readDirCacheEv+0x5e>
    6af0:	8f 70       	andi	r24, 0x0F	; 15

  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	88 0f       	add	r24, r24
    6af6:	99 1f       	adc	r25, r25
    6af8:	82 95       	swap	r24
    6afa:	92 95       	swap	r25
    6afc:	90 7f       	andi	r25, 0xF0	; 240
    6afe:	98 27       	eor	r25, r24
    6b00:	80 7f       	andi	r24, 0xF0	; 240
    6b02:	98 27       	eor	r25, r24
    6b04:	8b 57       	subi	r24, 0x7B	; 123
    6b06:	99 4f       	sbci	r25, 0xF9	; 249
    6b08:	05 c0       	rjmp	.+10     	; 0x6b14 <_ZN6SdFile12readDirCacheEv+0x8e>
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    6b0a:	80 e0       	ldi	r24, 0x00	; 0
    6b0c:	90 e0       	ldi	r25, 0x00	; 0
    6b0e:	02 c0       	rjmp	.+4      	; 0x6b14 <_ZN6SdFile12readDirCacheEv+0x8e>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;

  // use read to locate and cache block
  if (read() < 0) return NULL;
    6b10:	80 e0       	ldi	r24, 0x00	; 0
    6b12:	90 e0       	ldi	r25, 0x00	; 0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    6b14:	0f 90       	pop	r0
    6b16:	df 91       	pop	r29
    6b18:	cf 91       	pop	r28
    6b1a:	1f 91       	pop	r17
    6b1c:	0f 91       	pop	r16
    6b1e:	ff 90       	pop	r15
    6b20:	ef 90       	pop	r14
    6b22:	df 90       	pop	r13
    6b24:	cf 90       	pop	r12
    6b26:	08 95       	ret

00006b28 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    6b28:	8f 92       	push	r8
    6b2a:	9f 92       	push	r9
    6b2c:	af 92       	push	r10
    6b2e:	bf 92       	push	r11
    6b30:	cf 92       	push	r12
    6b32:	df 92       	push	r13
    6b34:	ef 92       	push	r14
    6b36:	ff 92       	push	r15
    6b38:	0f 93       	push	r16
    6b3a:	1f 93       	push	r17
    6b3c:	cf 93       	push	r28
    6b3e:	df 93       	push	r29
    6b40:	ec 01       	movw	r28, r24
    6b42:	4a 01       	movw	r8, r20
    6b44:	5b 01       	movw	r10, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    6b46:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    6b48:	22 23       	and	r18, r18
    6b4a:	09 f4       	brne	.+2      	; 0x6b4e <_ZN6SdFile7seekSetEm+0x26>
    6b4c:	7e c0       	rjmp	.+252    	; 0x6c4a <_ZN6SdFile7seekSetEm+0x122>
    6b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b50:	9c 89       	ldd	r25, Y+20	; 0x14
    6b52:	ad 89       	ldd	r26, Y+21	; 0x15
    6b54:	be 89       	ldd	r27, Y+22	; 0x16
    6b56:	84 17       	cp	r24, r20
    6b58:	95 07       	cpc	r25, r21
    6b5a:	a6 07       	cpc	r26, r22
    6b5c:	b7 07       	cpc	r27, r23
    6b5e:	08 f4       	brcc	.+2      	; 0x6b62 <_ZN6SdFile7seekSetEm+0x3a>
    6b60:	76 c0       	rjmp	.+236    	; 0x6c4e <_ZN6SdFile7seekSetEm+0x126>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    6b62:	22 30       	cpi	r18, 0x02	; 2
    6b64:	31 f4       	brne	.+12     	; 0x6b72 <_ZN6SdFile7seekSetEm+0x4a>
    curPosition_ = pos;
    6b66:	4a 87       	std	Y+10, r20	; 0x0a
    6b68:	5b 87       	std	Y+11, r21	; 0x0b
    6b6a:	6c 87       	std	Y+12, r22	; 0x0c
    6b6c:	7d 87       	std	Y+13, r23	; 0x0d
    return true;
    6b6e:	81 e0       	ldi	r24, 0x01	; 1
    6b70:	71 c0       	rjmp	.+226    	; 0x6c54 <_ZN6SdFile7seekSetEm+0x12c>
  }
  if (pos == 0) {
    6b72:	41 15       	cp	r20, r1
    6b74:	51 05       	cpc	r21, r1
    6b76:	61 05       	cpc	r22, r1
    6b78:	71 05       	cpc	r23, r1
    6b7a:	51 f4       	brne	.+20     	; 0x6b90 <_ZN6SdFile7seekSetEm+0x68>
    // set position to start of file
    curCluster_ = 0;
    6b7c:	1e 82       	std	Y+6, r1	; 0x06
    6b7e:	1f 82       	std	Y+7, r1	; 0x07
    6b80:	18 86       	std	Y+8, r1	; 0x08
    6b82:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    6b84:	1a 86       	std	Y+10, r1	; 0x0a
    6b86:	1b 86       	std	Y+11, r1	; 0x0b
    6b88:	1c 86       	std	Y+12, r1	; 0x0c
    6b8a:	1d 86       	std	Y+13, r1	; 0x0d
    return true;
    6b8c:	81 e0       	ldi	r24, 0x01	; 1
    6b8e:	62 c0       	rjmp	.+196    	; 0x6c54 <_ZN6SdFile7seekSetEm+0x12c>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    6b90:	4a 85       	ldd	r20, Y+10	; 0x0a
    6b92:	5b 85       	ldd	r21, Y+11	; 0x0b
    6b94:	6c 85       	ldd	r22, Y+12	; 0x0c
    6b96:	7d 85       	ldd	r23, Y+13	; 0x0d
    6b98:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6b9a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    6b9c:	85 85       	ldd	r24, Z+13	; 0x0d
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	9c 01       	movw	r18, r24
    6ba2:	27 5f       	subi	r18, 0xF7	; 247
    6ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba6:	db 01       	movw	r26, r22
    6ba8:	ca 01       	movw	r24, r20
    6baa:	01 97       	sbiw	r24, 0x01	; 1
    6bac:	a1 09       	sbc	r26, r1
    6bae:	b1 09       	sbc	r27, r1
    6bb0:	02 2e       	mov	r0, r18
    6bb2:	04 c0       	rjmp	.+8      	; 0x6bbc <_ZN6SdFile7seekSetEm+0x94>
    6bb4:	b6 95       	lsr	r27
    6bb6:	a7 95       	ror	r26
    6bb8:	97 95       	ror	r25
    6bba:	87 95       	ror	r24
    6bbc:	0a 94       	dec	r0
    6bbe:	d2 f7       	brpl	.-12     	; 0x6bb4 <_ZN6SdFile7seekSetEm+0x8c>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    6bc0:	75 01       	movw	r14, r10
    6bc2:	64 01       	movw	r12, r8
    6bc4:	08 94       	sec
    6bc6:	c1 08       	sbc	r12, r1
    6bc8:	d1 08       	sbc	r13, r1
    6bca:	e1 08       	sbc	r14, r1
    6bcc:	f1 08       	sbc	r15, r1
    6bce:	04 c0       	rjmp	.+8      	; 0x6bd8 <_ZN6SdFile7seekSetEm+0xb0>
    6bd0:	f6 94       	lsr	r15
    6bd2:	e7 94       	ror	r14
    6bd4:	d7 94       	ror	r13
    6bd6:	c7 94       	ror	r12
    6bd8:	2a 95       	dec	r18
    6bda:	d2 f7       	brpl	.-12     	; 0x6bd0 <_ZN6SdFile7seekSetEm+0xa8>

  if (nNew < nCur || curPosition_ == 0) {
    6bdc:	c8 16       	cp	r12, r24
    6bde:	d9 06       	cpc	r13, r25
    6be0:	ea 06       	cpc	r14, r26
    6be2:	fb 06       	cpc	r15, r27
    6be4:	28 f0       	brcs	.+10     	; 0x6bf0 <_ZN6SdFile7seekSetEm+0xc8>
    6be6:	41 15       	cp	r20, r1
    6be8:	51 05       	cpc	r21, r1
    6bea:	61 05       	cpc	r22, r1
    6bec:	71 05       	cpc	r23, r1
    6bee:	49 f4       	brne	.+18     	; 0x6c02 <_ZN6SdFile7seekSetEm+0xda>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    6bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    6bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    6bf4:	a9 8d       	ldd	r26, Y+25	; 0x19
    6bf6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6bf8:	8e 83       	std	Y+6, r24	; 0x06
    6bfa:	9f 83       	std	Y+7, r25	; 0x07
    6bfc:	a8 87       	std	Y+8, r26	; 0x08
    6bfe:	b9 87       	std	Y+9, r27	; 0x09
    6c00:	16 c0       	rjmp	.+44     	; 0x6c2e <_ZN6SdFile7seekSetEm+0x106>
  } else {
    // advance from curPosition
    nNew -= nCur;
    6c02:	c8 1a       	sub	r12, r24
    6c04:	d9 0a       	sbc	r13, r25
    6c06:	ea 0a       	sbc	r14, r26
    6c08:	fb 0a       	sbc	r15, r27
    6c0a:	11 c0       	rjmp	.+34     	; 0x6c2e <_ZN6SdFile7seekSetEm+0x106>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    6c0c:	4e 81       	ldd	r20, Y+6	; 0x06
    6c0e:	5f 81       	ldd	r21, Y+7	; 0x07
    6c10:	68 85       	ldd	r22, Y+8	; 0x08
    6c12:	79 85       	ldd	r23, Y+9	; 0x09
    6c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c18:	98 01       	movw	r18, r16
    6c1a:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    6c1e:	08 94       	sec
    6c20:	c1 08       	sbc	r12, r1
    6c22:	d1 08       	sbc	r13, r1
    6c24:	e1 08       	sbc	r14, r1
    6c26:	f1 08       	sbc	r15, r1
    6c28:	88 23       	and	r24, r24
    6c2a:	21 f4       	brne	.+8      	; 0x6c34 <_ZN6SdFile7seekSetEm+0x10c>
    6c2c:	12 c0       	rjmp	.+36     	; 0x6c52 <_ZN6SdFile7seekSetEm+0x12a>
    6c2e:	8e 01       	movw	r16, r28
    6c30:	0a 5f       	subi	r16, 0xFA	; 250
    6c32:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    6c34:	c1 14       	cp	r12, r1
    6c36:	d1 04       	cpc	r13, r1
    6c38:	e1 04       	cpc	r14, r1
    6c3a:	f1 04       	cpc	r15, r1
    6c3c:	39 f7       	brne	.-50     	; 0x6c0c <_ZN6SdFile7seekSetEm+0xe4>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    6c3e:	8a 86       	std	Y+10, r8	; 0x0a
    6c40:	9b 86       	std	Y+11, r9	; 0x0b
    6c42:	ac 86       	std	Y+12, r10	; 0x0c
    6c44:	bd 86       	std	Y+13, r11	; 0x0d
  return true;
    6c46:	81 e0       	ldi	r24, 0x01	; 1
    6c48:	05 c0       	rjmp	.+10     	; 0x6c54 <_ZN6SdFile7seekSetEm+0x12c>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    6c4a:	80 e0       	ldi	r24, 0x00	; 0
    6c4c:	03 c0       	rjmp	.+6      	; 0x6c54 <_ZN6SdFile7seekSetEm+0x12c>
    6c4e:	80 e0       	ldi	r24, 0x00	; 0
    6c50:	01 c0       	rjmp	.+2      	; 0x6c54 <_ZN6SdFile7seekSetEm+0x12c>
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    6c52:	80 e0       	ldi	r24, 0x00	; 0
  }
  curPosition_ = pos;
  return true;
}
    6c54:	df 91       	pop	r29
    6c56:	cf 91       	pop	r28
    6c58:	1f 91       	pop	r17
    6c5a:	0f 91       	pop	r16
    6c5c:	ff 90       	pop	r15
    6c5e:	ef 90       	pop	r14
    6c60:	df 90       	pop	r13
    6c62:	cf 90       	pop	r12
    6c64:	bf 90       	pop	r11
    6c66:	af 90       	pop	r10
    6c68:	9f 90       	pop	r9
    6c6a:	8f 90       	pop	r8
    6c6c:	08 95       	ret

00006c6e <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    6c6e:	0f 93       	push	r16
    6c70:	1f 93       	push	r17
    6c72:	cf 93       	push	r28
    6c74:	df 93       	push	r29
    6c76:	ec 01       	movw	r28, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    6c78:	8d 81       	ldd	r24, Y+5	; 0x05
    6c7a:	88 23       	and	r24, r24
    6c7c:	c1 f1       	breq	.+112    	; 0x6cee <_ZN6SdFile4syncEv+0x80>

  if (flags_ & F_FILE_DIR_DIRTY) {
    6c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    6c80:	88 23       	and	r24, r24
    6c82:	94 f5       	brge	.+100    	; 0x6ce8 <_ZN6SdFile4syncEv+0x7a>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    6c84:	ce 01       	movw	r24, r28
    6c86:	61 e0       	ldi	r22, 0x01	; 1
    6c88:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
    6c8c:	8c 01       	movw	r16, r24
    if (!d) return false;
    6c8e:	00 97       	sbiw	r24, 0x00	; 0
    6c90:	81 f1       	breq	.+96     	; 0x6cf2 <_ZN6SdFile4syncEv+0x84>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    6c92:	8d 81       	ldd	r24, Y+5	; 0x05
    6c94:	82 30       	cpi	r24, 0x02	; 2
    6c96:	48 f4       	brcc	.+18     	; 0x6caa <_ZN6SdFile4syncEv+0x3c>
    6c98:	8b 89       	ldd	r24, Y+19	; 0x13
    6c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    6c9c:	ad 89       	ldd	r26, Y+21	; 0x15
    6c9e:	be 89       	ldd	r27, Y+22	; 0x16
    6ca0:	f8 01       	movw	r30, r16
    6ca2:	84 8f       	std	Z+28, r24	; 0x1c
    6ca4:	95 8f       	std	Z+29, r25	; 0x1d
    6ca6:	a6 8f       	std	Z+30, r26	; 0x1e
    6ca8:	b7 8f       	std	Z+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    6caa:	8f 89       	ldd	r24, Y+23	; 0x17
    6cac:	98 8d       	ldd	r25, Y+24	; 0x18
    6cae:	f8 01       	movw	r30, r16
    6cb0:	93 8f       	std	Z+27, r25	; 0x1b
    6cb2:	82 8f       	std	Z+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    6cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    6cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    6cb8:	a9 8d       	ldd	r26, Y+25	; 0x19
    6cba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6cbc:	b5 8b       	std	Z+21, r27	; 0x15
    6cbe:	a4 8b       	std	Z+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    6cc0:	e0 91 7c 06 	lds	r30, 0x067C
    6cc4:	f0 91 7d 06 	lds	r31, 0x067D
    6cc8:	30 97       	sbiw	r30, 0x00	; 0
    6cca:	59 f0       	breq	.+22     	; 0x6ce2 <_ZN6SdFile4syncEv+0x74>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    6ccc:	b8 01       	movw	r22, r16
    6cce:	6a 5e       	subi	r22, 0xEA	; 234
    6cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    6cd2:	c8 01       	movw	r24, r16
    6cd4:	48 96       	adiw	r24, 0x18	; 24
    6cd6:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
    6cd8:	f8 01       	movw	r30, r16
    6cda:	80 8d       	ldd	r24, Z+24	; 0x18
    6cdc:	91 8d       	ldd	r25, Z+25	; 0x19
    6cde:	93 8b       	std	Z+19, r25	; 0x13
    6ce0:	82 8b       	std	Z+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    6ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    6ce4:	8f 77       	andi	r24, 0x7F	; 127
    6ce6:	8c 83       	std	Y+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
    6ce8:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    6cec:	03 c0       	rjmp	.+6      	; 0x6cf4 <_ZN6SdFile4syncEv+0x86>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    6cee:	80 e0       	ldi	r24, 0x00	; 0
    6cf0:	01 c0       	rjmp	.+2      	; 0x6cf4 <_ZN6SdFile4syncEv+0x86>

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    6cf2:	80 e0       	ldi	r24, 0x00	; 0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    6cf4:	df 91       	pop	r29
    6cf6:	cf 91       	pop	r28
    6cf8:	1f 91       	pop	r17
    6cfa:	0f 91       	pop	r16
    6cfc:	08 95       	ret

00006cfe <_ZN6SdFile8dirEntryEP14directoryEntry>:
 * \param[out] dir Location for return of the files directory entry.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::dirEntry(dir_t* dir) {
    6cfe:	0f 93       	push	r16
    6d00:	1f 93       	push	r17
    6d02:	cf 93       	push	r28
    6d04:	df 93       	push	r29
    6d06:	ec 01       	movw	r28, r24
    6d08:	16 2f       	mov	r17, r22
    6d0a:	07 2f       	mov	r16, r23
  // make sure fields on SD are correct
  if (!sync()) return false;
    6d0c:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    6d10:	88 23       	and	r24, r24
    6d12:	81 f0       	breq	.+32     	; 0x6d34 <_ZN6SdFile8dirEntryEP14directoryEntry+0x36>

  // read entry
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_READ);
    6d14:	ce 01       	movw	r24, r28
    6d16:	60 e0       	ldi	r22, 0x00	; 0
    6d18:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
  if (!p) return false;
    6d1c:	00 97       	sbiw	r24, 0x00	; 0
    6d1e:	61 f0       	breq	.+24     	; 0x6d38 <_ZN6SdFile8dirEntryEP14directoryEntry+0x3a>

  // copy to caller's struct
  memcpy(dir, p, sizeof(dir_t));
    6d20:	e1 2f       	mov	r30, r17
    6d22:	f0 2f       	mov	r31, r16
    6d24:	dc 01       	movw	r26, r24
    6d26:	80 e2       	ldi	r24, 0x20	; 32
    6d28:	0d 90       	ld	r0, X+
    6d2a:	01 92       	st	Z+, r0
    6d2c:	81 50       	subi	r24, 0x01	; 1
    6d2e:	e1 f7       	brne	.-8      	; 0x6d28 <_ZN6SdFile8dirEntryEP14directoryEntry+0x2a>
  return true;
    6d30:	81 e0       	ldi	r24, 0x01	; 1
    6d32:	03 c0       	rjmp	.+6      	; 0x6d3a <_ZN6SdFile8dirEntryEP14directoryEntry+0x3c>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::dirEntry(dir_t* dir) {
  // make sure fields on SD are correct
  if (!sync()) return false;
    6d34:	80 e0       	ldi	r24, 0x00	; 0
    6d36:	01 c0       	rjmp	.+2      	; 0x6d3a <_ZN6SdFile8dirEntryEP14directoryEntry+0x3c>

  // read entry
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_READ);
  if (!p) return false;
    6d38:	80 e0       	ldi	r24, 0x00	; 0

  // copy to caller's struct
  memcpy(dir, p, sizeof(dir_t));
  return true;
}
    6d3a:	df 91       	pop	r29
    6d3c:	cf 91       	pop	r28
    6d3e:	1f 91       	pop	r17
    6d40:	0f 91       	pop	r16
    6d42:	08 95       	ret

00006d44 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    6d44:	cf 93       	push	r28
    6d46:	df 93       	push	r29
    6d48:	ec 01       	movw	r28, r24
  if (!sync())return false;
    6d4a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    6d4e:	88 23       	and	r24, r24
    6d50:	19 f0       	breq	.+6      	; 0x6d58 <_ZN6SdFile5closeEv+0x14>
  type_ = FAT_FILE_TYPE_CLOSED;
    6d52:	1d 82       	std	Y+5, r1	; 0x05
  return true;
    6d54:	81 e0       	ldi	r24, 0x01	; 1
    6d56:	01 c0       	rjmp	.+2      	; 0x6d5a <_ZN6SdFile5closeEv+0x16>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    6d58:	80 e0       	ldi	r24, 0x00	; 0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    6d5a:	df 91       	pop	r29
    6d5c:	cf 91       	pop	r28
    6d5e:	08 95       	ret

00006d60 <_ZN6SdFile9timestampEhjhhhhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
         uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6d60:	6f 92       	push	r6
    6d62:	7f 92       	push	r7
    6d64:	8f 92       	push	r8
    6d66:	9f 92       	push	r9
    6d68:	af 92       	push	r10
    6d6a:	bf 92       	push	r11
    6d6c:	cf 92       	push	r12
    6d6e:	ef 92       	push	r14
    6d70:	ff 92       	push	r15
    6d72:	0f 93       	push	r16
    6d74:	1f 93       	push	r17
    6d76:	cf 93       	push	r28
    6d78:	df 93       	push	r29
    6d7a:	3c 01       	movw	r6, r24
    6d7c:	f6 2e       	mov	r15, r22
    6d7e:	4a 01       	movw	r8, r20
    6d80:	c2 2f       	mov	r28, r18
  if (!isOpen()
    6d82:	fc 01       	movw	r30, r24
    6d84:	85 81       	ldd	r24, Z+5	; 0x05
    6d86:	88 23       	and	r24, r24
    6d88:	09 f4       	brne	.+2      	; 0x6d8c <_ZN6SdFile9timestampEhjhhhhh+0x2c>
    6d8a:	75 c0       	rjmp	.+234    	; 0x6e76 <_ZN6SdFile9timestampEhjhhhhh+0x116>
    6d8c:	f7 e0       	ldi	r31, 0x07	; 7
    6d8e:	4c 3b       	cpi	r20, 0xBC	; 188
    6d90:	5f 07       	cpc	r21, r31
    6d92:	08 f4       	brcc	.+2      	; 0x6d96 <_ZN6SdFile9timestampEhjhhhhh+0x36>
    6d94:	72 c0       	rjmp	.+228    	; 0x6e7a <_ZN6SdFile9timestampEhjhhhhh+0x11a>
    6d96:	88 e0       	ldi	r24, 0x08	; 8
    6d98:	4c 33       	cpi	r20, 0x3C	; 60
    6d9a:	58 07       	cpc	r21, r24
    6d9c:	08 f0       	brcs	.+2      	; 0x6da0 <_ZN6SdFile9timestampEhjhhhhh+0x40>
    6d9e:	6f c0       	rjmp	.+222    	; 0x6e7e <_ZN6SdFile9timestampEhjhhhhh+0x11e>
    6da0:	22 23       	and	r18, r18
    6da2:	09 f4       	brne	.+2      	; 0x6da6 <_ZN6SdFile9timestampEhjhhhhh+0x46>
    6da4:	6e c0       	rjmp	.+220    	; 0x6e82 <_ZN6SdFile9timestampEhjhhhhh+0x122>
    6da6:	2d 30       	cpi	r18, 0x0D	; 13
    6da8:	08 f0       	brcs	.+2      	; 0x6dac <_ZN6SdFile9timestampEhjhhhhh+0x4c>
    6daa:	6d c0       	rjmp	.+218    	; 0x6e86 <_ZN6SdFile9timestampEhjhhhhh+0x126>
    6dac:	00 23       	and	r16, r16
    6dae:	09 f4       	brne	.+2      	; 0x6db2 <_ZN6SdFile9timestampEhjhhhhh+0x52>
    6db0:	6c c0       	rjmp	.+216    	; 0x6e8a <_ZN6SdFile9timestampEhjhhhhh+0x12a>
    6db2:	00 32       	cpi	r16, 0x20	; 32
    6db4:	08 f0       	brcs	.+2      	; 0x6db8 <_ZN6SdFile9timestampEhjhhhhh+0x58>
    6db6:	6b c0       	rjmp	.+214    	; 0x6e8e <_ZN6SdFile9timestampEhjhhhhh+0x12e>
    6db8:	e7 e1       	ldi	r30, 0x17	; 23
    6dba:	ee 15       	cp	r30, r14
    6dbc:	08 f4       	brcc	.+2      	; 0x6dc0 <_ZN6SdFile9timestampEhjhhhhh+0x60>
    6dbe:	69 c0       	rjmp	.+210    	; 0x6e92 <_ZN6SdFile9timestampEhjhhhhh+0x132>
    6dc0:	fb e3       	ldi	r31, 0x3B	; 59
    6dc2:	fc 15       	cp	r31, r12
    6dc4:	08 f4       	brcc	.+2      	; 0x6dc8 <_ZN6SdFile9timestampEhjhhhhh+0x68>
    6dc6:	67 c0       	rjmp	.+206    	; 0x6e96 <_ZN6SdFile9timestampEhjhhhhh+0x136>
    6dc8:	fa 15       	cp	r31, r10
    6dca:	08 f4       	brcc	.+2      	; 0x6dce <_ZN6SdFile9timestampEhjhhhhh+0x6e>
    6dcc:	66 c0       	rjmp	.+204    	; 0x6e9a <_ZN6SdFile9timestampEhjhhhhh+0x13a>
    || hour > 23
    || minute > 59
    || second > 59) {
      return false;
  }
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    6dce:	c3 01       	movw	r24, r6
    6dd0:	61 e0       	ldi	r22, 0x01	; 1
    6dd2:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
    6dd6:	fc 01       	movw	r30, r24
  if (!d) return false;
    6dd8:	00 97       	sbiw	r24, 0x00	; 0
    6dda:	09 f4       	brne	.+2      	; 0x6dde <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    6ddc:	60 c0       	rjmp	.+192    	; 0x6e9e <_ZN6SdFile9timestampEhjhhhhh+0x13e>
/** Test value for directory type */
uint8_t const FAT_FILE_TYPE_MIN_DIR = FAT_FILE_TYPE_ROOT16;

/** date field for FAT directory entry */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
    6dde:	80 2f       	mov	r24, r16
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	84 01       	movw	r16, r8
    6de4:	0c 5b       	subi	r16, 0xBC	; 188
    6de6:	17 40       	sbci	r17, 0x07	; 7
    6de8:	10 2f       	mov	r17, r16
    6dea:	00 27       	eor	r16, r16
    6dec:	11 0f       	add	r17, r17
    6dee:	80 2b       	or	r24, r16
    6df0:	91 2b       	or	r25, r17
    6df2:	d0 e0       	ldi	r29, 0x00	; 0
    6df4:	8e 01       	movw	r16, r28
    6df6:	00 0f       	add	r16, r16
    6df8:	11 1f       	adc	r17, r17
    6dfa:	02 95       	swap	r16
    6dfc:	12 95       	swap	r17
    6dfe:	10 7f       	andi	r17, 0xF0	; 240
    6e00:	10 27       	eor	r17, r16
    6e02:	00 7f       	andi	r16, 0xF0	; 240
    6e04:	10 27       	eor	r17, r16
    6e06:	08 2b       	or	r16, r24
    6e08:	19 2b       	or	r17, r25
static inline uint8_t FAT_DAY(uint16_t fatDate) {
  return fatDate & 0X1F;
}
/** time field for FAT directory entry */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour << 11 | minute << 5 | second >> 1;
    6e0a:	bb 24       	eor	r11, r11
    6e0c:	2c 2d       	mov	r18, r12
    6e0e:	30 e0       	ldi	r19, 0x00	; 0
    6e10:	22 0f       	add	r18, r18
    6e12:	33 1f       	adc	r19, r19
    6e14:	22 95       	swap	r18
    6e16:	32 95       	swap	r19
    6e18:	30 7f       	andi	r19, 0xF0	; 240
    6e1a:	32 27       	eor	r19, r18
    6e1c:	20 7f       	andi	r18, 0xF0	; 240
    6e1e:	32 27       	eor	r19, r18
    6e20:	9e 2d       	mov	r25, r14
    6e22:	99 0f       	add	r25, r25
    6e24:	99 0f       	add	r25, r25
    6e26:	99 0f       	add	r25, r25
    6e28:	80 e0       	ldi	r24, 0x00	; 0
    6e2a:	82 2b       	or	r24, r18
    6e2c:	93 2b       	or	r25, r19
    6e2e:	95 01       	movw	r18, r10
    6e30:	35 95       	asr	r19
    6e32:	27 95       	ror	r18
    6e34:	82 2b       	or	r24, r18
    6e36:	93 2b       	or	r25, r19

  uint16_t dirDate = FAT_DATE(year, month, day);
  uint16_t dirTime = FAT_TIME(hour, minute, second);
  if (flags & T_ACCESS) {
    6e38:	f0 fe       	sbrs	r15, 0
    6e3a:	02 c0       	rjmp	.+4      	; 0x6e40 <_ZN6SdFile9timestampEhjhhhhh+0xe0>
    d->lastAccessDate = dirDate;
    6e3c:	13 8b       	std	Z+19, r17	; 0x13
    6e3e:	02 8b       	std	Z+18, r16	; 0x12
  }
  if (flags & T_CREATE) {
    6e40:	f1 fe       	sbrs	r15, 1
    6e42:	0a c0       	rjmp	.+20     	; 0x6e58 <_ZN6SdFile9timestampEhjhhhhh+0xf8>
    d->creationDate = dirDate;
    6e44:	11 8b       	std	Z+17, r17	; 0x11
    6e46:	00 8b       	std	Z+16, r16	; 0x10
    d->creationTime = dirTime;
    6e48:	97 87       	std	Z+15, r25	; 0x0f
    6e4a:	86 87       	std	Z+14, r24	; 0x0e
    // seems to be units of 1/100 second not 1/10 as Microsoft states
    d->creationTimeTenths = second & 1 ? 100 : 0;
    6e4c:	a0 fe       	sbrs	r10, 0
    6e4e:	02 c0       	rjmp	.+4      	; 0x6e54 <_ZN6SdFile9timestampEhjhhhhh+0xf4>
    6e50:	24 e6       	ldi	r18, 0x64	; 100
    6e52:	01 c0       	rjmp	.+2      	; 0x6e56 <_ZN6SdFile9timestampEhjhhhhh+0xf6>
    6e54:	20 e0       	ldi	r18, 0x00	; 0
    6e56:	25 87       	std	Z+13, r18	; 0x0d
  }
  if (flags & T_WRITE) {
    6e58:	f2 fe       	sbrs	r15, 2
    6e5a:	04 c0       	rjmp	.+8      	; 0x6e64 <_ZN6SdFile9timestampEhjhhhhh+0x104>
    d->lastWriteDate = dirDate;
    6e5c:	11 8f       	std	Z+25, r17	; 0x19
    6e5e:	00 8f       	std	Z+24, r16	; 0x18
    d->lastWriteTime = dirTime;
    6e60:	97 8b       	std	Z+23, r25	; 0x17
    6e62:	86 8b       	std	Z+22, r24	; 0x16
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    6e64:	80 91 82 06 	lds	r24, 0x0682
    6e68:	81 60       	ori	r24, 0x01	; 1
    6e6a:	80 93 82 06 	sts	0x0682, r24
  }
  SdVolume::cacheSetDirty();
  return sync();
    6e6e:	c3 01       	movw	r24, r6
    6e70:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    6e74:	15 c0       	rjmp	.+42     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    || day < 1
    || day > 31
    || hour > 23
    || minute > 59
    || second > 59) {
      return false;
    6e76:	80 e0       	ldi	r24, 0x00	; 0
    6e78:	13 c0       	rjmp	.+38     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e7a:	80 e0       	ldi	r24, 0x00	; 0
    6e7c:	11 c0       	rjmp	.+34     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e7e:	80 e0       	ldi	r24, 0x00	; 0
    6e80:	0f c0       	rjmp	.+30     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e82:	80 e0       	ldi	r24, 0x00	; 0
    6e84:	0d c0       	rjmp	.+26     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e86:	80 e0       	ldi	r24, 0x00	; 0
    6e88:	0b c0       	rjmp	.+22     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e8a:	80 e0       	ldi	r24, 0x00	; 0
    6e8c:	09 c0       	rjmp	.+18     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e8e:	80 e0       	ldi	r24, 0x00	; 0
    6e90:	07 c0       	rjmp	.+14     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e92:	80 e0       	ldi	r24, 0x00	; 0
    6e94:	05 c0       	rjmp	.+10     	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e96:	80 e0       	ldi	r24, 0x00	; 0
    6e98:	03 c0       	rjmp	.+6      	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
    6e9a:	80 e0       	ldi	r24, 0x00	; 0
    6e9c:	01 c0       	rjmp	.+2      	; 0x6ea0 <_ZN6SdFile9timestampEhjhhhhh+0x140>
  }
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
    d->lastWriteDate = dirDate;
    d->lastWriteTime = dirTime;
  }
  SdVolume::cacheSetDirty();
  return sync();
}
    6ea0:	df 91       	pop	r29
    6ea2:	cf 91       	pop	r28
    6ea4:	1f 91       	pop	r17
    6ea6:	0f 91       	pop	r16
    6ea8:	ff 90       	pop	r15
    6eaa:	ef 90       	pop	r14
    6eac:	cf 90       	pop	r12
    6eae:	bf 90       	pop	r11
    6eb0:	af 90       	pop	r10
    6eb2:	9f 90       	pop	r9
    6eb4:	8f 90       	pop	r8
    6eb6:	7f 90       	pop	r7
    6eb8:	6f 90       	pop	r6
    6eba:	08 95       	ret

00006ebc <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    6ebc:	4f 92       	push	r4
    6ebe:	5f 92       	push	r5
    6ec0:	6f 92       	push	r6
    6ec2:	7f 92       	push	r7
    6ec4:	8f 92       	push	r8
    6ec6:	9f 92       	push	r9
    6ec8:	af 92       	push	r10
    6eca:	bf 92       	push	r11
    6ecc:	ef 92       	push	r14
    6ece:	ff 92       	push	r15
    6ed0:	0f 93       	push	r16
    6ed2:	1f 93       	push	r17
    6ed4:	cf 93       	push	r28
    6ed6:	df 93       	push	r29
    6ed8:	00 d0       	rcall	.+0      	; 0x6eda <_ZN6SdFile8truncateEm+0x1e>
    6eda:	0f 92       	push	r0
    6edc:	cd b7       	in	r28, 0x3d	; 61
    6ede:	de b7       	in	r29, 0x3e	; 62
    6ee0:	7c 01       	movw	r14, r24
    6ee2:	4a 01       	movw	r8, r20
    6ee4:	5b 01       	movw	r10, r22
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    6ee6:	dc 01       	movw	r26, r24
    6ee8:	15 96       	adiw	r26, 0x05	; 5
    6eea:	8c 91       	ld	r24, X
    6eec:	15 97       	sbiw	r26, 0x05	; 5
    6eee:	81 30       	cpi	r24, 0x01	; 1
    6ef0:	09 f0       	breq	.+2      	; 0x6ef4 <_ZN6SdFile8truncateEm+0x38>
    6ef2:	9c c0       	rjmp	.+312    	; 0x702c <_ZN6SdFile8truncateEm+0x170>
    6ef4:	14 96       	adiw	r26, 0x04	; 4
    6ef6:	8c 91       	ld	r24, X
    6ef8:	14 97       	sbiw	r26, 0x04	; 4
    6efa:	81 ff       	sbrs	r24, 1
    6efc:	99 c0       	rjmp	.+306    	; 0x7030 <_ZN6SdFile8truncateEm+0x174>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    6efe:	53 96       	adiw	r26, 0x13	; 19
    6f00:	8d 91       	ld	r24, X+
    6f02:	9d 91       	ld	r25, X+
    6f04:	0d 90       	ld	r0, X+
    6f06:	bc 91       	ld	r27, X
    6f08:	a0 2d       	mov	r26, r0
    6f0a:	84 17       	cp	r24, r20
    6f0c:	95 07       	cpc	r25, r21
    6f0e:	a6 07       	cpc	r26, r22
    6f10:	b7 07       	cpc	r27, r23
    6f12:	08 f4       	brcc	.+2      	; 0x6f16 <_ZN6SdFile8truncateEm+0x5a>
    6f14:	8f c0       	rjmp	.+286    	; 0x7034 <_ZN6SdFile8truncateEm+0x178>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    6f16:	00 97       	sbiw	r24, 0x00	; 0
    6f18:	a1 05       	cpc	r26, r1
    6f1a:	b1 05       	cpc	r27, r1
    6f1c:	09 f4       	brne	.+2      	; 0x6f20 <_ZN6SdFile8truncateEm+0x64>
    6f1e:	8c c0       	rjmp	.+280    	; 0x7038 <_ZN6SdFile8truncateEm+0x17c>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    6f20:	f7 01       	movw	r30, r14
    6f22:	42 84       	ldd	r4, Z+10	; 0x0a
    6f24:	53 84       	ldd	r5, Z+11	; 0x0b
    6f26:	64 84       	ldd	r6, Z+12	; 0x0c
    6f28:	75 84       	ldd	r7, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    6f2a:	c7 01       	movw	r24, r14
    6f2c:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    6f30:	88 23       	and	r24, r24
    6f32:	09 f4       	brne	.+2      	; 0x6f36 <_ZN6SdFile8truncateEm+0x7a>
    6f34:	83 c0       	rjmp	.+262    	; 0x703c <_ZN6SdFile8truncateEm+0x180>

  if (length == 0) {
    6f36:	81 14       	cp	r8, r1
    6f38:	91 04       	cpc	r9, r1
    6f3a:	a1 04       	cpc	r10, r1
    6f3c:	b1 04       	cpc	r11, r1
    6f3e:	b1 f4       	brne	.+44     	; 0x6f6c <_ZN6SdFile8truncateEm+0xb0>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    6f40:	d7 01       	movw	r26, r14
    6f42:	57 96       	adiw	r26, 0x17	; 23
    6f44:	4d 91       	ld	r20, X+
    6f46:	5d 91       	ld	r21, X+
    6f48:	6d 91       	ld	r22, X+
    6f4a:	7c 91       	ld	r23, X
    6f4c:	5a 97       	sbiw	r26, 0x1a	; 26
    6f4e:	5b 96       	adiw	r26, 0x1b	; 27
    6f50:	8d 91       	ld	r24, X+
    6f52:	9c 91       	ld	r25, X
    6f54:	5c 97       	sbiw	r26, 0x1c	; 28
    6f56:	0e 94 41 43 	call	0x8682	; 0x8682 <_ZN8SdVolume9freeChainEm>
    6f5a:	88 23       	and	r24, r24
    6f5c:	09 f4       	brne	.+2      	; 0x6f60 <_ZN6SdFile8truncateEm+0xa4>
    6f5e:	70 c0       	rjmp	.+224    	; 0x7040 <_ZN6SdFile8truncateEm+0x184>
    firstCluster_ = 0;
    6f60:	f7 01       	movw	r30, r14
    6f62:	17 8a       	std	Z+23, r1	; 0x17
    6f64:	10 8e       	std	Z+24, r1	; 0x18
    6f66:	11 8e       	std	Z+25, r1	; 0x19
    6f68:	12 8e       	std	Z+26, r1	; 0x1a
    6f6a:	41 c0       	rjmp	.+130    	; 0x6fee <_ZN6SdFile8truncateEm+0x132>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    6f6c:	d7 01       	movw	r26, r14
    6f6e:	16 96       	adiw	r26, 0x06	; 6
    6f70:	4d 91       	ld	r20, X+
    6f72:	5d 91       	ld	r21, X+
    6f74:	6d 91       	ld	r22, X+
    6f76:	7c 91       	ld	r23, X
    6f78:	19 97       	sbiw	r26, 0x09	; 9
    6f7a:	5b 96       	adiw	r26, 0x1b	; 27
    6f7c:	8d 91       	ld	r24, X+
    6f7e:	9c 91       	ld	r25, X
    6f80:	5c 97       	sbiw	r26, 0x1c	; 28
    6f82:	9e 01       	movw	r18, r28
    6f84:	2f 5f       	subi	r18, 0xFF	; 255
    6f86:	3f 4f       	sbci	r19, 0xFF	; 255
    6f88:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    6f8c:	88 23       	and	r24, r24
    6f8e:	09 f4       	brne	.+2      	; 0x6f92 <_ZN6SdFile8truncateEm+0xd6>
    6f90:	59 c0       	rjmp	.+178    	; 0x7044 <_ZN6SdFile8truncateEm+0x188>

    if (!vol_->isEOC(toFree)) {
    6f92:	d7 01       	movw	r26, r14
    6f94:	5b 96       	adiw	r26, 0x1b	; 27
    6f96:	ed 91       	ld	r30, X+
    6f98:	fc 91       	ld	r31, X
    6f9a:	5c 97       	sbiw	r26, 0x1c	; 28
    6f9c:	49 81       	ldd	r20, Y+1	; 0x01
    6f9e:	5a 81       	ldd	r21, Y+2	; 0x02
    6fa0:	6b 81       	ldd	r22, Y+3	; 0x03
    6fa2:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    6fa4:	87 89       	ldd	r24, Z+23	; 0x17
    6fa6:	80 31       	cpi	r24, 0x10	; 16
    6fa8:	29 f4       	brne	.+10     	; 0x6fb4 <_ZN6SdFile8truncateEm+0xf8>
    6faa:	88 ef       	ldi	r24, 0xF8	; 248
    6fac:	9f ef       	ldi	r25, 0xFF	; 255
    6fae:	a0 e0       	ldi	r26, 0x00	; 0
    6fb0:	b0 e0       	ldi	r27, 0x00	; 0
    6fb2:	04 c0       	rjmp	.+8      	; 0x6fbc <_ZN6SdFile8truncateEm+0x100>
    6fb4:	88 ef       	ldi	r24, 0xF8	; 248
    6fb6:	9f ef       	ldi	r25, 0xFF	; 255
    6fb8:	af ef       	ldi	r26, 0xFF	; 255
    6fba:	bf e0       	ldi	r27, 0x0F	; 15
    6fbc:	48 17       	cp	r20, r24
    6fbe:	59 07       	cpc	r21, r25
    6fc0:	6a 07       	cpc	r22, r26
    6fc2:	7b 07       	cpc	r23, r27
    6fc4:	a0 f4       	brcc	.+40     	; 0x6fee <_ZN6SdFile8truncateEm+0x132>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    6fc6:	cf 01       	movw	r24, r30
    6fc8:	0e 94 41 43 	call	0x8682	; 0x8682 <_ZN8SdVolume9freeChainEm>
    6fcc:	88 23       	and	r24, r24
    6fce:	e1 f1       	breq	.+120    	; 0x7048 <_ZN6SdFile8truncateEm+0x18c>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6fd0:	f7 01       	movw	r30, r14
    6fd2:	46 81       	ldd	r20, Z+6	; 0x06
    6fd4:	57 81       	ldd	r21, Z+7	; 0x07
    6fd6:	60 85       	ldd	r22, Z+8	; 0x08
    6fd8:	71 85       	ldd	r23, Z+9	; 0x09
    6fda:	83 8d       	ldd	r24, Z+27	; 0x1b
    6fdc:	94 8d       	ldd	r25, Z+28	; 0x1c
    6fde:	0f ef       	ldi	r16, 0xFF	; 255
    6fe0:	1f ef       	ldi	r17, 0xFF	; 255
    6fe2:	2f ef       	ldi	r18, 0xFF	; 255
    6fe4:	3f e0       	ldi	r19, 0x0F	; 15
    6fe6:	0e 94 66 41 	call	0x82cc	; 0x82cc <_ZN8SdVolume6fatPutEmm>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    6fea:	88 23       	and	r24, r24
    6fec:	79 f1       	breq	.+94     	; 0x704c <_ZN6SdFile8truncateEm+0x190>
    }
  }
  fileSize_ = length;
    6fee:	d7 01       	movw	r26, r14
    6ff0:	53 96       	adiw	r26, 0x13	; 19
    6ff2:	8d 92       	st	X+, r8
    6ff4:	9d 92       	st	X+, r9
    6ff6:	ad 92       	st	X+, r10
    6ff8:	bc 92       	st	X, r11
    6ffa:	56 97       	sbiw	r26, 0x16	; 22

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    6ffc:	14 96       	adiw	r26, 0x04	; 4
    6ffe:	8c 91       	ld	r24, X
    7000:	14 97       	sbiw	r26, 0x04	; 4
    7002:	80 68       	ori	r24, 0x80	; 128
    7004:	14 96       	adiw	r26, 0x04	; 4
    7006:	8c 93       	st	X, r24

  if (!sync()) return false;
    7008:	c7 01       	movw	r24, r14
    700a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    700e:	88 23       	and	r24, r24
    7010:	f9 f0       	breq	.+62     	; 0x7050 <_ZN6SdFile8truncateEm+0x194>

  // set file to correct position
  return seekSet(newPos);
    7012:	b5 01       	movw	r22, r10
    7014:	a4 01       	movw	r20, r8
    7016:	48 14       	cp	r4, r8
    7018:	59 04       	cpc	r5, r9
    701a:	6a 04       	cpc	r6, r10
    701c:	7b 04       	cpc	r7, r11
    701e:	10 f4       	brcc	.+4      	; 0x7024 <_ZN6SdFile8truncateEm+0x168>
    7020:	b3 01       	movw	r22, r6
    7022:	a2 01       	movw	r20, r4
    7024:	c7 01       	movw	r24, r14
    7026:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    702a:	13 c0       	rjmp	.+38     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    702c:	80 e0       	ldi	r24, 0x00	; 0
    702e:	11 c0       	rjmp	.+34     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>
    7030:	80 e0       	ldi	r24, 0x00	; 0
    7032:	0f c0       	rjmp	.+30     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    7034:	80 e0       	ldi	r24, 0x00	; 0
    7036:	0d c0       	rjmp	.+26     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    7038:	81 e0       	ldi	r24, 0x01	; 1
    703a:	0b c0       	rjmp	.+22     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    703c:	80 e0       	ldi	r24, 0x00	; 0
    703e:	09 c0       	rjmp	.+18     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    7040:	80 e0       	ldi	r24, 0x00	; 0
    7042:	07 c0       	rjmp	.+14     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    7044:	80 e0       	ldi	r24, 0x00	; 0
    7046:	05 c0       	rjmp	.+10     	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    7048:	80 e0       	ldi	r24, 0x00	; 0
    704a:	03 c0       	rjmp	.+6      	; 0x7052 <_ZN6SdFile8truncateEm+0x196>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    704c:	80 e0       	ldi	r24, 0x00	; 0
    704e:	01 c0       	rjmp	.+2      	; 0x7052 <_ZN6SdFile8truncateEm+0x196>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    7050:	80 e0       	ldi	r24, 0x00	; 0

  // set file to correct position
  return seekSet(newPos);
}
    7052:	0f 90       	pop	r0
    7054:	0f 90       	pop	r0
    7056:	0f 90       	pop	r0
    7058:	0f 90       	pop	r0
    705a:	df 91       	pop	r29
    705c:	cf 91       	pop	r28
    705e:	1f 91       	pop	r17
    7060:	0f 91       	pop	r16
    7062:	ff 90       	pop	r15
    7064:	ef 90       	pop	r14
    7066:	bf 90       	pop	r11
    7068:	af 90       	pop	r10
    706a:	9f 90       	pop	r9
    706c:	8f 90       	pop	r8
    706e:	7f 90       	pop	r7
    7070:	6f 90       	pop	r6
    7072:	5f 90       	pop	r5
    7074:	4f 90       	pop	r4
    7076:	08 95       	ret

00007078 <_ZN6SdFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    7078:	cf 93       	push	r28
    707a:	df 93       	push	r29
    707c:	ec 01       	movw	r28, r24
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    707e:	40 e0       	ldi	r20, 0x00	; 0
    7080:	50 e0       	ldi	r21, 0x00	; 0
    7082:	ba 01       	movw	r22, r20
    7084:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <_ZN6SdFile8truncateEm>
    7088:	88 23       	and	r24, r24
    708a:	69 f0       	breq	.+26     	; 0x70a6 <_ZN6SdFile6removeEv+0x2e>

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    708c:	ce 01       	movw	r24, r28
    708e:	61 e0       	ldi	r22, 0x01	; 1
    7090:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
  if (!d) return false;
    7094:	00 97       	sbiw	r24, 0x00	; 0
    7096:	49 f0       	breq	.+18     	; 0x70aa <_ZN6SdFile6removeEv+0x32>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    7098:	25 ee       	ldi	r18, 0xE5	; 229
    709a:	fc 01       	movw	r30, r24
    709c:	20 83       	st	Z, r18

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    709e:	1d 82       	std	Y+5, r1	; 0x05

  // write entry to SD
  return SdVolume::cacheFlush();
    70a0:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    70a4:	03 c0       	rjmp	.+6      	; 0x70ac <_ZN6SdFile6removeEv+0x34>
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    70a6:	80 e0       	ldi	r24, 0x00	; 0
    70a8:	01 c0       	rjmp	.+2      	; 0x70ac <_ZN6SdFile6removeEv+0x34>

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;
    70aa:	80 e0       	ldi	r24, 0x00	; 0
  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;

  // write entry to SD
  return SdVolume::cacheFlush();
}
    70ac:	df 91       	pop	r29
    70ae:	cf 91       	pop	r28
    70b0:	08 95       	ret

000070b2 <_ZN6SdFile5rmDirEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is not a directory, is the root
 * directory, is not empty, or an I/O error occurred.
 */
uint8_t SdFile::rmDir(void) {
    70b2:	cf 93       	push	r28
    70b4:	df 93       	push	r29
    70b6:	ec 01       	movw	r28, r24
  // must be open subdirectory
  if (!isSubDir()) return false;
    70b8:	8d 81       	ldd	r24, Y+5	; 0x05
    70ba:	84 30       	cpi	r24, 0x04	; 4
    70bc:	79 f5       	brne	.+94     	; 0x711c <_ZN6SdFile5rmDirEv+0x6a>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    70be:	1e 82       	std	Y+6, r1	; 0x06
    70c0:	1f 82       	std	Y+7, r1	; 0x07
    70c2:	18 86       	std	Y+8, r1	; 0x08
    70c4:	19 86       	std	Y+9, r1	; 0x09
    70c6:	1a 86       	std	Y+10, r1	; 0x0a
    70c8:	1b 86       	std	Y+11, r1	; 0x0b
    70ca:	1c 86       	std	Y+12, r1	; 0x0c
    70cc:	1d 86       	std	Y+13, r1	; 0x0d
    70ce:	10 c0       	rjmp	.+32     	; 0x70f0 <_ZN6SdFile5rmDirEv+0x3e>

  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    dir_t* p = readDirCache();
    70d0:	ce 01       	movw	r24, r28
    70d2:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN6SdFile12readDirCacheEv>
    70d6:	fc 01       	movw	r30, r24
    if (p == NULL) return false;
    70d8:	00 97       	sbiw	r24, 0x00	; 0
    70da:	11 f1       	breq	.+68     	; 0x7120 <_ZN6SdFile5rmDirEv+0x6e>
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    70dc:	80 81       	ld	r24, Z
    70de:	88 23       	and	r24, r24
    70e0:	a1 f0       	breq	.+40     	; 0x710a <_ZN6SdFile5rmDirEv+0x58>
    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    70e2:	85 3e       	cpi	r24, 0xE5	; 229
    70e4:	29 f0       	breq	.+10     	; 0x70f0 <_ZN6SdFile5rmDirEv+0x3e>
    70e6:	8e 32       	cpi	r24, 0x2E	; 46
    70e8:	19 f0       	breq	.+6      	; 0x70f0 <_ZN6SdFile5rmDirEv+0x3e>
    70ea:	83 85       	ldd	r24, Z+11	; 0x0b
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) return false;
    70ec:	83 ff       	sbrs	r24, 3
    70ee:	1a c0       	rjmp	.+52     	; 0x7124 <_ZN6SdFile5rmDirEv+0x72>
  if (!isSubDir()) return false;

  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    70f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    70f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    70f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    70f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    70f8:	8b 89       	ldd	r24, Y+19	; 0x13
    70fa:	9c 89       	ldd	r25, Y+20	; 0x14
    70fc:	ad 89       	ldd	r26, Y+21	; 0x15
    70fe:	be 89       	ldd	r27, Y+22	; 0x16
    7100:	48 17       	cp	r20, r24
    7102:	59 07       	cpc	r21, r25
    7104:	6a 07       	cpc	r22, r26
    7106:	7b 07       	cpc	r23, r27
    7108:	18 f3       	brcs	.-58     	; 0x70d0 <_ZN6SdFile5rmDirEv+0x1e>
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) return false;
  }
  // convert empty directory to normal file for remove
  type_ = FAT_FILE_TYPE_NORMAL;
    710a:	81 e0       	ldi	r24, 0x01	; 1
    710c:	8d 83       	std	Y+5, r24	; 0x05
  flags_ |= O_WRITE;
    710e:	8c 81       	ldd	r24, Y+4	; 0x04
    7110:	82 60       	ori	r24, 0x02	; 2
    7112:	8c 83       	std	Y+4, r24	; 0x04
  return remove();
    7114:	ce 01       	movw	r24, r28
    7116:	0e 94 3c 38 	call	0x7078	; 0x7078 <_ZN6SdFile6removeEv>
    711a:	05 c0       	rjmp	.+10     	; 0x7126 <_ZN6SdFile5rmDirEv+0x74>
 * Reasons for failure include the file is not a directory, is the root
 * directory, is not empty, or an I/O error occurred.
 */
uint8_t SdFile::rmDir(void) {
  // must be open subdirectory
  if (!isSubDir()) return false;
    711c:	80 e0       	ldi	r24, 0x00	; 0
    711e:	03 c0       	rjmp	.+6      	; 0x7126 <_ZN6SdFile5rmDirEv+0x74>
  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    dir_t* p = readDirCache();
    if (p == NULL) return false;
    7120:	80 e0       	ldi	r24, 0x00	; 0
    7122:	01 c0       	rjmp	.+2      	; 0x7126 <_ZN6SdFile5rmDirEv+0x74>
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) return false;
    7124:	80 e0       	ldi	r24, 0x00	; 0
  }
  // convert empty directory to normal file for remove
  type_ = FAT_FILE_TYPE_NORMAL;
  flags_ |= O_WRITE;
  return remove();
}
    7126:	df 91       	pop	r29
    7128:	cf 91       	pop	r28
    712a:	08 95       	ret

0000712c <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    712c:	1f 93       	push	r17
    712e:	cf 93       	push	r28
    7130:	df 93       	push	r29
    7132:	ec 01       	movw	r28, r24
    7134:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    7136:	e6 2f       	mov	r30, r22
    7138:	f0 e0       	ldi	r31, 0x00	; 0
    713a:	ee 0f       	add	r30, r30
    713c:	ff 1f       	adc	r31, r31
    713e:	e2 95       	swap	r30
    7140:	f2 95       	swap	r31
    7142:	f0 7f       	andi	r31, 0xF0	; 240
    7144:	fe 27       	eor	r31, r30
    7146:	e0 7f       	andi	r30, 0xF0	; 240
    7148:	fe 27       	eor	r31, r30
    714a:	eb 57       	subi	r30, 0x7B	; 123
    714c:	f9 4f       	sbci	r31, 0xF9	; 249

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    714e:	83 85       	ldd	r24, Z+11	; 0x0b
    7150:	81 71       	andi	r24, 0x11	; 17
    7152:	21 f0       	breq	.+8      	; 0x715c <_ZN6SdFile15openCachedEntryEhh+0x30>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    7154:	84 2f       	mov	r24, r20
    7156:	82 74       	andi	r24, 0x42	; 66
    7158:	09 f0       	breq	.+2      	; 0x715c <_ZN6SdFile15openCachedEntryEhh+0x30>
    715a:	57 c0       	rjmp	.+174    	; 0x720a <_ZN6SdFile15openCachedEntryEhh+0xde>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    715c:	6a 8b       	std	Y+18, r22	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    715e:	80 91 76 02 	lds	r24, 0x0276
    7162:	90 91 77 02 	lds	r25, 0x0277
    7166:	a0 91 78 02 	lds	r26, 0x0278
    716a:	b0 91 79 02 	lds	r27, 0x0279
    716e:	8e 87       	std	Y+14, r24	; 0x0e
    7170:	9f 87       	std	Y+15, r25	; 0x0f
    7172:	a8 8b       	std	Y+16, r26	; 0x10
    7174:	b9 8b       	std	Y+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    7176:	44 89       	ldd	r20, Z+20	; 0x14
    7178:	55 89       	ldd	r21, Z+21	; 0x15
    717a:	60 e0       	ldi	r22, 0x00	; 0
    717c:	70 e0       	ldi	r23, 0x00	; 0
    717e:	ba 01       	movw	r22, r20
    7180:	55 27       	eor	r21, r21
    7182:	44 27       	eor	r20, r20
    7184:	4f 8b       	std	Y+23, r20	; 0x17
    7186:	58 8f       	std	Y+24, r21	; 0x18
    7188:	69 8f       	std	Y+25, r22	; 0x19
    718a:	7a 8f       	std	Y+26, r23	; 0x1a
  firstCluster_ |= p->firstClusterLow;
    718c:	82 8d       	ldd	r24, Z+26	; 0x1a
    718e:	93 8d       	ldd	r25, Z+27	; 0x1b
    7190:	a0 e0       	ldi	r26, 0x00	; 0
    7192:	b0 e0       	ldi	r27, 0x00	; 0
    7194:	48 2b       	or	r20, r24
    7196:	59 2b       	or	r21, r25
    7198:	6a 2b       	or	r22, r26
    719a:	7b 2b       	or	r23, r27
    719c:	4f 8b       	std	Y+23, r20	; 0x17
    719e:	58 8f       	std	Y+24, r21	; 0x18
    71a0:	69 8f       	std	Y+25, r22	; 0x19
    71a2:	7a 8f       	std	Y+26, r23	; 0x1a
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    71a4:	83 85       	ldd	r24, Z+11	; 0x0b
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	88 71       	andi	r24, 0x18	; 24
    71aa:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    71ac:	00 97       	sbiw	r24, 0x00	; 0
    71ae:	59 f4       	brne	.+22     	; 0x71c6 <_ZN6SdFile15openCachedEntryEhh+0x9a>
    fileSize_ = p->fileSize;
    71b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    71b2:	95 8d       	ldd	r25, Z+29	; 0x1d
    71b4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    71b6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    71b8:	8b 8b       	std	Y+19, r24	; 0x13
    71ba:	9c 8b       	std	Y+20, r25	; 0x14
    71bc:	ad 8b       	std	Y+21, r26	; 0x15
    71be:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    71c0:	81 e0       	ldi	r24, 0x01	; 1
    71c2:	8d 83       	std	Y+5, r24	; 0x05
    71c4:	0e c0       	rjmp	.+28     	; 0x71e2 <_ZN6SdFile15openCachedEntryEhh+0xb6>
  } else if (DIR_IS_SUBDIR(p)) {
    71c6:	80 31       	cpi	r24, 0x10	; 16
    71c8:	91 05       	cpc	r25, r1
    71ca:	09 f5       	brne	.+66     	; 0x720e <_ZN6SdFile15openCachedEntryEhh+0xe2>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    71cc:	9e 01       	movw	r18, r28
    71ce:	2d 5e       	subi	r18, 0xED	; 237
    71d0:	3f 4f       	sbci	r19, 0xFF	; 255
    71d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71d6:	0e 94 eb 40 	call	0x81d6	; 0x81d6 <_ZNK8SdVolume9chainSizeEmPm>
    71da:	88 23       	and	r24, r24
    71dc:	d1 f0       	breq	.+52     	; 0x7212 <_ZN6SdFile15openCachedEntryEhh+0xe6>
    type_ = FAT_FILE_TYPE_SUBDIR;
    71de:	84 e0       	ldi	r24, 0x04	; 4
    71e0:	8d 83       	std	Y+5, r24	; 0x05
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    71e2:	81 2f       	mov	r24, r17
    71e4:	8f 70       	andi	r24, 0x0F	; 15
    71e6:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    71e8:	1e 82       	std	Y+6, r1	; 0x06
    71ea:	1f 82       	std	Y+7, r1	; 0x07
    71ec:	18 86       	std	Y+8, r1	; 0x08
    71ee:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    71f0:	1a 86       	std	Y+10, r1	; 0x0a
    71f2:	1b 86       	std	Y+11, r1	; 0x0b
    71f4:	1c 86       	std	Y+12, r1	; 0x0c
    71f6:	1d 86       	std	Y+13, r1	; 0x0d

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    71f8:	16 ff       	sbrs	r17, 6
    71fa:	0d c0       	rjmp	.+26     	; 0x7216 <_ZN6SdFile15openCachedEntryEhh+0xea>
    71fc:	ce 01       	movw	r24, r28
    71fe:	40 e0       	ldi	r20, 0x00	; 0
    7200:	50 e0       	ldi	r21, 0x00	; 0
    7202:	ba 01       	movw	r22, r20
    7204:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <_ZN6SdFile8truncateEm>
    7208:	07 c0       	rjmp	.+14     	; 0x7218 <_ZN6SdFile15openCachedEntryEhh+0xec>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    720a:	80 e0       	ldi	r24, 0x00	; 0
    720c:	05 c0       	rjmp	.+10     	; 0x7218 <_ZN6SdFile15openCachedEntryEhh+0xec>
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
    720e:	80 e0       	ldi	r24, 0x00	; 0
    7210:	03 c0       	rjmp	.+6      	; 0x7218 <_ZN6SdFile15openCachedEntryEhh+0xec>
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    7212:	80 e0       	ldi	r24, 0x00	; 0
    7214:	01 c0       	rjmp	.+2      	; 0x7218 <_ZN6SdFile15openCachedEntryEhh+0xec>
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
  return true;
    7216:	81 e0       	ldi	r24, 0x01	; 1
}
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
    721c:	1f 91       	pop	r17
    721e:	08 95       	ret

00007220 <_ZN6SdFile4openEPS_jh>:
 * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
 *
 * See open() by fileName for definition of flags and return values.
 *
 */
uint8_t SdFile::open(SdFile* dirFile, uint16_t index, uint8_t oflag) {
    7220:	cf 92       	push	r12
    7222:	df 92       	push	r13
    7224:	ef 92       	push	r14
    7226:	ff 92       	push	r15
    7228:	0f 93       	push	r16
    722a:	1f 93       	push	r17
    722c:	cf 93       	push	r28
    722e:	8c 01       	movw	r16, r24
    7230:	7b 01       	movw	r14, r22
    7232:	6a 01       	movw	r12, r20
    7234:	c2 2f       	mov	r28, r18
  // error if already open
  if (isOpen())return false;
    7236:	fc 01       	movw	r30, r24
    7238:	85 81       	ldd	r24, Z+5	; 0x05
    723a:	88 23       	and	r24, r24
    723c:	69 f5       	brne	.+90     	; 0x7298 <_ZN6SdFile4openEPS_jh+0x78>

  // don't open existing file if O_CREAT and O_EXCL - user call error
  if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    723e:	82 2f       	mov	r24, r18
    7240:	80 73       	andi	r24, 0x30	; 48
    7242:	80 33       	cpi	r24, 0x30	; 48
    7244:	59 f1       	breq	.+86     	; 0x729c <_ZN6SdFile4openEPS_jh+0x7c>

  vol_ = dirFile->vol_;
    7246:	fb 01       	movw	r30, r22
    7248:	83 8d       	ldd	r24, Z+27	; 0x1b
    724a:	94 8d       	ldd	r25, Z+28	; 0x1c
    724c:	f8 01       	movw	r30, r16
    724e:	94 8f       	std	Z+28, r25	; 0x1c
    7250:	83 8f       	std	Z+27, r24	; 0x1b

  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) return false;
    7252:	44 0f       	add	r20, r20
    7254:	55 1f       	adc	r21, r21
    7256:	42 95       	swap	r20
    7258:	52 95       	swap	r21
    725a:	50 7f       	andi	r21, 0xF0	; 240
    725c:	54 27       	eor	r21, r20
    725e:	40 7f       	andi	r20, 0xF0	; 240
    7260:	54 27       	eor	r21, r20
    7262:	60 e0       	ldi	r22, 0x00	; 0
    7264:	70 e0       	ldi	r23, 0x00	; 0
    7266:	c7 01       	movw	r24, r14
    7268:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    726c:	88 23       	and	r24, r24
    726e:	c1 f0       	breq	.+48     	; 0x72a0 <_ZN6SdFile4openEPS_jh+0x80>

  // read entry into cache
  dir_t* p = dirFile->readDirCache();
    7270:	c7 01       	movw	r24, r14
    7272:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN6SdFile12readDirCacheEv>
  if (p == NULL) return false;
    7276:	00 97       	sbiw	r24, 0x00	; 0
    7278:	a9 f0       	breq	.+42     	; 0x72a4 <_ZN6SdFile4openEPS_jh+0x84>

  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
    727a:	fc 01       	movw	r30, r24
    727c:	80 81       	ld	r24, Z
    727e:	88 23       	and	r24, r24
    7280:	99 f0       	breq	.+38     	; 0x72a8 <_ZN6SdFile4openEPS_jh+0x88>
    7282:	85 3e       	cpi	r24, 0xE5	; 229
    7284:	99 f0       	breq	.+38     	; 0x72ac <_ZN6SdFile4openEPS_jh+0x8c>
    7286:	8e 32       	cpi	r24, 0x2E	; 46
    7288:	99 f0       	breq	.+38     	; 0x72b0 <_ZN6SdFile4openEPS_jh+0x90>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
    return false;
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
    728a:	6c 2d       	mov	r22, r12
    728c:	6f 70       	andi	r22, 0x0F	; 15
    728e:	c8 01       	movw	r24, r16
    7290:	4c 2f       	mov	r20, r28
    7292:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN6SdFile15openCachedEntryEhh>
    7296:	0d c0       	rjmp	.+26     	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>
 * See open() by fileName for definition of flags and return values.
 *
 */
uint8_t SdFile::open(SdFile* dirFile, uint16_t index, uint8_t oflag) {
  // error if already open
  if (isOpen())return false;
    7298:	80 e0       	ldi	r24, 0x00	; 0
    729a:	0b c0       	rjmp	.+22     	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>

  // don't open existing file if O_CREAT and O_EXCL - user call error
  if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    729c:	80 e0       	ldi	r24, 0x00	; 0
    729e:	09 c0       	rjmp	.+18     	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>

  vol_ = dirFile->vol_;

  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) return false;
    72a0:	80 e0       	ldi	r24, 0x00	; 0
    72a2:	07 c0       	rjmp	.+14     	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>

  // read entry into cache
  dir_t* p = dirFile->readDirCache();
  if (p == NULL) return false;
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	05 c0       	rjmp	.+10     	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>

  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
    return false;
    72a8:	80 e0       	ldi	r24, 0x00	; 0
    72aa:	03 c0       	rjmp	.+6      	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>
    72ac:	80 e0       	ldi	r24, 0x00	; 0
    72ae:	01 c0       	rjmp	.+2      	; 0x72b2 <_ZN6SdFile4openEPS_jh+0x92>
    72b0:	80 e0       	ldi	r24, 0x00	; 0
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
    72b2:	cf 91       	pop	r28
    72b4:	1f 91       	pop	r17
    72b6:	0f 91       	pop	r16
    72b8:	ff 90       	pop	r15
    72ba:	ef 90       	pop	r14
    72bc:	df 90       	pop	r13
    72be:	cf 90       	pop	r12
    72c0:	08 95       	ret

000072c2 <_ZN6SdFile8rmRfStarEv>:
 * a directory that has a long name.  See remove() and rmDir().
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::rmRfStar(void) {
    72c2:	8f 92       	push	r8
    72c4:	9f 92       	push	r9
    72c6:	af 92       	push	r10
    72c8:	bf 92       	push	r11
    72ca:	cf 92       	push	r12
    72cc:	df 92       	push	r13
    72ce:	ef 92       	push	r14
    72d0:	ff 92       	push	r15
    72d2:	0f 93       	push	r16
    72d4:	1f 93       	push	r17
    72d6:	cf 93       	push	r28
    72d8:	df 93       	push	r29
    72da:	cd b7       	in	r28, 0x3d	; 61
    72dc:	de b7       	in	r29, 0x3e	; 62
    72de:	6d 97       	sbiw	r28, 0x1d	; 29
    72e0:	0f b6       	in	r0, 0x3f	; 63
    72e2:	f8 94       	cli
    72e4:	de bf       	out	0x3e, r29	; 62
    72e6:	0f be       	out	0x3f, r0	; 63
    72e8:	cd bf       	out	0x3d, r28	; 61
    72ea:	5c 01       	movw	r10, r24
    72ec:	fc 01       	movw	r30, r24
    72ee:	16 82       	std	Z+6, r1	; 0x06
    72f0:	17 82       	std	Z+7, r1	; 0x07
    72f2:	10 86       	std	Z+8, r1	; 0x08
    72f4:	11 86       	std	Z+9, r1	; 0x09
    72f6:	12 86       	std	Z+10, r1	; 0x0a
    72f8:	13 86       	std	Z+11, r1	; 0x0b
    72fa:	14 86       	std	Z+12, r1	; 0x0c
    72fc:	15 86       	std	Z+13, r1	; 0x0d
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    72fe:	0f 2e       	mov	r0, r31
    7300:	f2 e7       	ldi	r31, 0x72	; 114
    7302:	8f 2e       	mov	r8, r31
    7304:	f2 e0       	ldi	r31, 0x02	; 2
    7306:	9f 2e       	mov	r9, r31
    7308:	f0 2d       	mov	r31, r0
    730a:	5e c0       	rjmp	.+188    	; 0x73c8 <_ZN6SdFile8rmRfStarEv+0x106>
    730c:	1c 82       	std	Y+4, r1	; 0x04
    730e:	1b 82       	std	Y+3, r1	; 0x03
    7310:	9a 82       	std	Y+2, r9	; 0x02
    7312:	89 82       	std	Y+1, r8	; 0x01
    7314:	1e 82       	std	Y+6, r1	; 0x06
    SdFile f;

    // remember position
    uint16_t index = curPosition_/32;

    dir_t* p = readDirCache();
    7316:	c5 01       	movw	r24, r10
    7318:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN6SdFile12readDirCacheEv>
    731c:	fc 01       	movw	r30, r24
    if (!p) return false;
    731e:	00 97       	sbiw	r24, 0x00	; 0
    7320:	09 f4       	brne	.+2      	; 0x7324 <_ZN6SdFile8rmRfStarEv+0x62>
    7322:	6a c0       	rjmp	.+212    	; 0x73f8 <_ZN6SdFile8rmRfStarEv+0x136>

    // done if past last entry
    if (p->name[0] == DIR_NAME_FREE) break;
    7324:	80 81       	ld	r24, Z
    7326:	88 23       	and	r24, r24
    7328:	09 f4       	brne	.+2      	; 0x732c <_ZN6SdFile8rmRfStarEv+0x6a>
    732a:	5d c0       	rjmp	.+186    	; 0x73e6 <_ZN6SdFile8rmRfStarEv+0x124>

    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    732c:	85 3e       	cpi	r24, 0xE5	; 229
    732e:	09 f4       	brne	.+2      	; 0x7332 <_ZN6SdFile8rmRfStarEv+0x70>
    7330:	4b c0       	rjmp	.+150    	; 0x73c8 <_ZN6SdFile8rmRfStarEv+0x106>
    7332:	8e 32       	cpi	r24, 0x2E	; 46
    7334:	09 f4       	brne	.+2      	; 0x7338 <_ZN6SdFile8rmRfStarEv+0x76>
    7336:	48 c0       	rjmp	.+144    	; 0x73c8 <_ZN6SdFile8rmRfStarEv+0x106>
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
}
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    7338:	83 85       	ldd	r24, Z+11	; 0x0b

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    733a:	83 fd       	sbrc	r24, 3
    733c:	45 c0       	rjmp	.+138    	; 0x73c8 <_ZN6SdFile8rmRfStarEv+0x106>
  rewind();
  while (curPosition_ < fileSize_) {
    SdFile f;

    // remember position
    uint16_t index = curPosition_/32;
    733e:	97 01       	movw	r18, r14
    7340:	86 01       	movw	r16, r12
    7342:	68 94       	set
    7344:	14 f8       	bld	r1, 4
    7346:	36 95       	lsr	r19
    7348:	27 95       	ror	r18
    734a:	17 95       	ror	r17
    734c:	07 95       	ror	r16
    734e:	16 94       	lsr	r1
    7350:	d1 f7       	brne	.-12     	; 0x7346 <_ZN6SdFile8rmRfStarEv+0x84>
    7352:	68 01       	movw	r12, r16
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    if (!f.open(this, index, O_READ)) return false;
    7354:	ce 01       	movw	r24, r28
    7356:	01 96       	adiw	r24, 0x01	; 1
    7358:	b5 01       	movw	r22, r10
    735a:	a8 01       	movw	r20, r16
    735c:	21 e0       	ldi	r18, 0x01	; 1
    735e:	0e 94 10 39 	call	0x7220	; 0x7220 <_ZN6SdFile4openEPS_jh>
    7362:	88 23       	and	r24, r24
    7364:	09 f4       	brne	.+2      	; 0x7368 <_ZN6SdFile8rmRfStarEv+0xa6>
    7366:	4a c0       	rjmp	.+148    	; 0x73fc <_ZN6SdFile8rmRfStarEv+0x13a>
    if (f.isSubDir()) {
    7368:	8e 81       	ldd	r24, Y+6	; 0x06
    736a:	84 30       	cpi	r24, 0x04	; 4
    736c:	39 f4       	brne	.+14     	; 0x737c <_ZN6SdFile8rmRfStarEv+0xba>
      // recursively delete
      if (!f.rmRfStar()) return false;
    736e:	ce 01       	movw	r24, r28
    7370:	01 96       	adiw	r24, 0x01	; 1
    7372:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN6SdFile8rmRfStarEv>
    7376:	88 23       	and	r24, r24
    7378:	51 f4       	brne	.+20     	; 0x738e <_ZN6SdFile8rmRfStarEv+0xcc>
    737a:	42 c0       	rjmp	.+132    	; 0x7400 <_ZN6SdFile8rmRfStarEv+0x13e>
    } else {
      // ignore read-only
      f.flags_ |= O_WRITE;
    737c:	8d 81       	ldd	r24, Y+5	; 0x05
    737e:	82 60       	ori	r24, 0x02	; 2
    7380:	8d 83       	std	Y+5, r24	; 0x05
      if (!f.remove()) return false;
    7382:	ce 01       	movw	r24, r28
    7384:	01 96       	adiw	r24, 0x01	; 1
    7386:	0e 94 3c 38 	call	0x7078	; 0x7078 <_ZN6SdFile6removeEv>
    738a:	88 23       	and	r24, r24
    738c:	d9 f1       	breq	.+118    	; 0x7404 <_ZN6SdFile8rmRfStarEv+0x142>
    }
    // position to next entry if required
    if (curPosition_ != (32u*(index + 1))) {
    738e:	08 94       	sec
    7390:	c1 1c       	adc	r12, r1
    7392:	d1 1c       	adc	r13, r1
    7394:	a6 01       	movw	r20, r12
    7396:	44 0f       	add	r20, r20
    7398:	55 1f       	adc	r21, r21
    739a:	42 95       	swap	r20
    739c:	52 95       	swap	r21
    739e:	50 7f       	andi	r21, 0xF0	; 240
    73a0:	54 27       	eor	r21, r20
    73a2:	40 7f       	andi	r20, 0xF0	; 240
    73a4:	54 27       	eor	r21, r20
    73a6:	60 e0       	ldi	r22, 0x00	; 0
    73a8:	70 e0       	ldi	r23, 0x00	; 0
    73aa:	f5 01       	movw	r30, r10
    73ac:	82 85       	ldd	r24, Z+10	; 0x0a
    73ae:	93 85       	ldd	r25, Z+11	; 0x0b
    73b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    73b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    73b4:	84 17       	cp	r24, r20
    73b6:	95 07       	cpc	r25, r21
    73b8:	a6 07       	cpc	r26, r22
    73ba:	b7 07       	cpc	r27, r23
    73bc:	29 f0       	breq	.+10     	; 0x73c8 <_ZN6SdFile8rmRfStarEv+0x106>
      if (!seekSet(32u*(index + 1))) return false;
    73be:	c5 01       	movw	r24, r10
    73c0:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    73c4:	88 23       	and	r24, r24
    73c6:	01 f1       	breq	.+64     	; 0x7408 <_ZN6SdFile8rmRfStarEv+0x146>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::rmRfStar(void) {
  rewind();
  while (curPosition_ < fileSize_) {
    73c8:	f5 01       	movw	r30, r10
    73ca:	c2 84       	ldd	r12, Z+10	; 0x0a
    73cc:	d3 84       	ldd	r13, Z+11	; 0x0b
    73ce:	e4 84       	ldd	r14, Z+12	; 0x0c
    73d0:	f5 84       	ldd	r15, Z+13	; 0x0d
    73d2:	83 89       	ldd	r24, Z+19	; 0x13
    73d4:	94 89       	ldd	r25, Z+20	; 0x14
    73d6:	a5 89       	ldd	r26, Z+21	; 0x15
    73d8:	b6 89       	ldd	r27, Z+22	; 0x16
    73da:	c8 16       	cp	r12, r24
    73dc:	d9 06       	cpc	r13, r25
    73de:	ea 06       	cpc	r14, r26
    73e0:	fb 06       	cpc	r15, r27
    73e2:	08 f4       	brcc	.+2      	; 0x73e6 <_ZN6SdFile8rmRfStarEv+0x124>
    73e4:	93 cf       	rjmp	.-218    	; 0x730c <_ZN6SdFile8rmRfStarEv+0x4a>
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a SdFile for a subdirectory else false. */
  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is a SdFile for the root directory. */
  uint8_t isRoot(void) const {
    return type_ == FAT_FILE_TYPE_ROOT16 || type_ == FAT_FILE_TYPE_ROOT32;
    73e6:	f5 01       	movw	r30, r10
    73e8:	85 81       	ldd	r24, Z+5	; 0x05
    73ea:	82 50       	subi	r24, 0x02	; 2
    if (curPosition_ != (32u*(index + 1))) {
      if (!seekSet(32u*(index + 1))) return false;
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
    73ec:	82 30       	cpi	r24, 0x02	; 2
    73ee:	70 f0       	brcs	.+28     	; 0x740c <_ZN6SdFile8rmRfStarEv+0x14a>
  return rmDir();
    73f0:	c5 01       	movw	r24, r10
    73f2:	0e 94 59 38 	call	0x70b2	; 0x70b2 <_ZN6SdFile5rmDirEv>
    73f6:	0b c0       	rjmp	.+22     	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>

    // remember position
    uint16_t index = curPosition_/32;

    dir_t* p = readDirCache();
    if (!p) return false;
    73f8:	80 e0       	ldi	r24, 0x00	; 0
    73fa:	09 c0       	rjmp	.+18     	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    if (!f.open(this, index, O_READ)) return false;
    73fc:	80 e0       	ldi	r24, 0x00	; 0
    73fe:	07 c0       	rjmp	.+14     	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>
    if (f.isSubDir()) {
      // recursively delete
      if (!f.rmRfStar()) return false;
    7400:	80 e0       	ldi	r24, 0x00	; 0
    7402:	05 c0       	rjmp	.+10     	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>
    } else {
      // ignore read-only
      f.flags_ |= O_WRITE;
      if (!f.remove()) return false;
    7404:	80 e0       	ldi	r24, 0x00	; 0
    7406:	03 c0       	rjmp	.+6      	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>
    }
    // position to next entry if required
    if (curPosition_ != (32u*(index + 1))) {
      if (!seekSet(32u*(index + 1))) return false;
    7408:	80 e0       	ldi	r24, 0x00	; 0
    740a:	01 c0       	rjmp	.+2      	; 0x740e <_ZN6SdFile8rmRfStarEv+0x14c>
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
    740c:	81 e0       	ldi	r24, 0x01	; 1
  return rmDir();
}
    740e:	6d 96       	adiw	r28, 0x1d	; 29
    7410:	0f b6       	in	r0, 0x3f	; 63
    7412:	f8 94       	cli
    7414:	de bf       	out	0x3e, r29	; 62
    7416:	0f be       	out	0x3f, r0	; 63
    7418:	cd bf       	out	0x3d, r28	; 61
    741a:	df 91       	pop	r29
    741c:	cf 91       	pop	r28
    741e:	1f 91       	pop	r17
    7420:	0f 91       	pop	r16
    7422:	ff 90       	pop	r15
    7424:	ef 90       	pop	r14
    7426:	df 90       	pop	r13
    7428:	cf 90       	pop	r12
    742a:	bf 90       	pop	r11
    742c:	af 90       	pop	r10
    742e:	9f 90       	pop	r9
    7430:	8f 90       	pop	r8
    7432:	08 95       	ret

00007434 <_ZN6SdFile2lsEhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
    7434:	2f 92       	push	r2
    7436:	3f 92       	push	r3
    7438:	4f 92       	push	r4
    743a:	5f 92       	push	r5
    743c:	6f 92       	push	r6
    743e:	7f 92       	push	r7
    7440:	8f 92       	push	r8
    7442:	9f 92       	push	r9
    7444:	af 92       	push	r10
    7446:	bf 92       	push	r11
    7448:	cf 92       	push	r12
    744a:	df 92       	push	r13
    744c:	ef 92       	push	r14
    744e:	ff 92       	push	r15
    7450:	0f 93       	push	r16
    7452:	1f 93       	push	r17
    7454:	cf 93       	push	r28
    7456:	df 93       	push	r29
    7458:	cd b7       	in	r28, 0x3d	; 61
    745a:	de b7       	in	r29, 0x3e	; 62
    745c:	a1 97       	sbiw	r28, 0x21	; 33
    745e:	0f b6       	in	r0, 0x3f	; 63
    7460:	f8 94       	cli
    7462:	de bf       	out	0x3e, r29	; 62
    7464:	0f be       	out	0x3f, r0	; 63
    7466:	cd bf       	out	0x3d, r28	; 61
    7468:	4c 01       	movw	r8, r24
    746a:	68 a3       	lds	r22, 0x58
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    746c:	fc 01       	movw	r30, r24
    746e:	16 82       	std	Z+6, r1	; 0x06
    7470:	17 82       	std	Z+7, r1	; 0x07
    7472:	10 86       	std	Z+8, r1	; 0x08
    7474:	11 86       	std	Z+9, r1	; 0x09
    7476:	12 86       	std	Z+10, r1	; 0x0a
    7478:	13 86       	std	Z+11, r1	; 0x0b
    747a:	14 86       	std	Z+12, r1	; 0x0c
    747c:	15 86       	std	Z+13, r1	; 0x0d

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
    747e:	a4 2e       	mov	r10, r20
    7480:	bb 24       	eor	r11, r11

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);
    7482:	86 2f       	mov	r24, r22
    7484:	90 e0       	ldi	r25, 0x00	; 0
    7486:	0f 2e       	mov	r0, r31
    7488:	f3 e0       	ldi	r31, 0x03	; 3
    748a:	6f 2e       	mov	r6, r31
    748c:	77 24       	eor	r7, r7
    748e:	f0 2d       	mov	r31, r0
    7490:	68 22       	and	r6, r24
    7492:	79 22       	and	r7, r25

    // print modify date/time if requested
    if (flags & LS_DATE) {
    7494:	44 24       	eor	r4, r4
    7496:	55 24       	eor	r5, r5
    7498:	43 94       	inc	r4
    749a:	48 22       	and	r4, r24
    749c:	59 22       	and	r5, r25
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
      Serial.print(' ');
      Serial.print(p->fileSize);
    }
    Serial.println();
    749e:	0f 2e       	mov	r0, r31
    74a0:	f2 ea       	ldi	r31, 0xA2	; 162
    74a2:	cf 2e       	mov	r12, r31
    74a4:	f3 e0       	ldi	r31, 0x03	; 3
    74a6:	df 2e       	mov	r13, r31
    74a8:	f0 2d       	mov	r31, r0

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
    74aa:	22 24       	eor	r2, r2
    74ac:	33 24       	eor	r3, r3
    74ae:	68 94       	set
    74b0:	22 f8       	bld	r2, 2
    74b2:	28 22       	and	r2, r24
    74b4:	39 22       	and	r3, r25
      uint16_t index = curPosition()/32 - 1;
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
    74b6:	4e 5f       	subi	r20, 0xFE	; 254
    74b8:	49 a3       	lds	r20, 0x59
       printFatDate(p->lastWriteDate);
       Serial.print(' ');
       printFatTime(p->lastWriteTime);
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
    74ba:	9c 01       	movw	r18, r24
    74bc:	22 70       	andi	r18, 0x02	; 2
    74be:	30 70       	andi	r19, 0x00	; 0
    74c0:	3f 8f       	std	Y+31, r19	; 0x1f
    74c2:	2e 8f       	std	Y+30, r18	; 0x1e
    74c4:	90 c0       	rjmp	.+288    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>
  dir_t* p;

  rewind();
  while ((p = readDirCache())) {
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    74c6:	f7 01       	movw	r30, r14
    74c8:	80 81       	ld	r24, Z
    74ca:	88 23       	and	r24, r24
    74cc:	09 f4       	brne	.+2      	; 0x74d0 <_ZN6SdFile2lsEhh+0x9c>
    74ce:	92 c0       	rjmp	.+292    	; 0x75f4 <_ZN6SdFile2lsEhh+0x1c0>

    // skip deleted entry and entries for . and  ..
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    74d0:	85 3e       	cpi	r24, 0xE5	; 229
    74d2:	09 f4       	brne	.+2      	; 0x74d6 <_ZN6SdFile2lsEhh+0xa2>
    74d4:	88 c0       	rjmp	.+272    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>
    74d6:	8e 32       	cpi	r24, 0x2E	; 46
    74d8:	09 f4       	brne	.+2      	; 0x74dc <_ZN6SdFile2lsEhh+0xa8>
    74da:	85 c0       	rjmp	.+266    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>
    74dc:	83 85       	ldd	r24, Z+11	; 0x0b

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    74de:	83 fd       	sbrc	r24, 3
    74e0:	82 c0       	rjmp	.+260    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
    74e2:	1a 14       	cp	r1, r10
    74e4:	1b 04       	cpc	r1, r11
    74e6:	6c f4       	brge	.+26     	; 0x7502 <_ZN6SdFile2lsEhh+0xce>
    74e8:	00 e0       	ldi	r16, 0x00	; 0
    74ea:	c6 01       	movw	r24, r12
    74ec:	60 e2       	ldi	r22, 0x20	; 32
    74ee:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
    74f2:	0f 5f       	subi	r16, 0xFF	; 255
    74f4:	80 2f       	mov	r24, r16
    74f6:	99 27       	eor	r25, r25
    74f8:	87 fd       	sbrc	r24, 7
    74fa:	90 95       	com	r25
    74fc:	8a 15       	cp	r24, r10
    74fe:	9b 05       	cpc	r25, r11
    7500:	a4 f3       	brlt	.-24     	; 0x74ea <_ZN6SdFile2lsEhh+0xb6>

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);
    7502:	61 14       	cp	r6, r1
    7504:	71 04       	cpc	r7, r1
    7506:	11 f0       	breq	.+4      	; 0x750c <_ZN6SdFile2lsEhh+0xd8>
    7508:	6e e0       	ldi	r22, 0x0E	; 14
    750a:	01 c0       	rjmp	.+2      	; 0x750e <_ZN6SdFile2lsEhh+0xda>
    750c:	60 e0       	ldi	r22, 0x00	; 0
    750e:	c7 01       	movw	r24, r14
    7510:	0e 94 de 32 	call	0x65bc	; 0x65bc <_ZN6SdFile12printDirNameERK14directoryEntryh>

    // print modify date/time if requested
    if (flags & LS_DATE) {
    7514:	41 14       	cp	r4, r1
    7516:	51 04       	cpc	r5, r1
    7518:	71 f0       	breq	.+28     	; 0x7536 <_ZN6SdFile2lsEhh+0x102>
       printFatDate(p->lastWriteDate);
    751a:	f7 01       	movw	r30, r14
    751c:	80 8d       	ldd	r24, Z+24	; 0x18
    751e:	91 8d       	ldd	r25, Z+25	; 0x19
    7520:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6SdFile12printFatDateEj>
       Serial.print(' ');
    7524:	c6 01       	movw	r24, r12
    7526:	60 e2       	ldi	r22, 0x20	; 32
    7528:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
       printFatTime(p->lastWriteTime);
    752c:	f7 01       	movw	r30, r14
    752e:	86 89       	ldd	r24, Z+22	; 0x16
    7530:	97 89       	ldd	r25, Z+23	; 0x17
    7532:	0e 94 46 33 	call	0x668c	; 0x668c <_ZN6SdFile12printFatTimeEj>
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
}
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    7536:	f7 01       	movw	r30, r14
    7538:	83 85       	ldd	r24, Z+11	; 0x0b
    753a:	88 71       	andi	r24, 0x18	; 24
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
    753c:	80 31       	cpi	r24, 0x10	; 16
    753e:	99 f0       	breq	.+38     	; 0x7566 <_ZN6SdFile2lsEhh+0x132>
    7540:	2e 8d       	ldd	r18, Y+30	; 0x1e
    7542:	3f 8d       	ldd	r19, Y+31	; 0x1f
    7544:	21 15       	cp	r18, r1
    7546:	31 05       	cpc	r19, r1
    7548:	71 f0       	breq	.+28     	; 0x7566 <_ZN6SdFile2lsEhh+0x132>
      Serial.print(' ');
    754a:	c6 01       	movw	r24, r12
    754c:	60 e2       	ldi	r22, 0x20	; 32
    754e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEc>
      Serial.print(p->fileSize);
    7552:	f7 01       	movw	r30, r14
    7554:	44 8d       	ldd	r20, Z+28	; 0x1c
    7556:	55 8d       	ldd	r21, Z+29	; 0x1d
    7558:	66 8d       	ldd	r22, Z+30	; 0x1e
    755a:	77 8d       	ldd	r23, Z+31	; 0x1f
    755c:	c6 01       	movw	r24, r12
    755e:	2a e0       	ldi	r18, 0x0A	; 10
    7560:	30 e0       	ldi	r19, 0x00	; 0
    7562:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN5Print5printEmi>
    }
    Serial.println();
    7566:	c6 01       	movw	r24, r12
    7568:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
    756c:	21 14       	cp	r2, r1
    756e:	31 04       	cpc	r3, r1
    7570:	d1 f1       	breq	.+116    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>
    7572:	f7 01       	movw	r30, r14
    7574:	83 85       	ldd	r24, Z+11	; 0x0b
    7576:	88 71       	andi	r24, 0x18	; 24
    7578:	80 31       	cpi	r24, 0x10	; 16
    757a:	a9 f5       	brne	.+106    	; 0x75e6 <_ZN6SdFile2lsEhh+0x1b2>
      uint16_t index = curPosition()/32 - 1;
    757c:	f4 01       	movw	r30, r8
    757e:	82 85       	ldd	r24, Z+10	; 0x0a
    7580:	93 85       	ldd	r25, Z+11	; 0x0b
    7582:	a4 85       	ldd	r26, Z+12	; 0x0c
    7584:	b5 85       	ldd	r27, Z+13	; 0x0d
    7586:	8c 01       	movw	r16, r24
    7588:	9d 01       	movw	r18, r26
    758a:	68 94       	set
    758c:	14 f8       	bld	r1, 4
    758e:	36 95       	lsr	r19
    7590:	27 95       	ror	r18
    7592:	17 95       	ror	r17
    7594:	07 95       	ror	r16
    7596:	16 94       	lsr	r1
    7598:	d1 f7       	brne	.-12     	; 0x758e <_ZN6SdFile2lsEhh+0x15a>
    759a:	1c 82       	std	Y+4, r1	; 0x04
    759c:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    759e:	22 e7       	ldi	r18, 0x72	; 114
    75a0:	32 e0       	ldi	r19, 0x02	; 2
    75a2:	3a 83       	std	Y+2, r19	; 0x02
    75a4:	29 83       	std	Y+1, r18	; 0x01
    75a6:	1e 82       	std	Y+6, r1	; 0x06
    75a8:	a8 01       	movw	r20, r16
    75aa:	41 50       	subi	r20, 0x01	; 1
    75ac:	50 40       	sbci	r21, 0x00	; 0
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
    75ae:	ce 01       	movw	r24, r28
    75b0:	01 96       	adiw	r24, 0x01	; 1
    75b2:	b4 01       	movw	r22, r8
    75b4:	21 e0       	ldi	r18, 0x01	; 1
    75b6:	0e 94 10 39 	call	0x7220	; 0x7220 <_ZN6SdFile4openEPS_jh>
    75ba:	88 23       	and	r24, r24
    75bc:	31 f0       	breq	.+12     	; 0x75ca <_ZN6SdFile2lsEhh+0x196>
    75be:	ce 01       	movw	r24, r28
    75c0:	01 96       	adiw	r24, 0x01	; 1
    75c2:	68 a1       	lds	r22, 0x48
    75c4:	49 a1       	lds	r20, 0x49
    75c6:	0e 94 1a 3a 	call	0x7434	; 0x7434 <_ZN6SdFile2lsEhh>
      seekSet(32 * (index + 1));
    75ca:	a8 01       	movw	r20, r16
    75cc:	44 0f       	add	r20, r20
    75ce:	55 1f       	adc	r21, r21
    75d0:	42 95       	swap	r20
    75d2:	52 95       	swap	r21
    75d4:	50 7f       	andi	r21, 0xF0	; 240
    75d6:	54 27       	eor	r21, r20
    75d8:	40 7f       	andi	r20, 0xF0	; 240
    75da:	54 27       	eor	r21, r20
    75dc:	60 e0       	ldi	r22, 0x00	; 0
    75de:	70 e0       	ldi	r23, 0x00	; 0
    75e0:	c4 01       	movw	r24, r8
    75e2:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
  dir_t* p;

  rewind();
  while ((p = readDirCache())) {
    75e6:	c4 01       	movw	r24, r8
    75e8:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN6SdFile12readDirCacheEv>
    75ec:	7c 01       	movw	r14, r24
    75ee:	00 97       	sbiw	r24, 0x00	; 0
    75f0:	09 f0       	breq	.+2      	; 0x75f4 <_ZN6SdFile2lsEhh+0x1c0>
    75f2:	69 cf       	rjmp	.-302    	; 0x74c6 <_ZN6SdFile2lsEhh+0x92>
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
      seekSet(32 * (index + 1));
    }
  }
}
    75f4:	a1 96       	adiw	r28, 0x21	; 33
    75f6:	0f b6       	in	r0, 0x3f	; 63
    75f8:	f8 94       	cli
    75fa:	de bf       	out	0x3e, r29	; 62
    75fc:	0f be       	out	0x3f, r0	; 63
    75fe:	cd bf       	out	0x3d, r28	; 61
    7600:	df 91       	pop	r29
    7602:	cf 91       	pop	r28
    7604:	1f 91       	pop	r17
    7606:	0f 91       	pop	r16
    7608:	ff 90       	pop	r15
    760a:	ef 90       	pop	r14
    760c:	df 90       	pop	r13
    760e:	cf 90       	pop	r12
    7610:	bf 90       	pop	r11
    7612:	af 90       	pop	r10
    7614:	9f 90       	pop	r9
    7616:	8f 90       	pop	r8
    7618:	7f 90       	pop	r7
    761a:	6f 90       	pop	r6
    761c:	5f 90       	pop	r5
    761e:	4f 90       	pop	r4
    7620:	3f 90       	pop	r3
    7622:	2f 90       	pop	r2
    7624:	08 95       	ret

00007626 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7626:	7f 92       	push	r7
    7628:	8f 92       	push	r8
    762a:	9f 92       	push	r9
    762c:	af 92       	push	r10
    762e:	bf 92       	push	r11
    7630:	cf 92       	push	r12
    7632:	df 92       	push	r13
    7634:	ef 92       	push	r14
    7636:	ff 92       	push	r15
    7638:	0f 93       	push	r16
    763a:	1f 93       	push	r17
    763c:	cf 93       	push	r28
    763e:	df 93       	push	r29
    7640:	cd b7       	in	r28, 0x3d	; 61
    7642:	de b7       	in	r29, 0x3e	; 62
    7644:	2b 97       	sbiw	r28, 0x0b	; 11
    7646:	0f b6       	in	r0, 0x3f	; 63
    7648:	f8 94       	cli
    764a:	de bf       	out	0x3e, r29	; 62
    764c:	0f be       	out	0x3f, r0	; 63
    764e:	cd bf       	out	0x3d, r28	; 61
    7650:	4c 01       	movw	r8, r24
    7652:	8b 01       	movw	r16, r22
    7654:	72 2e       	mov	r7, r18
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    7656:	dc 01       	movw	r26, r24
    7658:	15 96       	adiw	r26, 0x05	; 5
    765a:	8c 91       	ld	r24, X
    765c:	15 97       	sbiw	r26, 0x05	; 5
    765e:	88 23       	and	r24, r24
    7660:	09 f0       	breq	.+2      	; 0x7664 <_ZN6SdFile4openEPS_PKch+0x3e>
    7662:	db c0       	rjmp	.+438    	; 0x781a <_ZN6SdFile4openEPS_PKch+0x1f4>

  if (!make83Name(fileName, dname)) return false;
    7664:	ca 01       	movw	r24, r20
    7666:	be 01       	movw	r22, r28
    7668:	6f 5f       	subi	r22, 0xFF	; 255
    766a:	7f 4f       	sbci	r23, 0xFF	; 255
    766c:	0e 94 34 32 	call	0x6468	; 0x6468 <_ZN6SdFile10make83NameEPKcPh>
    7670:	88 23       	and	r24, r24
    7672:	09 f4       	brne	.+2      	; 0x7676 <_ZN6SdFile4openEPS_PKch+0x50>
    7674:	d4 c0       	rjmp	.+424    	; 0x781e <_ZN6SdFile4openEPS_PKch+0x1f8>
  vol_ = dirFile->vol_;
    7676:	f8 01       	movw	r30, r16
    7678:	83 8d       	ldd	r24, Z+27	; 0x1b
    767a:	94 8d       	ldd	r25, Z+28	; 0x1c
    767c:	d4 01       	movw	r26, r8
    767e:	5c 96       	adiw	r26, 0x1c	; 28
    7680:	9c 93       	st	X, r25
    7682:	8e 93       	st	-X, r24
    7684:	5b 97       	sbiw	r26, 0x1b	; 27
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    7686:	16 82       	std	Z+6, r1	; 0x06
    7688:	17 82       	std	Z+7, r1	; 0x07
    768a:	10 86       	std	Z+8, r1	; 0x08
    768c:	11 86       	std	Z+9, r1	; 0x09
    768e:	12 86       	std	Z+10, r1	; 0x0a
    7690:	13 86       	std	Z+11, r1	; 0x0b
    7692:	14 86       	std	Z+12, r1	; 0x0c
    7694:	15 86       	std	Z+13, r1	; 0x0d
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    7696:	bb 24       	eor	r11, r11
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
    7698:	aa 24       	eor	r10, r10
    769a:	a3 94       	inc	r10

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    769c:	4c c0       	rjmp	.+152    	; 0x7736 <_ZN6SdFile4openEPS_PKch+0x110>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    769e:	c8 01       	movw	r24, r16
    76a0:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN6SdFile12readDirCacheEv>
    76a4:	fc 01       	movw	r30, r24
    if (p == NULL) return false;
    76a6:	00 97       	sbiw	r24, 0x00	; 0
    76a8:	09 f4       	brne	.+2      	; 0x76ac <_ZN6SdFile4openEPS_PKch+0x86>
    76aa:	bb c0       	rjmp	.+374    	; 0x7822 <_ZN6SdFile4openEPS_PKch+0x1fc>
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    76ac:	d7 01       	movw	r26, r14
    76ae:	c6 01       	movw	r24, r12
    76b0:	68 94       	set
    76b2:	14 f8       	bld	r1, 4
    76b4:	b6 95       	lsr	r27
    76b6:	a7 95       	ror	r26
    76b8:	97 95       	ror	r25
    76ba:	87 95       	ror	r24
    76bc:	16 94       	lsr	r1
    76be:	d1 f7       	brne	.-12     	; 0x76b4 <_ZN6SdFile4openEPS_PKch+0x8e>
    76c0:	0f 2e       	mov	r0, r31
    76c2:	ff e0       	ldi	r31, 0x0F	; 15
    76c4:	cf 2e       	mov	r12, r31
    76c6:	f0 2d       	mov	r31, r0
    76c8:	c8 22       	and	r12, r24
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    76ca:	80 81       	ld	r24, Z
    76cc:	88 23       	and	r24, r24
    76ce:	11 f0       	breq	.+4      	; 0x76d4 <_ZN6SdFile4openEPS_PKch+0xae>
    76d0:	85 3e       	cpi	r24, 0xE5	; 229
    76d2:	c9 f4       	brne	.+50     	; 0x7706 <_ZN6SdFile4openEPS_PKch+0xe0>
      // remember first empty slot
      if (!emptyFound) {
    76d4:	bb 20       	and	r11, r11
    76d6:	99 f4       	brne	.+38     	; 0x76fe <_ZN6SdFile4openEPS_PKch+0xd8>
        emptyFound = true;
        dirIndex_ = index;
    76d8:	d4 01       	movw	r26, r8
    76da:	52 96       	adiw	r26, 0x12	; 18
    76dc:	cc 92       	st	X, r12
    76de:	52 97       	sbiw	r26, 0x12	; 18
        dirBlock_ = SdVolume::cacheBlockNumber_;
    76e0:	40 91 76 02 	lds	r20, 0x0276
    76e4:	50 91 77 02 	lds	r21, 0x0277
    76e8:	60 91 78 02 	lds	r22, 0x0278
    76ec:	70 91 79 02 	lds	r23, 0x0279
    76f0:	1e 96       	adiw	r26, 0x0e	; 14
    76f2:	4d 93       	st	X+, r20
    76f4:	5d 93       	st	X+, r21
    76f6:	6d 93       	st	X+, r22
    76f8:	7c 93       	st	X, r23
    76fa:	51 97       	sbiw	r26, 0x11	; 17
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
    76fc:	ba 2c       	mov	r11, r10
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    76fe:	80 81       	ld	r24, Z
    7700:	88 23       	and	r24, r24
    7702:	c9 f4       	brne	.+50     	; 0x7736 <_ZN6SdFile4openEPS_PKch+0x110>
    7704:	27 c0       	rjmp	.+78     	; 0x7754 <_ZN6SdFile4openEPS_PKch+0x12e>
    } else if (!memcmp(dname, p->name, 11)) {
    7706:	ce 01       	movw	r24, r28
    7708:	01 96       	adiw	r24, 0x01	; 1
    770a:	bf 01       	movw	r22, r30
    770c:	4b e0       	ldi	r20, 0x0B	; 11
    770e:	50 e0       	ldi	r21, 0x00	; 0
    7710:	0e 94 fe 59 	call	0xb3fc	; 0xb3fc <memcmp>
    7714:	28 2f       	mov	r18, r24
    7716:	39 2f       	mov	r19, r25
    7718:	21 15       	cp	r18, r1
    771a:	31 05       	cpc	r19, r1
    771c:	61 f4       	brne	.+24     	; 0x7736 <_ZN6SdFile4openEPS_PKch+0x110>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    771e:	87 2d       	mov	r24, r7
    7720:	80 73       	andi	r24, 0x30	; 48
    7722:	80 33       	cpi	r24, 0x30	; 48
    7724:	09 f4       	brne	.+2      	; 0x7728 <_ZN6SdFile4openEPS_PKch+0x102>
    7726:	7f c0       	rjmp	.+254    	; 0x7826 <_ZN6SdFile4openEPS_PKch+0x200>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    7728:	6c 2d       	mov	r22, r12
    772a:	6f 70       	andi	r22, 0x0F	; 15
    772c:	c4 01       	movw	r24, r8
    772e:	47 2d       	mov	r20, r7
    7730:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN6SdFile15openCachedEntryEhh>
    7734:	83 c0       	rjmp	.+262    	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    7736:	f8 01       	movw	r30, r16
    7738:	c2 84       	ldd	r12, Z+10	; 0x0a
    773a:	d3 84       	ldd	r13, Z+11	; 0x0b
    773c:	e4 84       	ldd	r14, Z+12	; 0x0c
    773e:	f5 84       	ldd	r15, Z+13	; 0x0d
    7740:	83 89       	ldd	r24, Z+19	; 0x13
    7742:	94 89       	ldd	r25, Z+20	; 0x14
    7744:	a5 89       	ldd	r26, Z+21	; 0x15
    7746:	b6 89       	ldd	r27, Z+22	; 0x16
    7748:	c8 16       	cp	r12, r24
    774a:	d9 06       	cpc	r13, r25
    774c:	ea 06       	cpc	r14, r26
    774e:	fb 06       	cpc	r15, r27
    7750:	08 f4       	brcc	.+2      	; 0x7754 <_ZN6SdFile4openEPS_PKch+0x12e>
    7752:	a5 cf       	rjmp	.-182    	; 0x769e <_ZN6SdFile4openEPS_PKch+0x78>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    7754:	87 2d       	mov	r24, r7
    7756:	82 71       	andi	r24, 0x12	; 18
    7758:	82 31       	cpi	r24, 0x12	; 18
    775a:	09 f0       	breq	.+2      	; 0x775e <_ZN6SdFile4openEPS_PKch+0x138>
    775c:	66 c0       	rjmp	.+204    	; 0x782a <_ZN6SdFile4openEPS_PKch+0x204>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    775e:	bb 20       	and	r11, r11
    7760:	41 f0       	breq	.+16     	; 0x7772 <_ZN6SdFile4openEPS_PKch+0x14c>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    7762:	c4 01       	movw	r24, r8
    7764:	61 e0       	ldi	r22, 0x01	; 1
    7766:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
    776a:	8c 01       	movw	r16, r24
    if (!p) return false;
    776c:	00 97       	sbiw	r24, 0x00	; 0
    776e:	91 f4       	brne	.+36     	; 0x7794 <_ZN6SdFile4openEPS_PKch+0x16e>
    7770:	5e c0       	rjmp	.+188    	; 0x782e <_ZN6SdFile4openEPS_PKch+0x208>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    7772:	d8 01       	movw	r26, r16
    7774:	15 96       	adiw	r26, 0x05	; 5
    7776:	8c 91       	ld	r24, X
    7778:	15 97       	sbiw	r26, 0x05	; 5
    777a:	82 30       	cpi	r24, 0x02	; 2
    777c:	09 f4       	brne	.+2      	; 0x7780 <_ZN6SdFile4openEPS_PKch+0x15a>
    777e:	59 c0       	rjmp	.+178    	; 0x7832 <_ZN6SdFile4openEPS_PKch+0x20c>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    7780:	c8 01       	movw	r24, r16
    7782:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6SdFile13addDirClusterEv>
    7786:	88 23       	and	r24, r24
    7788:	09 f4       	brne	.+2      	; 0x778c <_ZN6SdFile4openEPS_PKch+0x166>
    778a:	55 c0       	rjmp	.+170    	; 0x7836 <_ZN6SdFile4openEPS_PKch+0x210>

    // use first entry in cluster
    dirIndex_ = 0;
    778c:	f4 01       	movw	r30, r8
    778e:	12 8a       	std	Z+18, r1	; 0x12
    p = SdVolume::cacheBuffer_.dir;
    7790:	05 e8       	ldi	r16, 0x85	; 133
    7792:	16 e0       	ldi	r17, 0x06	; 6
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    7794:	80 e2       	ldi	r24, 0x20	; 32
    7796:	d8 01       	movw	r26, r16
    7798:	1d 92       	st	X+, r1
    779a:	8a 95       	dec	r24
    779c:	e9 f7       	brne	.-6      	; 0x7798 <_ZN6SdFile4openEPS_PKch+0x172>
  memcpy(p->name, dname, 11);
    779e:	d8 01       	movw	r26, r16
    77a0:	fe 01       	movw	r30, r28
    77a2:	31 96       	adiw	r30, 0x01	; 1
    77a4:	8b e0       	ldi	r24, 0x0B	; 11
    77a6:	01 90       	ld	r0, Z+
    77a8:	0d 92       	st	X+, r0
    77aa:	81 50       	subi	r24, 0x01	; 1
    77ac:	e1 f7       	brne	.-8      	; 0x77a6 <_ZN6SdFile4openEPS_PKch+0x180>

  // set timestamps
  if (dateTime_) {
    77ae:	e0 91 7c 06 	lds	r30, 0x067C
    77b2:	f0 91 7d 06 	lds	r31, 0x067D
    77b6:	30 97       	sbiw	r30, 0x00	; 0
    77b8:	39 f0       	breq	.+14     	; 0x77c8 <_ZN6SdFile4openEPS_PKch+0x1a2>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    77ba:	b8 01       	movw	r22, r16
    77bc:	62 5f       	subi	r22, 0xF2	; 242
    77be:	7f 4f       	sbci	r23, 0xFF	; 255
    77c0:	c8 01       	movw	r24, r16
    77c2:	40 96       	adiw	r24, 0x10	; 16
    77c4:	19 95       	eicall
    77c6:	09 c0       	rjmp	.+18     	; 0x77da <_ZN6SdFile4openEPS_PKch+0x1b4>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    77c8:	81 e2       	ldi	r24, 0x21	; 33
    77ca:	98 e2       	ldi	r25, 0x28	; 40
    77cc:	f8 01       	movw	r30, r16
    77ce:	91 8b       	std	Z+17, r25	; 0x11
    77d0:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
    77d2:	80 e0       	ldi	r24, 0x00	; 0
    77d4:	98 e0       	ldi	r25, 0x08	; 8
    77d6:	97 87       	std	Z+15, r25	; 0x0f
    77d8:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
    77da:	d8 01       	movw	r26, r16
    77dc:	50 96       	adiw	r26, 0x10	; 16
    77de:	8d 91       	ld	r24, X+
    77e0:	9c 91       	ld	r25, X
    77e2:	51 97       	sbiw	r26, 0x11	; 17
    77e4:	53 96       	adiw	r26, 0x13	; 19
    77e6:	9c 93       	st	X, r25
    77e8:	8e 93       	st	-X, r24
    77ea:	52 97       	sbiw	r26, 0x12	; 18
  p->lastWriteDate = p->creationDate;
    77ec:	59 96       	adiw	r26, 0x19	; 25
    77ee:	9c 93       	st	X, r25
    77f0:	8e 93       	st	-X, r24
    77f2:	58 97       	sbiw	r26, 0x18	; 24
  p->lastWriteTime = p->creationTime;
    77f4:	1e 96       	adiw	r26, 0x0e	; 14
    77f6:	8d 91       	ld	r24, X+
    77f8:	9c 91       	ld	r25, X
    77fa:	1f 97       	sbiw	r26, 0x0f	; 15
    77fc:	57 96       	adiw	r26, 0x17	; 23
    77fe:	9c 93       	st	X, r25
    7800:	8e 93       	st	-X, r24
    7802:	56 97       	sbiw	r26, 0x16	; 22

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    7804:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    7808:	88 23       	and	r24, r24
    780a:	b9 f0       	breq	.+46     	; 0x783a <_ZN6SdFile4openEPS_PKch+0x214>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    780c:	c4 01       	movw	r24, r8
    780e:	f4 01       	movw	r30, r8
    7810:	62 89       	ldd	r22, Z+18	; 0x12
    7812:	47 2d       	mov	r20, r7
    7814:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN6SdFile15openCachedEntryEhh>
    7818:	11 c0       	rjmp	.+34     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    781a:	80 e0       	ldi	r24, 0x00	; 0
    781c:	0f c0       	rjmp	.+30     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>

  if (!make83Name(fileName, dname)) return false;
    781e:	80 e0       	ldi	r24, 0x00	; 0
    7820:	0d c0       	rjmp	.+26     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    7822:	80 e0       	ldi	r24, 0x00	; 0
    7824:	0b c0       	rjmp	.+22     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    7826:	80 e0       	ldi	r24, 0x00	; 0
    7828:	09 c0       	rjmp	.+18     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    782a:	80 e0       	ldi	r24, 0x00	; 0
    782c:	07 c0       	rjmp	.+14     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    782e:	80 e0       	ldi	r24, 0x00	; 0
    7830:	05 c0       	rjmp	.+10     	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    7832:	80 e0       	ldi	r24, 0x00	; 0
    7834:	03 c0       	rjmp	.+6      	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    7836:	80 e0       	ldi	r24, 0x00	; 0
    7838:	01 c0       	rjmp	.+2      	; 0x783c <_ZN6SdFile4openEPS_PKch+0x216>
  p->lastAccessDate = p->creationDate;
  p->lastWriteDate = p->creationDate;
  p->lastWriteTime = p->creationTime;

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    783a:	80 e0       	ldi	r24, 0x00	; 0

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    783c:	2b 96       	adiw	r28, 0x0b	; 11
    783e:	0f b6       	in	r0, 0x3f	; 63
    7840:	f8 94       	cli
    7842:	de bf       	out	0x3e, r29	; 62
    7844:	0f be       	out	0x3f, r0	; 63
    7846:	cd bf       	out	0x3d, r28	; 61
    7848:	df 91       	pop	r29
    784a:	cf 91       	pop	r28
    784c:	1f 91       	pop	r17
    784e:	0f 91       	pop	r16
    7850:	ff 90       	pop	r15
    7852:	ef 90       	pop	r14
    7854:	df 90       	pop	r13
    7856:	cf 90       	pop	r12
    7858:	bf 90       	pop	r11
    785a:	af 90       	pop	r10
    785c:	9f 90       	pop	r9
    785e:	8f 90       	pop	r8
    7860:	7f 90       	pop	r7
    7862:	08 95       	ret

00007864 <_ZN6SdFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    7864:	cf 93       	push	r28
    7866:	df 93       	push	r29
    7868:	cd b7       	in	r28, 0x3d	; 61
    786a:	de b7       	in	r29, 0x3e	; 62
    786c:	6d 97       	sbiw	r28, 0x1d	; 29
    786e:	0f b6       	in	r0, 0x3f	; 63
    7870:	f8 94       	cli
    7872:	de bf       	out	0x3e, r29	; 62
    7874:	0f be       	out	0x3f, r0	; 63
    7876:	cd bf       	out	0x3d, r28	; 61
    7878:	9c 01       	movw	r18, r24
    787a:	ab 01       	movw	r20, r22
    787c:	1c 82       	std	Y+4, r1	; 0x04
    787e:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7880:	82 e7       	ldi	r24, 0x72	; 114
    7882:	92 e0       	ldi	r25, 0x02	; 2
    7884:	9a 83       	std	Y+2, r25	; 0x02
    7886:	89 83       	std	Y+1, r24	; 0x01
    7888:	1e 82       	std	Y+6, r1	; 0x06
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    788a:	ce 01       	movw	r24, r28
    788c:	01 96       	adiw	r24, 0x01	; 1
    788e:	b9 01       	movw	r22, r18
    7890:	22 e0       	ldi	r18, 0x02	; 2
    7892:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    7896:	88 23       	and	r24, r24
    7898:	29 f0       	breq	.+10     	; 0x78a4 <_ZN6SdFile6removeEPS_PKc+0x40>
  return file.remove();
    789a:	ce 01       	movw	r24, r28
    789c:	01 96       	adiw	r24, 0x01	; 1
    789e:	0e 94 3c 38 	call	0x7078	; 0x7078 <_ZN6SdFile6removeEv>
    78a2:	01 c0       	rjmp	.+2      	; 0x78a6 <_ZN6SdFile6removeEPS_PKc+0x42>
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    78a4:	80 e0       	ldi	r24, 0x00	; 0
  return file.remove();
}
    78a6:	6d 96       	adiw	r28, 0x1d	; 29
    78a8:	0f b6       	in	r0, 0x3f	; 63
    78aa:	f8 94       	cli
    78ac:	de bf       	out	0x3e, r29	; 62
    78ae:	0f be       	out	0x3f, r0	; 63
    78b0:	cd bf       	out	0x3d, r28	; 61
    78b2:	df 91       	pop	r29
    78b4:	cf 91       	pop	r28
    78b6:	08 95       	ret

000078b8 <_ZN6SdFile7makeDirEPS_PKc>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a dir is not a
 * directory, \a dirName is invalid or already exists in \a dir.
 */
uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {
    78b8:	6f 92       	push	r6
    78ba:	7f 92       	push	r7
    78bc:	8f 92       	push	r8
    78be:	9f 92       	push	r9
    78c0:	af 92       	push	r10
    78c2:	bf 92       	push	r11
    78c4:	cf 92       	push	r12
    78c6:	df 92       	push	r13
    78c8:	ef 92       	push	r14
    78ca:	ff 92       	push	r15
    78cc:	0f 93       	push	r16
    78ce:	1f 93       	push	r17
    78d0:	cf 93       	push	r28
    78d2:	df 93       	push	r29
    78d4:	cd b7       	in	r28, 0x3d	; 61
    78d6:	de b7       	in	r29, 0x3e	; 62
    78d8:	a0 97       	sbiw	r28, 0x20	; 32
    78da:	0f b6       	in	r0, 0x3f	; 63
    78dc:	f8 94       	cli
    78de:	de bf       	out	0x3e, r29	; 62
    78e0:	0f be       	out	0x3f, r0	; 63
    78e2:	cd bf       	out	0x3d, r28	; 61
    78e4:	8c 01       	movw	r16, r24
    78e6:	7b 01       	movw	r14, r22
  dir_t d;

  // create a normal file
  if (!open(dir, dirName, O_CREAT | O_EXCL | O_RDWR)) return false;
    78e8:	23 e3       	ldi	r18, 0x33	; 51
    78ea:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    78ee:	88 23       	and	r24, r24
    78f0:	09 f4       	brne	.+2      	; 0x78f4 <_ZN6SdFile7makeDirEPS_PKc+0x3c>
    78f2:	a5 c0       	rjmp	.+330    	; 0x7a3e <_ZN6SdFile7makeDirEPS_PKc+0x186>

  // convert SdFile to directory
  flags_ = O_READ;
    78f4:	81 e0       	ldi	r24, 0x01	; 1
    78f6:	d8 01       	movw	r26, r16
    78f8:	14 96       	adiw	r26, 0x04	; 4
    78fa:	8c 93       	st	X, r24
    78fc:	14 97       	sbiw	r26, 0x04	; 4
  type_ = FAT_FILE_TYPE_SUBDIR;
    78fe:	84 e0       	ldi	r24, 0x04	; 4
    7900:	15 96       	adiw	r26, 0x05	; 5
    7902:	8c 93       	st	X, r24

  // allocate and zero first cluster
  if (!addDirCluster())return false;
    7904:	c8 01       	movw	r24, r16
    7906:	0e 94 cf 30 	call	0x619e	; 0x619e <_ZN6SdFile13addDirClusterEv>
    790a:	88 23       	and	r24, r24
    790c:	09 f4       	brne	.+2      	; 0x7910 <_ZN6SdFile7makeDirEPS_PKc+0x58>
    790e:	99 c0       	rjmp	.+306    	; 0x7a42 <_ZN6SdFile7makeDirEPS_PKc+0x18a>

  // force entry to SD
  if (!sync()) return false;
    7910:	c8 01       	movw	r24, r16
    7912:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    7916:	88 23       	and	r24, r24
    7918:	09 f4       	brne	.+2      	; 0x791c <_ZN6SdFile7makeDirEPS_PKc+0x64>
    791a:	95 c0       	rjmp	.+298    	; 0x7a46 <_ZN6SdFile7makeDirEPS_PKc+0x18e>

  // cache entry - should already be in cache due to sync() call
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    791c:	c8 01       	movw	r24, r16
    791e:	61 e0       	ldi	r22, 0x01	; 1
    7920:	0e 94 3a 31 	call	0x6274	; 0x6274 <_ZN6SdFile13cacheDirEntryEh>
  if (!p) return false;
    7924:	00 97       	sbiw	r24, 0x00	; 0
    7926:	09 f4       	brne	.+2      	; 0x792a <_ZN6SdFile7makeDirEPS_PKc+0x72>
    7928:	90 c0       	rjmp	.+288    	; 0x7a4a <_ZN6SdFile7makeDirEPS_PKc+0x192>

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;
    792a:	20 e1       	ldi	r18, 0x10	; 16
    792c:	fc 01       	movw	r30, r24
    792e:	23 87       	std	Z+11, r18	; 0x0b

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    7930:	fe 01       	movw	r30, r28
    7932:	31 96       	adiw	r30, 0x01	; 1
    7934:	dc 01       	movw	r26, r24
    7936:	20 e2       	ldi	r18, 0x20	; 32
    7938:	0d 90       	ld	r0, X+
    793a:	01 92       	st	Z+, r0
    793c:	21 50       	subi	r18, 0x01	; 1
    793e:	e1 f7       	brne	.-8      	; 0x7938 <_ZN6SdFile7makeDirEPS_PKc+0x80>
    7940:	dc 01       	movw	r26, r24
    7942:	54 96       	adiw	r26, 0x14	; 20
    7944:	cd 90       	ld	r12, X+
    7946:	dc 90       	ld	r13, X
    7948:	55 97       	sbiw	r26, 0x15	; 21
    794a:	5a 96       	adiw	r26, 0x1a	; 26
    794c:	ad 90       	ld	r10, X+
    794e:	bc 90       	ld	r11, X
    7950:	5b 97       	sbiw	r26, 0x1b	; 27
    7952:	fe 01       	movw	r30, r28
    7954:	32 96       	adiw	r30, 0x02	; 2
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a dir is not a
 * directory, \a dirName is invalid or already exists in \a dir.
 */
uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {
    7956:	ce 01       	movw	r24, r28
    7958:	0c 96       	adiw	r24, 0x0c	; 12
  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
    795a:	20 e2       	ldi	r18, 0x20	; 32
    795c:	21 93       	st	Z+, r18
    795e:	e8 17       	cp	r30, r24
    7960:	f9 07       	cpc	r31, r25
    7962:	e1 f7       	brne	.-8      	; 0x795c <_ZN6SdFile7makeDirEPS_PKc+0xa4>
  d.name[0] = '.';
    7964:	8e e2       	ldi	r24, 0x2E	; 46
    7966:	89 83       	std	Y+1, r24	; 0x01

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
    7968:	f8 01       	movw	r30, r16
    796a:	23 8d       	ldd	r18, Z+27	; 0x1b
    796c:	34 8d       	ldd	r19, Z+28	; 0x1c
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    796e:	87 89       	ldd	r24, Z+23	; 0x17
    7970:	90 8d       	ldd	r25, Z+24	; 0x18
    7972:	a1 8d       	ldd	r26, Z+25	; 0x19
    7974:	b2 8d       	ldd	r27, Z+26	; 0x1a
    7976:	02 97       	sbiw	r24, 0x02	; 2
    7978:	a1 09       	sbc	r26, r1
    797a:	b1 09       	sbc	r27, r1
    797c:	ac 01       	movw	r20, r24
    797e:	bd 01       	movw	r22, r26
    7980:	f9 01       	movw	r30, r18
    7982:	05 84       	ldd	r0, Z+13	; 0x0d
    7984:	04 c0       	rjmp	.+8      	; 0x798e <_ZN6SdFile7makeDirEPS_PKc+0xd6>
    7986:	44 0f       	add	r20, r20
    7988:	55 1f       	adc	r21, r21
    798a:	66 1f       	adc	r22, r22
    798c:	77 1f       	adc	r23, r23
    798e:	0a 94       	dec	r0
    7990:	d2 f7       	brpl	.-12     	; 0x7986 <_ZN6SdFile7makeDirEPS_PKc+0xce>
    7992:	86 85       	ldd	r24, Z+14	; 0x0e
    7994:	97 85       	ldd	r25, Z+15	; 0x0f
    7996:	a0 89       	ldd	r26, Z+16	; 0x10
    7998:	b1 89       	ldd	r27, Z+17	; 0x11
    799a:	3a 01       	movw	r6, r20
    799c:	4b 01       	movw	r8, r22
    799e:	68 0e       	add	r6, r24
    79a0:	79 1e       	adc	r7, r25
    79a2:	8a 1e       	adc	r8, r26
    79a4:	9b 1e       	adc	r9, r27
    79a6:	c4 01       	movw	r24, r8
    79a8:	b3 01       	movw	r22, r6
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    79aa:	41 e0       	ldi	r20, 0x01	; 1
    79ac:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    79b0:	88 23       	and	r24, r24
    79b2:	09 f4       	brne	.+2      	; 0x79b6 <_ZN6SdFile7makeDirEPS_PKc+0xfe>
    79b4:	4c c0       	rjmp	.+152    	; 0x7a4e <_ZN6SdFile7makeDirEPS_PKc+0x196>

  // copy '.' to block
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));
    79b6:	a5 e8       	ldi	r26, 0x85	; 133
    79b8:	b6 e0       	ldi	r27, 0x06	; 6
    79ba:	fe 01       	movw	r30, r28
    79bc:	31 96       	adiw	r30, 0x01	; 1
    79be:	80 e2       	ldi	r24, 0x20	; 32
    79c0:	01 90       	ld	r0, Z+
    79c2:	0d 92       	st	X+, r0
    79c4:	81 50       	subi	r24, 0x01	; 1
    79c6:	e1 f7       	brne	.-8      	; 0x79c0 <_ZN6SdFile7makeDirEPS_PKc+0x108>
    79c8:	d0 92 9a 06 	sts	0x069A, r13
    79cc:	c0 92 99 06 	sts	0x0699, r12
    79d0:	b0 92 a0 06 	sts	0x06A0, r11
    79d4:	a0 92 9f 06 	sts	0x069F, r10

  // make entry for '..'
  d.name[1] = '.';
    79d8:	8e e2       	ldi	r24, 0x2E	; 46
    79da:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a SdFile for a subdirectory else false. */
  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is a SdFile for the root directory. */
  uint8_t isRoot(void) const {
    return type_ == FAT_FILE_TYPE_ROOT16 || type_ == FAT_FILE_TYPE_ROOT32;
    79dc:	d7 01       	movw	r26, r14
    79de:	15 96       	adiw	r26, 0x05	; 5
    79e0:	8c 91       	ld	r24, X
    79e2:	15 97       	sbiw	r26, 0x05	; 5
    79e4:	82 50       	subi	r24, 0x02	; 2
  if (dir->isRoot()) {
    79e6:	82 30       	cpi	r24, 0x02	; 2
    79e8:	48 f0       	brcs	.+18     	; 0x79fc <_ZN6SdFile7makeDirEPS_PKc+0x144>
    d.firstClusterLow = 0;
    d.firstClusterHigh = 0;
  } else {
    d.firstClusterLow = dir->firstCluster_ & 0XFFFF;
    79ea:	57 96       	adiw	r26, 0x17	; 23
    79ec:	8d 91       	ld	r24, X+
    79ee:	9d 91       	ld	r25, X+
    79f0:	0d 90       	ld	r0, X+
    79f2:	bc 91       	ld	r27, X
    79f4:	a0 2d       	mov	r26, r0
    79f6:	9c 01       	movw	r18, r24
    d.firstClusterHigh = dir->firstCluster_ >> 16;
    79f8:	cd 01       	movw	r24, r26
    79fa:	04 c0       	rjmp	.+8      	; 0x7a04 <_ZN6SdFile7makeDirEPS_PKc+0x14c>
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));

  // make entry for '..'
  d.name[1] = '.';
  if (dir->isRoot()) {
    d.firstClusterLow = 0;
    79fc:	20 e0       	ldi	r18, 0x00	; 0
    79fe:	30 e0       	ldi	r19, 0x00	; 0
    d.firstClusterHigh = 0;
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    d.firstClusterLow = dir->firstCluster_ & 0XFFFF;
    d.firstClusterHigh = dir->firstCluster_ >> 16;
  }
  // copy '..' to block
  memcpy(&SdVolume::cacheBuffer_.dir[1], &d, sizeof(d));
    7a04:	a5 ea       	ldi	r26, 0xA5	; 165
    7a06:	b6 e0       	ldi	r27, 0x06	; 6
    7a08:	fe 01       	movw	r30, r28
    7a0a:	31 96       	adiw	r30, 0x01	; 1
    7a0c:	40 e2       	ldi	r20, 0x20	; 32
    7a0e:	01 90       	ld	r0, Z+
    7a10:	0d 92       	st	X+, r0
    7a12:	41 50       	subi	r20, 0x01	; 1
    7a14:	e1 f7       	brne	.-8      	; 0x7a0e <_ZN6SdFile7makeDirEPS_PKc+0x156>
    7a16:	90 93 ba 06 	sts	0x06BA, r25
    7a1a:	80 93 b9 06 	sts	0x06B9, r24
    7a1e:	30 93 c0 06 	sts	0x06C0, r19
    7a22:	20 93 bf 06 	sts	0x06BF, r18

  // set position after '..'
  curPosition_ = 2 * sizeof(d);
    7a26:	80 e4       	ldi	r24, 0x40	; 64
    7a28:	90 e0       	ldi	r25, 0x00	; 0
    7a2a:	a0 e0       	ldi	r26, 0x00	; 0
    7a2c:	b0 e0       	ldi	r27, 0x00	; 0
    7a2e:	f8 01       	movw	r30, r16
    7a30:	82 87       	std	Z+10, r24	; 0x0a
    7a32:	93 87       	std	Z+11, r25	; 0x0b
    7a34:	a4 87       	std	Z+12, r26	; 0x0c
    7a36:	b5 87       	std	Z+13, r27	; 0x0d

  // write first block
  return SdVolume::cacheFlush();
    7a38:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    7a3c:	09 c0       	rjmp	.+18     	; 0x7a50 <_ZN6SdFile7makeDirEPS_PKc+0x198>
 */
uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {
  dir_t d;

  // create a normal file
  if (!open(dir, dirName, O_CREAT | O_EXCL | O_RDWR)) return false;
    7a3e:	80 e0       	ldi	r24, 0x00	; 0
    7a40:	07 c0       	rjmp	.+14     	; 0x7a50 <_ZN6SdFile7makeDirEPS_PKc+0x198>
  // convert SdFile to directory
  flags_ = O_READ;
  type_ = FAT_FILE_TYPE_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster())return false;
    7a42:	80 e0       	ldi	r24, 0x00	; 0
    7a44:	05 c0       	rjmp	.+10     	; 0x7a50 <_ZN6SdFile7makeDirEPS_PKc+0x198>

  // force entry to SD
  if (!sync()) return false;
    7a46:	80 e0       	ldi	r24, 0x00	; 0
    7a48:	03 c0       	rjmp	.+6      	; 0x7a50 <_ZN6SdFile7makeDirEPS_PKc+0x198>

  // cache entry - should already be in cache due to sync() call
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!p) return false;
    7a4a:	80 e0       	ldi	r24, 0x00	; 0
    7a4c:	01 c0       	rjmp	.+2      	; 0x7a50 <_ZN6SdFile7makeDirEPS_PKc+0x198>
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    7a4e:	80 e0       	ldi	r24, 0x00	; 0
  // set position after '..'
  curPosition_ = 2 * sizeof(d);

  // write first block
  return SdVolume::cacheFlush();
}
    7a50:	a0 96       	adiw	r28, 0x20	; 32
    7a52:	0f b6       	in	r0, 0x3f	; 63
    7a54:	f8 94       	cli
    7a56:	de bf       	out	0x3e, r29	; 62
    7a58:	0f be       	out	0x3f, r0	; 63
    7a5a:	cd bf       	out	0x3d, r28	; 61
    7a5c:	df 91       	pop	r29
    7a5e:	cf 91       	pop	r28
    7a60:	1f 91       	pop	r17
    7a62:	0f 91       	pop	r16
    7a64:	ff 90       	pop	r15
    7a66:	ef 90       	pop	r14
    7a68:	df 90       	pop	r13
    7a6a:	cf 90       	pop	r12
    7a6c:	bf 90       	pop	r11
    7a6e:	af 90       	pop	r10
    7a70:	9f 90       	pop	r9
    7a72:	8f 90       	pop	r8
    7a74:	7f 90       	pop	r7
    7a76:	6f 90       	pop	r6
    7a78:	08 95       	ret

00007a7a <_ZN6SdFile16createContiguousEPS_PKcm>:
 * a file is already open, the file already exists, the root
 * directory is full or an I/O error.
 *
 */
uint8_t SdFile::createContiguous(SdFile* dirFile,
        const char* fileName, uint32_t size) {
    7a7a:	cf 92       	push	r12
    7a7c:	df 92       	push	r13
    7a7e:	ef 92       	push	r14
    7a80:	ff 92       	push	r15
    7a82:	0f 93       	push	r16
    7a84:	1f 93       	push	r17
    7a86:	cf 93       	push	r28
    7a88:	df 93       	push	r29
    7a8a:	ec 01       	movw	r28, r24
    7a8c:	68 01       	movw	r12, r16
    7a8e:	79 01       	movw	r14, r18
  // don't allow zero length file
  if (size == 0) return false;
    7a90:	01 15       	cp	r16, r1
    7a92:	11 05       	cpc	r17, r1
    7a94:	21 05       	cpc	r18, r1
    7a96:	31 05       	cpc	r19, r1
    7a98:	b9 f1       	breq	.+110    	; 0x7b08 <_ZN6SdFile16createContiguousEPS_PKcm+0x8e>
  if (!open(dirFile, fileName, O_CREAT | O_EXCL | O_RDWR)) return false;
    7a9a:	23 e3       	ldi	r18, 0x33	; 51
    7a9c:	0e 94 13 3b 	call	0x7626	; 0x7626 <_ZN6SdFile4openEPS_PKch>
    7aa0:	88 23       	and	r24, r24
    7aa2:	a1 f1       	breq	.+104    	; 0x7b0c <_ZN6SdFile16createContiguousEPS_PKcm+0x92>

  // calculate number of clusters needed
  uint32_t count = ((size - 1) >> (vol_->clusterSizeShift_ + 9)) + 1;
    7aa4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    7aa6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    7aa8:	d7 01       	movw	r26, r14
    7aaa:	c6 01       	movw	r24, r12
    7aac:	01 97       	sbiw	r24, 0x01	; 1
    7aae:	a1 09       	sbc	r26, r1
    7ab0:	b1 09       	sbc	r27, r1
    7ab2:	45 85       	ldd	r20, Z+13	; 0x0d
    7ab4:	50 e0       	ldi	r21, 0x00	; 0
    7ab6:	47 5f       	subi	r20, 0xF7	; 247
    7ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    7aba:	8c 01       	movw	r16, r24
    7abc:	9d 01       	movw	r18, r26
    7abe:	04 c0       	rjmp	.+8      	; 0x7ac8 <_ZN6SdFile16createContiguousEPS_PKcm+0x4e>
    7ac0:	36 95       	lsr	r19
    7ac2:	27 95       	ror	r18
    7ac4:	17 95       	ror	r17
    7ac6:	07 95       	ror	r16
    7ac8:	4a 95       	dec	r20
    7aca:	d2 f7       	brpl	.-12     	; 0x7ac0 <_ZN6SdFile16createContiguousEPS_PKcm+0x46>
    7acc:	b9 01       	movw	r22, r18
    7ace:	a8 01       	movw	r20, r16
    7ad0:	4f 5f       	subi	r20, 0xFF	; 255
    7ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    7ad4:	6f 4f       	sbci	r22, 0xFF	; 255
    7ad6:	7f 4f       	sbci	r23, 0xFF	; 255

  // allocate clusters
  if (!vol_->allocContiguous(count, &firstCluster_)) {
    7ad8:	9e 01       	movw	r18, r28
    7ada:	29 5e       	subi	r18, 0xE9	; 233
    7adc:	3f 4f       	sbci	r19, 0xFF	; 255
    7ade:	cf 01       	movw	r24, r30
    7ae0:	0e 94 17 42 	call	0x842e	; 0x842e <_ZN8SdVolume15allocContiguousEmPm>
    7ae4:	88 23       	and	r24, r24
    7ae6:	29 f4       	brne	.+10     	; 0x7af2 <_ZN6SdFile16createContiguousEPS_PKcm+0x78>
    remove();
    7ae8:	ce 01       	movw	r24, r28
    7aea:	0e 94 3c 38 	call	0x7078	; 0x7078 <_ZN6SdFile6removeEv>
    return false;
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	0e c0       	rjmp	.+28     	; 0x7b0e <_ZN6SdFile16createContiguousEPS_PKcm+0x94>
  }
  fileSize_ = size;
    7af2:	cb 8a       	std	Y+19, r12	; 0x13
    7af4:	dc 8a       	std	Y+20, r13	; 0x14
    7af6:	ed 8a       	std	Y+21, r14	; 0x15
    7af8:	fe 8a       	std	Y+22, r15	; 0x16

  // insure sync() will update dir entry
  flags_ |= F_FILE_DIR_DIRTY;
    7afa:	8c 81       	ldd	r24, Y+4	; 0x04
    7afc:	80 68       	ori	r24, 0x80	; 128
    7afe:	8c 83       	std	Y+4, r24	; 0x04
  return sync();
    7b00:	ce 01       	movw	r24, r28
    7b02:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    7b06:	03 c0       	rjmp	.+6      	; 0x7b0e <_ZN6SdFile16createContiguousEPS_PKcm+0x94>
 *
 */
uint8_t SdFile::createContiguous(SdFile* dirFile,
        const char* fileName, uint32_t size) {
  // don't allow zero length file
  if (size == 0) return false;
    7b08:	80 e0       	ldi	r24, 0x00	; 0
    7b0a:	01 c0       	rjmp	.+2      	; 0x7b0e <_ZN6SdFile16createContiguousEPS_PKcm+0x94>
  if (!open(dirFile, fileName, O_CREAT | O_EXCL | O_RDWR)) return false;
    7b0c:	80 e0       	ldi	r24, 0x00	; 0
  fileSize_ = size;

  // insure sync() will update dir entry
  flags_ |= F_FILE_DIR_DIRTY;
  return sync();
}
    7b0e:	df 91       	pop	r29
    7b10:	cf 91       	pop	r28
    7b12:	1f 91       	pop	r17
    7b14:	0f 91       	pop	r16
    7b16:	ff 90       	pop	r15
    7b18:	ef 90       	pop	r14
    7b1a:	df 90       	pop	r13
    7b1c:	cf 90       	pop	r12
    7b1e:	08 95       	ret

00007b20 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    7b20:	2f 92       	push	r2
    7b22:	3f 92       	push	r3
    7b24:	4f 92       	push	r4
    7b26:	5f 92       	push	r5
    7b28:	6f 92       	push	r6
    7b2a:	7f 92       	push	r7
    7b2c:	8f 92       	push	r8
    7b2e:	9f 92       	push	r9
    7b30:	af 92       	push	r10
    7b32:	bf 92       	push	r11
    7b34:	cf 92       	push	r12
    7b36:	df 92       	push	r13
    7b38:	ef 92       	push	r14
    7b3a:	ff 92       	push	r15
    7b3c:	0f 93       	push	r16
    7b3e:	1f 93       	push	r17
    7b40:	cf 93       	push	r28
    7b42:	df 93       	push	r29
    7b44:	cd b7       	in	r28, 0x3d	; 61
    7b46:	de b7       	in	r29, 0x3e	; 62
    7b48:	28 97       	sbiw	r28, 0x08	; 8
    7b4a:	0f b6       	in	r0, 0x3f	; 63
    7b4c:	f8 94       	cli
    7b4e:	de bf       	out	0x3e, r29	; 62
    7b50:	0f be       	out	0x3f, r0	; 63
    7b52:	cd bf       	out	0x3d, r28	; 61
    7b54:	8c 01       	movw	r16, r24
    7b56:	c6 2e       	mov	r12, r22
    7b58:	a7 2e       	mov	r10, r23
    7b5a:	58 87       	std	Y+8, r21	; 0x08
    7b5c:	4f 83       	std	Y+7, r20	; 0x07

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7b5e:	dc 01       	movw	r26, r24
    7b60:	15 96       	adiw	r26, 0x05	; 5
    7b62:	8c 91       	ld	r24, X
    7b64:	15 97       	sbiw	r26, 0x05	; 5
    7b66:	81 30       	cpi	r24, 0x01	; 1
    7b68:	09 f0       	breq	.+2      	; 0x7b6c <_ZN6SdFile5writeEPKvj+0x4c>
    7b6a:	9e c1       	rjmp	.+828    	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
    7b6c:	14 96       	adiw	r26, 0x04	; 4
    7b6e:	8c 91       	ld	r24, X
    7b70:	14 97       	sbiw	r26, 0x04	; 4
    7b72:	81 ff       	sbrs	r24, 1
    7b74:	99 c1       	rjmp	.+818    	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    7b76:	82 ff       	sbrs	r24, 2
    7b78:	17 c0       	rjmp	.+46     	; 0x7ba8 <_ZN6SdFile5writeEPKvj+0x88>
    7b7a:	53 96       	adiw	r26, 0x13	; 19
    7b7c:	4d 91       	ld	r20, X+
    7b7e:	5d 91       	ld	r21, X+
    7b80:	6d 91       	ld	r22, X+
    7b82:	7c 91       	ld	r23, X
    7b84:	56 97       	sbiw	r26, 0x16	; 22
    7b86:	1a 96       	adiw	r26, 0x0a	; 10
    7b88:	8d 91       	ld	r24, X+
    7b8a:	9d 91       	ld	r25, X+
    7b8c:	0d 90       	ld	r0, X+
    7b8e:	bc 91       	ld	r27, X
    7b90:	a0 2d       	mov	r26, r0
    7b92:	84 17       	cp	r24, r20
    7b94:	95 07       	cpc	r25, r21
    7b96:	a6 07       	cpc	r26, r22
    7b98:	b7 07       	cpc	r27, r23
    7b9a:	31 f0       	breq	.+12     	; 0x7ba8 <_ZN6SdFile5writeEPKvj+0x88>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    7b9c:	c8 01       	movw	r24, r16
    7b9e:	0e 94 94 35 	call	0x6b28	; 0x6b28 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    7ba2:	88 23       	and	r24, r24
    7ba4:	09 f4       	brne	.+2      	; 0x7ba8 <_ZN6SdFile5writeEPKvj+0x88>
    7ba6:	80 c1       	rjmp	.+768    	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
  }

  while (nToWrite > 0) {
    7ba8:	ef 81       	ldd	r30, Y+7	; 0x07
    7baa:	f8 85       	ldd	r31, Y+8	; 0x08
    7bac:	30 97       	sbiw	r30, 0x00	; 0
    7bae:	09 f4       	brne	.+2      	; 0x7bb2 <_ZN6SdFile5writeEPKvj+0x92>
    7bb0:	48 c1       	rjmp	.+656    	; 0x7e42 <_ZN6SdFile5writeEPKvj+0x322>
    7bb2:	4c 2c       	mov	r4, r12
    7bb4:	5a 2c       	mov	r5, r10
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    7bb6:	22 24       	eor	r2, r2
    7bb8:	33 24       	eor	r3, r3
    7bba:	68 94       	set
    7bbc:	31 f8       	bld	r3, 1
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    7bbe:	5e 82       	std	Y+6, r5	; 0x06
    7bc0:	4d 82       	std	Y+5, r4	; 0x05
    7bc2:	2f 01       	movw	r4, r30
    7bc4:	58 01       	movw	r10, r16
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    7bc6:	d5 01       	movw	r26, r10
    7bc8:	5b 96       	adiw	r26, 0x1b	; 27
    7bca:	2d 91       	ld	r18, X+
    7bcc:	3c 91       	ld	r19, X
    7bce:	5c 97       	sbiw	r26, 0x1c	; 28
    7bd0:	1a 96       	adiw	r26, 0x0a	; 10
    7bd2:	8d 91       	ld	r24, X+
    7bd4:	9d 91       	ld	r25, X+
    7bd6:	0d 90       	ld	r0, X+
    7bd8:	bc 91       	ld	r27, X
    7bda:	a0 2d       	mov	r26, r0
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    7bdc:	ac 01       	movw	r20, r24
    7bde:	bd 01       	movw	r22, r26
    7be0:	03 2e       	mov	r0, r19
    7be2:	39 e0       	ldi	r19, 0x09	; 9
    7be4:	76 95       	lsr	r23
    7be6:	67 95       	ror	r22
    7be8:	57 95       	ror	r21
    7bea:	47 95       	ror	r20
    7bec:	3a 95       	dec	r19
    7bee:	d1 f7       	brne	.-12     	; 0x7be4 <_ZN6SdFile5writeEPKvj+0xc4>
    7bf0:	30 2d       	mov	r19, r0
    7bf2:	f9 01       	movw	r30, r18
    7bf4:	04 81       	ldd	r16, Z+4	; 0x04
    7bf6:	01 50       	subi	r16, 0x01	; 1
    7bf8:	04 23       	and	r16, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    7bfa:	0f 2e       	mov	r0, r31
    7bfc:	ff ef       	ldi	r31, 0xFF	; 255
    7bfe:	6f 2e       	mov	r6, r31
    7c00:	f1 e0       	ldi	r31, 0x01	; 1
    7c02:	7f 2e       	mov	r7, r31
    7c04:	f0 2d       	mov	r31, r0
    7c06:	68 22       	and	r6, r24
    7c08:	79 22       	and	r7, r25
    if (blockOfCluster == 0 && blockOffset == 0) {
    7c0a:	00 23       	and	r16, r16
    7c0c:	09 f0       	breq	.+2      	; 0x7c10 <_ZN6SdFile5writeEPKvj+0xf0>
    7c0e:	56 c0       	rjmp	.+172    	; 0x7cbc <_ZN6SdFile5writeEPKvj+0x19c>
    7c10:	61 14       	cp	r6, r1
    7c12:	71 04       	cpc	r7, r1
    7c14:	09 f0       	breq	.+2      	; 0x7c18 <_ZN6SdFile5writeEPKvj+0xf8>
    7c16:	52 c0       	rjmp	.+164    	; 0x7cbc <_ZN6SdFile5writeEPKvj+0x19c>
      // start of new cluster
      if (curCluster_ == 0) {
    7c18:	d5 01       	movw	r26, r10
    7c1a:	16 96       	adiw	r26, 0x06	; 6
    7c1c:	4d 91       	ld	r20, X+
    7c1e:	5d 91       	ld	r21, X+
    7c20:	6d 91       	ld	r22, X+
    7c22:	7c 91       	ld	r23, X
    7c24:	19 97       	sbiw	r26, 0x09	; 9
    7c26:	41 15       	cp	r20, r1
    7c28:	51 05       	cpc	r21, r1
    7c2a:	61 05       	cpc	r22, r1
    7c2c:	71 05       	cpc	r23, r1
    7c2e:	b9 f4       	brne	.+46     	; 0x7c5e <_ZN6SdFile5writeEPKvj+0x13e>
        if (firstCluster_ == 0) {
    7c30:	57 96       	adiw	r26, 0x17	; 23
    7c32:	8d 91       	ld	r24, X+
    7c34:	9d 91       	ld	r25, X+
    7c36:	0d 90       	ld	r0, X+
    7c38:	bc 91       	ld	r27, X
    7c3a:	a0 2d       	mov	r26, r0
    7c3c:	00 97       	sbiw	r24, 0x00	; 0
    7c3e:	a1 05       	cpc	r26, r1
    7c40:	b1 05       	cpc	r27, r1
    7c42:	39 f4       	brne	.+14     	; 0x7c52 <_ZN6SdFile5writeEPKvj+0x132>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    7c44:	c5 01       	movw	r24, r10
    7c46:	0e 94 a4 30 	call	0x6148	; 0x6148 <_ZN6SdFile10addClusterEv>
    7c4a:	88 23       	and	r24, r24
    7c4c:	b9 f5       	brne	.+110    	; 0x7cbc <_ZN6SdFile5writeEPKvj+0x19c>
    7c4e:	85 01       	movw	r16, r10
    7c50:	2b c1       	rjmp	.+598    	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
        } else {
          curCluster_ = firstCluster_;
    7c52:	f5 01       	movw	r30, r10
    7c54:	86 83       	std	Z+6, r24	; 0x06
    7c56:	97 83       	std	Z+7, r25	; 0x07
    7c58:	a0 87       	std	Z+8, r26	; 0x08
    7c5a:	b1 87       	std	Z+9, r27	; 0x09
    7c5c:	2f c0       	rjmp	.+94     	; 0x7cbc <_ZN6SdFile5writeEPKvj+0x19c>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7c5e:	c9 01       	movw	r24, r18
    7c60:	9e 01       	movw	r18, r28
    7c62:	2f 5f       	subi	r18, 0xFF	; 255
    7c64:	3f 4f       	sbci	r19, 0xFF	; 255
    7c66:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    7c6a:	88 23       	and	r24, r24
    7c6c:	09 f4       	brne	.+2      	; 0x7c70 <_ZN6SdFile5writeEPKvj+0x150>
    7c6e:	26 c1       	rjmp	.+588    	; 0x7ebc <_ZN6SdFile5writeEPKvj+0x39c>
        if (vol_->isEOC(next)) {
    7c70:	49 81       	ldd	r20, Y+1	; 0x01
    7c72:	5a 81       	ldd	r21, Y+2	; 0x02
    7c74:	6b 81       	ldd	r22, Y+3	; 0x03
    7c76:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7c78:	d5 01       	movw	r26, r10
    7c7a:	5b 96       	adiw	r26, 0x1b	; 27
    7c7c:	ed 91       	ld	r30, X+
    7c7e:	fc 91       	ld	r31, X
    7c80:	5c 97       	sbiw	r26, 0x1c	; 28
    7c82:	87 89       	ldd	r24, Z+23	; 0x17
    7c84:	80 31       	cpi	r24, 0x10	; 16
    7c86:	29 f4       	brne	.+10     	; 0x7c92 <_ZN6SdFile5writeEPKvj+0x172>
    7c88:	88 ef       	ldi	r24, 0xF8	; 248
    7c8a:	9f ef       	ldi	r25, 0xFF	; 255
    7c8c:	a0 e0       	ldi	r26, 0x00	; 0
    7c8e:	b0 e0       	ldi	r27, 0x00	; 0
    7c90:	04 c0       	rjmp	.+8      	; 0x7c9a <_ZN6SdFile5writeEPKvj+0x17a>
    7c92:	88 ef       	ldi	r24, 0xF8	; 248
    7c94:	9f ef       	ldi	r25, 0xFF	; 255
    7c96:	af ef       	ldi	r26, 0xFF	; 255
    7c98:	bf e0       	ldi	r27, 0x0F	; 15
    7c9a:	48 17       	cp	r20, r24
    7c9c:	59 07       	cpc	r21, r25
    7c9e:	6a 07       	cpc	r22, r26
    7ca0:	7b 07       	cpc	r23, r27
    7ca2:	38 f0       	brcs	.+14     	; 0x7cb2 <_ZN6SdFile5writeEPKvj+0x192>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    7ca4:	c5 01       	movw	r24, r10
    7ca6:	0e 94 a4 30 	call	0x6148	; 0x6148 <_ZN6SdFile10addClusterEv>
    7caa:	88 23       	and	r24, r24
    7cac:	39 f4       	brne	.+14     	; 0x7cbc <_ZN6SdFile5writeEPKvj+0x19c>
    7cae:	85 01       	movw	r16, r10
    7cb0:	fb c0       	rjmp	.+502    	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
        } else {
          curCluster_ = next;
    7cb2:	f5 01       	movw	r30, r10
    7cb4:	46 83       	std	Z+6, r20	; 0x06
    7cb6:	57 83       	std	Z+7, r21	; 0x07
    7cb8:	60 87       	std	Z+8, r22	; 0x08
    7cba:	71 87       	std	Z+9, r23	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    7cbc:	c1 01       	movw	r24, r2
    7cbe:	86 19       	sub	r24, r6
    7cc0:	97 09       	sbc	r25, r7
    7cc2:	42 01       	movw	r8, r4
    7cc4:	84 15       	cp	r24, r4
    7cc6:	95 05       	cpc	r25, r5
    7cc8:	08 f4       	brcc	.+2      	; 0x7ccc <_ZN6SdFile5writeEPKvj+0x1ac>
    7cca:	4c 01       	movw	r8, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7ccc:	d5 01       	movw	r26, r10
    7cce:	5b 96       	adiw	r26, 0x1b	; 27
    7cd0:	2d 91       	ld	r18, X+
    7cd2:	3c 91       	ld	r19, X
    7cd4:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    7cd6:	16 96       	adiw	r26, 0x06	; 6
    7cd8:	8d 91       	ld	r24, X+
    7cda:	9d 91       	ld	r25, X+
    7cdc:	0d 90       	ld	r0, X+
    7cde:	bc 91       	ld	r27, X
    7ce0:	a0 2d       	mov	r26, r0
    7ce2:	02 97       	sbiw	r24, 0x02	; 2
    7ce4:	a1 09       	sbc	r26, r1
    7ce6:	b1 09       	sbc	r27, r1
    7ce8:	ac 01       	movw	r20, r24
    7cea:	bd 01       	movw	r22, r26
    7cec:	f9 01       	movw	r30, r18
    7cee:	05 84       	ldd	r0, Z+13	; 0x0d
    7cf0:	04 c0       	rjmp	.+8      	; 0x7cfa <_ZN6SdFile5writeEPKvj+0x1da>
    7cf2:	44 0f       	add	r20, r20
    7cf4:	55 1f       	adc	r21, r21
    7cf6:	66 1f       	adc	r22, r22
    7cf8:	77 1f       	adc	r23, r23
    7cfa:	0a 94       	dec	r0
    7cfc:	d2 f7       	brpl	.-12     	; 0x7cf2 <_ZN6SdFile5writeEPKvj+0x1d2>
    7cfe:	86 85       	ldd	r24, Z+14	; 0x0e
    7d00:	97 85       	ldd	r25, Z+15	; 0x0f
    7d02:	a0 89       	ldd	r26, Z+16	; 0x10
    7d04:	b1 89       	ldd	r27, Z+17	; 0x11
    7d06:	84 0f       	add	r24, r20
    7d08:	95 1f       	adc	r25, r21
    7d0a:	a6 1f       	adc	r26, r22
    7d0c:	b7 1f       	adc	r27, r23
    7d0e:	6c 01       	movw	r12, r24
    7d10:	7d 01       	movw	r14, r26
    7d12:	c0 0e       	add	r12, r16
    7d14:	d1 1c       	adc	r13, r1
    7d16:	e1 1c       	adc	r14, r1
    7d18:	f1 1c       	adc	r15, r1
    if (n == 512) {
    7d1a:	f0 e0       	ldi	r31, 0x00	; 0
    7d1c:	8f 16       	cp	r8, r31
    7d1e:	f2 e0       	ldi	r31, 0x02	; 2
    7d20:	9f 06       	cpc	r9, r31
    7d22:	61 f5       	brne	.+88     	; 0x7d7c <_ZN6SdFile5writeEPKvj+0x25c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    7d24:	80 91 76 02 	lds	r24, 0x0276
    7d28:	90 91 77 02 	lds	r25, 0x0277
    7d2c:	a0 91 78 02 	lds	r26, 0x0278
    7d30:	b0 91 79 02 	lds	r27, 0x0279
    7d34:	8c 15       	cp	r24, r12
    7d36:	9d 05       	cpc	r25, r13
    7d38:	ae 05       	cpc	r26, r14
    7d3a:	bf 05       	cpc	r27, r15
    7d3c:	59 f4       	brne	.+22     	; 0x7d54 <_ZN6SdFile5writeEPKvj+0x234>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    7d3e:	2f ef       	ldi	r18, 0xFF	; 255
    7d40:	3f ef       	ldi	r19, 0xFF	; 255
    7d42:	a9 01       	movw	r20, r18
    7d44:	20 93 76 02 	sts	0x0276, r18
    7d48:	30 93 77 02 	sts	0x0277, r19
    7d4c:	40 93 78 02 	sts	0x0278, r20
    7d50:	50 93 79 02 	sts	0x0279, r21
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    7d54:	80 91 83 06 	lds	r24, 0x0683
    7d58:	90 91 84 06 	lds	r25, 0x0684
    7d5c:	b7 01       	movw	r22, r14
    7d5e:	a6 01       	movw	r20, r12
    7d60:	2d 81       	ldd	r18, Y+5	; 0x05
    7d62:	3e 81       	ldd	r19, Y+6	; 0x06
    7d64:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    7d68:	88 23       	and	r24, r24
    7d6a:	09 f4       	brne	.+2      	; 0x7d6e <_ZN6SdFile5writeEPKvj+0x24e>
    7d6c:	98 c0       	rjmp	.+304    	; 0x7e9e <_ZN6SdFile5writeEPKvj+0x37e>
      src += 512;
    7d6e:	4d 81       	ldd	r20, Y+5	; 0x05
    7d70:	5e 81       	ldd	r21, Y+6	; 0x06
    7d72:	40 50       	subi	r20, 0x00	; 0
    7d74:	5e 4f       	sbci	r21, 0xFE	; 254
    7d76:	5e 83       	std	Y+6, r21	; 0x06
    7d78:	4d 83       	std	Y+5, r20	; 0x05
    7d7a:	4c c0       	rjmp	.+152    	; 0x7e14 <_ZN6SdFile5writeEPKvj+0x2f4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    7d7c:	61 14       	cp	r6, r1
    7d7e:	71 04       	cpc	r7, r1
    7d80:	09 f5       	brne	.+66     	; 0x7dc4 <_ZN6SdFile5writeEPKvj+0x2a4>
    7d82:	f5 01       	movw	r30, r10
    7d84:	82 85       	ldd	r24, Z+10	; 0x0a
    7d86:	93 85       	ldd	r25, Z+11	; 0x0b
    7d88:	a4 85       	ldd	r26, Z+12	; 0x0c
    7d8a:	b5 85       	ldd	r27, Z+13	; 0x0d
    7d8c:	43 89       	ldd	r20, Z+19	; 0x13
    7d8e:	54 89       	ldd	r21, Z+20	; 0x14
    7d90:	65 89       	ldd	r22, Z+21	; 0x15
    7d92:	76 89       	ldd	r23, Z+22	; 0x16
    7d94:	84 17       	cp	r24, r20
    7d96:	95 07       	cpc	r25, r21
    7d98:	a6 07       	cpc	r26, r22
    7d9a:	b7 07       	cpc	r27, r23
    7d9c:	98 f0       	brcs	.+38     	; 0x7dc4 <_ZN6SdFile5writeEPKvj+0x2a4>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    7d9e:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    7da2:	88 23       	and	r24, r24
    7da4:	09 f4       	brne	.+2      	; 0x7da8 <_ZN6SdFile5writeEPKvj+0x288>
    7da6:	7d c0       	rjmp	.+250    	; 0x7ea2 <_ZN6SdFile5writeEPKvj+0x382>
        SdVolume::cacheBlockNumber_ = block;
    7da8:	c0 92 76 02 	sts	0x0276, r12
    7dac:	d0 92 77 02 	sts	0x0277, r13
    7db0:	e0 92 78 02 	sts	0x0278, r14
    7db4:	f0 92 79 02 	sts	0x0279, r15
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    7db8:	80 91 82 06 	lds	r24, 0x0682
    7dbc:	81 60       	ori	r24, 0x01	; 1
    7dbe:	80 93 82 06 	sts	0x0682, r24
    7dc2:	08 c0       	rjmp	.+16     	; 0x7dd4 <_ZN6SdFile5writeEPKvj+0x2b4>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    7dc4:	c7 01       	movw	r24, r14
    7dc6:	b6 01       	movw	r22, r12
    7dc8:	41 e0       	ldi	r20, 0x01	; 1
    7dca:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    7dce:	88 23       	and	r24, r24
    7dd0:	09 f4       	brne	.+2      	; 0x7dd4 <_ZN6SdFile5writeEPKvj+0x2b4>
    7dd2:	69 c0       	rjmp	.+210    	; 0x7ea6 <_ZN6SdFile5writeEPKvj+0x386>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    7dd4:	a3 01       	movw	r20, r6
    7dd6:	4b 57       	subi	r20, 0x7B	; 123
    7dd8:	59 4f       	sbci	r21, 0xF9	; 249
      uint8_t* end = dst + n;
    7dda:	9a 01       	movw	r18, r20
    7ddc:	28 0d       	add	r18, r8
    7dde:	39 1d       	adc	r19, r9
      while (dst != end) *dst++ = *src++;
    7de0:	42 17       	cp	r20, r18
    7de2:	53 07       	cpc	r21, r19
    7de4:	b9 f0       	breq	.+46     	; 0x7e14 <_ZN6SdFile5writeEPKvj+0x2f4>
    7de6:	ad 81       	ldd	r26, Y+5	; 0x05
    7de8:	be 81       	ldd	r27, Y+6	; 0x06
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    7dea:	fa 01       	movw	r30, r20
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    7dec:	8d 91       	ld	r24, X+
    7dee:	81 93       	st	Z+, r24
    7df0:	e2 17       	cp	r30, r18
    7df2:	f3 07       	cpc	r31, r19
    7df4:	d9 f7       	brne	.-10     	; 0x7dec <_ZN6SdFile5writeEPKvj+0x2cc>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    7df6:	ca 01       	movw	r24, r20
    7df8:	01 96       	adiw	r24, 0x01	; 1
    7dfa:	41 e0       	ldi	r20, 0x01	; 1
    7dfc:	50 e0       	ldi	r21, 0x00	; 0
    7dfe:	48 1b       	sub	r20, r24
    7e00:	59 0b       	sbc	r21, r25
    7e02:	ca 01       	movw	r24, r20
    7e04:	82 0f       	add	r24, r18
    7e06:	93 1f       	adc	r25, r19
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    7e08:	ad 81       	ldd	r26, Y+5	; 0x05
    7e0a:	be 81       	ldd	r27, Y+6	; 0x06
    7e0c:	a8 0f       	add	r26, r24
    7e0e:	b9 1f       	adc	r27, r25
    7e10:	be 83       	std	Y+6, r27	; 0x06
    7e12:	ad 83       	std	Y+5, r26	; 0x05
    }
    nToWrite -= n;
    7e14:	48 18       	sub	r4, r8
    7e16:	59 08       	sbc	r5, r9
    curPosition_ += n;
    7e18:	a4 01       	movw	r20, r8
    7e1a:	60 e0       	ldi	r22, 0x00	; 0
    7e1c:	70 e0       	ldi	r23, 0x00	; 0
    7e1e:	f5 01       	movw	r30, r10
    7e20:	82 85       	ldd	r24, Z+10	; 0x0a
    7e22:	93 85       	ldd	r25, Z+11	; 0x0b
    7e24:	a4 85       	ldd	r26, Z+12	; 0x0c
    7e26:	b5 85       	ldd	r27, Z+13	; 0x0d
    7e28:	84 0f       	add	r24, r20
    7e2a:	95 1f       	adc	r25, r21
    7e2c:	a6 1f       	adc	r26, r22
    7e2e:	b7 1f       	adc	r27, r23
    7e30:	82 87       	std	Z+10, r24	; 0x0a
    7e32:	93 87       	std	Z+11, r25	; 0x0b
    7e34:	a4 87       	std	Z+12, r26	; 0x0c
    7e36:	b5 87       	std	Z+13, r27	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7e38:	41 14       	cp	r4, r1
    7e3a:	51 04       	cpc	r5, r1
    7e3c:	09 f0       	breq	.+2      	; 0x7e40 <_ZN6SdFile5writeEPKvj+0x320>
    7e3e:	c3 ce       	rjmp	.-634    	; 0x7bc6 <_ZN6SdFile5writeEPKvj+0xa6>
    7e40:	85 01       	movw	r16, r10
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    7e42:	f8 01       	movw	r30, r16
    7e44:	82 85       	ldd	r24, Z+10	; 0x0a
    7e46:	93 85       	ldd	r25, Z+11	; 0x0b
    7e48:	a4 85       	ldd	r26, Z+12	; 0x0c
    7e4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    7e4c:	43 89       	ldd	r20, Z+19	; 0x13
    7e4e:	54 89       	ldd	r21, Z+20	; 0x14
    7e50:	65 89       	ldd	r22, Z+21	; 0x15
    7e52:	76 89       	ldd	r23, Z+22	; 0x16
    7e54:	48 17       	cp	r20, r24
    7e56:	59 07       	cpc	r21, r25
    7e58:	6a 07       	cpc	r22, r26
    7e5a:	7b 07       	cpc	r23, r27
    7e5c:	40 f4       	brcc	.+16     	; 0x7e6e <_ZN6SdFile5writeEPKvj+0x34e>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    7e5e:	83 8b       	std	Z+19, r24	; 0x13
    7e60:	94 8b       	std	Z+20, r25	; 0x14
    7e62:	a5 8b       	std	Z+21, r26	; 0x15
    7e64:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    7e66:	84 81       	ldd	r24, Z+4	; 0x04
    7e68:	80 68       	ori	r24, 0x80	; 128
    7e6a:	84 83       	std	Z+4, r24	; 0x04
    7e6c:	0e c0       	rjmp	.+28     	; 0x7e8a <_ZN6SdFile5writeEPKvj+0x36a>
  } else if (dateTime_ && nbyte) {
    7e6e:	80 91 7c 06 	lds	r24, 0x067C
    7e72:	90 91 7d 06 	lds	r25, 0x067D
    7e76:	00 97       	sbiw	r24, 0x00	; 0
    7e78:	41 f0       	breq	.+16     	; 0x7e8a <_ZN6SdFile5writeEPKvj+0x36a>
    7e7a:	2f 81       	ldd	r18, Y+7	; 0x07
    7e7c:	38 85       	ldd	r19, Y+8	; 0x08
    7e7e:	21 15       	cp	r18, r1
    7e80:	31 05       	cpc	r19, r1
    7e82:	19 f0       	breq	.+6      	; 0x7e8a <_ZN6SdFile5writeEPKvj+0x36a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    7e84:	84 81       	ldd	r24, Z+4	; 0x04
    7e86:	80 68       	ori	r24, 0x80	; 128
    7e88:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    7e8a:	f8 01       	movw	r30, r16
    7e8c:	84 81       	ldd	r24, Z+4	; 0x04
    7e8e:	83 ff       	sbrs	r24, 3
    7e90:	17 c0       	rjmp	.+46     	; 0x7ec0 <_ZN6SdFile5writeEPKvj+0x3a0>
    if (!sync()) goto writeErrorReturn;
    7e92:	c8 01       	movw	r24, r16
    7e94:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN6SdFile4syncEv>
    7e98:	88 23       	and	r24, r24
    7e9a:	31 f0       	breq	.+12     	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
    7e9c:	11 c0       	rjmp	.+34     	; 0x7ec0 <_ZN6SdFile5writeEPKvj+0x3a0>
    7e9e:	85 01       	movw	r16, r10
    7ea0:	03 c0       	rjmp	.+6      	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
    7ea2:	85 01       	movw	r16, r10
    7ea4:	01 c0       	rjmp	.+2      	; 0x7ea8 <_ZN6SdFile5writeEPKvj+0x388>
    7ea6:	85 01       	movw	r16, r10
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    7ea8:	81 e0       	ldi	r24, 0x01	; 1
    7eaa:	90 e0       	ldi	r25, 0x00	; 0
    7eac:	d8 01       	movw	r26, r16
    7eae:	13 96       	adiw	r26, 0x03	; 3
    7eb0:	9c 93       	st	X, r25
    7eb2:	8e 93       	st	-X, r24
    7eb4:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    7eb6:	18 86       	std	Y+8, r1	; 0x08
    7eb8:	1f 82       	std	Y+7, r1	; 0x07
    7eba:	02 c0       	rjmp	.+4      	; 0x7ec0 <_ZN6SdFile5writeEPKvj+0x3a0>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7ebc:	18 86       	std	Y+8, r1	; 0x08
    7ebe:	1f 82       	std	Y+7, r1	; 0x07
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    7ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    7ec2:	98 85       	ldd	r25, Y+8	; 0x08
    7ec4:	28 96       	adiw	r28, 0x08	; 8
    7ec6:	0f b6       	in	r0, 0x3f	; 63
    7ec8:	f8 94       	cli
    7eca:	de bf       	out	0x3e, r29	; 62
    7ecc:	0f be       	out	0x3f, r0	; 63
    7ece:	cd bf       	out	0x3d, r28	; 61
    7ed0:	df 91       	pop	r29
    7ed2:	cf 91       	pop	r28
    7ed4:	1f 91       	pop	r17
    7ed6:	0f 91       	pop	r16
    7ed8:	ff 90       	pop	r15
    7eda:	ef 90       	pop	r14
    7edc:	df 90       	pop	r13
    7ede:	cf 90       	pop	r12
    7ee0:	bf 90       	pop	r11
    7ee2:	af 90       	pop	r10
    7ee4:	9f 90       	pop	r9
    7ee6:	8f 90       	pop	r8
    7ee8:	7f 90       	pop	r7
    7eea:	6f 90       	pop	r6
    7eec:	5f 90       	pop	r5
    7eee:	4f 90       	pop	r4
    7ef0:	3f 90       	pop	r3
    7ef2:	2f 90       	pop	r2
    7ef4:	08 95       	ret

00007ef6 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    7ef6:	cf 93       	push	r28
    7ef8:	df 93       	push	r29
    7efa:	0f 92       	push	r0
    7efc:	cd b7       	in	r28, 0x3d	; 61
    7efe:	de b7       	in	r29, 0x3e	; 62
    7f00:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    7f02:	be 01       	movw	r22, r28
    7f04:	6f 5f       	subi	r22, 0xFF	; 255
    7f06:	7f 4f       	sbci	r23, 0xFF	; 255
    7f08:	41 e0       	ldi	r20, 0x01	; 1
    7f0a:	50 e0       	ldi	r21, 0x00	; 0
    7f0c:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <_ZN6SdFile5writeEPKvj>
}
    7f10:	0f 90       	pop	r0
    7f12:	df 91       	pop	r29
    7f14:	cf 91       	pop	r28
    7f16:	08 95       	ret

00007f18 <_ZN6SdFile5writeEPKc>:
 * Write a string to a file. Used by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(const char* str) {
  return write(str, strlen(str));
    7f18:	e6 2f       	mov	r30, r22
    7f1a:	f7 2f       	mov	r31, r23
    7f1c:	df 01       	movw	r26, r30
    7f1e:	0d 90       	ld	r0, X+
    7f20:	00 20       	and	r0, r0
    7f22:	e9 f7       	brne	.-6      	; 0x7f1e <_ZN6SdFile5writeEPKc+0x6>
    7f24:	ad 01       	movw	r20, r26
    7f26:	41 50       	subi	r20, 0x01	; 1
    7f28:	50 40       	sbci	r21, 0x00	; 0
    7f2a:	4e 1b       	sub	r20, r30
    7f2c:	5f 0b       	sbc	r21, r31
    7f2e:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <_ZN6SdFile5writeEPKvj>
}
    7f32:	08 95       	ret

00007f34 <_ZN6SdFile7write_PEPKc>:
/**
 * Write a PROGMEM string to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::write_P(PGM_P str) {
    7f34:	0f 93       	push	r16
    7f36:	1f 93       	push	r17
    7f38:	cf 93       	push	r28
    7f3a:	df 93       	push	r29
    7f3c:	8c 01       	movw	r16, r24
    7f3e:	eb 01       	movw	r28, r22
  for (uint8_t c; (c = pgm_read_byte(str)); str++) write(c);
    7f40:	fb 01       	movw	r30, r22
    7f42:	64 91       	lpm	r22, Z
    7f44:	66 23       	and	r22, r22
    7f46:	69 f0       	breq	.+26     	; 0x7f62 <_ZN6SdFile7write_PEPKc+0x2e>
    7f48:	d8 01       	movw	r26, r16
    7f4a:	ed 91       	ld	r30, X+
    7f4c:	fc 91       	ld	r31, X
    7f4e:	01 90       	ld	r0, Z+
    7f50:	f0 81       	ld	r31, Z
    7f52:	e0 2d       	mov	r30, r0
    7f54:	c8 01       	movw	r24, r16
    7f56:	19 95       	eicall
    7f58:	21 96       	adiw	r28, 0x01	; 1
    7f5a:	fe 01       	movw	r30, r28
    7f5c:	64 91       	lpm	r22, Z
    7f5e:	66 23       	and	r22, r22
    7f60:	99 f7       	brne	.-26     	; 0x7f48 <_ZN6SdFile7write_PEPKc+0x14>
}
    7f62:	df 91       	pop	r29
    7f64:	cf 91       	pop	r28
    7f66:	1f 91       	pop	r17
    7f68:	0f 91       	pop	r16
    7f6a:	08 95       	ret

00007f6c <_ZN6SdFile9writeln_PEPKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
    7f6c:	cf 93       	push	r28
    7f6e:	df 93       	push	r29
    7f70:	ec 01       	movw	r28, r24
  write_P(str);
    7f72:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <_ZN6SdFile7write_PEPKc>
  println();
    7f76:	ce 01       	movw	r24, r28
    7f78:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN5Print7printlnEv>
}
    7f7c:	df 91       	pop	r29
    7f7e:	cf 91       	pop	r28
    7f80:	08 95       	ret

00007f82 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    7f82:	80 91 82 06 	lds	r24, 0x0682
    7f86:	88 23       	and	r24, r24
    7f88:	a9 f1       	breq	.+106    	; 0x7ff4 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    7f8a:	40 91 76 02 	lds	r20, 0x0276
    7f8e:	50 91 77 02 	lds	r21, 0x0277
    7f92:	60 91 78 02 	lds	r22, 0x0278
    7f96:	70 91 79 02 	lds	r23, 0x0279
    7f9a:	80 91 83 06 	lds	r24, 0x0683
    7f9e:	90 91 84 06 	lds	r25, 0x0684
    7fa2:	25 e8       	ldi	r18, 0x85	; 133
    7fa4:	36 e0       	ldi	r19, 0x06	; 6
    7fa6:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <_ZN7Sd2Card10writeBlockEmPKh>
    7faa:	88 23       	and	r24, r24
    7fac:	29 f1       	breq	.+74     	; 0x7ff8 <_ZN8SdVolume10cacheFlushEv+0x76>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    7fae:	40 91 7e 06 	lds	r20, 0x067E
    7fb2:	50 91 7f 06 	lds	r21, 0x067F
    7fb6:	60 91 80 06 	lds	r22, 0x0680
    7fba:	70 91 81 06 	lds	r23, 0x0681
    7fbe:	41 15       	cp	r20, r1
    7fc0:	51 05       	cpc	r21, r1
    7fc2:	61 05       	cpc	r22, r1
    7fc4:	71 05       	cpc	r23, r1
    7fc6:	91 f0       	breq	.+36     	; 0x7fec <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    7fc8:	80 91 83 06 	lds	r24, 0x0683
    7fcc:	90 91 84 06 	lds	r25, 0x0684
    7fd0:	25 e8       	ldi	r18, 0x85	; 133
    7fd2:	36 e0       	ldi	r19, 0x06	; 6
    7fd4:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <_ZN7Sd2Card10writeBlockEmPKh>
    7fd8:	88 23       	and	r24, r24
    7fda:	81 f0       	breq	.+32     	; 0x7ffc <_ZN8SdVolume10cacheFlushEv+0x7a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    7fdc:	10 92 7e 06 	sts	0x067E, r1
    7fe0:	10 92 7f 06 	sts	0x067F, r1
    7fe4:	10 92 80 06 	sts	0x0680, r1
    7fe8:	10 92 81 06 	sts	0x0681, r1
    }
    cacheDirty_ = 0;
    7fec:	10 92 82 06 	sts	0x0682, r1
  }
  return true;
    7ff0:	81 e0       	ldi	r24, 0x01	; 1
    7ff2:	08 95       	ret
    7ff4:	81 e0       	ldi	r24, 0x01	; 1
    7ff6:	08 95       	ret
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    7ff8:	80 e0       	ldi	r24, 0x00	; 0
    7ffa:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
    7ffc:	80 e0       	ldi	r24, 0x00	; 0
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    7ffe:	08 95       	ret

00008000 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    8000:	cf 92       	push	r12
    8002:	df 92       	push	r13
    8004:	ef 92       	push	r14
    8006:	ff 92       	push	r15
    8008:	cf 93       	push	r28
    800a:	6b 01       	movw	r12, r22
    800c:	7c 01       	movw	r14, r24
    800e:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    8010:	80 91 76 02 	lds	r24, 0x0276
    8014:	90 91 77 02 	lds	r25, 0x0277
    8018:	a0 91 78 02 	lds	r26, 0x0278
    801c:	b0 91 79 02 	lds	r27, 0x0279
    8020:	8c 15       	cp	r24, r12
    8022:	9d 05       	cpc	r25, r13
    8024:	ae 05       	cpc	r26, r14
    8026:	bf 05       	cpc	r27, r15
    8028:	c1 f0       	breq	.+48     	; 0x805a <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    802a:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    802e:	88 23       	and	r24, r24
    8030:	d9 f0       	breq	.+54     	; 0x8068 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    8032:	80 91 83 06 	lds	r24, 0x0683
    8036:	90 91 84 06 	lds	r25, 0x0684
    803a:	b7 01       	movw	r22, r14
    803c:	a6 01       	movw	r20, r12
    803e:	25 e8       	ldi	r18, 0x85	; 133
    8040:	36 e0       	ldi	r19, 0x06	; 6
    8042:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <_ZN7Sd2Card9readBlockEmPh>
    8046:	88 23       	and	r24, r24
    8048:	89 f0       	breq	.+34     	; 0x806c <_ZN8SdVolume13cacheRawBlockEmh+0x6c>
    cacheBlockNumber_ = blockNumber;
    804a:	c0 92 76 02 	sts	0x0276, r12
    804e:	d0 92 77 02 	sts	0x0277, r13
    8052:	e0 92 78 02 	sts	0x0278, r14
    8056:	f0 92 79 02 	sts	0x0279, r15
  }
  cacheDirty_ |= action;
    805a:	80 91 82 06 	lds	r24, 0x0682
    805e:	c8 2b       	or	r28, r24
    8060:	c0 93 82 06 	sts	0x0682, r28
  return true;
    8064:	81 e0       	ldi	r24, 0x01	; 1
    8066:	03 c0       	rjmp	.+6      	; 0x806e <_ZN8SdVolume13cacheRawBlockEmh+0x6e>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    8068:	80 e0       	ldi	r24, 0x00	; 0
    806a:	01 c0       	rjmp	.+2      	; 0x806e <_ZN8SdVolume13cacheRawBlockEmh+0x6e>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    806c:	80 e0       	ldi	r24, 0x00	; 0
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
    806e:	cf 91       	pop	r28
    8070:	ff 90       	pop	r15
    8072:	ef 90       	pop	r14
    8074:	df 90       	pop	r13
    8076:	cf 90       	pop	r12
    8078:	08 95       	ret

0000807a <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    807a:	cf 92       	push	r12
    807c:	df 92       	push	r13
    807e:	ef 92       	push	r14
    8080:	ff 92       	push	r15
    8082:	6b 01       	movw	r12, r22
    8084:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    8086:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <_ZN8SdVolume10cacheFlushEv>
    808a:	88 23       	and	r24, r24
    808c:	b9 f0       	breq	.+46     	; 0x80bc <_ZN8SdVolume14cacheZeroBlockEm+0x42>
    808e:	e5 e8       	ldi	r30, 0x85	; 133
    8090:	f6 e0       	ldi	r31, 0x06	; 6
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    8092:	85 e8       	ldi	r24, 0x85	; 133
    8094:	98 e0       	ldi	r25, 0x08	; 8
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    8096:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    8098:	e8 17       	cp	r30, r24
    809a:	f9 07       	cpc	r31, r25
    809c:	e1 f7       	brne	.-8      	; 0x8096 <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    809e:	c0 92 76 02 	sts	0x0276, r12
    80a2:	d0 92 77 02 	sts	0x0277, r13
    80a6:	e0 92 78 02 	sts	0x0278, r14
    80aa:	f0 92 79 02 	sts	0x0279, r15
    80ae:	80 91 82 06 	lds	r24, 0x0682
    80b2:	81 60       	ori	r24, 0x01	; 1
    80b4:	80 93 82 06 	sts	0x0682, r24
  cacheSetDirty();
  return true;
    80b8:	81 e0       	ldi	r24, 0x01	; 1
    80ba:	01 c0       	rjmp	.+2      	; 0x80be <_ZN8SdVolume14cacheZeroBlockEm+0x44>
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;
    80bc:	80 e0       	ldi	r24, 0x00	; 0
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
}
    80be:	ff 90       	pop	r15
    80c0:	ef 90       	pop	r14
    80c2:	df 90       	pop	r13
    80c4:	cf 90       	pop	r12
    80c6:	08 95       	ret

000080c8 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    80c8:	cf 92       	push	r12
    80ca:	df 92       	push	r13
    80cc:	ef 92       	push	r14
    80ce:	ff 92       	push	r15
    80d0:	0f 93       	push	r16
    80d2:	1f 93       	push	r17
    80d4:	cf 93       	push	r28
    80d6:	df 93       	push	r29
    80d8:	ec 01       	movw	r28, r24
    80da:	6a 01       	movw	r12, r20
    80dc:	7b 01       	movw	r14, r22
    80de:	89 01       	movw	r16, r18
  if (cluster > (clusterCount_ + 1)) return false;
    80e0:	89 85       	ldd	r24, Y+9	; 0x09
    80e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    80e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    80e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    80e8:	01 96       	adiw	r24, 0x01	; 1
    80ea:	a1 1d       	adc	r26, r1
    80ec:	b1 1d       	adc	r27, r1
    80ee:	84 17       	cp	r24, r20
    80f0:	95 07       	cpc	r25, r21
    80f2:	a6 07       	cpc	r26, r22
    80f4:	b7 07       	cpc	r27, r23
    80f6:	08 f4       	brcc	.+2      	; 0x80fa <_ZNK8SdVolume6fatGetEmPm+0x32>
    80f8:	62 c0       	rjmp	.+196    	; 0x81be <_ZNK8SdVolume6fatGetEmPm+0xf6>
  uint32_t lba = fatStartBlock_;
    80fa:	8b 89       	ldd	r24, Y+19	; 0x13
    80fc:	9c 89       	ldd	r25, Y+20	; 0x14
    80fe:	ad 89       	ldd	r26, Y+21	; 0x15
    8100:	be 89       	ldd	r27, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    8102:	2f 89       	ldd	r18, Y+23	; 0x17
    8104:	20 31       	cpi	r18, 0x10	; 16
    8106:	29 f4       	brne	.+10     	; 0x8112 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    8108:	45 2f       	mov	r20, r21
    810a:	56 2f       	mov	r21, r22
    810c:	67 2f       	mov	r22, r23
    810e:	77 27       	eor	r23, r23
    8110:	08 c0       	rjmp	.+16     	; 0x8122 <_ZNK8SdVolume6fatGetEmPm+0x5a>
    8112:	68 94       	set
    8114:	16 f8       	bld	r1, 6
    8116:	76 95       	lsr	r23
    8118:	67 95       	ror	r22
    811a:	57 95       	ror	r21
    811c:	47 95       	ror	r20
    811e:	16 94       	lsr	r1
    8120:	d1 f7       	brne	.-12     	; 0x8116 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    8122:	84 0f       	add	r24, r20
    8124:	95 1f       	adc	r25, r21
    8126:	a6 1f       	adc	r26, r22
    8128:	b7 1f       	adc	r27, r23
  if (lba != cacheBlockNumber_) {
    812a:	40 91 76 02 	lds	r20, 0x0276
    812e:	50 91 77 02 	lds	r21, 0x0277
    8132:	60 91 78 02 	lds	r22, 0x0278
    8136:	70 91 79 02 	lds	r23, 0x0279
    813a:	84 17       	cp	r24, r20
    813c:	95 07       	cpc	r25, r21
    813e:	a6 07       	cpc	r26, r22
    8140:	b7 07       	cpc	r27, r23
    8142:	39 f0       	breq	.+14     	; 0x8152 <_ZNK8SdVolume6fatGetEmPm+0x8a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    8144:	bc 01       	movw	r22, r24
    8146:	cd 01       	movw	r24, r26
    8148:	40 e0       	ldi	r20, 0x00	; 0
    814a:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    814e:	88 23       	and	r24, r24
    8150:	c1 f1       	breq	.+112    	; 0x81c2 <_ZNK8SdVolume6fatGetEmPm+0xfa>
  }
  if (fatType_ == 16) {
    8152:	8f 89       	ldd	r24, Y+23	; 0x17
    8154:	80 31       	cpi	r24, 0x10	; 16
    8156:	c1 f4       	brne	.+48     	; 0x8188 <_ZNK8SdVolume6fatGetEmPm+0xc0>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    8158:	8f ef       	ldi	r24, 0xFF	; 255
    815a:	90 e0       	ldi	r25, 0x00	; 0
    815c:	a0 e0       	ldi	r26, 0x00	; 0
    815e:	b0 e0       	ldi	r27, 0x00	; 0
    8160:	c8 22       	and	r12, r24
    8162:	d9 22       	and	r13, r25
    8164:	ea 22       	and	r14, r26
    8166:	fb 22       	and	r15, r27
    8168:	f6 01       	movw	r30, r12
    816a:	ee 0f       	add	r30, r30
    816c:	ff 1f       	adc	r31, r31
    816e:	eb 57       	subi	r30, 0x7B	; 123
    8170:	f9 4f       	sbci	r31, 0xF9	; 249
    8172:	80 81       	ld	r24, Z
    8174:	91 81       	ldd	r25, Z+1	; 0x01
    8176:	a0 e0       	ldi	r26, 0x00	; 0
    8178:	b0 e0       	ldi	r27, 0x00	; 0
    817a:	f8 01       	movw	r30, r16
    817c:	80 83       	st	Z, r24
    817e:	91 83       	std	Z+1, r25	; 0x01
    8180:	a2 83       	std	Z+2, r26	; 0x02
    8182:	b3 83       	std	Z+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    8184:	81 e0       	ldi	r24, 0x01	; 1
    8186:	1e c0       	rjmp	.+60     	; 0x81c4 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    8188:	8f e7       	ldi	r24, 0x7F	; 127
    818a:	90 e0       	ldi	r25, 0x00	; 0
    818c:	a0 e0       	ldi	r26, 0x00	; 0
    818e:	b0 e0       	ldi	r27, 0x00	; 0
    8190:	c8 22       	and	r12, r24
    8192:	d9 22       	and	r13, r25
    8194:	ea 22       	and	r14, r26
    8196:	fb 22       	and	r15, r27
    8198:	f6 01       	movw	r30, r12
    819a:	ee 0f       	add	r30, r30
    819c:	ff 1f       	adc	r31, r31
    819e:	ee 0f       	add	r30, r30
    81a0:	ff 1f       	adc	r31, r31
    81a2:	eb 57       	subi	r30, 0x7B	; 123
    81a4:	f9 4f       	sbci	r31, 0xF9	; 249
    81a6:	80 81       	ld	r24, Z
    81a8:	91 81       	ldd	r25, Z+1	; 0x01
    81aa:	a2 81       	ldd	r26, Z+2	; 0x02
    81ac:	b3 81       	ldd	r27, Z+3	; 0x03
    81ae:	bf 70       	andi	r27, 0x0F	; 15
    81b0:	f8 01       	movw	r30, r16
    81b2:	80 83       	st	Z, r24
    81b4:	91 83       	std	Z+1, r25	; 0x01
    81b6:	a2 83       	std	Z+2, r26	; 0x02
    81b8:	b3 83       	std	Z+3, r27	; 0x03
  }
  return true;
    81ba:	81 e0       	ldi	r24, 0x01	; 1
    81bc:	03 c0       	rjmp	.+6      	; 0x81c4 <_ZNK8SdVolume6fatGetEmPm+0xfc>
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    81be:	80 e0       	ldi	r24, 0x00	; 0
    81c0:	01 c0       	rjmp	.+2      	; 0x81c4 <_ZNK8SdVolume6fatGetEmPm+0xfc>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    81c2:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    81c4:	df 91       	pop	r29
    81c6:	cf 91       	pop	r28
    81c8:	1f 91       	pop	r17
    81ca:	0f 91       	pop	r16
    81cc:	ff 90       	pop	r15
    81ce:	ef 90       	pop	r14
    81d0:	df 90       	pop	r13
    81d2:	cf 90       	pop	r12
    81d4:	08 95       	ret

000081d6 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    81d6:	2f 92       	push	r2
    81d8:	3f 92       	push	r3
    81da:	4f 92       	push	r4
    81dc:	5f 92       	push	r5
    81de:	6f 92       	push	r6
    81e0:	7f 92       	push	r7
    81e2:	8f 92       	push	r8
    81e4:	9f 92       	push	r9
    81e6:	af 92       	push	r10
    81e8:	bf 92       	push	r11
    81ea:	cf 92       	push	r12
    81ec:	df 92       	push	r13
    81ee:	ef 92       	push	r14
    81f0:	ff 92       	push	r15
    81f2:	0f 93       	push	r16
    81f4:	1f 93       	push	r17
    81f6:	cf 93       	push	r28
    81f8:	df 93       	push	r29
    81fa:	00 d0       	rcall	.+0      	; 0x81fc <_ZNK8SdVolume9chainSizeEmPm+0x26>
    81fc:	0f 92       	push	r0
    81fe:	cd b7       	in	r28, 0x3d	; 61
    8200:	de b7       	in	r29, 0x3e	; 62
    8202:	8c 01       	movw	r16, r24
    8204:	49 83       	std	Y+1, r20	; 0x01
    8206:	5a 83       	std	Y+2, r21	; 0x02
    8208:	6b 83       	std	Y+3, r22	; 0x03
    820a:	7c 83       	std	Y+4, r23	; 0x04
    820c:	19 01       	movw	r2, r18
  uint32_t s = 0;
    820e:	cc 24       	eor	r12, r12
    8210:	dd 24       	eor	r13, r13
    8212:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    8214:	88 24       	eor	r8, r8
    8216:	99 24       	eor	r9, r9
    8218:	54 01       	movw	r10, r8
    821a:	68 94       	set
    821c:	91 f8       	bld	r9, 1
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    821e:	0f 2e       	mov	r0, r31
    8220:	f8 ef       	ldi	r31, 0xF8	; 248
    8222:	4f 2e       	mov	r4, r31
    8224:	ff ef       	ldi	r31, 0xFF	; 255
    8226:	5f 2e       	mov	r5, r31
    8228:	ff ef       	ldi	r31, 0xFF	; 255
    822a:	6f 2e       	mov	r6, r31
    822c:	ff e0       	ldi	r31, 0x0F	; 15
    822e:	7f 2e       	mov	r7, r31
    8230:	f0 2d       	mov	r31, r0
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    8232:	49 81       	ldd	r20, Y+1	; 0x01
    8234:	5a 81       	ldd	r21, Y+2	; 0x02
    8236:	6b 81       	ldd	r22, Y+3	; 0x03
    8238:	7c 81       	ldd	r23, Y+4	; 0x04
    823a:	c8 01       	movw	r24, r16
    823c:	9e 01       	movw	r18, r28
    823e:	2f 5f       	subi	r18, 0xFF	; 255
    8240:	3f 4f       	sbci	r19, 0xFF	; 255
    8242:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    8246:	88 23       	and	r24, r24
    8248:	49 f1       	breq	.+82     	; 0x829c <_ZNK8SdVolume9chainSizeEmPm+0xc6>
    s += 512UL << clusterSizeShift_;
    824a:	d5 01       	movw	r26, r10
    824c:	c4 01       	movw	r24, r8
    824e:	f8 01       	movw	r30, r16
    8250:	05 84       	ldd	r0, Z+13	; 0x0d
    8252:	04 c0       	rjmp	.+8      	; 0x825c <_ZNK8SdVolume9chainSizeEmPm+0x86>
    8254:	88 0f       	add	r24, r24
    8256:	99 1f       	adc	r25, r25
    8258:	aa 1f       	adc	r26, r26
    825a:	bb 1f       	adc	r27, r27
    825c:	0a 94       	dec	r0
    825e:	d2 f7       	brpl	.-12     	; 0x8254 <_ZNK8SdVolume9chainSizeEmPm+0x7e>
    8260:	c8 0e       	add	r12, r24
    8262:	d9 1e       	adc	r13, r25
    8264:	ea 1e       	adc	r14, r26
    8266:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    8268:	89 81       	ldd	r24, Y+1	; 0x01
    826a:	9a 81       	ldd	r25, Y+2	; 0x02
    826c:	ab 81       	ldd	r26, Y+3	; 0x03
    826e:	bc 81       	ldd	r27, Y+4	; 0x04
    8270:	27 89       	ldd	r18, Z+23	; 0x17
    8272:	20 31       	cpi	r18, 0x10	; 16
    8274:	29 f4       	brne	.+10     	; 0x8280 <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    8276:	48 ef       	ldi	r20, 0xF8	; 248
    8278:	5f ef       	ldi	r21, 0xFF	; 255
    827a:	60 e0       	ldi	r22, 0x00	; 0
    827c:	70 e0       	ldi	r23, 0x00	; 0
    827e:	02 c0       	rjmp	.+4      	; 0x8284 <_ZNK8SdVolume9chainSizeEmPm+0xae>
    8280:	b3 01       	movw	r22, r6
    8282:	a2 01       	movw	r20, r4
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    8284:	84 17       	cp	r24, r20
    8286:	95 07       	cpc	r25, r21
    8288:	a6 07       	cpc	r26, r22
    828a:	b7 07       	cpc	r27, r23
    828c:	90 f2       	brcs	.-92     	; 0x8232 <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    828e:	f1 01       	movw	r30, r2
    8290:	c0 82       	st	Z, r12
    8292:	d1 82       	std	Z+1, r13	; 0x01
    8294:	e2 82       	std	Z+2, r14	; 0x02
    8296:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    8298:	81 e0       	ldi	r24, 0x01	; 1
    829a:	01 c0       	rjmp	.+2      	; 0x829e <_ZNK8SdVolume9chainSizeEmPm+0xc8>
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    829c:	80 e0       	ldi	r24, 0x00	; 0
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    829e:	0f 90       	pop	r0
    82a0:	0f 90       	pop	r0
    82a2:	0f 90       	pop	r0
    82a4:	0f 90       	pop	r0
    82a6:	df 91       	pop	r29
    82a8:	cf 91       	pop	r28
    82aa:	1f 91       	pop	r17
    82ac:	0f 91       	pop	r16
    82ae:	ff 90       	pop	r15
    82b0:	ef 90       	pop	r14
    82b2:	df 90       	pop	r13
    82b4:	cf 90       	pop	r12
    82b6:	bf 90       	pop	r11
    82b8:	af 90       	pop	r10
    82ba:	9f 90       	pop	r9
    82bc:	8f 90       	pop	r8
    82be:	7f 90       	pop	r7
    82c0:	6f 90       	pop	r6
    82c2:	5f 90       	pop	r5
    82c4:	4f 90       	pop	r4
    82c6:	3f 90       	pop	r3
    82c8:	2f 90       	pop	r2
    82ca:	08 95       	ret

000082cc <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    82cc:	4f 92       	push	r4
    82ce:	5f 92       	push	r5
    82d0:	6f 92       	push	r6
    82d2:	7f 92       	push	r7
    82d4:	8f 92       	push	r8
    82d6:	9f 92       	push	r9
    82d8:	af 92       	push	r10
    82da:	bf 92       	push	r11
    82dc:	cf 92       	push	r12
    82de:	df 92       	push	r13
    82e0:	ef 92       	push	r14
    82e2:	ff 92       	push	r15
    82e4:	0f 93       	push	r16
    82e6:	1f 93       	push	r17
    82e8:	cf 93       	push	r28
    82ea:	df 93       	push	r29
    82ec:	ec 01       	movw	r28, r24
    82ee:	6a 01       	movw	r12, r20
    82f0:	7b 01       	movw	r14, r22
    82f2:	28 01       	movw	r4, r16
    82f4:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    82f6:	42 30       	cpi	r20, 0x02	; 2
    82f8:	51 05       	cpc	r21, r1
    82fa:	61 05       	cpc	r22, r1
    82fc:	71 05       	cpc	r23, r1
    82fe:	08 f4       	brcc	.+2      	; 0x8302 <_ZN8SdVolume6fatPutEmm+0x36>
    8300:	7e c0       	rjmp	.+252    	; 0x83fe <_ZN8SdVolume6fatPutEmm+0x132>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8302:	89 85       	ldd	r24, Y+9	; 0x09
    8304:	9a 85       	ldd	r25, Y+10	; 0x0a
    8306:	ab 85       	ldd	r26, Y+11	; 0x0b
    8308:	bc 85       	ldd	r27, Y+12	; 0x0c
    830a:	01 96       	adiw	r24, 0x01	; 1
    830c:	a1 1d       	adc	r26, r1
    830e:	b1 1d       	adc	r27, r1
    8310:	84 17       	cp	r24, r20
    8312:	95 07       	cpc	r25, r21
    8314:	a6 07       	cpc	r26, r22
    8316:	b7 07       	cpc	r27, r23
    8318:	08 f4       	brcc	.+2      	; 0x831c <_ZN8SdVolume6fatPutEmm+0x50>
    831a:	73 c0       	rjmp	.+230    	; 0x8402 <_ZN8SdVolume6fatPutEmm+0x136>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    831c:	4b 89       	ldd	r20, Y+19	; 0x13
    831e:	5c 89       	ldd	r21, Y+20	; 0x14
    8320:	6d 89       	ldd	r22, Y+21	; 0x15
    8322:	7e 89       	ldd	r23, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    8324:	8f 89       	ldd	r24, Y+23	; 0x17
    8326:	80 31       	cpi	r24, 0x10	; 16
    8328:	29 f4       	brne	.+10     	; 0x8334 <_ZN8SdVolume6fatPutEmm+0x68>
    832a:	bb 27       	eor	r27, r27
    832c:	af 2d       	mov	r26, r15
    832e:	9e 2d       	mov	r25, r14
    8330:	8d 2d       	mov	r24, r13
    8332:	0a c0       	rjmp	.+20     	; 0x8348 <_ZN8SdVolume6fatPutEmm+0x7c>
    8334:	d7 01       	movw	r26, r14
    8336:	c6 01       	movw	r24, r12
    8338:	68 94       	set
    833a:	16 f8       	bld	r1, 6
    833c:	b6 95       	lsr	r27
    833e:	a7 95       	ror	r26
    8340:	97 95       	ror	r25
    8342:	87 95       	ror	r24
    8344:	16 94       	lsr	r1
    8346:	d1 f7       	brne	.-12     	; 0x833c <_ZN8SdVolume6fatPutEmm+0x70>
    8348:	4c 01       	movw	r8, r24
    834a:	5d 01       	movw	r10, r26
    834c:	84 0e       	add	r8, r20
    834e:	95 1e       	adc	r9, r21
    8350:	a6 1e       	adc	r10, r22
    8352:	b7 1e       	adc	r11, r23

  if (lba != cacheBlockNumber_) {
    8354:	80 91 76 02 	lds	r24, 0x0276
    8358:	90 91 77 02 	lds	r25, 0x0277
    835c:	a0 91 78 02 	lds	r26, 0x0278
    8360:	b0 91 79 02 	lds	r27, 0x0279
    8364:	88 16       	cp	r8, r24
    8366:	99 06       	cpc	r9, r25
    8368:	aa 06       	cpc	r10, r26
    836a:	bb 06       	cpc	r11, r27
    836c:	41 f0       	breq	.+16     	; 0x837e <_ZN8SdVolume6fatPutEmm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    836e:	c5 01       	movw	r24, r10
    8370:	b4 01       	movw	r22, r8
    8372:	40 e0       	ldi	r20, 0x00	; 0
    8374:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    8378:	88 23       	and	r24, r24
    837a:	09 f4       	brne	.+2      	; 0x837e <_ZN8SdVolume6fatPutEmm+0xb2>
    837c:	44 c0       	rjmp	.+136    	; 0x8406 <_ZN8SdVolume6fatPutEmm+0x13a>
  }
  // store entry
  if (fatType_ == 16) {
    837e:	8f 89       	ldd	r24, Y+23	; 0x17
    8380:	80 31       	cpi	r24, 0x10	; 16
    8382:	81 f4       	brne	.+32     	; 0x83a4 <_ZN8SdVolume6fatPutEmm+0xd8>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    8384:	8f ef       	ldi	r24, 0xFF	; 255
    8386:	90 e0       	ldi	r25, 0x00	; 0
    8388:	a0 e0       	ldi	r26, 0x00	; 0
    838a:	b0 e0       	ldi	r27, 0x00	; 0
    838c:	c8 22       	and	r12, r24
    838e:	d9 22       	and	r13, r25
    8390:	ea 22       	and	r14, r26
    8392:	fb 22       	and	r15, r27
    8394:	f6 01       	movw	r30, r12
    8396:	ee 0f       	add	r30, r30
    8398:	ff 1f       	adc	r31, r31
    839a:	eb 57       	subi	r30, 0x7B	; 123
    839c:	f9 4f       	sbci	r31, 0xF9	; 249
    839e:	51 82       	std	Z+1, r5	; 0x01
    83a0:	40 82       	st	Z, r4
    83a2:	13 c0       	rjmp	.+38     	; 0x83ca <_ZN8SdVolume6fatPutEmm+0xfe>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    83a4:	8f e7       	ldi	r24, 0x7F	; 127
    83a6:	90 e0       	ldi	r25, 0x00	; 0
    83a8:	a0 e0       	ldi	r26, 0x00	; 0
    83aa:	b0 e0       	ldi	r27, 0x00	; 0
    83ac:	c8 22       	and	r12, r24
    83ae:	d9 22       	and	r13, r25
    83b0:	ea 22       	and	r14, r26
    83b2:	fb 22       	and	r15, r27
    83b4:	f6 01       	movw	r30, r12
    83b6:	ee 0f       	add	r30, r30
    83b8:	ff 1f       	adc	r31, r31
    83ba:	ee 0f       	add	r30, r30
    83bc:	ff 1f       	adc	r31, r31
    83be:	eb 57       	subi	r30, 0x7B	; 123
    83c0:	f9 4f       	sbci	r31, 0xF9	; 249
    83c2:	40 82       	st	Z, r4
    83c4:	51 82       	std	Z+1, r5	; 0x01
    83c6:	62 82       	std	Z+2, r6	; 0x02
    83c8:	73 82       	std	Z+3, r7	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    83ca:	80 91 82 06 	lds	r24, 0x0682
    83ce:	81 60       	ori	r24, 0x01	; 1
    83d0:	80 93 82 06 	sts	0x0682, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    83d4:	8a 89       	ldd	r24, Y+18	; 0x12
    83d6:	82 30       	cpi	r24, 0x02	; 2
    83d8:	c0 f0       	brcs	.+48     	; 0x840a <_ZN8SdVolume6fatPutEmm+0x13e>
    83da:	8d 81       	ldd	r24, Y+5	; 0x05
    83dc:	9e 81       	ldd	r25, Y+6	; 0x06
    83de:	af 81       	ldd	r26, Y+7	; 0x07
    83e0:	b8 85       	ldd	r27, Y+8	; 0x08
    83e2:	88 0e       	add	r8, r24
    83e4:	99 1e       	adc	r9, r25
    83e6:	aa 1e       	adc	r10, r26
    83e8:	bb 1e       	adc	r11, r27
    83ea:	80 92 7e 06 	sts	0x067E, r8
    83ee:	90 92 7f 06 	sts	0x067F, r9
    83f2:	a0 92 80 06 	sts	0x0680, r10
    83f6:	b0 92 81 06 	sts	0x0681, r11
  return true;
    83fa:	81 e0       	ldi	r24, 0x01	; 1
    83fc:	07 c0       	rjmp	.+14     	; 0x840c <_ZN8SdVolume6fatPutEmm+0x140>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    83fe:	80 e0       	ldi	r24, 0x00	; 0
    8400:	05 c0       	rjmp	.+10     	; 0x840c <_ZN8SdVolume6fatPutEmm+0x140>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    8402:	80 e0       	ldi	r24, 0x00	; 0
    8404:	03 c0       	rjmp	.+6      	; 0x840c <_ZN8SdVolume6fatPutEmm+0x140>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    8406:	80 e0       	ldi	r24, 0x00	; 0
    8408:	01 c0       	rjmp	.+2      	; 0x840c <_ZN8SdVolume6fatPutEmm+0x140>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    840a:	81 e0       	ldi	r24, 0x01	; 1
}
    840c:	df 91       	pop	r29
    840e:	cf 91       	pop	r28
    8410:	1f 91       	pop	r17
    8412:	0f 91       	pop	r16
    8414:	ff 90       	pop	r15
    8416:	ef 90       	pop	r14
    8418:	df 90       	pop	r13
    841a:	cf 90       	pop	r12
    841c:	bf 90       	pop	r11
    841e:	af 90       	pop	r10
    8420:	9f 90       	pop	r9
    8422:	8f 90       	pop	r8
    8424:	7f 90       	pop	r7
    8426:	6f 90       	pop	r6
    8428:	5f 90       	pop	r5
    842a:	4f 90       	pop	r4
    842c:	08 95       	ret

0000842e <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    842e:	2f 92       	push	r2
    8430:	3f 92       	push	r3
    8432:	4f 92       	push	r4
    8434:	5f 92       	push	r5
    8436:	6f 92       	push	r6
    8438:	7f 92       	push	r7
    843a:	8f 92       	push	r8
    843c:	9f 92       	push	r9
    843e:	af 92       	push	r10
    8440:	bf 92       	push	r11
    8442:	cf 92       	push	r12
    8444:	df 92       	push	r13
    8446:	ef 92       	push	r14
    8448:	ff 92       	push	r15
    844a:	0f 93       	push	r16
    844c:	1f 93       	push	r17
    844e:	cf 93       	push	r28
    8450:	df 93       	push	r29
    8452:	cd b7       	in	r28, 0x3d	; 61
    8454:	de b7       	in	r29, 0x3e	; 62
    8456:	2f 97       	sbiw	r28, 0x0f	; 15
    8458:	0f b6       	in	r0, 0x3f	; 63
    845a:	f8 94       	cli
    845c:	de bf       	out	0x3e, r29	; 62
    845e:	0f be       	out	0x3f, r0	; 63
    8460:	cd bf       	out	0x3d, r28	; 61
    8462:	1c 01       	movw	r2, r24
    8464:	49 87       	std	Y+9, r20	; 0x09
    8466:	5a 87       	std	Y+10, r21	; 0x0a
    8468:	6b 87       	std	Y+11, r22	; 0x0b
    846a:	7c 87       	std	Y+12, r23	; 0x0c
    846c:	3e 87       	std	Y+14, r19	; 0x0e
    846e:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    8470:	d9 01       	movw	r26, r18
    8472:	4d 90       	ld	r4, X+
    8474:	5d 90       	ld	r5, X+
    8476:	6d 90       	ld	r6, X+
    8478:	7c 90       	ld	r7, X
    847a:	13 97       	sbiw	r26, 0x03	; 3
    847c:	41 14       	cp	r4, r1
    847e:	51 04       	cpc	r5, r1
    8480:	61 04       	cpc	r6, r1
    8482:	71 04       	cpc	r7, r1
    8484:	39 f0       	breq	.+14     	; 0x8494 <_ZN8SdVolume15allocContiguousEmPm+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    8486:	08 94       	sec
    8488:	41 1c       	adc	r4, r1
    848a:	51 1c       	adc	r5, r1
    848c:	61 1c       	adc	r6, r1
    848e:	71 1c       	adc	r7, r1

    // don't save new start location
    setStart = false;
    8490:	1f 86       	std	Y+15, r1	; 0x0f
    8492:	11 c0       	rjmp	.+34     	; 0x84b6 <_ZN8SdVolume15allocContiguousEmPm+0x88>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    8494:	fc 01       	movw	r30, r24
    8496:	40 80       	ld	r4, Z
    8498:	51 80       	ldd	r5, Z+1	; 0x01
    849a:	62 80       	ldd	r6, Z+2	; 0x02
    849c:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    849e:	f1 e0       	ldi	r31, 0x01	; 1
    84a0:	ff 87       	std	Y+15, r31	; 0x0f
    84a2:	29 85       	ldd	r18, Y+9	; 0x09
    84a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    84a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    84a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    84aa:	21 30       	cpi	r18, 0x01	; 1
    84ac:	31 05       	cpc	r19, r1
    84ae:	41 05       	cpc	r20, r1
    84b0:	51 05       	cpc	r21, r1
    84b2:	09 f0       	breq	.+2      	; 0x84b6 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    84b4:	1f 86       	std	Y+15, r1	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    84b6:	f1 01       	movw	r30, r2
    84b8:	81 85       	ldd	r24, Z+9	; 0x09
    84ba:	92 85       	ldd	r25, Z+10	; 0x0a
    84bc:	a3 85       	ldd	r26, Z+11	; 0x0b
    84be:	b4 85       	ldd	r27, Z+12	; 0x0c
    84c0:	9c 01       	movw	r18, r24
    84c2:	ad 01       	movw	r20, r26
    84c4:	2f 5f       	subi	r18, 0xFF	; 255
    84c6:	3f 4f       	sbci	r19, 0xFF	; 255
    84c8:	4f 4f       	sbci	r20, 0xFF	; 255
    84ca:	5f 4f       	sbci	r21, 0xFF	; 255
    84cc:	2d 83       	std	Y+5, r18	; 0x05
    84ce:	3e 83       	std	Y+6, r19	; 0x06
    84d0:	4f 83       	std	Y+7, r20	; 0x07
    84d2:	58 87       	std	Y+8, r21	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    84d4:	00 97       	sbiw	r24, 0x00	; 0
    84d6:	a1 05       	cpc	r26, r1
    84d8:	b1 05       	cpc	r27, r1
    84da:	09 f4       	brne	.+2      	; 0x84de <_ZN8SdVolume15allocContiguousEmPm+0xb0>
    84dc:	ac c0       	rjmp	.+344    	; 0x8636 <_ZN8SdVolume15allocContiguousEmPm+0x208>

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    84de:	53 01       	movw	r10, r6
    84e0:	42 01       	movw	r8, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    84e2:	cc 24       	eor	r12, r12
    84e4:	dd 24       	eor	r13, r13
    84e6:	76 01       	movw	r14, r12
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    84e8:	8d 81       	ldd	r24, Y+5	; 0x05
    84ea:	9e 81       	ldd	r25, Y+6	; 0x06
    84ec:	af 81       	ldd	r26, Y+7	; 0x07
    84ee:	b8 85       	ldd	r27, Y+8	; 0x08
    84f0:	88 15       	cp	r24, r8
    84f2:	99 05       	cpc	r25, r9
    84f4:	aa 05       	cpc	r26, r10
    84f6:	bb 05       	cpc	r27, r11
    84f8:	50 f4       	brcc	.+20     	; 0x850e <_ZN8SdVolume15allocContiguousEmPm+0xe0>
      bgnCluster = endCluster = 2;
    84fa:	88 24       	eor	r8, r8
    84fc:	99 24       	eor	r9, r9
    84fe:	54 01       	movw	r10, r8
    8500:	68 94       	set
    8502:	81 f8       	bld	r8, 1
    8504:	44 24       	eor	r4, r4
    8506:	55 24       	eor	r5, r5
    8508:	32 01       	movw	r6, r4
    850a:	68 94       	set
    850c:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    850e:	c1 01       	movw	r24, r2
    8510:	b5 01       	movw	r22, r10
    8512:	a4 01       	movw	r20, r8
    8514:	9e 01       	movw	r18, r28
    8516:	2f 5f       	subi	r18, 0xFF	; 255
    8518:	3f 4f       	sbci	r19, 0xFF	; 255
    851a:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    851e:	88 23       	and	r24, r24
    8520:	09 f4       	brne	.+2      	; 0x8524 <_ZN8SdVolume15allocContiguousEmPm+0xf6>
    8522:	8b c0       	rjmp	.+278    	; 0x863a <_ZN8SdVolume15allocContiguousEmPm+0x20c>

    if (f != 0) {
    8524:	89 81       	ldd	r24, Y+1	; 0x01
    8526:	9a 81       	ldd	r25, Y+2	; 0x02
    8528:	ab 81       	ldd	r26, Y+3	; 0x03
    852a:	bc 81       	ldd	r27, Y+4	; 0x04
    852c:	00 97       	sbiw	r24, 0x00	; 0
    852e:	a1 05       	cpc	r26, r1
    8530:	b1 05       	cpc	r27, r1
    8532:	41 f0       	breq	.+16     	; 0x8544 <_ZN8SdVolume15allocContiguousEmPm+0x116>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    8534:	24 01       	movw	r4, r8
    8536:	35 01       	movw	r6, r10
    8538:	08 94       	sec
    853a:	41 1c       	adc	r4, r1
    853c:	51 1c       	adc	r5, r1
    853e:	61 1c       	adc	r6, r1
    8540:	71 1c       	adc	r7, r1
    8542:	12 c0       	rjmp	.+36     	; 0x8568 <_ZN8SdVolume15allocContiguousEmPm+0x13a>
    } else if ((endCluster - bgnCluster + 1) == count) {
    8544:	d5 01       	movw	r26, r10
    8546:	c4 01       	movw	r24, r8
    8548:	01 96       	adiw	r24, 0x01	; 1
    854a:	a1 1d       	adc	r26, r1
    854c:	b1 1d       	adc	r27, r1
    854e:	84 19       	sub	r24, r4
    8550:	95 09       	sbc	r25, r5
    8552:	a6 09       	sbc	r26, r6
    8554:	b7 09       	sbc	r27, r7
    8556:	29 85       	ldd	r18, Y+9	; 0x09
    8558:	3a 85       	ldd	r19, Y+10	; 0x0a
    855a:	4b 85       	ldd	r20, Y+11	; 0x0b
    855c:	5c 85       	ldd	r21, Y+12	; 0x0c
    855e:	82 17       	cp	r24, r18
    8560:	93 07       	cpc	r25, r19
    8562:	a4 07       	cpc	r26, r20
    8564:	b5 07       	cpc	r27, r21
    8566:	b1 f0       	breq	.+44     	; 0x8594 <_ZN8SdVolume15allocContiguousEmPm+0x166>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    8568:	08 94       	sec
    856a:	c1 1c       	adc	r12, r1
    856c:	d1 1c       	adc	r13, r1
    856e:	e1 1c       	adc	r14, r1
    8570:	f1 1c       	adc	r15, r1
    8572:	08 94       	sec
    8574:	81 1c       	adc	r8, r1
    8576:	91 1c       	adc	r9, r1
    8578:	a1 1c       	adc	r10, r1
    857a:	b1 1c       	adc	r11, r1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    857c:	f1 01       	movw	r30, r2
    857e:	81 85       	ldd	r24, Z+9	; 0x09
    8580:	92 85       	ldd	r25, Z+10	; 0x0a
    8582:	a3 85       	ldd	r26, Z+11	; 0x0b
    8584:	b4 85       	ldd	r27, Z+12	; 0x0c
    8586:	c8 16       	cp	r12, r24
    8588:	d9 06       	cpc	r13, r25
    858a:	ea 06       	cpc	r14, r26
    858c:	fb 06       	cpc	r15, r27
    858e:	08 f4       	brcc	.+2      	; 0x8592 <_ZN8SdVolume15allocContiguousEmPm+0x164>
    8590:	ab cf       	rjmp	.-170    	; 0x84e8 <_ZN8SdVolume15allocContiguousEmPm+0xba>
    8592:	55 c0       	rjmp	.+170    	; 0x863e <_ZN8SdVolume15allocContiguousEmPm+0x210>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    8594:	c1 01       	movw	r24, r2
    8596:	b5 01       	movw	r22, r10
    8598:	a4 01       	movw	r20, r8
    859a:	0f ef       	ldi	r16, 0xFF	; 255
    859c:	1f ef       	ldi	r17, 0xFF	; 255
    859e:	2f ef       	ldi	r18, 0xFF	; 255
    85a0:	3f e0       	ldi	r19, 0x0F	; 15
    85a2:	0e 94 66 41 	call	0x82cc	; 0x82cc <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    85a6:	88 23       	and	r24, r24
    85a8:	09 f4       	brne	.+2      	; 0x85ac <_ZN8SdVolume15allocContiguousEmPm+0x17e>
    85aa:	4b c0       	rjmp	.+150    	; 0x8642 <_ZN8SdVolume15allocContiguousEmPm+0x214>

  // link clusters
  while (endCluster > bgnCluster) {
    85ac:	48 14       	cp	r4, r8
    85ae:	59 04       	cpc	r5, r9
    85b0:	6a 04       	cpc	r6, r10
    85b2:	7b 04       	cpc	r7, r11
    85b4:	b8 f4       	brcc	.+46     	; 0x85e4 <_ZN8SdVolume15allocContiguousEmPm+0x1b6>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    85b6:	b5 01       	movw	r22, r10
    85b8:	a4 01       	movw	r20, r8
    85ba:	41 50       	subi	r20, 0x01	; 1
    85bc:	50 40       	sbci	r21, 0x00	; 0
    85be:	60 40       	sbci	r22, 0x00	; 0
    85c0:	70 40       	sbci	r23, 0x00	; 0
    85c2:	c1 01       	movw	r24, r2
    85c4:	95 01       	movw	r18, r10
    85c6:	84 01       	movw	r16, r8
    85c8:	0e 94 66 41 	call	0x82cc	; 0x82cc <_ZN8SdVolume6fatPutEmm>
    85cc:	88 23       	and	r24, r24
    85ce:	d9 f1       	breq	.+118    	; 0x8646 <_ZN8SdVolume15allocContiguousEmPm+0x218>
    endCluster--;
    85d0:	08 94       	sec
    85d2:	81 08       	sbc	r8, r1
    85d4:	91 08       	sbc	r9, r1
    85d6:	a1 08       	sbc	r10, r1
    85d8:	b1 08       	sbc	r11, r1
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    85da:	48 14       	cp	r4, r8
    85dc:	59 04       	cpc	r5, r9
    85de:	6a 04       	cpc	r6, r10
    85e0:	7b 04       	cpc	r7, r11
    85e2:	48 f3       	brcs	.-46     	; 0x85b6 <_ZN8SdVolume15allocContiguousEmPm+0x188>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    85e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    85e6:	be 85       	ldd	r27, Y+14	; 0x0e
    85e8:	4d 91       	ld	r20, X+
    85ea:	5d 91       	ld	r21, X+
    85ec:	6d 91       	ld	r22, X+
    85ee:	7c 91       	ld	r23, X
    85f0:	13 97       	sbiw	r26, 0x03	; 3
    85f2:	41 15       	cp	r20, r1
    85f4:	51 05       	cpc	r21, r1
    85f6:	61 05       	cpc	r22, r1
    85f8:	71 05       	cpc	r23, r1
    85fa:	39 f0       	breq	.+14     	; 0x860a <_ZN8SdVolume15allocContiguousEmPm+0x1dc>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    85fc:	c1 01       	movw	r24, r2
    85fe:	93 01       	movw	r18, r6
    8600:	82 01       	movw	r16, r4
    8602:	0e 94 66 41 	call	0x82cc	; 0x82cc <_ZN8SdVolume6fatPutEmm>
    8606:	88 23       	and	r24, r24
    8608:	01 f1       	breq	.+64     	; 0x864a <_ZN8SdVolume15allocContiguousEmPm+0x21c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    860a:	ed 85       	ldd	r30, Y+13	; 0x0d
    860c:	fe 85       	ldd	r31, Y+14	; 0x0e
    860e:	40 82       	st	Z, r4
    8610:	51 82       	std	Z+1, r5	; 0x01
    8612:	62 82       	std	Z+2, r6	; 0x02
    8614:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    8616:	ff 85       	ldd	r31, Y+15	; 0x0f
    8618:	ff 23       	and	r31, r31
    861a:	c9 f0       	breq	.+50     	; 0x864e <_ZN8SdVolume15allocContiguousEmPm+0x220>
    861c:	08 94       	sec
    861e:	41 1c       	adc	r4, r1
    8620:	51 1c       	adc	r5, r1
    8622:	61 1c       	adc	r6, r1
    8624:	71 1c       	adc	r7, r1
    8626:	d1 01       	movw	r26, r2
    8628:	4d 92       	st	X+, r4
    862a:	5d 92       	st	X+, r5
    862c:	6d 92       	st	X+, r6
    862e:	7c 92       	st	X, r7
    8630:	13 97       	sbiw	r26, 0x03	; 3

  return true;
    8632:	81 e0       	ldi	r24, 0x01	; 1
    8634:	0d c0       	rjmp	.+26     	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    8636:	80 e0       	ldi	r24, 0x00	; 0
    8638:	0b c0       	rjmp	.+22     	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    863a:	80 e0       	ldi	r24, 0x00	; 0
    863c:	09 c0       	rjmp	.+18     	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    863e:	80 e0       	ldi	r24, 0x00	; 0
    8640:	07 c0       	rjmp	.+14     	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    8642:	80 e0       	ldi	r24, 0x00	; 0
    8644:	05 c0       	rjmp	.+10     	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    8646:	80 e0       	ldi	r24, 0x00	; 0
    8648:	03 c0       	rjmp	.+6      	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    864a:	80 e0       	ldi	r24, 0x00	; 0
    864c:	01 c0       	rjmp	.+2      	; 0x8650 <_ZN8SdVolume15allocContiguousEmPm+0x222>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    864e:	81 e0       	ldi	r24, 0x01	; 1
}
    8650:	2f 96       	adiw	r28, 0x0f	; 15
    8652:	0f b6       	in	r0, 0x3f	; 63
    8654:	f8 94       	cli
    8656:	de bf       	out	0x3e, r29	; 62
    8658:	0f be       	out	0x3f, r0	; 63
    865a:	cd bf       	out	0x3d, r28	; 61
    865c:	df 91       	pop	r29
    865e:	cf 91       	pop	r28
    8660:	1f 91       	pop	r17
    8662:	0f 91       	pop	r16
    8664:	ff 90       	pop	r15
    8666:	ef 90       	pop	r14
    8668:	df 90       	pop	r13
    866a:	cf 90       	pop	r12
    866c:	bf 90       	pop	r11
    866e:	af 90       	pop	r10
    8670:	9f 90       	pop	r9
    8672:	8f 90       	pop	r8
    8674:	7f 90       	pop	r7
    8676:	6f 90       	pop	r6
    8678:	5f 90       	pop	r5
    867a:	4f 90       	pop	r4
    867c:	3f 90       	pop	r3
    867e:	2f 90       	pop	r2
    8680:	08 95       	ret

00008682 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    8682:	4f 92       	push	r4
    8684:	5f 92       	push	r5
    8686:	6f 92       	push	r6
    8688:	7f 92       	push	r7
    868a:	af 92       	push	r10
    868c:	bf 92       	push	r11
    868e:	cf 92       	push	r12
    8690:	df 92       	push	r13
    8692:	ef 92       	push	r14
    8694:	ff 92       	push	r15
    8696:	0f 93       	push	r16
    8698:	1f 93       	push	r17
    869a:	cf 93       	push	r28
    869c:	df 93       	push	r29
    869e:	00 d0       	rcall	.+0      	; 0x86a0 <_ZN8SdVolume9freeChainEm+0x1e>
    86a0:	0f 92       	push	r0
    86a2:	cd b7       	in	r28, 0x3d	; 61
    86a4:	de b7       	in	r29, 0x3e	; 62
    86a6:	5c 01       	movw	r10, r24
    86a8:	6a 01       	movw	r12, r20
    86aa:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    86ac:	82 e0       	ldi	r24, 0x02	; 2
    86ae:	90 e0       	ldi	r25, 0x00	; 0
    86b0:	a0 e0       	ldi	r26, 0x00	; 0
    86b2:	b0 e0       	ldi	r27, 0x00	; 0
    86b4:	f5 01       	movw	r30, r10
    86b6:	80 83       	st	Z, r24
    86b8:	91 83       	std	Z+1, r25	; 0x01
    86ba:	a2 83       	std	Z+2, r26	; 0x02
    86bc:	b3 83       	std	Z+3, r27	; 0x03
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    86be:	0f 2e       	mov	r0, r31
    86c0:	f8 ef       	ldi	r31, 0xF8	; 248
    86c2:	4f 2e       	mov	r4, r31
    86c4:	ff ef       	ldi	r31, 0xFF	; 255
    86c6:	5f 2e       	mov	r5, r31
    86c8:	ff ef       	ldi	r31, 0xFF	; 255
    86ca:	6f 2e       	mov	r6, r31
    86cc:	ff e0       	ldi	r31, 0x0F	; 15
    86ce:	7f 2e       	mov	r7, r31
    86d0:	f0 2d       	mov	r31, r0

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    86d2:	c5 01       	movw	r24, r10
    86d4:	b7 01       	movw	r22, r14
    86d6:	a6 01       	movw	r20, r12
    86d8:	9e 01       	movw	r18, r28
    86da:	2f 5f       	subi	r18, 0xFF	; 255
    86dc:	3f 4f       	sbci	r19, 0xFF	; 255
    86de:	0e 94 64 40 	call	0x80c8	; 0x80c8 <_ZNK8SdVolume6fatGetEmPm>
    86e2:	88 23       	and	r24, r24
    86e4:	01 f1       	breq	.+64     	; 0x8726 <_ZN8SdVolume9freeChainEm+0xa4>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    86e6:	c5 01       	movw	r24, r10
    86e8:	b7 01       	movw	r22, r14
    86ea:	a6 01       	movw	r20, r12
    86ec:	00 e0       	ldi	r16, 0x00	; 0
    86ee:	10 e0       	ldi	r17, 0x00	; 0
    86f0:	98 01       	movw	r18, r16
    86f2:	0e 94 66 41 	call	0x82cc	; 0x82cc <_ZN8SdVolume6fatPutEmm>
    86f6:	88 23       	and	r24, r24
    86f8:	c1 f0       	breq	.+48     	; 0x872a <_ZN8SdVolume9freeChainEm+0xa8>

    cluster = next;
    86fa:	c9 80       	ldd	r12, Y+1	; 0x01
    86fc:	da 80       	ldd	r13, Y+2	; 0x02
    86fe:	eb 80       	ldd	r14, Y+3	; 0x03
    8700:	fc 80       	ldd	r15, Y+4	; 0x04
    8702:	f5 01       	movw	r30, r10
    8704:	87 89       	ldd	r24, Z+23	; 0x17
    8706:	80 31       	cpi	r24, 0x10	; 16
    8708:	29 f4       	brne	.+10     	; 0x8714 <_ZN8SdVolume9freeChainEm+0x92>
    870a:	88 ef       	ldi	r24, 0xF8	; 248
    870c:	9f ef       	ldi	r25, 0xFF	; 255
    870e:	a0 e0       	ldi	r26, 0x00	; 0
    8710:	b0 e0       	ldi	r27, 0x00	; 0
    8712:	02 c0       	rjmp	.+4      	; 0x8718 <_ZN8SdVolume9freeChainEm+0x96>
    8714:	d3 01       	movw	r26, r6
    8716:	c2 01       	movw	r24, r4
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    8718:	c8 16       	cp	r12, r24
    871a:	d9 06       	cpc	r13, r25
    871c:	ea 06       	cpc	r14, r26
    871e:	fb 06       	cpc	r15, r27
    8720:	c0 f2       	brcs	.-80     	; 0x86d2 <_ZN8SdVolume9freeChainEm+0x50>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    8722:	81 e0       	ldi	r24, 0x01	; 1
    8724:	03 c0       	rjmp	.+6      	; 0x872c <_ZN8SdVolume9freeChainEm+0xaa>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    8726:	80 e0       	ldi	r24, 0x00	; 0
    8728:	01 c0       	rjmp	.+2      	; 0x872c <_ZN8SdVolume9freeChainEm+0xaa>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    872a:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    872c:	0f 90       	pop	r0
    872e:	0f 90       	pop	r0
    8730:	0f 90       	pop	r0
    8732:	0f 90       	pop	r0
    8734:	df 91       	pop	r29
    8736:	cf 91       	pop	r28
    8738:	1f 91       	pop	r17
    873a:	0f 91       	pop	r16
    873c:	ff 90       	pop	r15
    873e:	ef 90       	pop	r14
    8740:	df 90       	pop	r13
    8742:	cf 90       	pop	r12
    8744:	bf 90       	pop	r11
    8746:	af 90       	pop	r10
    8748:	7f 90       	pop	r7
    874a:	6f 90       	pop	r6
    874c:	5f 90       	pop	r5
    874e:	4f 90       	pop	r4
    8750:	08 95       	ret

00008752 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    8752:	2f 92       	push	r2
    8754:	3f 92       	push	r3
    8756:	4f 92       	push	r4
    8758:	5f 92       	push	r5
    875a:	6f 92       	push	r6
    875c:	7f 92       	push	r7
    875e:	8f 92       	push	r8
    8760:	9f 92       	push	r9
    8762:	af 92       	push	r10
    8764:	bf 92       	push	r11
    8766:	cf 92       	push	r12
    8768:	df 92       	push	r13
    876a:	ef 92       	push	r14
    876c:	ff 92       	push	r15
    876e:	0f 93       	push	r16
    8770:	1f 93       	push	r17
    8772:	cf 93       	push	r28
    8774:	df 93       	push	r29
    8776:	8c 01       	movw	r16, r24
    8778:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    877a:	70 93 84 06 	sts	0x0684, r23
    877e:	60 93 83 06 	sts	0x0683, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    8782:	44 23       	and	r20, r20
    8784:	81 f1       	breq	.+96     	; 0x87e6 <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    if (part > 4)return false;
    8786:	45 30       	cpi	r20, 0x05	; 5
    8788:	08 f0       	brcs	.+2      	; 0x878c <_ZN8SdVolume4initEP7Sd2Cardh+0x3a>
    878a:	19 c1       	rjmp	.+562    	; 0x89be <_ZN8SdVolume4initEP7Sd2Cardh+0x26c>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    878c:	60 e0       	ldi	r22, 0x00	; 0
    878e:	70 e0       	ldi	r23, 0x00	; 0
    8790:	cb 01       	movw	r24, r22
    8792:	40 e0       	ldi	r20, 0x00	; 0
    8794:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    8798:	88 23       	and	r24, r24
    879a:	09 f4       	brne	.+2      	; 0x879e <_ZN8SdVolume4initEP7Sd2Cardh+0x4c>
    879c:	12 c1       	rjmp	.+548    	; 0x89c2 <_ZN8SdVolume4initEP7Sd2Cardh+0x270>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    879e:	d0 e0       	ldi	r29, 0x00	; 0
    87a0:	c2 95       	swap	r28
    87a2:	d2 95       	swap	r29
    87a4:	d0 7f       	andi	r29, 0xF0	; 240
    87a6:	dc 27       	eor	r29, r28
    87a8:	c0 7f       	andi	r28, 0xF0	; 240
    87aa:	dc 27       	eor	r29, r28
    87ac:	cd 5c       	subi	r28, 0xCD	; 205
    87ae:	d7 4f       	sbci	r29, 0xF7	; 247
    if ((p->boot & 0X7F) !=0  ||
    87b0:	88 81       	ld	r24, Y
    87b2:	90 e0       	ldi	r25, 0x00	; 0
    87b4:	8f 77       	andi	r24, 0x7F	; 127
    87b6:	90 70       	andi	r25, 0x00	; 0
    87b8:	00 97       	sbiw	r24, 0x00	; 0
    87ba:	09 f0       	breq	.+2      	; 0x87be <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    87bc:	04 c1       	rjmp	.+520    	; 0x89c6 <_ZN8SdVolume4initEP7Sd2Cardh+0x274>
    87be:	8c 85       	ldd	r24, Y+12	; 0x0c
    87c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    87c2:	ae 85       	ldd	r26, Y+14	; 0x0e
    87c4:	bf 85       	ldd	r27, Y+15	; 0x0f
    87c6:	84 36       	cpi	r24, 0x64	; 100
    87c8:	91 05       	cpc	r25, r1
    87ca:	a1 05       	cpc	r26, r1
    87cc:	b1 05       	cpc	r27, r1
    87ce:	08 f4       	brcc	.+2      	; 0x87d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    87d0:	fc c0       	rjmp	.+504    	; 0x89ca <_ZN8SdVolume4initEP7Sd2Cardh+0x278>
    87d2:	c8 84       	ldd	r12, Y+8	; 0x08
    87d4:	d9 84       	ldd	r13, Y+9	; 0x09
    87d6:	ea 84       	ldd	r14, Y+10	; 0x0a
    87d8:	fb 84       	ldd	r15, Y+11	; 0x0b
    87da:	c1 14       	cp	r12, r1
    87dc:	d1 04       	cpc	r13, r1
    87de:	e1 04       	cpc	r14, r1
    87e0:	f1 04       	cpc	r15, r1
    87e2:	21 f4       	brne	.+8      	; 0x87ec <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
    87e4:	f4 c0       	rjmp	.+488    	; 0x89ce <_ZN8SdVolume4initEP7Sd2Cardh+0x27c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    87e6:	cc 24       	eor	r12, r12
    87e8:	dd 24       	eor	r13, r13
    87ea:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    87ec:	c7 01       	movw	r24, r14
    87ee:	b6 01       	movw	r22, r12
    87f0:	40 e0       	ldi	r20, 0x00	; 0
    87f2:	0e 94 00 40 	call	0x8000	; 0x8000 <_ZN8SdVolume13cacheRawBlockEmh>
    87f6:	88 23       	and	r24, r24
    87f8:	09 f4       	brne	.+2      	; 0x87fc <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    87fa:	eb c0       	rjmp	.+470    	; 0x89d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x280>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    87fc:	80 91 90 06 	lds	r24, 0x0690
    8800:	90 91 91 06 	lds	r25, 0x0691
    8804:	22 e0       	ldi	r18, 0x02	; 2
    8806:	80 30       	cpi	r24, 0x00	; 0
    8808:	92 07       	cpc	r25, r18
    880a:	09 f0       	breq	.+2      	; 0x880e <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    880c:	e4 c0       	rjmp	.+456    	; 0x89d6 <_ZN8SdVolume4initEP7Sd2Cardh+0x284>
    880e:	30 91 95 06 	lds	r19, 0x0695
    8812:	33 23       	and	r19, r19
    8814:	09 f4       	brne	.+2      	; 0x8818 <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    8816:	e1 c0       	rjmp	.+450    	; 0x89da <_ZN8SdVolume4initEP7Sd2Cardh+0x288>
    8818:	80 91 93 06 	lds	r24, 0x0693
    881c:	90 91 94 06 	lds	r25, 0x0694
    8820:	00 97       	sbiw	r24, 0x00	; 0
    8822:	09 f4       	brne	.+2      	; 0x8826 <_ZN8SdVolume4initEP7Sd2Cardh+0xd4>
    8824:	dc c0       	rjmp	.+440    	; 0x89de <_ZN8SdVolume4initEP7Sd2Cardh+0x28c>
    8826:	20 91 92 06 	lds	r18, 0x0692
    882a:	22 23       	and	r18, r18
    882c:	09 f4       	brne	.+2      	; 0x8830 <_ZN8SdVolume4initEP7Sd2Cardh+0xde>
    882e:	d9 c0       	rjmp	.+434    	; 0x89e2 <_ZN8SdVolume4initEP7Sd2Cardh+0x290>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    8830:	f8 01       	movw	r30, r16
    8832:	32 8b       	std	Z+18, r19	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    8834:	24 83       	std	Z+4, r18	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    8836:	15 86       	std	Z+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    8838:	30 e0       	ldi	r19, 0x00	; 0
    883a:	41 e0       	ldi	r20, 0x01	; 1
    883c:	50 e0       	ldi	r21, 0x00	; 0
    883e:	07 c0       	rjmp	.+14     	; 0x884e <_ZN8SdVolume4initEP7Sd2Cardh+0xfc>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    8840:	86 2f       	mov	r24, r22
    8842:	8f 5f       	subi	r24, 0xFF	; 255
    8844:	f8 01       	movw	r30, r16
    8846:	85 87       	std	Z+13, r24	; 0x0d
    8848:	68 30       	cpi	r22, 0x08	; 8
    884a:	08 f0       	brcs	.+2      	; 0x884e <_ZN8SdVolume4initEP7Sd2Cardh+0xfc>
    884c:	cc c0       	rjmp	.+408    	; 0x89e6 <_ZN8SdVolume4initEP7Sd2Cardh+0x294>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    884e:	f8 01       	movw	r30, r16
    8850:	65 85       	ldd	r22, Z+13	; 0x0d
    8852:	c6 2f       	mov	r28, r22
    8854:	ca 01       	movw	r24, r20
    8856:	06 2e       	mov	r0, r22
    8858:	02 c0       	rjmp	.+4      	; 0x885e <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
    885a:	88 0f       	add	r24, r24
    885c:	99 1f       	adc	r25, r25
    885e:	0a 94       	dec	r0
    8860:	e2 f7       	brpl	.-8      	; 0x885a <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    8862:	28 17       	cp	r18, r24
    8864:	39 07       	cpc	r19, r25
    8866:	61 f7       	brne	.-40     	; 0x8840 <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    8868:	80 91 9b 06 	lds	r24, 0x069B
    886c:	90 91 9c 06 	lds	r25, 0x069C
    8870:	00 97       	sbiw	r24, 0x00	; 0
    8872:	21 f0       	breq	.+8      	; 0x887c <_ZN8SdVolume4initEP7Sd2Cardh+0x12a>
    8874:	4c 01       	movw	r8, r24
    8876:	aa 24       	eor	r10, r10
    8878:	bb 24       	eor	r11, r11
    887a:	08 c0       	rjmp	.+16     	; 0x888c <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    887c:	80 90 a9 06 	lds	r8, 0x06A9
    8880:	90 90 aa 06 	lds	r9, 0x06AA
    8884:	a0 90 ab 06 	lds	r10, 0x06AB
    8888:	b0 90 ac 06 	lds	r11, 0x06AC
    888c:	f8 01       	movw	r30, r16
    888e:	85 82       	std	Z+5, r8	; 0x05
    8890:	96 82       	std	Z+6, r9	; 0x06
    8892:	a7 82       	std	Z+7, r10	; 0x07
    8894:	b0 86       	std	Z+8, r11	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    8896:	80 91 93 06 	lds	r24, 0x0693
    889a:	90 91 94 06 	lds	r25, 0x0694
    889e:	a0 e0       	ldi	r26, 0x00	; 0
    88a0:	b0 e0       	ldi	r27, 0x00	; 0
    88a2:	26 01       	movw	r4, r12
    88a4:	37 01       	movw	r6, r14
    88a6:	48 0e       	add	r4, r24
    88a8:	59 1e       	adc	r5, r25
    88aa:	6a 1e       	adc	r6, r26
    88ac:	7b 1e       	adc	r7, r27
    88ae:	43 8a       	std	Z+19, r4	; 0x13
    88b0:	54 8a       	std	Z+20, r5	; 0x14
    88b2:	65 8a       	std	Z+21, r6	; 0x15
    88b4:	76 8a       	std	Z+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    88b6:	20 90 96 06 	lds	r2, 0x0696
    88ba:	30 90 97 06 	lds	r3, 0x0697
    88be:	31 8e       	std	Z+25, r3	; 0x19
    88c0:	20 8e       	std	Z+24, r2	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    88c2:	20 91 95 06 	lds	r18, 0x0695
    88c6:	30 e0       	ldi	r19, 0x00	; 0
    88c8:	40 e0       	ldi	r20, 0x00	; 0
    88ca:	50 e0       	ldi	r21, 0x00	; 0
    88cc:	c5 01       	movw	r24, r10
    88ce:	b4 01       	movw	r22, r8
    88d0:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    88d4:	dc 01       	movw	r26, r24
    88d6:	cb 01       	movw	r24, r22
    88d8:	ac 01       	movw	r20, r24
    88da:	bd 01       	movw	r22, r26
    88dc:	44 0d       	add	r20, r4
    88de:	55 1d       	adc	r21, r5
    88e0:	66 1d       	adc	r22, r6
    88e2:	77 1d       	adc	r23, r7
    88e4:	f8 01       	movw	r30, r16
    88e6:	42 8f       	std	Z+26, r20	; 0x1a
    88e8:	53 8f       	std	Z+27, r21	; 0x1b
    88ea:	64 8f       	std	Z+28, r22	; 0x1c
    88ec:	75 8f       	std	Z+29, r23	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    88ee:	c1 01       	movw	r24, r2
    88f0:	88 0f       	add	r24, r24
    88f2:	99 1f       	adc	r25, r25
    88f4:	82 95       	swap	r24
    88f6:	92 95       	swap	r25
    88f8:	90 7f       	andi	r25, 0xF0	; 240
    88fa:	98 27       	eor	r25, r24
    88fc:	80 7f       	andi	r24, 0xF0	; 240
    88fe:	98 27       	eor	r25, r24
    8900:	81 50       	subi	r24, 0x01	; 1
    8902:	9e 4f       	sbci	r25, 0xFE	; 254
    8904:	89 2f       	mov	r24, r25
    8906:	99 27       	eor	r25, r25
    8908:	86 95       	lsr	r24
    890a:	a0 e0       	ldi	r26, 0x00	; 0
    890c:	b0 e0       	ldi	r27, 0x00	; 0
    890e:	48 0f       	add	r20, r24
    8910:	59 1f       	adc	r21, r25
    8912:	6a 1f       	adc	r22, r26
    8914:	7b 1f       	adc	r23, r27
    8916:	46 87       	std	Z+14, r20	; 0x0e
    8918:	57 87       	std	Z+15, r21	; 0x0f
    891a:	60 8b       	std	Z+16, r22	; 0x10
    891c:	71 8b       	std	Z+17, r23	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    891e:	80 91 98 06 	lds	r24, 0x0698
    8922:	90 91 99 06 	lds	r25, 0x0699
    8926:	00 97       	sbiw	r24, 0x00	; 0
    8928:	19 f0       	breq	.+6      	; 0x8930 <_ZN8SdVolume4initEP7Sd2Cardh+0x1de>
    892a:	a0 e0       	ldi	r26, 0x00	; 0
    892c:	b0 e0       	ldi	r27, 0x00	; 0
    892e:	08 c0       	rjmp	.+16     	; 0x8940 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ee>
    8930:	80 91 a5 06 	lds	r24, 0x06A5
    8934:	90 91 a6 06 	lds	r25, 0x06A6
    8938:	a0 91 a7 06 	lds	r26, 0x06A7
    893c:	b0 91 a8 06 	lds	r27, 0x06A8
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    8940:	c4 1a       	sub	r12, r20
    8942:	d5 0a       	sbc	r13, r21
    8944:	e6 0a       	sbc	r14, r22
    8946:	f7 0a       	sbc	r15, r23
    8948:	8c 0d       	add	r24, r12
    894a:	9d 1d       	adc	r25, r13
    894c:	ae 1d       	adc	r26, r14
    894e:	bf 1d       	adc	r27, r15

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    8950:	04 c0       	rjmp	.+8      	; 0x895a <_ZN8SdVolume4initEP7Sd2Cardh+0x208>
    8952:	b6 95       	lsr	r27
    8954:	a7 95       	ror	r26
    8956:	97 95       	ror	r25
    8958:	87 95       	ror	r24
    895a:	ca 95       	dec	r28
    895c:	d2 f7       	brpl	.-12     	; 0x8952 <_ZN8SdVolume4initEP7Sd2Cardh+0x200>
    895e:	f8 01       	movw	r30, r16
    8960:	81 87       	std	Z+9, r24	; 0x09
    8962:	92 87       	std	Z+10, r25	; 0x0a
    8964:	a3 87       	std	Z+11, r26	; 0x0b
    8966:	b4 87       	std	Z+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    8968:	85 3f       	cpi	r24, 0xF5	; 245
    896a:	ff e0       	ldi	r31, 0x0F	; 15
    896c:	9f 07       	cpc	r25, r31
    896e:	f0 e0       	ldi	r31, 0x00	; 0
    8970:	af 07       	cpc	r26, r31
    8972:	f0 e0       	ldi	r31, 0x00	; 0
    8974:	bf 07       	cpc	r27, r31
    8976:	28 f4       	brcc	.+10     	; 0x8982 <_ZN8SdVolume4initEP7Sd2Cardh+0x230>
    fatType_ = 12;
    8978:	8c e0       	ldi	r24, 0x0C	; 12
    897a:	f8 01       	movw	r30, r16
    897c:	87 8b       	std	Z+23, r24	; 0x17
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    897e:	81 e0       	ldi	r24, 0x01	; 1
    8980:	33 c0       	rjmp	.+102    	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    8982:	85 3f       	cpi	r24, 0xF5	; 245
    8984:	ff ef       	ldi	r31, 0xFF	; 255
    8986:	9f 07       	cpc	r25, r31
    8988:	f0 e0       	ldi	r31, 0x00	; 0
    898a:	af 07       	cpc	r26, r31
    898c:	f0 e0       	ldi	r31, 0x00	; 0
    898e:	bf 07       	cpc	r27, r31
    8990:	28 f4       	brcc	.+10     	; 0x899c <_ZN8SdVolume4initEP7Sd2Cardh+0x24a>
    fatType_ = 16;
    8992:	80 e1       	ldi	r24, 0x10	; 16
    8994:	f8 01       	movw	r30, r16
    8996:	87 8b       	std	Z+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    8998:	81 e0       	ldi	r24, 0x01	; 1
    899a:	26 c0       	rjmp	.+76     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    899c:	80 91 b1 06 	lds	r24, 0x06B1
    89a0:	90 91 b2 06 	lds	r25, 0x06B2
    89a4:	a0 91 b3 06 	lds	r26, 0x06B3
    89a8:	b0 91 b4 06 	lds	r27, 0x06B4
    89ac:	f8 01       	movw	r30, r16
    89ae:	82 8f       	std	Z+26, r24	; 0x1a
    89b0:	93 8f       	std	Z+27, r25	; 0x1b
    89b2:	a4 8f       	std	Z+28, r26	; 0x1c
    89b4:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    89b6:	80 e2       	ldi	r24, 0x20	; 32
    89b8:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    89ba:	81 e0       	ldi	r24, 0x01	; 1
    89bc:	15 c0       	rjmp	.+42     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    89be:	80 e0       	ldi	r24, 0x00	; 0
    89c0:	13 c0       	rjmp	.+38     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    89c2:	80 e0       	ldi	r24, 0x00	; 0
    89c4:	11 c0       	rjmp	.+34     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
      p->firstSector == 0) {
      // not a valid partition
      return false;
    89c6:	80 e0       	ldi	r24, 0x00	; 0
    89c8:	0f c0       	rjmp	.+30     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    89ca:	80 e0       	ldi	r24, 0x00	; 0
    89cc:	0d c0       	rjmp	.+26     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    89ce:	80 e0       	ldi	r24, 0x00	; 0
    89d0:	0b c0       	rjmp	.+22     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    89d2:	80 e0       	ldi	r24, 0x00	; 0
    89d4:	09 c0       	rjmp	.+18     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
    89d6:	80 e0       	ldi	r24, 0x00	; 0
    89d8:	07 c0       	rjmp	.+14     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    89da:	80 e0       	ldi	r24, 0x00	; 0
    89dc:	05 c0       	rjmp	.+10     	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    89de:	80 e0       	ldi	r24, 0x00	; 0
    89e0:	03 c0       	rjmp	.+6      	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
    89e2:	80 e0       	ldi	r24, 0x00	; 0
    89e4:	01 c0       	rjmp	.+2      	; 0x89e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    89e6:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    89e8:	df 91       	pop	r29
    89ea:	cf 91       	pop	r28
    89ec:	1f 91       	pop	r17
    89ee:	0f 91       	pop	r16
    89f0:	ff 90       	pop	r15
    89f2:	ef 90       	pop	r14
    89f4:	df 90       	pop	r13
    89f6:	cf 90       	pop	r12
    89f8:	bf 90       	pop	r11
    89fa:	af 90       	pop	r10
    89fc:	9f 90       	pop	r9
    89fe:	8f 90       	pop	r8
    8a00:	7f 90       	pop	r7
    8a02:	6f 90       	pop	r6
    8a04:	5f 90       	pop	r5
    8a06:	4f 90       	pop	r4
    8a08:	3f 90       	pop	r3
    8a0a:	2f 90       	pop	r2
    8a0c:	08 95       	ret

00008a0e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    8a0e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    8a10:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    8a12:	f8 94       	cli
  if (!initialized) {
    8a14:	80 91 88 08 	lds	r24, 0x0888
    8a18:	88 23       	and	r24, r24
    8a1a:	49 f5       	brne	.+82     	; 0x8a6e <_ZN8SPIClass5beginEv+0x60>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    8a1c:	e6 ea       	ldi	r30, 0xA6	; 166
    8a1e:	f1 e0       	ldi	r31, 0x01	; 1
    8a20:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    8a22:	e0 e6       	ldi	r30, 0x60	; 96
    8a24:	f1 e0       	ldi	r31, 0x01	; 1
    8a26:	24 91       	lpm	r18, Z
    volatile uint8_t *reg = portModeRegister(port);
    8a28:	e8 2f       	mov	r30, r24
    8a2a:	f0 e0       	ldi	r31, 0x00	; 0
    8a2c:	ee 0f       	add	r30, r30
    8a2e:	ff 1f       	adc	r31, r31
    8a30:	e5 51       	subi	r30, 0x15	; 21
    8a32:	fe 4f       	sbci	r31, 0xFE	; 254
    8a34:	85 91       	lpm	r24, Z+
    8a36:	94 91       	lpm	r25, Z
    8a38:	a8 2f       	mov	r26, r24
    8a3a:	b9 2f       	mov	r27, r25

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    8a3c:	ec 91       	ld	r30, X
    8a3e:	2e 23       	and	r18, r30
    8a40:	21 f4       	brne	.+8      	; 0x8a4a <_ZN8SPIClass5beginEv+0x3c>
      digitalWrite(SS, HIGH);
    8a42:	85 e3       	ldi	r24, 0x35	; 53
    8a44:	61 e0       	ldi	r22, 0x01	; 1
    8a46:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    8a4a:	85 e3       	ldi	r24, 0x35	; 53
    8a4c:	61 e0       	ldi	r22, 0x01	; 1
    8a4e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    8a52:	8c b5       	in	r24, 0x2c	; 44
    8a54:	80 61       	ori	r24, 0x10	; 16
    8a56:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    8a58:	8c b5       	in	r24, 0x2c	; 44
    8a5a:	80 64       	ori	r24, 0x40	; 64
    8a5c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    8a5e:	84 e3       	ldi	r24, 0x34	; 52
    8a60:	61 e0       	ldi	r22, 0x01	; 1
    8a62:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>
    pinMode(MOSI, OUTPUT);
    8a66:	83 e3       	ldi	r24, 0x33	; 51
    8a68:	61 e0       	ldi	r22, 0x01	; 1
    8a6a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>
  }
  initialized++; // reference count
    8a6e:	80 91 88 08 	lds	r24, 0x0888
    8a72:	8f 5f       	subi	r24, 0xFF	; 255
    8a74:	80 93 88 08 	sts	0x0888, r24
  SREG = sreg;
    8a78:	cf bf       	out	0x3f, r28	; 63
}
    8a7a:	cf 91       	pop	r28
    8a7c:	08 95       	ret

00008a7e <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    8a7e:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    8a80:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    8a82:	80 91 88 08 	lds	r24, 0x0888
    8a86:	88 23       	and	r24, r24
    8a88:	29 f0       	breq	.+10     	; 0x8a94 <_ZN8SPIClass3endEv+0x16>
    initialized--;
    8a8a:	81 50       	subi	r24, 0x01	; 1
    8a8c:	80 93 88 08 	sts	0x0888, r24
  // If there are no more references disable SPI
  if (!initialized) {
    8a90:	88 23       	and	r24, r24
    8a92:	29 f4       	brne	.+10     	; 0x8a9e <_ZN8SPIClass3endEv+0x20>
    SPCR &= ~_BV(SPE);
    8a94:	8c b5       	in	r24, 0x2c	; 44
    8a96:	8f 7b       	andi	r24, 0xBF	; 191
    8a98:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    8a9a:	10 92 87 08 	sts	0x0887, r1
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    8a9e:	9f bf       	out	0x3f, r25	; 63
}
    8aa0:	08 95       	ret

00008aa2 <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    8aa2:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    8aa4:	f8 94       	cli
  switch (interruptNumber) {
    8aa6:	83 30       	cpi	r24, 0x03	; 3
    8aa8:	a1 f0       	breq	.+40     	; 0x8ad2 <_ZN8SPIClass14usingInterruptEh+0x30>
    8aaa:	84 30       	cpi	r24, 0x04	; 4
    8aac:	28 f4       	brcc	.+10     	; 0x8ab8 <_ZN8SPIClass14usingInterruptEh+0x16>
    8aae:	81 30       	cpi	r24, 0x01	; 1
    8ab0:	f9 f0       	breq	.+62     	; 0x8af0 <_ZN8SPIClass14usingInterruptEh+0x4e>
    8ab2:	82 30       	cpi	r24, 0x02	; 2
    8ab4:	60 f4       	brcc	.+24     	; 0x8ace <_ZN8SPIClass14usingInterruptEh+0x2c>
    8ab6:	09 c0       	rjmp	.+18     	; 0x8aca <_ZN8SPIClass14usingInterruptEh+0x28>
    8ab8:	85 30       	cpi	r24, 0x05	; 5
    8aba:	79 f0       	breq	.+30     	; 0x8ada <_ZN8SPIClass14usingInterruptEh+0x38>
    8abc:	85 30       	cpi	r24, 0x05	; 5
    8abe:	58 f0       	brcs	.+22     	; 0x8ad6 <_ZN8SPIClass14usingInterruptEh+0x34>
    8ac0:	86 30       	cpi	r24, 0x06	; 6
    8ac2:	69 f0       	breq	.+26     	; 0x8ade <_ZN8SPIClass14usingInterruptEh+0x3c>
    8ac4:	87 30       	cpi	r24, 0x07	; 7
    8ac6:	79 f4       	brne	.+30     	; 0x8ae6 <_ZN8SPIClass14usingInterruptEh+0x44>
    8ac8:	0c c0       	rjmp	.+24     	; 0x8ae2 <_ZN8SPIClass14usingInterruptEh+0x40>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    8aca:	80 e1       	ldi	r24, 0x10	; 16
    8acc:	12 c0       	rjmp	.+36     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
  #endif
  #ifdef SPI_INT2_MASK
  case 2: mask = SPI_INT2_MASK; break;
    8ace:	81 e0       	ldi	r24, 0x01	; 1
    8ad0:	10 c0       	rjmp	.+32     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT3_MASK
  case 3: mask = SPI_INT3_MASK; break;
    8ad2:	82 e0       	ldi	r24, 0x02	; 2
    8ad4:	0e c0       	rjmp	.+28     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT4_MASK
  case 4: mask = SPI_INT4_MASK; break;
    8ad6:	84 e0       	ldi	r24, 0x04	; 4
    8ad8:	0c c0       	rjmp	.+24     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT5_MASK
  case 5: mask = SPI_INT5_MASK; break;
    8ada:	88 e0       	ldi	r24, 0x08	; 8
    8adc:	0a c0       	rjmp	.+20     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT6_MASK
  case 6: mask = SPI_INT6_MASK; break;
    8ade:	80 e4       	ldi	r24, 0x40	; 64
    8ae0:	08 c0       	rjmp	.+16     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
    8ae2:	80 e8       	ldi	r24, 0x80	; 128
    8ae4:	06 c0       	rjmp	.+12     	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  #endif
  default:
    interruptMode = 2;
    8ae6:	82 e0       	ldi	r24, 0x02	; 2
    8ae8:	80 93 87 08 	sts	0x0887, r24
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    8aec:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    8aee:	01 c0       	rjmp	.+2      	; 0x8af2 <_ZN8SPIClass14usingInterruptEh+0x50>
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    8af0:	80 e2       	ldi	r24, 0x20	; 32
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    8af2:	20 91 86 08 	lds	r18, 0x0886
    8af6:	82 2b       	or	r24, r18
    8af8:	80 93 86 08 	sts	0x0886, r24
  if (!interruptMode)
    8afc:	80 91 87 08 	lds	r24, 0x0887
    8b00:	88 23       	and	r24, r24
    8b02:	19 f4       	brne	.+6      	; 0x8b0a <_ZN8SPIClass14usingInterruptEh+0x68>
    interruptMode = 1;
    8b04:	81 e0       	ldi	r24, 0x01	; 1
    8b06:	80 93 87 08 	sts	0x0887, r24
  SREG = sreg;
    8b0a:	9f bf       	out	0x3f, r25	; 63
}
    8b0c:	08 95       	ret

00008b0e <_ZN8SPIClass17notUsingInterruptEh>:

void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    8b0e:	90 91 87 08 	lds	r25, 0x0887
    8b12:	92 30       	cpi	r25, 0x02	; 2
    8b14:	79 f1       	breq	.+94     	; 0x8b74 <_ZN8SPIClass17notUsingInterruptEh+0x66>
    return;
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    8b16:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    8b18:	f8 94       	cli
  switch (interruptNumber) {
    8b1a:	83 30       	cpi	r24, 0x03	; 3
    8b1c:	a9 f0       	breq	.+42     	; 0x8b48 <_ZN8SPIClass17notUsingInterruptEh+0x3a>
    8b1e:	84 30       	cpi	r24, 0x04	; 4
    8b20:	28 f4       	brcc	.+10     	; 0x8b2c <_ZN8SPIClass17notUsingInterruptEh+0x1e>
    8b22:	81 30       	cpi	r24, 0x01	; 1
    8b24:	69 f0       	breq	.+26     	; 0x8b40 <_ZN8SPIClass17notUsingInterruptEh+0x32>
    8b26:	82 30       	cpi	r24, 0x02	; 2
    8b28:	68 f4       	brcc	.+26     	; 0x8b44 <_ZN8SPIClass17notUsingInterruptEh+0x36>
    8b2a:	18 c0       	rjmp	.+48     	; 0x8b5c <_ZN8SPIClass17notUsingInterruptEh+0x4e>
    8b2c:	85 30       	cpi	r24, 0x05	; 5
    8b2e:	81 f0       	breq	.+32     	; 0x8b50 <_ZN8SPIClass17notUsingInterruptEh+0x42>
    8b30:	85 30       	cpi	r24, 0x05	; 5
    8b32:	60 f0       	brcs	.+24     	; 0x8b4c <_ZN8SPIClass17notUsingInterruptEh+0x3e>
    8b34:	86 30       	cpi	r24, 0x06	; 6
    8b36:	71 f0       	breq	.+28     	; 0x8b54 <_ZN8SPIClass17notUsingInterruptEh+0x46>
    8b38:	87 30       	cpi	r24, 0x07	; 7
    8b3a:	71 f0       	breq	.+28     	; 0x8b58 <_ZN8SPIClass17notUsingInterruptEh+0x4a>
void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    return;
  uint8_t mask = 0;
    8b3c:	80 e0       	ldi	r24, 0x00	; 0
    8b3e:	0f c0       	rjmp	.+30     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    8b40:	80 e2       	ldi	r24, 0x20	; 32
    8b42:	0d c0       	rjmp	.+26     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT2_MASK
  case 2: mask = SPI_INT2_MASK; break;
    8b44:	81 e0       	ldi	r24, 0x01	; 1
    8b46:	0b c0       	rjmp	.+22     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT3_MASK
  case 3: mask = SPI_INT3_MASK; break;
    8b48:	82 e0       	ldi	r24, 0x02	; 2
    8b4a:	09 c0       	rjmp	.+18     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT4_MASK
  case 4: mask = SPI_INT4_MASK; break;
    8b4c:	84 e0       	ldi	r24, 0x04	; 4
    8b4e:	07 c0       	rjmp	.+14     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT5_MASK
  case 5: mask = SPI_INT5_MASK; break;
    8b50:	88 e0       	ldi	r24, 0x08	; 8
    8b52:	05 c0       	rjmp	.+10     	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT6_MASK
  case 6: mask = SPI_INT6_MASK; break;
    8b54:	80 e4       	ldi	r24, 0x40	; 64
    8b56:	03 c0       	rjmp	.+6      	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
    8b58:	80 e8       	ldi	r24, 0x80	; 128
    8b5a:	01 c0       	rjmp	.+2      	; 0x8b5e <_ZN8SPIClass17notUsingInterruptEh+0x50>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    8b5c:	80 e1       	ldi	r24, 0x10	; 16
  #endif
  default:
    break;
    // this case can't be reached
  }
  interruptMask &= ~mask;
    8b5e:	80 95       	com	r24
    8b60:	20 91 86 08 	lds	r18, 0x0886
    8b64:	82 23       	and	r24, r18
    8b66:	80 93 86 08 	sts	0x0886, r24
  if (!interruptMask)
    8b6a:	88 23       	and	r24, r24
    8b6c:	11 f4       	brne	.+4      	; 0x8b72 <_ZN8SPIClass17notUsingInterruptEh+0x64>
    interruptMode = 0;
    8b6e:	10 92 87 08 	sts	0x0887, r1
  SREG = sreg;
    8b72:	9f bf       	out	0x3f, r25	; 63
    8b74:	08 95       	ret

00008b76 <_ZN6TMRpcm7timerStEv>:
//********** Core Playback Functions used in all modes *********


#if !defined (USE_TIMER2) //NOT using timer2
void TMRpcm::timerSt(){
	*ICRn[tt] = resolution;
    8b76:	e0 91 a6 08 	lds	r30, 0x08A6
    8b7a:	f0 e0       	ldi	r31, 0x00	; 0
    8b7c:	ee 0f       	add	r30, r30
    8b7e:	ff 1f       	adc	r31, r31
    8b80:	eb 52       	subi	r30, 0x2B	; 43
    8b82:	fd 4f       	sbci	r31, 0xFD	; 253
    8b84:	01 90       	ld	r0, Z+
    8b86:	f0 81       	ld	r31, Z
    8b88:	e0 2d       	mov	r30, r0
    8b8a:	dc 01       	movw	r26, r24
    8b8c:	15 96       	adiw	r26, 0x05	; 5
    8b8e:	8d 91       	ld	r24, X+
    8b90:	9c 91       	ld	r25, X
    8b92:	16 97       	sbiw	r26, 0x06	; 6
    8b94:	91 83       	std	Z+1, r25	; 0x01
    8b96:	80 83       	st	Z, r24
	#if !defined (DISABLE_SPEAKER2)
		*TCCRnA[tt] = _BV(WGM11) | _BV(COM1A1) | _BV(COM1B0) | _BV(COM1B1); //WGM11,12,13 all set to 1 = fast PWM/w ICR TOP
    8b98:	e0 91 a6 08 	lds	r30, 0x08A6
    8b9c:	f0 e0       	ldi	r31, 0x00	; 0
    8b9e:	ee 0f       	add	r30, r30
    8ba0:	ff 1f       	adc	r31, r31
    8ba2:	e3 51       	subi	r30, 0x13	; 19
    8ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    8ba6:	01 90       	ld	r0, Z+
    8ba8:	f0 81       	ld	r31, Z
    8baa:	e0 2d       	mov	r30, r0
    8bac:	82 eb       	ldi	r24, 0xB2	; 178
    8bae:	80 83       	st	Z, r24
	#else
		*TCCRnA[tt] = _BV(WGM11) | _BV(COM1A1); //WGM11,12,13 all set to 1 = fast PWM/w ICR TOP
	#endif
	*TCCRnB[tt] = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
    8bb0:	e0 91 a6 08 	lds	r30, 0x08A6
    8bb4:	f0 e0       	ldi	r31, 0x00	; 0
    8bb6:	ee 0f       	add	r30, r30
    8bb8:	ff 1f       	adc	r31, r31
    8bba:	eb 51       	subi	r30, 0x1B	; 27
    8bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    8bbe:	01 90       	ld	r0, Z+
    8bc0:	f0 81       	ld	r31, Z
    8bc2:	e0 2d       	mov	r30, r0
    8bc4:	89 e1       	ldi	r24, 0x19	; 25
    8bc6:	80 83       	st	Z, r24
  #if defined (MODE2)
  	*ICRn[tt2] = resolution;
	*TCCRnA[tt2] = _BV(WGM11) | _BV(COM1A1) | _BV(COM1B0) | _BV(COM1B1); //WGM11,12,13 all set to 1 = fast PWM/w ICR TOP
	*TCCRnB[tt2] = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
  #endif
}
    8bc8:	08 95       	ret

00008bca <_ZN6TMRpcm7qualityEh>:


//*************** General Playback Functions *****************

void TMRpcm::quality(boolean q){
	if(!playing){	bitWrite(optionByte,6,q); } //qual = q; }
    8bca:	80 91 a7 0a 	lds	r24, 0x0AA7
    8bce:	88 23       	and	r24, r24
    8bd0:	69 f4       	brne	.+26     	; 0x8bec <_ZN6TMRpcm7qualityEh+0x22>
    8bd2:	66 23       	and	r22, r22
    8bd4:	31 f0       	breq	.+12     	; 0x8be2 <_ZN6TMRpcm7qualityEh+0x18>
    8bd6:	80 91 c2 02 	lds	r24, 0x02C2
    8bda:	80 64       	ori	r24, 0x40	; 64
    8bdc:	80 93 c2 02 	sts	0x02C2, r24
    8be0:	08 95       	ret
    8be2:	80 91 c2 02 	lds	r24, 0x02C2
    8be6:	8f 7b       	andi	r24, 0xBF	; 191
    8be8:	80 93 c2 02 	sts	0x02C2, r24
    8bec:	08 95       	ret

00008bee <_ZN6TMRpcm5pauseEv>:

}

void TMRpcm::pause(){
	//paused = !paused;
	if(bitRead(optionByte,7) && playing){
    8bee:	80 91 c2 02 	lds	r24, 0x02C2
    8bf2:	88 23       	and	r24, r24
    8bf4:	ac f4       	brge	.+42     	; 0x8c20 <_ZN6TMRpcm5pauseEv+0x32>
    8bf6:	90 91 a7 0a 	lds	r25, 0x0AA7
    8bfa:	99 23       	and	r25, r25
    8bfc:	29 f1       	breq	.+74     	; 0x8c48 <_ZN6TMRpcm5pauseEv+0x5a>
		bitClear(optionByte,7);
    8bfe:	8f 77       	andi	r24, 0x7F	; 127
    8c00:	80 93 c2 02 	sts	0x02C2, r24
		#if !defined (USE_TIMER2)
			*TIMSK[tt] |= ( _BV(ICIE1) | _BV(TOIE1) );
    8c04:	e0 91 a6 08 	lds	r30, 0x08A6
    8c08:	f0 e0       	ldi	r31, 0x00	; 0
    8c0a:	ee 0f       	add	r30, r30
    8c0c:	ff 1f       	adc	r31, r31
    8c0e:	eb 50       	subi	r30, 0x0B	; 11
    8c10:	fd 4f       	sbci	r31, 0xFD	; 253
    8c12:	01 90       	ld	r0, Z+
    8c14:	f0 81       	ld	r31, Z
    8c16:	e0 2d       	mov	r30, r0
    8c18:	80 81       	ld	r24, Z
    8c1a:	81 62       	ori	r24, 0x21	; 33
    8c1c:	80 83       	st	Z, r24
    8c1e:	08 95       	ret
		#else
			*TIMSK[tt] |= ( _BV(OCIE2B) | _BV(TOIE1) );
		#endif
	}else if(!bitRead(optionByte,7) && playing){
    8c20:	90 91 a7 0a 	lds	r25, 0x0AA7
    8c24:	99 23       	and	r25, r25
    8c26:	81 f0       	breq	.+32     	; 0x8c48 <_ZN6TMRpcm5pauseEv+0x5a>
		bitSet(optionByte,7);
    8c28:	80 68       	ori	r24, 0x80	; 128
    8c2a:	80 93 c2 02 	sts	0x02C2, r24
		*TIMSK[tt] &= ~( _BV(TOIE1) );
    8c2e:	e0 91 a6 08 	lds	r30, 0x08A6
    8c32:	f0 e0       	ldi	r31, 0x00	; 0
    8c34:	ee 0f       	add	r30, r30
    8c36:	ff 1f       	adc	r31, r31
    8c38:	eb 50       	subi	r30, 0x0B	; 11
    8c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    8c3c:	01 90       	ld	r0, Z+
    8c3e:	f0 81       	ld	r31, Z
    8c40:	e0 2d       	mov	r30, r0
    8c42:	80 81       	ld	r24, Z
    8c44:	8e 7f       	andi	r24, 0xFE	; 254
    8c46:	80 83       	st	Z, r24
    8c48:	08 95       	ret

00008c4a <_ZN6TMRpcm4loopEh>:
	}
}

void TMRpcm::loop(boolean set){
	bitWrite(optionByte,3,set);
    8c4a:	66 23       	and	r22, r22
    8c4c:	31 f0       	breq	.+12     	; 0x8c5a <_ZN6TMRpcm4loopEh+0x10>
    8c4e:	80 91 c2 02 	lds	r24, 0x02C2
    8c52:	88 60       	ori	r24, 0x08	; 8
    8c54:	80 93 c2 02 	sts	0x02C2, r24
    8c58:	08 95       	ret
    8c5a:	80 91 c2 02 	lds	r24, 0x02C2
    8c5e:	87 7f       	andi	r24, 0xF7	; 247
    8c60:	80 93 c2 02 	sts	0x02C2, r24
    8c64:	08 95       	ret

00008c66 <_ZN6TMRpcm4seekEm>:
Prevents a whole lot more #if defined statements */

#if !defined (SDFAT)

	boolean TMRpcm::seek( unsigned long pos ){
		return sFile.seek(pos);
    8c66:	8a e8       	ldi	r24, 0x8A	; 138
    8c68:	98 e0       	ldi	r25, 0x08	; 8
    8c6a:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
	}
    8c6e:	08 95       	ret

00008c70 <_ZN6TMRpcm9fPositionEv>:

	unsigned long TMRpcm::fPosition( ){
		return sFile.position();
    8c70:	8a e8       	ldi	r24, 0x8A	; 138
    8c72:	98 e0       	ldi	r25, 0x08	; 8
    8c74:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
	}
    8c78:	08 95       	ret

00008c7a <_ZN6TMRpcm6ifOpenEv>:

	boolean TMRpcm::ifOpen(){
		if(sFile){ return 1;}
    8c7a:	8a e8       	ldi	r24, 0x8A	; 138
    8c7c:	98 e0       	ldi	r25, 0x08	; 8
    8c7e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <_ZN5SDLib4FilecvbEv>
    8c82:	88 23       	and	r24, r24
    8c84:	11 f0       	breq	.+4      	; 0x8c8a <_ZN6TMRpcm6ifOpenEv+0x10>
    8c86:	81 e0       	ldi	r24, 0x01	; 1
    8c88:	08 95       	ret
	}
    8c8a:	08 95       	ret

00008c8c <_ZN6TMRpcm12stopPlaybackEv>:
void TMRpcm::quality(boolean q){
	if(!playing){	bitWrite(optionByte,6,q); } //qual = q; }
}

void TMRpcm::stopPlayback(){
	playing = 0;
    8c8c:	10 92 a7 0a 	sts	0x0AA7, r1

	*TIMSK[tt] &= ~(togByte | _BV(TOIE1));
    8c90:	e0 91 a6 08 	lds	r30, 0x08A6
    8c94:	f0 e0       	ldi	r31, 0x00	; 0
    8c96:	ee 0f       	add	r30, r30
    8c98:	ff 1f       	adc	r31, r31
    8c9a:	eb 50       	subi	r30, 0x0B	; 11
    8c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    8c9e:	01 90       	ld	r0, Z+
    8ca0:	f0 81       	ld	r31, Z
    8ca2:	e0 2d       	mov	r30, r0
    8ca4:	20 81       	ld	r18, Z
    8ca6:	2e 7d       	andi	r18, 0xDE	; 222
    8ca8:	20 83       	st	Z, r18

	if(ifOpen()){ sFile.close(); }
    8caa:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    8cae:	88 23       	and	r24, r24
    8cb0:	21 f0       	breq	.+8      	; 0x8cba <_ZN6TMRpcm12stopPlaybackEv+0x2e>
    8cb2:	8a e8       	ldi	r24, 0x8A	; 138
    8cb4:	98 e0       	ldi	r25, 0x08	; 8
    8cb6:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
    8cba:	08 95       	ret

00008cbc <_ZN6TMRpcm7wavInfoEPc>:
	#endif
}
#endif


boolean TMRpcm::wavInfo(char* filename){
    8cbc:	af 92       	push	r10
    8cbe:	bf 92       	push	r11
    8cc0:	cf 92       	push	r12
    8cc2:	df 92       	push	r13
    8cc4:	ef 92       	push	r14
    8cc6:	ff 92       	push	r15
    8cc8:	0f 93       	push	r16
    8cca:	1f 93       	push	r17
    8ccc:	cf 93       	push	r28
    8cce:	df 93       	push	r29
    8cd0:	cd b7       	in	r28, 0x3d	; 61
    8cd2:	de b7       	in	r29, 0x3e	; 62
    8cd4:	6f 97       	sbiw	r28, 0x1f	; 31
    8cd6:	0f b6       	in	r0, 0x3f	; 63
    8cd8:	f8 94       	cli
    8cda:	de bf       	out	0x3e, r29	; 62
    8cdc:	0f be       	out	0x3f, r0	; 63
    8cde:	cd bf       	out	0x3d, r28	; 61
    8ce0:	6c 01       	movw	r12, r24
    8ce2:	ab 01       	movw	r20, r22

  //check for the string WAVE starting at 8th bit in header of file
  #if !defined (SDFAT)
  sFile = SD.open(filename);
    8ce4:	ce 01       	movw	r24, r28
    8ce6:	01 96       	adiw	r24, 0x01	; 1
    8ce8:	6e e2       	ldi	r22, 0x2E	; 46
    8cea:	76 e0       	ldi	r23, 0x06	; 6
    8cec:	21 e0       	ldi	r18, 0x01	; 1
    8cee:	0e 94 cb 28 	call	0x5196	; 0x5196 <_ZN5SDLib7SDClass4openEPKch>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    8cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    8cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    8cf6:	90 93 8d 08 	sts	0x088D, r25
    8cfa:	80 93 8c 08 	sts	0x088C, r24
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    8cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    8d00:	9e 81       	ldd	r25, Y+6	; 0x06
    8d02:	af 81       	ldd	r26, Y+7	; 0x07
    8d04:	b8 85       	ldd	r27, Y+8	; 0x08
    8d06:	80 93 8e 08 	sts	0x088E, r24
    8d0a:	90 93 8f 08 	sts	0x088F, r25
    8d0e:	a0 93 90 08 	sts	0x0890, r26
    8d12:	b0 93 91 08 	sts	0x0891, r27
    8d16:	89 85       	ldd	r24, Y+9	; 0x09
    8d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    8d1a:	ab 85       	ldd	r26, Y+11	; 0x0b
    8d1c:	bc 85       	ldd	r27, Y+12	; 0x0c
    8d1e:	80 93 92 08 	sts	0x0892, r24
    8d22:	90 93 93 08 	sts	0x0893, r25
    8d26:	a0 93 94 08 	sts	0x0894, r26
    8d2a:	b0 93 95 08 	sts	0x0895, r27
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
    8d2e:	a6 e9       	ldi	r26, 0x96	; 150
    8d30:	b8 e0       	ldi	r27, 0x08	; 8
    8d32:	fe 01       	movw	r30, r28
    8d34:	3d 96       	adiw	r30, 0x0d	; 13
    8d36:	8d e0       	ldi	r24, 0x0D	; 13
    8d38:	01 90       	ld	r0, Z+
    8d3a:	0d 92       	st	X+, r0
    8d3c:	81 50       	subi	r24, 0x01	; 1
    8d3e:	e1 f7       	brne	.-8      	; 0x8d38 <_ZN6TMRpcm7wavInfoEPc+0x7c>
    8d40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8d42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    8d44:	90 93 a4 08 	sts	0x08A4, r25
    8d48:	80 93 a3 08 	sts	0x08A3, r24
  #else
  sFile.open(filename);
  #endif

  if( !ifOpen() ){ return 0; }
    8d4c:	c6 01       	movw	r24, r12
    8d4e:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    8d52:	88 23       	and	r24, r24
    8d54:	09 f4       	brne	.+2      	; 0x8d58 <_ZN6TMRpcm7wavInfoEPc+0x9c>
    8d56:	87 c0       	rjmp	.+270    	; 0x8e66 <_ZN6TMRpcm7wavInfoEPc+0x1aa>
  seek(8);
    8d58:	c6 01       	movw	r24, r12
    8d5a:	48 e0       	ldi	r20, 0x08	; 8
    8d5c:	50 e0       	ldi	r21, 0x00	; 0
    8d5e:	60 e0       	ldi	r22, 0x00	; 0
    8d60:	70 e0       	ldi	r23, 0x00	; 0
    8d62:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
  char wavStr[] = {'W','A','V','E'};
    8d66:	87 e5       	ldi	r24, 0x57	; 87
    8d68:	8c 8f       	std	Y+28, r24	; 0x1c
    8d6a:	81 e4       	ldi	r24, 0x41	; 65
    8d6c:	8d 8f       	std	Y+29, r24	; 0x1d
    8d6e:	86 e5       	ldi	r24, 0x56	; 86
    8d70:	8e 8f       	std	Y+30, r24	; 0x1e
    8d72:	85 e4       	ldi	r24, 0x45	; 69
    8d74:	8f 8f       	std	Y+31, r24	; 0x1f
    8d76:	8e 01       	movw	r16, r28
    8d78:	04 5e       	subi	r16, 0xE4	; 228
    8d7a:	1f 4f       	sbci	r17, 0xFF	; 255
	#endif
}
#endif


boolean TMRpcm::wavInfo(char* filename){
    8d7c:	aa 24       	eor	r10, r10
    8d7e:	bb 24       	eor	r11, r11
    8d80:	68 94       	set
    8d82:	a5 f8       	bld	r10, 5
    8d84:	ac 0e       	add	r10, r28
    8d86:	bd 1e       	adc	r11, r29

  if( !ifOpen() ){ return 0; }
  seek(8);
  char wavStr[] = {'W','A','V','E'};
  for (byte i =0; i<4; i++){
	  if(sFile.read() != wavStr[i]){
    8d88:	0f 2e       	mov	r0, r31
    8d8a:	fa e8       	ldi	r31, 0x8A	; 138
    8d8c:	ef 2e       	mov	r14, r31
    8d8e:	f8 e0       	ldi	r31, 0x08	; 8
    8d90:	ff 2e       	mov	r15, r31
    8d92:	f0 2d       	mov	r31, r0
    8d94:	c7 01       	movw	r24, r14
    8d96:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    8d9a:	f8 01       	movw	r30, r16
    8d9c:	21 91       	ld	r18, Z+
    8d9e:	8f 01       	movw	r16, r30
    8da0:	30 e0       	ldi	r19, 0x00	; 0
    8da2:	82 17       	cp	r24, r18
    8da4:	93 07       	cpc	r25, r19
    8da6:	19 f4       	brne	.+6      	; 0x8dae <_ZN6TMRpcm7wavInfoEPc+0xf2>
  #endif

  if( !ifOpen() ){ return 0; }
  seek(8);
  char wavStr[] = {'W','A','V','E'};
  for (byte i =0; i<4; i++){
    8da8:	ea 15       	cp	r30, r10
    8daa:	fb 05       	cpc	r31, r11
    8dac:	99 f7       	brne	.-26     	; 0x8d94 <_ZN6TMRpcm7wavInfoEPc+0xd8>
		  #endif
		  break; }
  }
	#if defined (STEREO_OR_16BIT)
	    byte stereo, bps;
		seek(22);
    8dae:	c6 01       	movw	r24, r12
    8db0:	46 e1       	ldi	r20, 0x16	; 22
    8db2:	50 e0       	ldi	r21, 0x00	; 0
    8db4:	60 e0       	ldi	r22, 0x00	; 0
    8db6:	70 e0       	ldi	r23, 0x00	; 0
    8db8:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
	    stereo = sFile.read();
    8dbc:	0f 2e       	mov	r0, r31
    8dbe:	fa e8       	ldi	r31, 0x8A	; 138
    8dc0:	ef 2e       	mov	r14, r31
    8dc2:	f8 e0       	ldi	r31, 0x08	; 8
    8dc4:	ff 2e       	mov	r15, r31
    8dc6:	f0 2d       	mov	r31, r0
    8dc8:	c7 01       	movw	r24, r14
    8dca:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    8dce:	08 2f       	mov	r16, r24
	    seek(24);
    8dd0:	c6 01       	movw	r24, r12
    8dd2:	48 e1       	ldi	r20, 0x18	; 24
    8dd4:	50 e0       	ldi	r21, 0x00	; 0
    8dd6:	60 e0       	ldi	r22, 0x00	; 0
    8dd8:	70 e0       	ldi	r23, 0x00	; 0
    8dda:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
	#else
	    seek(24);
	#endif

    SAMPLE_RATE = sFile.read();
    8dde:	c7 01       	movw	r24, r14
    8de0:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    8de4:	f6 01       	movw	r30, r12
    8de6:	94 83       	std	Z+4, r25	; 0x04
    8de8:	83 83       	std	Z+3, r24	; 0x03
    SAMPLE_RATE = sFile.read() << 8 | SAMPLE_RATE;
    8dea:	c7 01       	movw	r24, r14
    8dec:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    8df0:	38 2f       	mov	r19, r24
    8df2:	20 e0       	ldi	r18, 0x00	; 0
    8df4:	f6 01       	movw	r30, r12
    8df6:	83 81       	ldd	r24, Z+3	; 0x03
    8df8:	94 81       	ldd	r25, Z+4	; 0x04
    8dfa:	28 2b       	or	r18, r24
    8dfc:	39 2b       	or	r19, r25
    8dfe:	34 83       	std	Z+4, r19	; 0x04
    8e00:	23 83       	std	Z+3, r18	; 0x03
    	else if(SAMPLE_RATE < 28000){ SR = 2; }
    	else{ SR = 3; }
    #endif
	#if defined (STEREO_OR_16BIT)
	    //verify that Bits Per Sample is 8 (0-255)
		seek(34);
    8e02:	c6 01       	movw	r24, r12
    8e04:	42 e2       	ldi	r20, 0x22	; 34
    8e06:	50 e0       	ldi	r21, 0x00	; 0
    8e08:	60 e0       	ldi	r22, 0x00	; 0
    8e0a:	70 e0       	ldi	r23, 0x00	; 0
    8e0c:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
	    bps = sFile.read();
    8e10:	c7 01       	movw	r24, r14
    8e12:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    8e16:	18 2f       	mov	r17, r24
	    bps = sFile.read() << 8 | bps;
    8e18:	c7 01       	movw	r24, r14
    8e1a:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
	    if( stereo == 2){ //_2bytes=1;
    8e1e:	02 30       	cpi	r16, 0x02	; 2
    8e20:	31 f4       	brne	.+12     	; 0x8e2e <_ZN6TMRpcm7wavInfoEPc+0x172>
	    	bitSet(optionByte,4);
    8e22:	80 91 c2 02 	lds	r24, 0x02C2
    8e26:	80 61       	ori	r24, 0x10	; 16
    8e28:	80 93 c2 02 	sts	0x02C2, r24
    8e2c:	0d c0       	rjmp	.+26     	; 0x8e48 <_ZN6TMRpcm7wavInfoEPc+0x18c>
		}else
		if( bps == 16 ){
    8e2e:	10 31       	cpi	r17, 0x10	; 16
    8e30:	31 f4       	brne	.+12     	; 0x8e3e <_ZN6TMRpcm7wavInfoEPc+0x182>
			bitSet(optionByte,1);
			bitSet(optionByte,4);
    8e32:	80 91 c2 02 	lds	r24, 0x02C2
    8e36:	82 61       	ori	r24, 0x12	; 18
    8e38:	80 93 c2 02 	sts	0x02C2, r24
    8e3c:	05 c0       	rjmp	.+10     	; 0x8e48 <_ZN6TMRpcm7wavInfoEPc+0x18c>
	    }else{ bitClear(optionByte,4); bitClear(optionByte,1);}
    8e3e:	80 91 c2 02 	lds	r24, 0x02C2
    8e42:	8d 7e       	andi	r24, 0xED	; 237
    8e44:	80 93 c2 02 	sts	0x02C2, r24
			dataEnd = sFile.fileSize() - fPosition() - dataBytes + buffSize;
		#endif

	#else //No Tag handling

		seek(44); dataEnd = buffSize;
    8e48:	c6 01       	movw	r24, r12
    8e4a:	4c e2       	ldi	r20, 0x2C	; 44
    8e4c:	50 e0       	ldi	r21, 0x00	; 0
    8e4e:	60 e0       	ldi	r22, 0x00	; 0
    8e50:	70 e0       	ldi	r23, 0x00	; 0
    8e52:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
    8e56:	8e ef       	ldi	r24, 0xFE	; 254
    8e58:	90 e0       	ldi	r25, 0x00	; 0
    8e5a:	90 93 aa 0a 	sts	0x0AAA, r25
    8e5e:	80 93 a9 0a 	sts	0x0AA9, r24

	#endif

	return 1;
    8e62:	81 e0       	ldi	r24, 0x01	; 1
    8e64:	01 c0       	rjmp	.+2      	; 0x8e68 <_ZN6TMRpcm7wavInfoEPc+0x1ac>
  sFile = SD.open(filename);
  #else
  sFile.open(filename);
  #endif

  if( !ifOpen() ){ return 0; }
    8e66:	80 e0       	ldi	r24, 0x00	; 0

	#endif

	return 1;

}
    8e68:	6f 96       	adiw	r28, 0x1f	; 31
    8e6a:	0f b6       	in	r0, 0x3f	; 63
    8e6c:	f8 94       	cli
    8e6e:	de bf       	out	0x3e, r29	; 62
    8e70:	0f be       	out	0x3f, r0	; 63
    8e72:	cd bf       	out	0x3d, r28	; 61
    8e74:	df 91       	pop	r29
    8e76:	cf 91       	pop	r28
    8e78:	1f 91       	pop	r17
    8e7a:	0f 91       	pop	r16
    8e7c:	ff 90       	pop	r15
    8e7e:	ef 90       	pop	r14
    8e80:	df 90       	pop	r13
    8e82:	cf 90       	pop	r12
    8e84:	bf 90       	pop	r11
    8e86:	af 90       	pop	r10
    8e88:	08 95       	ret

00008e8a <_ZN6TMRpcm6volumeEc>:

}

void TMRpcm::volume(char upDown){

  if(upDown){
    8e8a:	66 23       	and	r22, r22
    8e8c:	31 f0       	breq	.+12     	; 0x8e9a <_ZN6TMRpcm6volumeEc+0x10>
	  volMod++;
    8e8e:	80 91 a7 08 	lds	r24, 0x08A7
    8e92:	8f 5f       	subi	r24, 0xFF	; 255
    8e94:	80 93 a7 08 	sts	0x08A7, r24
    8e98:	08 95       	ret
  }else{
	  volMod--;
    8e9a:	80 91 a7 08 	lds	r24, 0x08A7
    8e9e:	81 50       	subi	r24, 0x01	; 1
    8ea0:	80 93 a7 08 	sts	0x08A7, r24
    8ea4:	08 95       	ret

00008ea6 <_ZN6TMRpcm9setVolumeEc>:
  }
}

void TMRpcm::setVolume(char vol) {
    volMod = vol - 4 ;
    8ea6:	64 50       	subi	r22, 0x04	; 4
    8ea8:	60 93 a7 08 	sts	0x08A7, r22
}
    8eac:	08 95       	ret

00008eae <__vector_16>:
		}
  }
#endif

#if !defined (USE_TIMER2) //Not using TIMER2
ISR(TIMER1_CAPT_vect){
    8eae:	1f 92       	push	r1
    8eb0:	0f 92       	push	r0
    8eb2:	0f b6       	in	r0, 0x3f	; 63
    8eb4:	0f 92       	push	r0
    8eb6:	0b b6       	in	r0, 0x3b	; 59
    8eb8:	0f 92       	push	r0
    8eba:	11 24       	eor	r1, r1
    8ebc:	2f 93       	push	r18
    8ebe:	3f 93       	push	r19
    8ec0:	4f 93       	push	r20
    8ec2:	5f 93       	push	r21
    8ec4:	6f 93       	push	r22
    8ec6:	7f 93       	push	r23
    8ec8:	8f 93       	push	r24
    8eca:	9f 93       	push	r25
    8ecc:	af 93       	push	r26
    8ece:	bf 93       	push	r27
    8ed0:	ef 93       	push	r30
    8ed2:	ff 93       	push	r31
  // to interrupt it. ( Nested Interrupts )
  // TIMSK1 &= ~_BV(ICIE1);
 //Then enable global interupts before this interrupt is finished, so the music can interrupt the buffering
  //sei();

	if(buffEmpty[!whichBuff]){
    8ed4:	20 91 a8 0a 	lds	r18, 0x0AA8
    8ed8:	81 e0       	ldi	r24, 0x01	; 1
    8eda:	90 e0       	ldi	r25, 0x00	; 0
    8edc:	22 23       	and	r18, r18
    8ede:	11 f0       	breq	.+4      	; 0x8ee4 <__vector_16+0x36>
    8ee0:	80 e0       	ldi	r24, 0x00	; 0
    8ee2:	90 e0       	ldi	r25, 0x00	; 0
    8ee4:	8d 53       	subi	r24, 0x3D	; 61
    8ee6:	9d 4f       	sbci	r25, 0xFD	; 253
    8ee8:	fc 01       	movw	r30, r24
    8eea:	80 81       	ld	r24, Z
    8eec:	88 23       	and	r24, r24
    8eee:	09 f4       	brne	.+2      	; 0x8ef2 <__vector_16+0x44>
    8ef0:	7d c0       	rjmp	.+250    	; 0x8fec <__vector_16+0x13e>

		a = !whichBuff;
    8ef2:	90 91 a8 0a 	lds	r25, 0x0AA8
    8ef6:	81 e0       	ldi	r24, 0x01	; 1
    8ef8:	91 11       	cpse	r25, r1
    8efa:	80 e0       	ldi	r24, 0x00	; 0
    8efc:	80 93 a6 0a 	sts	0x0AA6, r24
		*TIMSK[tt] &= ~togByte;
    8f00:	e0 91 a6 08 	lds	r30, 0x08A6
    8f04:	f0 e0       	ldi	r31, 0x00	; 0
    8f06:	ee 0f       	add	r30, r30
    8f08:	ff 1f       	adc	r31, r31
    8f0a:	eb 50       	subi	r30, 0x0B	; 11
    8f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    8f0e:	01 90       	ld	r0, Z+
    8f10:	f0 81       	ld	r31, Z
    8f12:	e0 2d       	mov	r30, r0
    8f14:	80 81       	ld	r24, Z
    8f16:	8f 7d       	andi	r24, 0xDF	; 223
    8f18:	80 83       	st	Z, r24
		sei();
    8f1a:	78 94       	sei

		if( sFile.available() <= dataEnd){
    8f1c:	8a e8       	ldi	r24, 0x8A	; 138
    8f1e:	98 e0       	ldi	r25, 0x08	; 8
    8f20:	0e 94 65 25 	call	0x4aca	; 0x4aca <_ZN5SDLib4File9availableEv>
    8f24:	20 91 a9 0a 	lds	r18, 0x0AA9
    8f28:	30 91 aa 0a 	lds	r19, 0x0AAA
    8f2c:	28 17       	cp	r18, r24
    8f2e:	39 07       	cpc	r19, r25
    8f30:	a0 f1       	brcs	.+104    	; 0x8f9a <__vector_16+0xec>

		  	#if !defined (SDFAT)
		  		if(bitRead(optionByte,3)){ sFile.seek(44); *TIMSK[tt] |= togByte; return;}
    8f32:	80 91 c2 02 	lds	r24, 0x02C2
    8f36:	83 ff       	sbrs	r24, 3
    8f38:	16 c0       	rjmp	.+44     	; 0x8f66 <__vector_16+0xb8>
    8f3a:	8a e8       	ldi	r24, 0x8A	; 138
    8f3c:	98 e0       	ldi	r25, 0x08	; 8
    8f3e:	4c e2       	ldi	r20, 0x2C	; 44
    8f40:	50 e0       	ldi	r21, 0x00	; 0
    8f42:	60 e0       	ldi	r22, 0x00	; 0
    8f44:	70 e0       	ldi	r23, 0x00	; 0
    8f46:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
    8f4a:	e0 91 a6 08 	lds	r30, 0x08A6
    8f4e:	f0 e0       	ldi	r31, 0x00	; 0
    8f50:	ee 0f       	add	r30, r30
    8f52:	ff 1f       	adc	r31, r31
    8f54:	eb 50       	subi	r30, 0x0B	; 11
    8f56:	fd 4f       	sbci	r31, 0xFD	; 253
    8f58:	01 90       	ld	r0, Z+
    8f5a:	f0 81       	ld	r31, Z
    8f5c:	e0 2d       	mov	r30, r0
    8f5e:	80 81       	ld	r24, Z
    8f60:	80 62       	ori	r24, 0x20	; 32
    8f62:	80 83       	st	Z, r24
    8f64:	43 c0       	rjmp	.+134    	; 0x8fec <__vector_16+0x13e>
		  		*TIMSK[tt] &= ~( togByte | _BV(TOIE1) );
    8f66:	e0 91 a6 08 	lds	r30, 0x08A6
    8f6a:	f0 e0       	ldi	r31, 0x00	; 0
    8f6c:	ee 0f       	add	r30, r30
    8f6e:	ff 1f       	adc	r31, r31
    8f70:	eb 50       	subi	r30, 0x0B	; 11
    8f72:	fd 4f       	sbci	r31, 0xFD	; 253
    8f74:	01 90       	ld	r0, Z+
    8f76:	f0 81       	ld	r31, Z
    8f78:	e0 2d       	mov	r30, r0
    8f7a:	80 81       	ld	r24, Z
    8f7c:	8e 7d       	andi	r24, 0xDE	; 222
    8f7e:	80 83       	st	Z, r24
			  	if(sFile){ sFile.close();}
    8f80:	8a e8       	ldi	r24, 0x8A	; 138
    8f82:	98 e0       	ldi	r25, 0x08	; 8
    8f84:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <_ZN5SDLib4FilecvbEv>
    8f88:	88 23       	and	r24, r24
    8f8a:	21 f0       	breq	.+8      	; 0x8f94 <__vector_16+0xe6>
    8f8c:	8a e8       	ldi	r24, 0x8A	; 138
    8f8e:	98 e0       	ldi	r25, 0x08	; 8
    8f90:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
			#else
				if(bitRead(optionByte,3)){ sFile.seekSet(44); *TIMSK[tt] |= togByte; return;}
				*TIMSK[tt] &= ~( togByte | _BV(TOIE1) );
				if(sFile.isOpen()){ sFile.close();}
			#endif
			playing = 0;
    8f94:	10 92 a7 0a 	sts	0x0AA7, r1
			return;
    8f98:	29 c0       	rjmp	.+82     	; 0x8fec <__vector_16+0x13e>
	  	}
	  	sFile.read((byte*)buffer[a],buffSize);
    8f9a:	20 91 a6 0a 	lds	r18, 0x0AA6
    8f9e:	82 2f       	mov	r24, r18
    8fa0:	90 e0       	ldi	r25, 0x00	; 0
    8fa2:	88 0f       	add	r24, r24
    8fa4:	99 1f       	adc	r25, r25
    8fa6:	bc 01       	movw	r22, r24
    8fa8:	76 95       	lsr	r23
    8faa:	76 2f       	mov	r23, r22
    8fac:	66 27       	eor	r22, r22
    8fae:	77 95       	ror	r23
    8fb0:	67 95       	ror	r22
    8fb2:	68 1b       	sub	r22, r24
    8fb4:	79 0b       	sbc	r23, r25
    8fb6:	67 55       	subi	r22, 0x57	; 87
    8fb8:	77 4f       	sbci	r23, 0xF7	; 247
    8fba:	8a e8       	ldi	r24, 0x8A	; 138
    8fbc:	98 e0       	ldi	r25, 0x08	; 8
    8fbe:	4e ef       	ldi	r20, 0xFE	; 254
    8fc0:	50 e0       	ldi	r21, 0x00	; 0
    8fc2:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
			buffEmpty[a] = 0;
    8fc6:	e0 91 a6 0a 	lds	r30, 0x0AA6
    8fca:	f0 e0       	ldi	r31, 0x00	; 0
    8fcc:	ed 53       	subi	r30, 0x3D	; 61
    8fce:	fd 4f       	sbci	r31, 0xFD	; 253
    8fd0:	10 82       	st	Z, r1
			*TIMSK[tt] |= togByte;
    8fd2:	e0 91 a6 08 	lds	r30, 0x08A6
    8fd6:	f0 e0       	ldi	r31, 0x00	; 0
    8fd8:	ee 0f       	add	r30, r30
    8fda:	ff 1f       	adc	r31, r31
    8fdc:	eb 50       	subi	r30, 0x0B	; 11
    8fde:	fd 4f       	sbci	r31, 0xFD	; 253
    8fe0:	01 90       	ld	r0, Z+
    8fe2:	f0 81       	ld	r31, Z
    8fe4:	e0 2d       	mov	r30, r0
    8fe6:	80 81       	ld	r24, Z
    8fe8:	80 62       	ori	r24, 0x20	; 32
    8fea:	80 83       	st	Z, r24
   	}
}
    8fec:	ff 91       	pop	r31
    8fee:	ef 91       	pop	r30
    8ff0:	bf 91       	pop	r27
    8ff2:	af 91       	pop	r26
    8ff4:	9f 91       	pop	r25
    8ff6:	8f 91       	pop	r24
    8ff8:	7f 91       	pop	r23
    8ffa:	6f 91       	pop	r22
    8ffc:	5f 91       	pop	r21
    8ffe:	4f 91       	pop	r20
    9000:	3f 91       	pop	r19
    9002:	2f 91       	pop	r18
    9004:	0f 90       	pop	r0
    9006:	0b be       	out	0x3b, r0	; 59
    9008:	0f 90       	pop	r0
    900a:	0f be       	out	0x3f, r0	; 63
    900c:	0f 90       	pop	r0
    900e:	1f 90       	pop	r1
    9010:	18 95       	reti

00009012 <__vector_20>:
  		}
  }

#endif

ISR(TIMER1_OVF_vect){
    9012:	1f 92       	push	r1
    9014:	0f 92       	push	r0
    9016:	0f b6       	in	r0, 0x3f	; 63
    9018:	0f 92       	push	r0
    901a:	0b b6       	in	r0, 0x3b	; 59
    901c:	0f 92       	push	r0
    901e:	11 24       	eor	r1, r1
    9020:	2f 93       	push	r18
    9022:	3f 93       	push	r19
    9024:	4f 93       	push	r20
    9026:	5f 93       	push	r21
    9028:	6f 93       	push	r22
    902a:	7f 93       	push	r23
    902c:	8f 93       	push	r24
    902e:	9f 93       	push	r25
    9030:	af 93       	push	r26
    9032:	bf 93       	push	r27
    9034:	cf 93       	push	r28
    9036:	df 93       	push	r29
    9038:	ef 93       	push	r30
    903a:	ff 93       	push	r31


    if(bitRead(optionByte,6)){loadCounter = !loadCounter;if(loadCounter){ return; } }
    903c:	80 91 c2 02 	lds	r24, 0x02C2
    9040:	86 ff       	sbrs	r24, 6
    9042:	0c c0       	rjmp	.+24     	; 0x905c <__vector_20+0x4a>
    9044:	20 91 a5 08 	lds	r18, 0x08A5
    9048:	91 e0       	ldi	r25, 0x01	; 1
    904a:	21 11       	cpse	r18, r1
    904c:	90 e0       	ldi	r25, 0x00	; 0
    904e:	90 93 a5 08 	sts	0x08A5, r25
    9052:	90 91 a5 08 	lds	r25, 0x08A5
    9056:	99 23       	and	r25, r25
    9058:	09 f0       	breq	.+2      	; 0x905c <__vector_20+0x4a>
    905a:	d8 c0       	rjmp	.+432    	; 0x920c <__vector_20+0x1fa>

	#if defined (STEREO_OR_16BIT)
	if( !bitRead(optionByte,4) ){
    905c:	84 fd       	sbrc	r24, 4
    905e:	38 c0       	rjmp	.+112    	; 0x90d0 <__vector_20+0xbe>
	#endif
		if(volMod < 0 ){  *OCRnA[tt] = *OCRnB[tt] = buffer[whichBuff][buffCount] >> (volMod*-1);
	  	}else{  		  *OCRnA[tt] = *OCRnB[tt] = buffer[whichBuff][buffCount] << volMod;
    9060:	80 91 a6 08 	lds	r24, 0x08A6
    9064:	90 e0       	ldi	r25, 0x00	; 0
    9066:	88 0f       	add	r24, r24
    9068:	99 1f       	adc	r25, r25
    906a:	fc 01       	movw	r30, r24
    906c:	e3 52       	subi	r30, 0x23	; 35
    906e:	fd 4f       	sbci	r31, 0xFD	; 253
    9070:	a0 81       	ld	r26, Z
    9072:	b1 81       	ldd	r27, Z+1	; 0x01
    9074:	8b 53       	subi	r24, 0x3B	; 59
    9076:	9d 4f       	sbci	r25, 0xFD	; 253
    9078:	ec 01       	movw	r28, r24
    907a:	e8 81       	ld	r30, Y
    907c:	f9 81       	ldd	r31, Y+1	; 0x01
    907e:	20 91 a8 0a 	lds	r18, 0x0AA8
    9082:	40 91 a8 08 	lds	r20, 0x08A8
    9086:	82 2f       	mov	r24, r18
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	88 0f       	add	r24, r24
    908c:	99 1f       	adc	r25, r25
    908e:	9c 01       	movw	r18, r24
    9090:	36 95       	lsr	r19
    9092:	32 2f       	mov	r19, r18
    9094:	22 27       	eor	r18, r18
    9096:	37 95       	ror	r19
    9098:	27 95       	ror	r18
    909a:	e9 01       	movw	r28, r18
    909c:	c8 1b       	sub	r28, r24
    909e:	d9 0b       	sbc	r29, r25
    90a0:	c4 0f       	add	r28, r20
    90a2:	d1 1d       	adc	r29, r1
    90a4:	c7 55       	subi	r28, 0x57	; 87
    90a6:	d7 4f       	sbci	r29, 0xF7	; 247
    90a8:	88 81       	ld	r24, Y
    90aa:	90 e0       	ldi	r25, 0x00	; 0
    90ac:	00 90 a7 08 	lds	r0, 0x08A7
    90b0:	02 c0       	rjmp	.+4      	; 0x90b6 <__vector_20+0xa4>
    90b2:	88 0f       	add	r24, r24
    90b4:	99 1f       	adc	r25, r25
    90b6:	0a 94       	dec	r0
    90b8:	e2 f7       	brpl	.-8      	; 0x90b2 <__vector_20+0xa0>
    90ba:	91 83       	std	Z+1, r25	; 0x01
    90bc:	80 83       	st	Z, r24
    90be:	11 96       	adiw	r26, 0x01	; 1
    90c0:	9c 93       	st	X, r25
    90c2:	8e 93       	st	-X, r24
	  	}
	  	++buffCount;
    90c4:	80 91 a8 08 	lds	r24, 0x08A8
    90c8:	8f 5f       	subi	r24, 0xFF	; 255
    90ca:	80 93 a8 08 	sts	0x08A8, r24
    90ce:	8b c0       	rjmp	.+278    	; 0x91e6 <__vector_20+0x1d4>

	#if defined (STEREO_OR_16BIT)
	}else{
		if(bitRead(optionByte,1)){
    90d0:	81 ff       	sbrs	r24, 1
    90d2:	2b c0       	rjmp	.+86     	; 0x912a <__vector_20+0x118>
			buffer[whichBuff][buffCount] += 127;
    90d4:	60 91 a8 0a 	lds	r22, 0x0AA8
    90d8:	40 91 a8 08 	lds	r20, 0x08A8
    90dc:	50 e0       	ldi	r21, 0x00	; 0
    90de:	a9 ea       	ldi	r26, 0xA9	; 169
    90e0:	b8 e0       	ldi	r27, 0x08	; 8
    90e2:	86 2f       	mov	r24, r22
    90e4:	90 e0       	ldi	r25, 0x00	; 0
    90e6:	88 0f       	add	r24, r24
    90e8:	99 1f       	adc	r25, r25
    90ea:	9c 01       	movw	r18, r24
    90ec:	36 95       	lsr	r19
    90ee:	32 2f       	mov	r19, r18
    90f0:	22 27       	eor	r18, r18
    90f2:	37 95       	ror	r19
    90f4:	27 95       	ror	r18
    90f6:	f9 01       	movw	r30, r18
    90f8:	e8 1b       	sub	r30, r24
    90fa:	f9 0b       	sbc	r31, r25
    90fc:	e4 0f       	add	r30, r20
    90fe:	f5 1f       	adc	r31, r21
    9100:	ea 0f       	add	r30, r26
    9102:	fb 1f       	adc	r31, r27
    9104:	70 81       	ld	r23, Z
    9106:	71 58       	subi	r23, 0x81	; 129
    9108:	86 2f       	mov	r24, r22
    910a:	90 e0       	ldi	r25, 0x00	; 0
    910c:	88 0f       	add	r24, r24
    910e:	99 1f       	adc	r25, r25
    9110:	9c 01       	movw	r18, r24
    9112:	36 95       	lsr	r19
    9114:	32 2f       	mov	r19, r18
    9116:	22 27       	eor	r18, r18
    9118:	37 95       	ror	r19
    911a:	27 95       	ror	r18
    911c:	28 1b       	sub	r18, r24
    911e:	39 0b       	sbc	r19, r25
    9120:	24 0f       	add	r18, r20
    9122:	35 1f       	adc	r19, r21
    9124:	a2 0f       	add	r26, r18
    9126:	b3 1f       	adc	r27, r19
    9128:	7c 93       	st	X, r23
		}
		#if !defined (MODE2)
			if(volMod < 0 ){ *OCRnA[tt] = buffer[whichBuff][buffCount] >> (volMod*-1);
  							 *OCRnB[tt] = buffer[whichBuff][buffCount+1] >> (volMod*-1);

	  		}else{    		 *OCRnA[tt] = buffer[whichBuff][buffCount] << volMod;
    912a:	e0 91 a6 08 	lds	r30, 0x08A6
    912e:	f0 e0       	ldi	r31, 0x00	; 0
    9130:	ee 0f       	add	r30, r30
    9132:	ff 1f       	adc	r31, r31
    9134:	e3 52       	subi	r30, 0x23	; 35
    9136:	fd 4f       	sbci	r31, 0xFD	; 253
    9138:	01 90       	ld	r0, Z+
    913a:	f0 81       	ld	r31, Z
    913c:	e0 2d       	mov	r30, r0
    913e:	20 91 a8 0a 	lds	r18, 0x0AA8
    9142:	40 91 a8 08 	lds	r20, 0x08A8
    9146:	69 ea       	ldi	r22, 0xA9	; 169
    9148:	78 e0       	ldi	r23, 0x08	; 8
    914a:	82 2f       	mov	r24, r18
    914c:	90 e0       	ldi	r25, 0x00	; 0
    914e:	88 0f       	add	r24, r24
    9150:	99 1f       	adc	r25, r25
    9152:	9c 01       	movw	r18, r24
    9154:	36 95       	lsr	r19
    9156:	32 2f       	mov	r19, r18
    9158:	22 27       	eor	r18, r18
    915a:	37 95       	ror	r19
    915c:	27 95       	ror	r18
    915e:	d9 01       	movw	r26, r18
    9160:	a8 1b       	sub	r26, r24
    9162:	b9 0b       	sbc	r27, r25
    9164:	a4 0f       	add	r26, r20
    9166:	b1 1d       	adc	r27, r1
    9168:	a6 0f       	add	r26, r22
    916a:	b7 1f       	adc	r27, r23
    916c:	8c 91       	ld	r24, X
    916e:	90 e0       	ldi	r25, 0x00	; 0
    9170:	00 90 a7 08 	lds	r0, 0x08A7
    9174:	02 c0       	rjmp	.+4      	; 0x917a <__vector_20+0x168>
    9176:	88 0f       	add	r24, r24
    9178:	99 1f       	adc	r25, r25
    917a:	0a 94       	dec	r0
    917c:	e2 f7       	brpl	.-8      	; 0x9176 <__vector_20+0x164>
    917e:	91 83       	std	Z+1, r25	; 0x01
    9180:	80 83       	st	Z, r24
							 *OCRnB[tt] = buffer[whichBuff][buffCount+1] << volMod;
    9182:	e0 91 a6 08 	lds	r30, 0x08A6
    9186:	f0 e0       	ldi	r31, 0x00	; 0
    9188:	ee 0f       	add	r30, r30
    918a:	ff 1f       	adc	r31, r31
    918c:	eb 53       	subi	r30, 0x3B	; 59
    918e:	fd 4f       	sbci	r31, 0xFD	; 253
    9190:	01 90       	ld	r0, Z+
    9192:	f0 81       	ld	r31, Z
    9194:	e0 2d       	mov	r30, r0
    9196:	20 91 a8 0a 	lds	r18, 0x0AA8
    919a:	40 91 a8 08 	lds	r20, 0x08A8
    919e:	50 e0       	ldi	r21, 0x00	; 0
    91a0:	4f 5f       	subi	r20, 0xFF	; 255
    91a2:	5f 4f       	sbci	r21, 0xFF	; 255
    91a4:	82 2f       	mov	r24, r18
    91a6:	90 e0       	ldi	r25, 0x00	; 0
    91a8:	88 0f       	add	r24, r24
    91aa:	99 1f       	adc	r25, r25
    91ac:	9c 01       	movw	r18, r24
    91ae:	36 95       	lsr	r19
    91b0:	32 2f       	mov	r19, r18
    91b2:	22 27       	eor	r18, r18
    91b4:	37 95       	ror	r19
    91b6:	27 95       	ror	r18
    91b8:	28 1b       	sub	r18, r24
    91ba:	39 0b       	sbc	r19, r25
    91bc:	24 0f       	add	r18, r20
    91be:	35 1f       	adc	r19, r21
    91c0:	62 0f       	add	r22, r18
    91c2:	73 1f       	adc	r23, r19
    91c4:	db 01       	movw	r26, r22
    91c6:	8c 91       	ld	r24, X
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	00 90 a7 08 	lds	r0, 0x08A7
    91ce:	02 c0       	rjmp	.+4      	; 0x91d4 <__vector_20+0x1c2>
    91d0:	88 0f       	add	r24, r24
    91d2:	99 1f       	adc	r25, r25
    91d4:	0a 94       	dec	r0
    91d6:	e2 f7       	brpl	.-8      	; 0x91d0 <__vector_20+0x1be>
    91d8:	91 83       	std	Z+1, r25	; 0x01
    91da:	80 83       	st	Z, r24
	  		}else{    		 *OCRnA[tt] = *OCRnB[tt] = buffer[whichBuff][buffCount] << volMod;
							 *OCRnA[tt2] = *OCRnB[tt2] = buffer[whichBuff][buffCount+1] << volMod;
  			}

  		#endif
  		buffCount+=2;
    91dc:	80 91 a8 08 	lds	r24, 0x08A8
    91e0:	8e 5f       	subi	r24, 0xFE	; 254
    91e2:	80 93 a8 08 	sts	0x08A8, r24
  	}
	#endif

  	if(buffCount >= buffSize){
    91e6:	80 91 a8 08 	lds	r24, 0x08A8
    91ea:	8e 3f       	cpi	r24, 0xFE	; 254
    91ec:	78 f0       	brcs	.+30     	; 0x920c <__vector_20+0x1fa>
	  buffCount = 0;
    91ee:	10 92 a8 08 	sts	0x08A8, r1
      buffEmpty[whichBuff] = true;
    91f2:	e0 91 a8 0a 	lds	r30, 0x0AA8
    91f6:	f0 e0       	ldi	r31, 0x00	; 0
    91f8:	ed 53       	subi	r30, 0x3D	; 61
    91fa:	fd 4f       	sbci	r31, 0xFD	; 253
    91fc:	81 e0       	ldi	r24, 0x01	; 1
    91fe:	80 83       	st	Z, r24
      whichBuff = !whichBuff;
    9200:	90 91 a8 0a 	lds	r25, 0x0AA8
    9204:	91 11       	cpse	r25, r1
    9206:	80 e0       	ldi	r24, 0x00	; 0
    9208:	80 93 a8 0a 	sts	0x0AA8, r24
  	}
}
    920c:	ff 91       	pop	r31
    920e:	ef 91       	pop	r30
    9210:	df 91       	pop	r29
    9212:	cf 91       	pop	r28
    9214:	bf 91       	pop	r27
    9216:	af 91       	pop	r26
    9218:	9f 91       	pop	r25
    921a:	8f 91       	pop	r24
    921c:	7f 91       	pop	r23
    921e:	6f 91       	pop	r22
    9220:	5f 91       	pop	r21
    9222:	4f 91       	pop	r20
    9224:	3f 91       	pop	r19
    9226:	2f 91       	pop	r18
    9228:	0f 90       	pop	r0
    922a:	0b be       	out	0x3b, r0	; 59
    922c:	0f 90       	pop	r0
    922e:	0f be       	out	0x3f, r0	; 63
    9230:	0f 90       	pop	r0
    9232:	1f 90       	pop	r1
    9234:	18 95       	reti

00009236 <_ZN6TMRpcm7disableEv>:

#endif



void TMRpcm::disable(){
    9236:	2f 92       	push	r2
    9238:	3f 92       	push	r3
    923a:	4f 92       	push	r4
    923c:	5f 92       	push	r5
    923e:	6f 92       	push	r6
    9240:	7f 92       	push	r7
    9242:	8f 92       	push	r8
    9244:	9f 92       	push	r9
    9246:	af 92       	push	r10
    9248:	bf 92       	push	r11
    924a:	cf 92       	push	r12
    924c:	df 92       	push	r13
    924e:	ef 92       	push	r14
    9250:	ff 92       	push	r15
    9252:	0f 93       	push	r16
    9254:	1f 93       	push	r17
    9256:	cf 93       	push	r28
    9258:	df 93       	push	r29
    925a:	7c 01       	movw	r14, r24
	playing = 0;
    925c:	10 92 a7 0a 	sts	0x0AA7, r1
	*TIMSK[tt] &= ~( togByte | _BV(TOIE1) );
    9260:	e0 91 a6 08 	lds	r30, 0x08A6
    9264:	f0 e0       	ldi	r31, 0x00	; 0
    9266:	ee 0f       	add	r30, r30
    9268:	ff 1f       	adc	r31, r31
    926a:	eb 50       	subi	r30, 0x0B	; 11
    926c:	fd 4f       	sbci	r31, 0xFD	; 253
    926e:	01 90       	ld	r0, Z+
    9270:	f0 81       	ld	r31, Z
    9272:	e0 2d       	mov	r30, r0
    9274:	80 81       	ld	r24, Z
    9276:	8e 7d       	andi	r24, 0xDE	; 222
    9278:	80 83       	st	Z, r24
	if(ifOpen()){ sFile.close();}
    927a:	c7 01       	movw	r24, r14
    927c:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    9280:	88 23       	and	r24, r24
    9282:	21 f0       	breq	.+8      	; 0x928c <_ZN6TMRpcm7disableEv+0x56>
    9284:	8a e8       	ldi	r24, 0x8A	; 138
    9286:	98 e0       	ldi	r25, 0x08	; 8
    9288:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
	if(bitRead(*TCCRnA[tt],7) > 0){
    928c:	80 91 a6 08 	lds	r24, 0x08A6
    9290:	90 e0       	ldi	r25, 0x00	; 0
    9292:	fc 01       	movw	r30, r24
    9294:	ee 0f       	add	r30, r30
    9296:	ff 1f       	adc	r31, r31
    9298:	e3 51       	subi	r30, 0x13	; 19
    929a:	fd 4f       	sbci	r31, 0xFD	; 253
    929c:	01 90       	ld	r0, Z+
    929e:	f0 81       	ld	r31, Z
    92a0:	e0 2d       	mov	r30, r0
    92a2:	20 81       	ld	r18, Z
    92a4:	22 23       	and	r18, r18
    92a6:	0c f0       	brlt	.+2      	; 0x92aa <_ZN6TMRpcm7disableEv+0x74>
    92a8:	7d c0       	rjmp	.+250    	; 0x93a4 <_ZN6TMRpcm7disableEv+0x16e>
		int current = *OCRnA[tt];
    92aa:	88 0f       	add	r24, r24
    92ac:	99 1f       	adc	r25, r25
    92ae:	fc 01       	movw	r30, r24
    92b0:	e3 52       	subi	r30, 0x23	; 35
    92b2:	fd 4f       	sbci	r31, 0xFD	; 253
    92b4:	01 90       	ld	r0, Z+
    92b6:	f0 81       	ld	r31, Z
    92b8:	e0 2d       	mov	r30, r0
    92ba:	a0 81       	ld	r26, Z
    92bc:	b1 81       	ldd	r27, Z+1	; 0x01
		for(int i=0; i < resolution; i++){
    92be:	e7 01       	movw	r28, r14
    92c0:	6d 81       	ldd	r22, Y+5	; 0x05
    92c2:	7e 81       	ldd	r23, Y+6	; 0x06
    92c4:	61 15       	cp	r22, r1
    92c6:	71 05       	cpc	r23, r1
    92c8:	09 f4       	brne	.+2      	; 0x92cc <_ZN6TMRpcm7disableEv+0x96>
    92ca:	6c c0       	rjmp	.+216    	; 0x93a4 <_ZN6TMRpcm7disableEv+0x16e>
    92cc:	1d 01       	movw	r2, r26
    92ce:	00 e0       	ldi	r16, 0x00	; 0
    92d0:	10 e0       	ldi	r17, 0x00	; 0
			#if defined(rampMega)
				*OCRnB[tt] = constrain((current + i),0,resolution);
    92d2:	0f 2e       	mov	r0, r31
    92d4:	f5 ec       	ldi	r31, 0xC5	; 197
    92d6:	cf 2e       	mov	r12, r31
    92d8:	f2 e0       	ldi	r31, 0x02	; 2
    92da:	df 2e       	mov	r13, r31
    92dc:	f0 2d       	mov	r31, r0
    92de:	44 24       	eor	r4, r4
    92e0:	55 24       	eor	r5, r5
				*OCRnA[tt] = constrain((current - i),0,resolution);
    92e2:	0f 2e       	mov	r0, r31
    92e4:	fd ed       	ldi	r31, 0xDD	; 221
    92e6:	af 2e       	mov	r10, r31
    92e8:	f2 e0       	ldi	r31, 0x02	; 2
    92ea:	bf 2e       	mov	r11, r31
    92ec:	f0 2d       	mov	r31, r0
			#else
				*OCRnB[tt] = constrain((current - i),0,resolution);
				*OCRnA[tt] = constrain((current - i),0,resolution);
			#endif
			for(int i=0; i<10; i++){ while(*TCNT[tt] < resolution-50){} }
    92ee:	0f 2e       	mov	r0, r31
    92f0:	fd ec       	ldi	r31, 0xCD	; 205
    92f2:	8f 2e       	mov	r8, r31
    92f4:	f2 e0       	ldi	r31, 0x02	; 2
    92f6:	9f 2e       	mov	r9, r31
    92f8:	f0 2d       	mov	r31, r0
    92fa:	0f 2e       	mov	r0, r31
    92fc:	fa e0       	ldi	r31, 0x0A	; 10
    92fe:	6f 2e       	mov	r6, r31
    9300:	77 24       	eor	r7, r7
    9302:	f0 2d       	mov	r31, r0
	if(ifOpen()){ sFile.close();}
	if(bitRead(*TCCRnA[tt],7) > 0){
		int current = *OCRnA[tt];
		for(int i=0; i < resolution; i++){
			#if defined(rampMega)
				*OCRnB[tt] = constrain((current + i),0,resolution);
    9304:	80 91 a6 08 	lds	r24, 0x08A6
    9308:	90 e0       	ldi	r25, 0x00	; 0
    930a:	88 0f       	add	r24, r24
    930c:	99 1f       	adc	r25, r25
    930e:	8c 0d       	add	r24, r12
    9310:	9d 1d       	adc	r25, r13
    9312:	fc 01       	movw	r30, r24
    9314:	c0 81       	ld	r28, Z
    9316:	d1 81       	ldd	r29, Z+1	; 0x01
    9318:	33 20       	and	r3, r3
    931a:	34 f0       	brlt	.+12     	; 0x9328 <_ZN6TMRpcm7disableEv+0xf2>
    931c:	cb 01       	movw	r24, r22
    931e:	26 16       	cp	r2, r22
    9320:	37 06       	cpc	r3, r23
    9322:	18 f4       	brcc	.+6      	; 0x932a <_ZN6TMRpcm7disableEv+0xf4>
    9324:	c1 01       	movw	r24, r2
    9326:	01 c0       	rjmp	.+2      	; 0x932a <_ZN6TMRpcm7disableEv+0xf4>
    9328:	c2 01       	movw	r24, r4
    932a:	99 83       	std	Y+1, r25	; 0x01
    932c:	88 83       	st	Y, r24
				*OCRnA[tt] = constrain((current - i),0,resolution);
    932e:	80 91 a6 08 	lds	r24, 0x08A6
    9332:	90 e0       	ldi	r25, 0x00	; 0
    9334:	88 0f       	add	r24, r24
    9336:	99 1f       	adc	r25, r25
    9338:	8a 0d       	add	r24, r10
    933a:	9b 1d       	adc	r25, r11
    933c:	fc 01       	movw	r30, r24
    933e:	c0 81       	ld	r28, Z
    9340:	d1 81       	ldd	r29, Z+1	; 0x01
    9342:	bb 23       	and	r27, r27
    9344:	4c f0       	brlt	.+18     	; 0x9358 <_ZN6TMRpcm7disableEv+0x122>
    9346:	f7 01       	movw	r30, r14
    9348:	85 81       	ldd	r24, Z+5	; 0x05
    934a:	96 81       	ldd	r25, Z+6	; 0x06
    934c:	9d 01       	movw	r18, r26
    934e:	8a 17       	cp	r24, r26
    9350:	9b 07       	cpc	r25, r27
    9352:	18 f4       	brcc	.+6      	; 0x935a <_ZN6TMRpcm7disableEv+0x124>
    9354:	9c 01       	movw	r18, r24
    9356:	01 c0       	rjmp	.+2      	; 0x935a <_ZN6TMRpcm7disableEv+0x124>
    9358:	92 01       	movw	r18, r4
    935a:	39 83       	std	Y+1, r19	; 0x01
    935c:	28 83       	st	Y, r18
			#else
				*OCRnB[tt] = constrain((current - i),0,resolution);
				*OCRnA[tt] = constrain((current - i),0,resolution);
			#endif
			for(int i=0; i<10; i++){ while(*TCNT[tt] < resolution-50){} }
    935e:	80 91 a6 08 	lds	r24, 0x08A6
    9362:	90 e0       	ldi	r25, 0x00	; 0
    9364:	88 0f       	add	r24, r24
    9366:	99 1f       	adc	r25, r25
    9368:	88 0d       	add	r24, r8
    936a:	99 1d       	adc	r25, r9
    936c:	ec 01       	movw	r28, r24
    936e:	e8 81       	ld	r30, Y
    9370:	f9 81       	ldd	r31, Y+1	; 0x01
    9372:	e7 01       	movw	r28, r14
    9374:	6d 81       	ldd	r22, Y+5	; 0x05
    9376:	7e 81       	ldd	r23, Y+6	; 0x06
    9378:	9b 01       	movw	r18, r22
    937a:	22 53       	subi	r18, 0x32	; 50
    937c:	30 40       	sbci	r19, 0x00	; 0
    937e:	a3 01       	movw	r20, r6
    9380:	80 81       	ld	r24, Z
    9382:	91 81       	ldd	r25, Z+1	; 0x01
    9384:	82 17       	cp	r24, r18
    9386:	93 07       	cpc	r25, r19
    9388:	d8 f3       	brcs	.-10     	; 0x9380 <_ZN6TMRpcm7disableEv+0x14a>
    938a:	41 50       	subi	r20, 0x01	; 1
    938c:	50 40       	sbci	r21, 0x00	; 0
    938e:	c1 f7       	brne	.-16     	; 0x9380 <_ZN6TMRpcm7disableEv+0x14a>
	playing = 0;
	*TIMSK[tt] &= ~( togByte | _BV(TOIE1) );
	if(ifOpen()){ sFile.close();}
	if(bitRead(*TCCRnA[tt],7) > 0){
		int current = *OCRnA[tt];
		for(int i=0; i < resolution; i++){
    9390:	0f 5f       	subi	r16, 0xFF	; 255
    9392:	1f 4f       	sbci	r17, 0xFF	; 255
    9394:	08 94       	sec
    9396:	21 1c       	adc	r2, r1
    9398:	31 1c       	adc	r3, r1
    939a:	11 97       	sbiw	r26, 0x01	; 1
    939c:	06 17       	cp	r16, r22
    939e:	17 07       	cpc	r17, r23
    93a0:	08 f4       	brcc	.+2      	; 0x93a4 <_ZN6TMRpcm7disableEv+0x16e>
    93a2:	b0 cf       	rjmp	.-160    	; 0x9304 <_ZN6TMRpcm7disableEv+0xce>
				*OCRnA[tt] = constrain((current - i),0,resolution);
			#endif
			for(int i=0; i<10; i++){ while(*TCNT[tt] < resolution-50){} }
		}
	}
    bitSet(optionByte,5);
    93a4:	80 91 c2 02 	lds	r24, 0x02C2
    93a8:	80 62       	ori	r24, 0x20	; 32
    93aa:	80 93 c2 02 	sts	0x02C2, r24
    //rampUp = 1;
    *TCCRnA[tt] = *TCCRnB[tt] = 0;
    93ae:	80 91 a6 08 	lds	r24, 0x08A6
    93b2:	90 e0       	ldi	r25, 0x00	; 0
    93b4:	88 0f       	add	r24, r24
    93b6:	99 1f       	adc	r25, r25
    93b8:	fc 01       	movw	r30, r24
    93ba:	e3 51       	subi	r30, 0x13	; 19
    93bc:	fd 4f       	sbci	r31, 0xFD	; 253
    93be:	01 90       	ld	r0, Z+
    93c0:	f0 81       	ld	r31, Z
    93c2:	e0 2d       	mov	r30, r0
    93c4:	8b 51       	subi	r24, 0x1B	; 27
    93c6:	9d 4f       	sbci	r25, 0xFD	; 253
    93c8:	ec 01       	movw	r28, r24
    93ca:	a8 81       	ld	r26, Y
    93cc:	b9 81       	ldd	r27, Y+1	; 0x01
    93ce:	1c 92       	st	X, r1
    93d0:	10 82       	st	Z, r1
}
    93d2:	df 91       	pop	r29
    93d4:	cf 91       	pop	r28
    93d6:	1f 91       	pop	r17
    93d8:	0f 91       	pop	r16
    93da:	ff 90       	pop	r15
    93dc:	ef 90       	pop	r14
    93de:	df 90       	pop	r13
    93e0:	cf 90       	pop	r12
    93e2:	bf 90       	pop	r11
    93e4:	af 90       	pop	r10
    93e6:	9f 90       	pop	r9
    93e8:	8f 90       	pop	r8
    93ea:	7f 90       	pop	r7
    93ec:	6f 90       	pop	r6
    93ee:	5f 90       	pop	r5
    93f0:	4f 90       	pop	r4
    93f2:	3f 90       	pop	r3
    93f4:	2f 90       	pop	r2
    93f6:	08 95       	ret

000093f8 <_ZN6TMRpcm6setPinEv>:
	*TCCRnA[tt] = _BV(WGM21) | _BV(WGM20) | _BV(COM2B1); //Fast PWM with 0xFF (255) top
}
#endif


void TMRpcm::setPin(){
    93f8:	cf 93       	push	r28
    93fa:	df 93       	push	r29
    93fc:	ec 01       	movw	r28, r24
	disable();
    93fe:	0e 94 1b 49 	call	0x9236	; 0x9236 <_ZN6TMRpcm7disableEv>
	pinMode(speakerPin,OUTPUT);
    9402:	88 81       	ld	r24, Y
    9404:	61 e0       	ldi	r22, 0x01	; 1
    9406:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <pinMode>

	#if !defined (USE_TIMER2) //NOT using TIMER2
		switch(speakerPin){
    940a:	88 81       	ld	r24, Y
    940c:	86 30       	cpi	r24, 0x06	; 6
    940e:	41 f0       	breq	.+16     	; 0x9420 <_ZN6TMRpcm6setPinEv+0x28>
    9410:	8e 32       	cpi	r24, 0x2E	; 46
    9412:	51 f0       	breq	.+20     	; 0x9428 <_ZN6TMRpcm6setPinEv+0x30>
    9414:	85 30       	cpi	r24, 0x05	; 5
    9416:	61 f4       	brne	.+24     	; 0x9430 <_ZN6TMRpcm6setPinEv+0x38>
			case 5: tt=1; break; //use TIMER3
    9418:	81 e0       	ldi	r24, 0x01	; 1
    941a:	80 93 a6 08 	sts	0x08A6, r24
    941e:	0a c0       	rjmp	.+20     	; 0x9434 <_ZN6TMRpcm6setPinEv+0x3c>
			case 6: tt=2; break;//use TIMER4
    9420:	82 e0       	ldi	r24, 0x02	; 2
    9422:	80 93 a6 08 	sts	0x08A6, r24
    9426:	06 c0       	rjmp	.+12     	; 0x9434 <_ZN6TMRpcm6setPinEv+0x3c>
			case 46:tt=3; break;//use TIMER5
    9428:	83 e0       	ldi	r24, 0x03	; 3
    942a:	80 93 a6 08 	sts	0x08A6, r24
    942e:	02 c0       	rjmp	.+4      	; 0x9434 <_ZN6TMRpcm6setPinEv+0x3c>
			default:tt=0; break; //useTIMER1 as default
    9430:	10 92 a6 08 	sts	0x08A6, r1
	#else //Using TIMER2 only
		tt = 0;
	#endif

	#if defined (SD_FULLSPEED)
		SPSR |= (1 << SPI2X);
    9434:	8d b5       	in	r24, 0x2d	; 45
    9436:	81 60       	ori	r24, 0x01	; 1
    9438:	8d bd       	out	0x2d, r24	; 45
	   	SPCR &= ~((1 <<SPR1) | (1 << SPR0));
    943a:	8c b5       	in	r24, 0x2c	; 44
    943c:	8c 7f       	andi	r24, 0xFC	; 252
    943e:	8c bd       	out	0x2c, r24	; 44
	#endif
}
    9440:	df 91       	pop	r29
    9442:	cf 91       	pop	r28
    9444:	08 95       	ret

00009446 <_ZN6TMRpcm4playEPcm>:
void TMRpcm::play(char* filename){
	play(filename,0);
}


void TMRpcm::play(char* filename, unsigned long seekPoint){
    9446:	af 92       	push	r10
    9448:	bf 92       	push	r11
    944a:	cf 92       	push	r12
    944c:	df 92       	push	r13
    944e:	ef 92       	push	r14
    9450:	ff 92       	push	r15
    9452:	0f 93       	push	r16
    9454:	1f 93       	push	r17
    9456:	cf 93       	push	r28
    9458:	df 93       	push	r29
    945a:	5c 01       	movw	r10, r24
    945c:	eb 01       	movw	r28, r22
    945e:	69 01       	movw	r12, r18
    9460:	7a 01       	movw	r14, r20

  if(speakerPin != lastSpeakPin){
    9462:	dc 01       	movw	r26, r24
    9464:	9c 91       	ld	r25, X
    9466:	17 96       	adiw	r26, 0x07	; 7
    9468:	8c 91       	ld	r24, X
    946a:	17 97       	sbiw	r26, 0x07	; 7
    946c:	98 17       	cp	r25, r24
    946e:	31 f0       	breq	.+12     	; 0x947c <_ZN6TMRpcm4playEPcm+0x36>
	  #if !defined (MODE2)
	  	setPin();
    9470:	c5 01       	movw	r24, r10
    9472:	0e 94 fc 49 	call	0x93f8	; 0x93f8 <_ZN6TMRpcm6setPinEv>
	  #else
	    setPins();
	  #endif
	  lastSpeakPin=speakerPin;
    9476:	f5 01       	movw	r30, r10
    9478:	80 81       	ld	r24, Z
    947a:	87 83       	std	Z+7, r24	; 0x07
   }
  stopPlayback();
    947c:	c5 01       	movw	r24, r10
    947e:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <_ZN6TMRpcm12stopPlaybackEv>
  if(!wavInfo(filename)){
    9482:	c5 01       	movw	r24, r10
    9484:	be 01       	movw	r22, r28
    9486:	0e 94 5e 46 	call	0x8cbc	; 0x8cbc <_ZN6TMRpcm7wavInfoEPc>
    948a:	88 23       	and	r24, r24
    948c:	09 f4       	brne	.+2      	; 0x9490 <_ZN6TMRpcm4playEPcm+0x4a>
    948e:	7e c1       	rjmp	.+764    	; 0x978c <_ZN6TMRpcm4playEPcm+0x346>
  	#endif
  return;
  }//verify its a valid wav file


  		if(seekPoint > 0){ seekPoint = (SAMPLE_RATE*seekPoint) + fPosition();
    9490:	c1 14       	cp	r12, r1
    9492:	d1 04       	cpc	r13, r1
    9494:	e1 04       	cpc	r14, r1
    9496:	f1 04       	cpc	r15, r1
    9498:	c9 f0       	breq	.+50     	; 0x94cc <_ZN6TMRpcm4playEPcm+0x86>
    949a:	d5 01       	movw	r26, r10
    949c:	13 96       	adiw	r26, 0x03	; 3
    949e:	2d 91       	ld	r18, X+
    94a0:	3c 91       	ld	r19, X
    94a2:	14 97       	sbiw	r26, 0x04	; 4
    94a4:	40 e0       	ldi	r20, 0x00	; 0
    94a6:	50 e0       	ldi	r21, 0x00	; 0
    94a8:	c7 01       	movw	r24, r14
    94aa:	b6 01       	movw	r22, r12
    94ac:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    94b0:	6b 01       	movw	r12, r22
    94b2:	7c 01       	movw	r14, r24
    94b4:	c5 01       	movw	r24, r10
    94b6:	0e 94 38 46 	call	0x8c70	; 0x8c70 <_ZN6TMRpcm9fPositionEv>
    94ba:	ab 01       	movw	r20, r22
    94bc:	bc 01       	movw	r22, r24
    94be:	4c 0d       	add	r20, r12
    94c0:	5d 1d       	adc	r21, r13
    94c2:	6e 1d       	adc	r22, r14
    94c4:	7f 1d       	adc	r23, r15
  		seek(seekPoint); //skip the header info
    94c6:	c5 01       	movw	r24, r10
    94c8:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>

  }
	playing = 1; bitClear(optionByte,7); //paused = 0;
    94cc:	81 e0       	ldi	r24, 0x01	; 1
    94ce:	80 93 a7 0a 	sts	0x0AA7, r24
    94d2:	20 91 c2 02 	lds	r18, 0x02C2
    94d6:	2f 77       	andi	r18, 0x7F	; 127
    94d8:	20 93 c2 02 	sts	0x02C2, r18

	if(SAMPLE_RATE > 43050 ){ SAMPLE_RATE = 44100;
    94dc:	f5 01       	movw	r30, r10
    94de:	83 81       	ldd	r24, Z+3	; 0x03
    94e0:	94 81       	ldd	r25, Z+4	; 0x04
    94e2:	f8 ea       	ldi	r31, 0xA8	; 168
    94e4:	8b 32       	cpi	r24, 0x2B	; 43
    94e6:	9f 07       	cpc	r25, r31
    94e8:	38 f0       	brcs	.+14     	; 0x94f8 <_ZN6TMRpcm4playEPcm+0xb2>
    94ea:	84 e4       	ldi	r24, 0x44	; 68
    94ec:	9c ea       	ldi	r25, 0xAC	; 172
    94ee:	d5 01       	movw	r26, r10
    94f0:	14 96       	adiw	r26, 0x04	; 4
    94f2:	9c 93       	st	X, r25
    94f4:	8e 93       	st	-X, r24
    94f6:	13 97       	sbiw	r26, 0x03	; 3
  	#endif
  	}

#if !defined (USE_TIMER2)
    //if(qual)
    if(bitRead(optionByte,6)){resolution = 20.25 * ((RESOLUTION_BASE/2)/SAMPLE_RATE);}
    94f8:	26 ff       	sbrs	r18, 6
    94fa:	1d c0       	rjmp	.+58     	; 0x9536 <_ZN6TMRpcm4playEPcm+0xf0>
    94fc:	f5 01       	movw	r30, r10
    94fe:	23 81       	ldd	r18, Z+3	; 0x03
    9500:	34 81       	ldd	r19, Z+4	; 0x04
    9502:	40 e0       	ldi	r20, 0x00	; 0
    9504:	50 e0       	ldi	r21, 0x00	; 0
    9506:	60 e0       	ldi	r22, 0x00	; 0
    9508:	75 e3       	ldi	r23, 0x35	; 53
    950a:	8c e0       	ldi	r24, 0x0C	; 12
    950c:	90 e0       	ldi	r25, 0x00	; 0
    950e:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    9512:	ca 01       	movw	r24, r20
    9514:	b9 01       	movw	r22, r18
    9516:	0e 94 6d 57 	call	0xaeda	; 0xaeda <__floatunsisf>
    951a:	20 e0       	ldi	r18, 0x00	; 0
    951c:	30 e0       	ldi	r19, 0x00	; 0
    951e:	42 ea       	ldi	r20, 0xA2	; 162
    9520:	51 e4       	ldi	r21, 0x41	; 65
    9522:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    9526:	0e 94 41 57 	call	0xae82	; 0xae82 <__fixunssfsi>
    952a:	dc 01       	movw	r26, r24
    952c:	cb 01       	movw	r24, r22
    952e:	f5 01       	movw	r30, r10
    9530:	96 83       	std	Z+6, r25	; 0x06
    9532:	85 83       	std	Z+5, r24	; 0x05
    9534:	1e c0       	rjmp	.+60     	; 0x9572 <_ZN6TMRpcm4playEPcm+0x12c>
    else{ resolution = 20.25 * (RESOLUTION_BASE/SAMPLE_RATE);
    9536:	d5 01       	movw	r26, r10
    9538:	13 96       	adiw	r26, 0x03	; 3
    953a:	2d 91       	ld	r18, X+
    953c:	3c 91       	ld	r19, X
    953e:	14 97       	sbiw	r26, 0x04	; 4
    9540:	40 e0       	ldi	r20, 0x00	; 0
    9542:	50 e0       	ldi	r21, 0x00	; 0
    9544:	60 e0       	ldi	r22, 0x00	; 0
    9546:	7a e6       	ldi	r23, 0x6A	; 106
    9548:	88 e1       	ldi	r24, 0x18	; 24
    954a:	90 e0       	ldi	r25, 0x00	; 0
    954c:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    9550:	ca 01       	movw	r24, r20
    9552:	b9 01       	movw	r22, r18
    9554:	0e 94 6d 57 	call	0xaeda	; 0xaeda <__floatunsisf>
    9558:	20 e0       	ldi	r18, 0x00	; 0
    955a:	30 e0       	ldi	r19, 0x00	; 0
    955c:	42 ea       	ldi	r20, 0xA2	; 162
    955e:	51 e4       	ldi	r21, 0x41	; 65
    9560:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    9564:	0e 94 41 57 	call	0xae82	; 0xae82 <__fixunssfsi>
    9568:	dc 01       	movw	r26, r24
    956a:	cb 01       	movw	r24, r22
    956c:	f5 01       	movw	r30, r10
    956e:	96 83       	std	Z+6, r25	; 0x06
    9570:	85 83       	std	Z+5, r24	; 0x05
	}else{
		*TCCRnB[tt] &= ~_BV(CS21);
		*TCCRnB[tt] |= _BV(CS20);
	}
#endif
    byte tmp = (sFile.read() + sFile.peek()) / 2;
    9572:	0a e8       	ldi	r16, 0x8A	; 138
    9574:	18 e0       	ldi	r17, 0x08	; 8
    9576:	c8 01       	movw	r24, r16
    9578:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    957c:	ec 01       	movw	r28, r24
    957e:	c8 01       	movw	r24, r16
    9580:	0e 94 46 24 	call	0x488c	; 0x488c <_ZN5SDLib4File4peekEv>
    9584:	c8 0f       	add	r28, r24
    9586:	d9 1f       	adc	r29, r25
    9588:	dd 23       	and	r29, r29
    958a:	0c f4       	brge	.+2      	; 0x958e <_ZN6TMRpcm4playEPcm+0x148>
    958c:	21 96       	adiw	r28, 0x01	; 1
    958e:	6e 01       	movw	r12, r28
    9590:	d5 94       	asr	r13
    9592:	c7 94       	ror	r12

	#if defined(rampMega)
    if(bitRead(optionByte,5)){
    9594:	80 91 c2 02 	lds	r24, 0x02C2
    9598:	85 ff       	sbrs	r24, 5
    959a:	4a c0       	rjmp	.+148    	; 0x9630 <_ZN6TMRpcm4playEPcm+0x1ea>

			*OCRnA[tt] = 0; *OCRnB[tt] = resolution;
    959c:	e0 91 a6 08 	lds	r30, 0x08A6
    95a0:	f0 e0       	ldi	r31, 0x00	; 0
    95a2:	ee 0f       	add	r30, r30
    95a4:	ff 1f       	adc	r31, r31
    95a6:	e3 52       	subi	r30, 0x23	; 35
    95a8:	fd 4f       	sbci	r31, 0xFD	; 253
    95aa:	01 90       	ld	r0, Z+
    95ac:	f0 81       	ld	r31, Z
    95ae:	e0 2d       	mov	r30, r0
    95b0:	11 82       	std	Z+1, r1	; 0x01
    95b2:	10 82       	st	Z, r1
    95b4:	e0 91 a6 08 	lds	r30, 0x08A6
    95b8:	f0 e0       	ldi	r31, 0x00	; 0
    95ba:	ee 0f       	add	r30, r30
    95bc:	ff 1f       	adc	r31, r31
    95be:	eb 53       	subi	r30, 0x3B	; 59
    95c0:	fd 4f       	sbci	r31, 0xFD	; 253
    95c2:	01 90       	ld	r0, Z+
    95c4:	f0 81       	ld	r31, Z
    95c6:	e0 2d       	mov	r30, r0
    95c8:	d5 01       	movw	r26, r10
    95ca:	15 96       	adiw	r26, 0x05	; 5
    95cc:	8d 91       	ld	r24, X+
    95ce:	9c 91       	ld	r25, X
    95d0:	16 97       	sbiw	r26, 0x06	; 6
    95d2:	91 83       	std	Z+1, r25	; 0x01
    95d4:	80 83       	st	Z, r24
			timerSt();
    95d6:	c5 01       	movw	r24, r10
    95d8:	0e 94 bb 45 	call	0x8b76	; 0x8b76 <_ZN6TMRpcm7timerStEv>
			for(unsigned int i=0; i < resolution; i++){
    95dc:	f5 01       	movw	r30, r10
    95de:	25 81       	ldd	r18, Z+5	; 0x05
    95e0:	36 81       	ldd	r19, Z+6	; 0x06
    95e2:	21 15       	cp	r18, r1
    95e4:	31 05       	cpc	r19, r1
    95e6:	21 f1       	breq	.+72     	; 0x9630 <_ZN6TMRpcm4playEPcm+0x1ea>
    95e8:	c0 e0       	ldi	r28, 0x00	; 0
    95ea:	d0 e0       	ldi	r29, 0x00	; 0

				*OCRnB[tt] = constrain(resolution-i,0,resolution);
    95ec:	05 ec       	ldi	r16, 0xC5	; 197
    95ee:	12 e0       	ldi	r17, 0x02	; 2
    95f0:	e0 91 a6 08 	lds	r30, 0x08A6
    95f4:	f0 e0       	ldi	r31, 0x00	; 0
    95f6:	ee 0f       	add	r30, r30
    95f8:	ff 1f       	adc	r31, r31
    95fa:	e0 0f       	add	r30, r16
    95fc:	f1 1f       	adc	r31, r17
    95fe:	01 90       	ld	r0, Z+
    9600:	f0 81       	ld	r31, Z
    9602:	e0 2d       	mov	r30, r0
    9604:	c9 01       	movw	r24, r18
    9606:	8c 1b       	sub	r24, r28
    9608:	9d 0b       	sbc	r25, r29
    960a:	28 17       	cp	r18, r24
    960c:	39 07       	cpc	r19, r25
    960e:	08 f4       	brcc	.+2      	; 0x9612 <_ZN6TMRpcm4playEPcm+0x1cc>
    9610:	c9 01       	movw	r24, r18
    9612:	91 83       	std	Z+1, r25	; 0x01
    9614:	80 83       	st	Z, r24
			//if(bitRead(*TCCRnB[tt],0)){
			//	for(int i=0; i<10; i++){
			//		while(*TCNT[tt] < resolution-50){}
			//	}
			//}else{
				delayMicroseconds(150);
    9616:	86 e9       	ldi	r24, 0x96	; 150
    9618:	90 e0       	ldi	r25, 0x00	; 0
    961a:	0e 94 65 15 	call	0x2aca	; 0x2aca <delayMicroseconds>
	#if defined(rampMega)
    if(bitRead(optionByte,5)){

			*OCRnA[tt] = 0; *OCRnB[tt] = resolution;
			timerSt();
			for(unsigned int i=0; i < resolution; i++){
    961e:	21 96       	adiw	r28, 0x01	; 1
    9620:	d5 01       	movw	r26, r10
    9622:	15 96       	adiw	r26, 0x05	; 5
    9624:	2d 91       	ld	r18, X+
    9626:	3c 91       	ld	r19, X
    9628:	16 97       	sbiw	r26, 0x06	; 6
    962a:	c2 17       	cp	r28, r18
    962c:	d3 07       	cpc	r29, r19
    962e:	00 f3       	brcs	.-64     	; 0x95f0 <_ZN6TMRpcm4playEPcm+0x1aa>
				delayMicroseconds(150);
			//}
			}

	}
	bitClear(optionByte,5);
    9630:	80 91 c2 02 	lds	r24, 0x02C2
    9634:	8f 7d       	andi	r24, 0xDF	; 223
    9636:	80 93 c2 02 	sts	0x02C2, r24
	#endif

	//rampUp = 0;
	unsigned int mod;
	if(volMod > 0){ mod = *OCRnA[tt] >> volMod; }else{ mod = *OCRnA[tt] << (volMod*-1); }
    963a:	20 91 a7 08 	lds	r18, 0x08A7
    963e:	22 23       	and	r18, r18
    9640:	a1 f0       	breq	.+40     	; 0x966a <_ZN6TMRpcm4playEPcm+0x224>
    9642:	e0 91 a6 08 	lds	r30, 0x08A6
    9646:	f0 e0       	ldi	r31, 0x00	; 0
    9648:	ee 0f       	add	r30, r30
    964a:	ff 1f       	adc	r31, r31
    964c:	e3 52       	subi	r30, 0x23	; 35
    964e:	fd 4f       	sbci	r31, 0xFD	; 253
    9650:	01 90       	ld	r0, Z+
    9652:	f0 81       	ld	r31, Z
    9654:	e0 2d       	mov	r30, r0
    9656:	80 81       	ld	r24, Z
    9658:	91 81       	ldd	r25, Z+1	; 0x01
    965a:	fc 01       	movw	r30, r24
    965c:	02 c0       	rjmp	.+4      	; 0x9662 <_ZN6TMRpcm4playEPcm+0x21c>
    965e:	f6 95       	lsr	r31
    9660:	e7 95       	ror	r30
    9662:	2a 95       	dec	r18
    9664:	e2 f7       	brpl	.-8      	; 0x965e <_ZN6TMRpcm4playEPcm+0x218>
    9666:	9f 01       	movw	r18, r30
    9668:	0c c0       	rjmp	.+24     	; 0x9682 <_ZN6TMRpcm4playEPcm+0x23c>
    966a:	e0 91 a6 08 	lds	r30, 0x08A6
    966e:	f0 e0       	ldi	r31, 0x00	; 0
    9670:	ee 0f       	add	r30, r30
    9672:	ff 1f       	adc	r31, r31
    9674:	e3 52       	subi	r30, 0x23	; 35
    9676:	fd 4f       	sbci	r31, 0xFD	; 253
    9678:	01 90       	ld	r0, Z+
    967a:	f0 81       	ld	r31, Z
    967c:	e0 2d       	mov	r30, r0
    967e:	20 81       	ld	r18, Z
    9680:	31 81       	ldd	r19, Z+1	; 0x01
	if(tmp > mod){
    9682:	6c 2d       	mov	r22, r12
    9684:	70 e0       	ldi	r23, 0x00	; 0
    9686:	26 17       	cp	r18, r22
    9688:	37 07       	cpc	r19, r23
    968a:	98 f5       	brcc	.+102    	; 0x96f2 <_ZN6TMRpcm4playEPcm+0x2ac>
    968c:	40 e0       	ldi	r20, 0x00	; 0
    968e:	50 e0       	ldi	r21, 0x00	; 0
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod+1,mod, tmp); buffer[0][i] = mod; }
    9690:	0c 2d       	mov	r16, r12
    9692:	c7 2f       	mov	r28, r23
    9694:	a9 ea       	ldi	r26, 0xA9	; 169
    9696:	b8 e0       	ldi	r27, 0x08	; 8
    9698:	c9 01       	movw	r24, r18
    969a:	01 96       	adiw	r24, 0x01	; 1
    969c:	82 17       	cp	r24, r18
    969e:	93 07       	cpc	r25, r19
    96a0:	30 f0       	brcs	.+12     	; 0x96ae <_ZN6TMRpcm4playEPcm+0x268>
    96a2:	9c 01       	movw	r18, r24
    96a4:	68 17       	cp	r22, r24
    96a6:	79 07       	cpc	r23, r25
    96a8:	10 f4       	brcc	.+4      	; 0x96ae <_ZN6TMRpcm4playEPcm+0x268>
    96aa:	20 2f       	mov	r18, r16
    96ac:	3c 2f       	mov	r19, r28
    96ae:	fd 01       	movw	r30, r26
    96b0:	e4 0f       	add	r30, r20
    96b2:	f5 1f       	adc	r31, r21
    96b4:	20 83       	st	Z, r18
    96b6:	4f 5f       	subi	r20, 0xFF	; 255
    96b8:	5f 4f       	sbci	r21, 0xFF	; 255
    96ba:	4e 3f       	cpi	r20, 0xFE	; 254
    96bc:	51 05       	cpc	r21, r1
    96be:	61 f7       	brne	.-40     	; 0x9698 <_ZN6TMRpcm4playEPcm+0x252>
    96c0:	40 e0       	ldi	r20, 0x00	; 0
    96c2:	50 e0       	ldi	r21, 0x00	; 0
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod+1,mod, tmp); buffer[1][i] = mod; }
    96c4:	b6 2f       	mov	r27, r22
    96c6:	a7 2f       	mov	r26, r23
    96c8:	c9 01       	movw	r24, r18
    96ca:	01 96       	adiw	r24, 0x01	; 1
    96cc:	82 17       	cp	r24, r18
    96ce:	93 07       	cpc	r25, r19
    96d0:	30 f0       	brcs	.+12     	; 0x96de <_ZN6TMRpcm4playEPcm+0x298>
    96d2:	9c 01       	movw	r18, r24
    96d4:	68 17       	cp	r22, r24
    96d6:	79 07       	cpc	r23, r25
    96d8:	10 f4       	brcc	.+4      	; 0x96de <_ZN6TMRpcm4playEPcm+0x298>
    96da:	2b 2f       	mov	r18, r27
    96dc:	3a 2f       	mov	r19, r26
    96de:	fa 01       	movw	r30, r20
    96e0:	e9 55       	subi	r30, 0x59	; 89
    96e2:	f6 4f       	sbci	r31, 0xF6	; 246
    96e4:	20 83       	st	Z, r18
    96e6:	4f 5f       	subi	r20, 0xFF	; 255
    96e8:	5f 4f       	sbci	r21, 0xFF	; 255
    96ea:	4e 3f       	cpi	r20, 0xFE	; 254
    96ec:	51 05       	cpc	r21, r1
    96ee:	61 f7       	brne	.-40     	; 0x96c8 <_ZN6TMRpcm4playEPcm+0x282>
    96f0:	34 c0       	rjmp	.+104    	; 0x975a <_ZN6TMRpcm4playEPcm+0x314>
	#endif

	//rampUp = 0;
	unsigned int mod;
	if(volMod > 0){ mod = *OCRnA[tt] >> volMod; }else{ mod = *OCRnA[tt] << (volMod*-1); }
	if(tmp > mod){
    96f2:	40 e0       	ldi	r20, 0x00	; 0
    96f4:	50 e0       	ldi	r21, 0x00	; 0
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod+1,mod, tmp); buffer[0][i] = mod; }
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod+1,mod, tmp); buffer[1][i] = mod; }
	}else{
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod-1,tmp ,mod); buffer[0][i] = mod; }
    96f6:	0c 2d       	mov	r16, r12
    96f8:	c7 2f       	mov	r28, r23
    96fa:	a9 ea       	ldi	r26, 0xA9	; 169
    96fc:	b8 e0       	ldi	r27, 0x08	; 8
    96fe:	c9 01       	movw	r24, r18
    9700:	01 97       	sbiw	r24, 0x01	; 1
    9702:	86 17       	cp	r24, r22
    9704:	97 07       	cpc	r25, r23
    9706:	28 f0       	brcs	.+10     	; 0x9712 <_ZN6TMRpcm4playEPcm+0x2cc>
    9708:	82 17       	cp	r24, r18
    970a:	93 07       	cpc	r25, r19
    970c:	20 f4       	brcc	.+8      	; 0x9716 <_ZN6TMRpcm4playEPcm+0x2d0>
    970e:	9c 01       	movw	r18, r24
    9710:	02 c0       	rjmp	.+4      	; 0x9716 <_ZN6TMRpcm4playEPcm+0x2d0>
    9712:	20 2f       	mov	r18, r16
    9714:	3c 2f       	mov	r19, r28
    9716:	fd 01       	movw	r30, r26
    9718:	e4 0f       	add	r30, r20
    971a:	f5 1f       	adc	r31, r21
    971c:	20 83       	st	Z, r18
    971e:	4f 5f       	subi	r20, 0xFF	; 255
    9720:	5f 4f       	sbci	r21, 0xFF	; 255
    9722:	4e 3f       	cpi	r20, 0xFE	; 254
    9724:	51 05       	cpc	r21, r1
    9726:	59 f7       	brne	.-42     	; 0x96fe <_ZN6TMRpcm4playEPcm+0x2b8>
    9728:	40 e0       	ldi	r20, 0x00	; 0
    972a:	50 e0       	ldi	r21, 0x00	; 0
		for(unsigned int i=0; i<buffSize; i++){ mod = constrain(mod-1,tmp, mod); buffer[1][i] = mod; }
    972c:	b6 2f       	mov	r27, r22
    972e:	a7 2f       	mov	r26, r23
    9730:	c9 01       	movw	r24, r18
    9732:	01 97       	sbiw	r24, 0x01	; 1
    9734:	86 17       	cp	r24, r22
    9736:	97 07       	cpc	r25, r23
    9738:	28 f0       	brcs	.+10     	; 0x9744 <_ZN6TMRpcm4playEPcm+0x2fe>
    973a:	82 17       	cp	r24, r18
    973c:	93 07       	cpc	r25, r19
    973e:	20 f4       	brcc	.+8      	; 0x9748 <_ZN6TMRpcm4playEPcm+0x302>
    9740:	9c 01       	movw	r18, r24
    9742:	02 c0       	rjmp	.+4      	; 0x9748 <_ZN6TMRpcm4playEPcm+0x302>
    9744:	2b 2f       	mov	r18, r27
    9746:	3a 2f       	mov	r19, r26
    9748:	fa 01       	movw	r30, r20
    974a:	e9 55       	subi	r30, 0x59	; 89
    974c:	f6 4f       	sbci	r31, 0xF6	; 246
    974e:	20 83       	st	Z, r18
    9750:	4f 5f       	subi	r20, 0xFF	; 255
    9752:	5f 4f       	sbci	r21, 0xFF	; 255
    9754:	4e 3f       	cpi	r20, 0xFE	; 254
    9756:	51 05       	cpc	r21, r1
    9758:	59 f7       	brne	.-42     	; 0x9730 <_ZN6TMRpcm4playEPcm+0x2ea>
	}

    whichBuff = 0; buffEmpty[0] = 0; buffEmpty[1] = 0; buffCount = 0;
    975a:	10 92 a8 0a 	sts	0x0AA8, r1
    975e:	10 92 c3 02 	sts	0x02C3, r1
    9762:	10 92 c4 02 	sts	0x02C4, r1
    9766:	10 92 a8 08 	sts	0x08A8, r1
    noInterrupts();
    976a:	f8 94       	cli
	timerSt();
    976c:	c5 01       	movw	r24, r10
    976e:	0e 94 bb 45 	call	0x8b76	; 0x8b76 <_ZN6TMRpcm7timerStEv>

    *TIMSK[tt] = ( togByte | _BV(TOIE1) );
    9772:	e0 91 a6 08 	lds	r30, 0x08A6
    9776:	f0 e0       	ldi	r31, 0x00	; 0
    9778:	ee 0f       	add	r30, r30
    977a:	ff 1f       	adc	r31, r31
    977c:	eb 50       	subi	r30, 0x0B	; 11
    977e:	fd 4f       	sbci	r31, 0xFD	; 253
    9780:	01 90       	ld	r0, Z+
    9782:	f0 81       	ld	r31, Z
    9784:	e0 2d       	mov	r30, r0
    9786:	81 e2       	ldi	r24, 0x21	; 33
    9788:	80 83       	st	Z, r24

    interrupts();
    978a:	78 94       	sei

}
    978c:	df 91       	pop	r29
    978e:	cf 91       	pop	r28
    9790:	1f 91       	pop	r17
    9792:	0f 91       	pop	r16
    9794:	ff 90       	pop	r15
    9796:	ef 90       	pop	r14
    9798:	df 90       	pop	r13
    979a:	cf 90       	pop	r12
    979c:	bf 90       	pop	r11
    979e:	af 90       	pop	r10
    97a0:	08 95       	ret

000097a2 <_ZN6TMRpcm4playEPc>:

#if !defined (ENABLE_MULTI) //Below section for normal playback of 1 track at a time


void TMRpcm::play(char* filename){
	play(filename,0);
    97a2:	20 e0       	ldi	r18, 0x00	; 0
    97a4:	30 e0       	ldi	r19, 0x00	; 0
    97a6:	a9 01       	movw	r20, r18
    97a8:	0e 94 23 4a 	call	0x9446	; 0x9446 <_ZN6TMRpcm4playEPcm>
}
    97ac:	08 95       	ret

000097ae <_ZN6TMRpcm9isPlayingEv>:
}



boolean TMRpcm::isPlaying(){
	return playing;
    97ae:	80 91 a7 0a 	lds	r24, 0x0AA7
}
    97b2:	08 95       	ret

000097b4 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc>:
	return metaInfo(1, filename, tagData, infoNum);
}


#if !defined (SDFAT)
boolean TMRpcm::searchMainTags(File xFile, char *datStr){
    97b4:	4f 92       	push	r4
    97b6:	5f 92       	push	r5
    97b8:	6f 92       	push	r6
    97ba:	7f 92       	push	r7
    97bc:	8f 92       	push	r8
    97be:	9f 92       	push	r9
    97c0:	af 92       	push	r10
    97c2:	bf 92       	push	r11
    97c4:	cf 92       	push	r12
    97c6:	df 92       	push	r13
    97c8:	ef 92       	push	r14
    97ca:	ff 92       	push	r15
    97cc:	0f 93       	push	r16
    97ce:	1f 93       	push	r17
    97d0:	cf 93       	push	r28
    97d2:	df 93       	push	r29
    97d4:	cd b7       	in	r28, 0x3d	; 61
    97d6:	de b7       	in	r29, 0x3e	; 62
    97d8:	28 97       	sbiw	r28, 0x08	; 8
    97da:	0f b6       	in	r0, 0x3f	; 63
    97dc:	f8 94       	cli
    97de:	de bf       	out	0x3e, r29	; 62
    97e0:	0f be       	out	0x3f, r0	; 63
    97e2:	cd bf       	out	0x3d, r28	; 61
    97e4:	5b 01       	movw	r10, r22
    97e6:	4a 01       	movw	r8, r20
	xFile.seek(36);
    97e8:	cb 01       	movw	r24, r22
    97ea:	44 e2       	ldi	r20, 0x24	; 36
    97ec:	50 e0       	ldi	r21, 0x00	; 0
    97ee:	60 e0       	ldi	r22, 0x00	; 0
    97f0:	70 e0       	ldi	r23, 0x00	; 0
    97f2:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
#else
unsigned long TMRpcm::searchMainTags(SdFile xFile, char *datStr){
	xFile.seekSet(36);
#endif
		boolean found = 0;
	    char dChars[4] = {'d','a','t','a'};
    97f6:	84 e6       	ldi	r24, 0x64	; 100
    97f8:	8d 83       	std	Y+5, r24	; 0x05
    97fa:	81 e6       	ldi	r24, 0x61	; 97
    97fc:	8e 83       	std	Y+6, r24	; 0x06
    97fe:	94 e7       	ldi	r25, 0x74	; 116
    9800:	9f 83       	std	Y+7, r25	; 0x07
    9802:	88 87       	std	Y+8, r24	; 0x08
		char tmpChars[4];

		//xFile.seek(36);
	    xFile.read((char*)tmpChars,4);
    9804:	c5 01       	movw	r24, r10
    9806:	be 01       	movw	r22, r28
    9808:	6f 5f       	subi	r22, 0xFF	; 255
    980a:	7f 4f       	sbci	r23, 0xFF	; 255
    980c:	44 e0       	ldi	r20, 0x04	; 4
    980e:	50 e0       	ldi	r21, 0x00	; 0
    9810:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
    9814:	6e 01       	movw	r12, r28
    9816:	08 94       	sec
    9818:	c1 1c       	adc	r12, r1
    981a:	d1 1c       	adc	r13, r1
    981c:	0f 2e       	mov	r0, r31
    981e:	f5 e0       	ldi	r31, 0x05	; 5
    9820:	4f 2e       	mov	r4, r31
    9822:	55 24       	eor	r5, r5
    9824:	f0 2d       	mov	r31, r0
    9826:	4c 0e       	add	r4, r28
    9828:	5d 1e       	adc	r5, r29
	return metaInfo(1, filename, tagData, infoNum);
}


#if !defined (SDFAT)
boolean TMRpcm::searchMainTags(File xFile, char *datStr){
    982a:	72 01       	movw	r14, r4
		char tmpChars[4];

		//xFile.seek(36);
	    xFile.read((char*)tmpChars,4);
	    for (byte i =0; i<4; i++){
			if(tmpChars[i] != dChars[i]){
    982c:	f6 01       	movw	r30, r12
    982e:	91 91       	ld	r25, Z+
    9830:	6f 01       	movw	r12, r30
    9832:	f2 01       	movw	r30, r4
    9834:	81 91       	ld	r24, Z+
    9836:	2f 01       	movw	r4, r30
    9838:	98 17       	cp	r25, r24
    983a:	09 f4       	brne	.+2      	; 0x983e <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x8a>
    983c:	3f c0       	rjmp	.+126    	; 0x98bc <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x108>
				#if !defined (SDFAT)
				 	xFile.seek(40);
    983e:	c5 01       	movw	r24, r10
    9840:	48 e2       	ldi	r20, 0x28	; 40
    9842:	50 e0       	ldi	r21, 0x00	; 0
    9844:	60 e0       	ldi	r22, 0x00	; 0
    9846:	70 e0       	ldi	r23, 0x00	; 0
    9848:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
				 	unsigned int siz = xFile.read(); siz = (xFile.read() << 8 | siz)+2;
    984c:	c5 01       	movw	r24, r10
    984e:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9852:	8c 01       	movw	r16, r24
    9854:	c5 01       	movw	r24, r10
    9856:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    985a:	78 2e       	mov	r7, r24
    985c:	66 24       	eor	r6, r6
    985e:	06 29       	or	r16, r6
    9860:	17 29       	or	r17, r7
				 	xFile.seek(xFile.position() + siz);
    9862:	c5 01       	movw	r24, r10
    9864:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9868:	dc 01       	movw	r26, r24
    986a:	cb 01       	movw	r24, r22
	    xFile.read((char*)tmpChars,4);
	    for (byte i =0; i<4; i++){
			if(tmpChars[i] != dChars[i]){
				#if !defined (SDFAT)
				 	xFile.seek(40);
				 	unsigned int siz = xFile.read(); siz = (xFile.read() << 8 | siz)+2;
    986c:	a8 01       	movw	r20, r16
    986e:	4e 5f       	subi	r20, 0xFE	; 254
    9870:	5f 4f       	sbci	r21, 0xFF	; 255
				 	xFile.seek(xFile.position() + siz);
    9872:	60 e0       	ldi	r22, 0x00	; 0
    9874:	70 e0       	ldi	r23, 0x00	; 0
    9876:	48 0f       	add	r20, r24
    9878:	59 1f       	adc	r21, r25
    987a:	6a 1f       	adc	r22, r26
    987c:	7b 1f       	adc	r23, r27
    987e:	c5 01       	movw	r24, r10
    9880:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
				#else
					xFile.seekSet(40);
					unsigned int siz = xFile.read(); siz = (xFile.read() << 8 | siz)+2;
				 	xFile.seekSet(xFile.curPosition() + siz);
				#endif
			 	xFile.read((char*)tmpChars,4);
    9884:	c5 01       	movw	r24, r10
    9886:	be 01       	movw	r22, r28
    9888:	6f 5f       	subi	r22, 0xFF	; 255
    988a:	7f 4f       	sbci	r23, 0xFF	; 255
    988c:	44 e0       	ldi	r20, 0x04	; 4
    988e:	50 e0       	ldi	r21, 0x00	; 0
    9890:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
 	     		for (byte i =0; i<4; i++){
					if(tmpChars[i] != dChars[i]){
    9894:	99 81       	ldd	r25, Y+1	; 0x01
    9896:	8d 81       	ldd	r24, Y+5	; 0x05
    9898:	98 17       	cp	r25, r24
    989a:	09 f0       	breq	.+2      	; 0x989e <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0xea>
    989c:	86 c0       	rjmp	.+268    	; 0x99aa <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1f6>
    989e:	9a 81       	ldd	r25, Y+2	; 0x02
    98a0:	8e 81       	ldd	r24, Y+6	; 0x06
    98a2:	98 17       	cp	r25, r24
    98a4:	09 f0       	breq	.+2      	; 0x98a8 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0xf4>
    98a6:	83 c0       	rjmp	.+262    	; 0x99ae <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1fa>
    98a8:	9b 81       	ldd	r25, Y+3	; 0x03
    98aa:	8f 81       	ldd	r24, Y+7	; 0x07
    98ac:	98 17       	cp	r25, r24
    98ae:	09 f0       	breq	.+2      	; 0x98b2 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0xfe>
    98b0:	80 c0       	rjmp	.+256    	; 0x99b2 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1fe>
    98b2:	9c 81       	ldd	r25, Y+4	; 0x04
    98b4:	88 85       	ldd	r24, Y+8	; 0x08
    98b6:	98 17       	cp	r25, r24
    98b8:	09 f0       	breq	.+2      	; 0x98bc <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x108>
    98ba:	7d c0       	rjmp	.+250    	; 0x99b6 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x202>
	    char dChars[4] = {'d','a','t','a'};
		char tmpChars[4];

		//xFile.seek(36);
	    xFile.read((char*)tmpChars,4);
	    for (byte i =0; i<4; i++){
    98bc:	ce 14       	cp	r12, r14
    98be:	df 04       	cpc	r13, r15
    98c0:	09 f0       	breq	.+2      	; 0x98c4 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x110>
    98c2:	b4 cf       	rjmp	.-152    	; 0x982c <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x78>
		 		}
			}
		 }

		unsigned long tmpp=0;
		unsigned long daBytes = xFile.read();
    98c4:	c5 01       	movw	r24, r10
    98c6:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    98ca:	2c 01       	movw	r4, r24
    98cc:	66 24       	eor	r6, r6
    98ce:	57 fc       	sbrc	r5, 7
    98d0:	60 94       	com	r6
    98d2:	76 2c       	mov	r7, r6
    98d4:	08 e0       	ldi	r16, 0x08	; 8
    98d6:	10 e0       	ldi	r17, 0x00	; 0
	    for (byte i =8; i<32; i+=8){
			tmpp = xFile.read();
    98d8:	c5 01       	movw	r24, r10
    98da:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    98de:	aa 27       	eor	r26, r26
    98e0:	97 fd       	sbrc	r25, 7
    98e2:	a0 95       	com	r26
    98e4:	ba 2f       	mov	r27, r26
			daBytes = tmpp << i | daBytes;
    98e6:	00 2e       	mov	r0, r16
    98e8:	04 c0       	rjmp	.+8      	; 0x98f2 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x13e>
    98ea:	88 0f       	add	r24, r24
    98ec:	99 1f       	adc	r25, r25
    98ee:	aa 1f       	adc	r26, r26
    98f0:	bb 1f       	adc	r27, r27
    98f2:	0a 94       	dec	r0
    98f4:	d2 f7       	brpl	.-12     	; 0x98ea <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x136>
    98f6:	48 2a       	or	r4, r24
    98f8:	59 2a       	or	r5, r25
    98fa:	6a 2a       	or	r6, r26
    98fc:	7b 2a       	or	r7, r27
    98fe:	08 5f       	subi	r16, 0xF8	; 248
    9900:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		 }

		unsigned long tmpp=0;
		unsigned long daBytes = xFile.read();
	    for (byte i =8; i<32; i+=8){
    9902:	00 32       	cpi	r16, 0x20	; 32
    9904:	11 05       	cpc	r17, r1
    9906:	41 f7       	brne	.-48     	; 0x98d8 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x124>
			tmpp = xFile.read();
			daBytes = tmpp << i | daBytes;
		}

		#if !defined (SDFAT)
			daBytes = xFile.position() + daBytes;
    9908:	c5 01       	movw	r24, r10
    990a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    990e:	6b 01       	movw	r12, r22
    9910:	7c 01       	movw	r14, r24
    9912:	c4 0c       	add	r12, r4
    9914:	d5 1c       	adc	r13, r5
    9916:	e6 1c       	adc	r14, r6
    9918:	f7 1c       	adc	r15, r7
			if(xFile.size() == daBytes){ return 0; }
    991a:	c5 01       	movw	r24, r10
    991c:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN5SDLib4File4sizeEv>
    9920:	dc 01       	movw	r26, r24
    9922:	cb 01       	movw	r24, r22
    9924:	c8 16       	cp	r12, r24
    9926:	d9 06       	cpc	r13, r25
    9928:	ea 06       	cpc	r14, r26
    992a:	fb 06       	cpc	r15, r27
    992c:	09 f4       	brne	.+2      	; 0x9930 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x17c>
    992e:	45 c0       	rjmp	.+138    	; 0x99ba <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x206>
			if(xFile.fileSize() == daBytes){ return 0; }
		#endif

	//if(found == 0){ //Jump to file end - 1000 and search for ID3 or LIST
	#if !defined (SDFAT)
		xFile.seek(daBytes);
    9930:	c5 01       	movw	r24, r10
    9932:	b7 01       	movw	r22, r14
    9934:	a6 01       	movw	r20, r12
    9936:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
	#else
		xFile.seekSet(daBytes);
	#endif

		while(xFile.available() > 5){
    993a:	2f c0       	rjmp	.+94     	; 0x999a <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1e6>
			if(xFile.read() == datStr[0] && xFile.peek() == datStr[1]){
    993c:	c5 01       	movw	r24, r10
    993e:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9942:	f4 01       	movw	r30, r8
    9944:	20 81       	ld	r18, Z
    9946:	30 e0       	ldi	r19, 0x00	; 0
    9948:	82 17       	cp	r24, r18
    994a:	93 07       	cpc	r25, r19
    994c:	31 f5       	brne	.+76     	; 0x999a <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1e6>
    994e:	c5 01       	movw	r24, r10
    9950:	0e 94 46 24 	call	0x488c	; 0x488c <_ZN5SDLib4File4peekEv>
    9954:	f4 01       	movw	r30, r8
    9956:	21 81       	ldd	r18, Z+1	; 0x01
    9958:	30 e0       	ldi	r19, 0x00	; 0
    995a:	82 17       	cp	r24, r18
    995c:	93 07       	cpc	r25, r19
    995e:	e9 f4       	brne	.+58     	; 0x999a <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1e6>
				xFile.read((char*)tmpChars,3);
    9960:	c5 01       	movw	r24, r10
    9962:	be 01       	movw	r22, r28
    9964:	6f 5f       	subi	r22, 0xFF	; 255
    9966:	7f 4f       	sbci	r23, 0xFF	; 255
    9968:	43 e0       	ldi	r20, 0x03	; 3
    996a:	50 e0       	ldi	r21, 0x00	; 0
    996c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
	 			if( tmpChars[1] == datStr[2] &&  tmpChars[2] == datStr[3] ){
    9970:	9a 81       	ldd	r25, Y+2	; 0x02
    9972:	f4 01       	movw	r30, r8
    9974:	82 81       	ldd	r24, Z+2	; 0x02
    9976:	98 17       	cp	r25, r24
    9978:	21 f4       	brne	.+8      	; 0x9982 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x1ce>
    997a:	9b 81       	ldd	r25, Y+3	; 0x03
    997c:	83 81       	ldd	r24, Z+3	; 0x03
    997e:	98 17       	cp	r25, r24
    9980:	f1 f0       	breq	.+60     	; 0x99be <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20a>
						#else
							return xFile.curPosition();
						#endif
				}else{
					#if !defined (SDFAT)
						xFile.seek(xFile.position() - 1 - 4); //pos - tagSize
    9982:	c5 01       	movw	r24, r10
    9984:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9988:	ab 01       	movw	r20, r22
    998a:	bc 01       	movw	r22, r24
    998c:	45 50       	subi	r20, 0x05	; 5
    998e:	50 40       	sbci	r21, 0x00	; 0
    9990:	60 40       	sbci	r22, 0x00	; 0
    9992:	70 40       	sbci	r23, 0x00	; 0
    9994:	c5 01       	movw	r24, r10
    9996:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
		xFile.seek(daBytes);
	#else
		xFile.seekSet(daBytes);
	#endif

		while(xFile.available() > 5){
    999a:	c5 01       	movw	r24, r10
    999c:	0e 94 65 25 	call	0x4aca	; 0x4aca <_ZN5SDLib4File9availableEv>
    99a0:	86 30       	cpi	r24, 0x06	; 6
    99a2:	91 05       	cpc	r25, r1
    99a4:	5c f6       	brge	.-106    	; 0x993c <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x188>
						xFile.seekSet(pos - 4);
					#endif
				}
			}
		}
		return 0;
    99a6:	80 e0       	ldi	r24, 0x00	; 0
    99a8:	0b c0       	rjmp	.+22     	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
				 	xFile.seekSet(xFile.curPosition() + siz);
				#endif
			 	xFile.read((char*)tmpChars,4);
 	     		for (byte i =0; i<4; i++){
					if(tmpChars[i] != dChars[i]){
						return 0;
    99aa:	80 e0       	ldi	r24, 0x00	; 0
    99ac:	09 c0       	rjmp	.+18     	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
    99ae:	80 e0       	ldi	r24, 0x00	; 0
    99b0:	07 c0       	rjmp	.+14     	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
    99b2:	80 e0       	ldi	r24, 0x00	; 0
    99b4:	05 c0       	rjmp	.+10     	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
    99b6:	80 e0       	ldi	r24, 0x00	; 0
    99b8:	03 c0       	rjmp	.+6      	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
			daBytes = tmpp << i | daBytes;
		}

		#if !defined (SDFAT)
			daBytes = xFile.position() + daBytes;
			if(xFile.size() == daBytes){ return 0; }
    99ba:	80 e0       	ldi	r24, 0x00	; 0
    99bc:	01 c0       	rjmp	.+2      	; 0x99c0 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc+0x20c>
			if(xFile.read() == datStr[0] && xFile.peek() == datStr[1]){
				xFile.read((char*)tmpChars,3);
	 			if( tmpChars[1] == datStr[2] &&  tmpChars[2] == datStr[3] ){
						found = 1;
						#if !defined (SDFAT)
							return 1; break;
    99be:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
		return 0;

}
    99c0:	28 96       	adiw	r28, 0x08	; 8
    99c2:	0f b6       	in	r0, 0x3f	; 63
    99c4:	f8 94       	cli
    99c6:	de bf       	out	0x3e, r29	; 62
    99c8:	0f be       	out	0x3f, r0	; 63
    99ca:	cd bf       	out	0x3d, r28	; 61
    99cc:	df 91       	pop	r29
    99ce:	cf 91       	pop	r28
    99d0:	1f 91       	pop	r17
    99d2:	0f 91       	pop	r16
    99d4:	ff 90       	pop	r15
    99d6:	ef 90       	pop	r14
    99d8:	df 90       	pop	r13
    99da:	cf 90       	pop	r12
    99dc:	bf 90       	pop	r11
    99de:	af 90       	pop	r10
    99e0:	9f 90       	pop	r9
    99e2:	8f 90       	pop	r8
    99e4:	7f 90       	pop	r7
    99e6:	6f 90       	pop	r6
    99e8:	5f 90       	pop	r5
    99ea:	4f 90       	pop	r4
    99ec:	08 95       	ret

000099ee <_ZN6TMRpcm8metaInfoEhPcS0_h>:



byte TMRpcm::metaInfo(boolean infoType, char* filename, char* tagData, byte whichInfo){
    99ee:	2f 92       	push	r2
    99f0:	3f 92       	push	r3
    99f2:	4f 92       	push	r4
    99f4:	5f 92       	push	r5
    99f6:	6f 92       	push	r6
    99f8:	7f 92       	push	r7
    99fa:	8f 92       	push	r8
    99fc:	9f 92       	push	r9
    99fe:	af 92       	push	r10
    9a00:	bf 92       	push	r11
    9a02:	cf 92       	push	r12
    9a04:	df 92       	push	r13
    9a06:	ef 92       	push	r14
    9a08:	ff 92       	push	r15
    9a0a:	0f 93       	push	r16
    9a0c:	1f 93       	push	r17
    9a0e:	cf 93       	push	r28
    9a10:	df 93       	push	r29
    9a12:	cd b7       	in	r28, 0x3d	; 61
    9a14:	de b7       	in	r29, 0x3e	; 62
    9a16:	c7 56       	subi	r28, 0x67	; 103
    9a18:	d0 40       	sbci	r29, 0x00	; 0
    9a1a:	0f b6       	in	r0, 0x3f	; 63
    9a1c:	f8 94       	cli
    9a1e:	de bf       	out	0x3e, r29	; 62
    9a20:	0f be       	out	0x3f, r0	; 63
    9a22:	cd bf       	out	0x3d, r28	; 61
    9a24:	a2 96       	adiw	r28, 0x22	; 34
    9a26:	9f af       	sts	0x7f, r25
    9a28:	8e af       	sts	0x7e, r24
    9a2a:	a2 97       	sbiw	r28, 0x22	; 34
    9a2c:	e6 2e       	mov	r14, r22
    9a2e:	6a 01       	movw	r12, r20
    9a30:	19 01       	movw	r2, r18
    9a32:	f0 2e       	mov	r15, r16


	if(ifOpen()){ noInterrupts();}
    9a34:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    9a38:	88 23       	and	r24, r24
    9a3a:	09 f0       	breq	.+2      	; 0x9a3e <_ZN6TMRpcm8metaInfoEhPcS0_h+0x50>
    9a3c:	f8 94       	cli

	#if !defined (SDFAT)
		File xFile;
    9a3e:	ce 01       	movw	r24, r28
    9a40:	8b 5b       	subi	r24, 0xBB	; 187
    9a42:	9f 4f       	sbci	r25, 0xFF	; 255
    9a44:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
		xFile = SD.open(filename);
    9a48:	ce 01       	movw	r24, r28
    9a4a:	4c 96       	adiw	r24, 0x1c	; 28
    9a4c:	6e e2       	ldi	r22, 0x2E	; 46
    9a4e:	76 e0       	ldi	r23, 0x06	; 6
    9a50:	a6 01       	movw	r20, r12
    9a52:	21 e0       	ldi	r18, 0x01	; 1
    9a54:	0e 94 cb 28 	call	0x5196	; 0x5196 <_ZN5SDLib7SDClass4openEPKch>
    9a58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9a5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9a5c:	29 96       	adiw	r28, 0x09	; 9
    9a5e:	9f af       	sts	0x7f, r25
    9a60:	8e af       	sts	0x7e, r24
    9a62:	29 97       	sbiw	r28, 0x09	; 9
    9a64:	88 a1       	lds	r24, 0x48
    9a66:	99 a1       	lds	r25, 0x49
    9a68:	aa a1       	lds	r26, 0x4a
    9a6a:	bb a1       	lds	r27, 0x4b
    9a6c:	2d 96       	adiw	r28, 0x0d	; 13
    9a6e:	8c af       	sts	0x7c, r24
    9a70:	9d af       	sts	0x7d, r25
    9a72:	ae af       	sts	0x7e, r26
    9a74:	bf af       	sts	0x7f, r27
    9a76:	2d 97       	sbiw	r28, 0x0d	; 13
    9a78:	8c a1       	lds	r24, 0x4c
    9a7a:	9d a1       	lds	r25, 0x4d
    9a7c:	ae a1       	lds	r26, 0x4e
    9a7e:	bf a1       	lds	r27, 0x4f
    9a80:	61 96       	adiw	r28, 0x11	; 17
    9a82:	8c af       	sts	0x7c, r24
    9a84:	9d af       	sts	0x7d, r25
    9a86:	ae af       	sts	0x7e, r26
    9a88:	bf af       	sts	0x7f, r27
    9a8a:	61 97       	sbiw	r28, 0x11	; 17
    9a8c:	e5 e4       	ldi	r30, 0x45	; 69
    9a8e:	f0 e0       	ldi	r31, 0x00	; 0
    9a90:	ec 0f       	add	r30, r28
    9a92:	fd 1f       	adc	r31, r29
    9a94:	3c 96       	adiw	r30, 0x0c	; 12
    9a96:	de 01       	movw	r26, r28
    9a98:	98 96       	adiw	r26, 0x28	; 40
    9a9a:	8d e0       	ldi	r24, 0x0D	; 13
    9a9c:	0d 90       	ld	r0, X+
    9a9e:	01 92       	st	Z+, r0
    9aa0:	81 50       	subi	r24, 0x01	; 1
    9aa2:	e1 f7       	brne	.-8      	; 0x9a9c <_ZN6TMRpcm8metaInfoEhPcS0_h+0xae>
    9aa4:	8d a9       	sts	0x4d, r24
    9aa6:	9e a9       	sts	0x4e, r25
    9aa8:	a0 96       	adiw	r28, 0x20	; 32
    9aaa:	9f af       	sts	0x7f, r25
    9aac:	8e af       	sts	0x7e, r24
    9aae:	a0 97       	sbiw	r28, 0x20	; 32
		xFile.seek(36);
    9ab0:	ce 01       	movw	r24, r28
    9ab2:	8b 5b       	subi	r24, 0xBB	; 187
    9ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab6:	44 e2       	ldi	r20, 0x24	; 36
    9ab8:	50 e0       	ldi	r21, 0x00	; 0
    9aba:	60 e0       	ldi	r22, 0x00	; 0
    9abc:	70 e0       	ldi	r23, 0x00	; 0
    9abe:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
		xFile.seekSet(36);
	#endif

	boolean found=0;
		char* datStr = "LIST";
		if(infoType == 1){datStr = "ID3 "; datStr[3] = 3;}
    9ac2:	21 e0       	ldi	r18, 0x01	; 1
    9ac4:	e2 16       	cp	r14, r18
    9ac6:	31 f4       	brne	.+12     	; 0x9ad4 <_ZN6TMRpcm8metaInfoEhPcS0_h+0xe6>
    9ac8:	83 e0       	ldi	r24, 0x03	; 3
    9aca:	80 93 82 02 	sts	0x0282, r24
    9ace:	4f e7       	ldi	r20, 0x7F	; 127
    9ad0:	52 e0       	ldi	r21, 0x02	; 2
    9ad2:	2c c0       	rjmp	.+88     	; 0x9b2c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13e>
		char tmpChars[4];

	if(infoType == 0){ //if requesting LIST info, check for data at beginning of file first
    9ad4:	ee 20       	and	r14, r14
    9ad6:	09 f0       	breq	.+2      	; 0x9ada <_ZN6TMRpcm8metaInfoEhPcS0_h+0xec>
    9ad8:	4d c2       	rjmp	.+1178   	; 0x9f74 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x586>
		xFile.read((char*)tmpChars,4);
    9ada:	ce 01       	movw	r24, r28
    9adc:	8b 5b       	subi	r24, 0xBB	; 187
    9ade:	9f 4f       	sbci	r25, 0xFF	; 255
    9ae0:	be 01       	movw	r22, r28
    9ae2:	65 5c       	subi	r22, 0xC5	; 197
    9ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ae6:	44 e0       	ldi	r20, 0x04	; 4
    9ae8:	50 e0       	ldi	r21, 0x00	; 0
    9aea:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
		for (byte i=0; i<4; i++){ //4 tagSize
			if(tmpChars[i] != datStr[i]){
    9aee:	8b ad       	sts	0x6b, r24
    9af0:	8c 34       	cpi	r24, 0x4C	; 76
    9af2:	09 f0       	breq	.+2      	; 0x9af6 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x108>
    9af4:	42 c2       	rjmp	.+1156   	; 0x9f7a <_ZN6TMRpcm8metaInfoEhPcS0_h+0x58c>
    9af6:	8c ad       	sts	0x6c, r24
    9af8:	89 34       	cpi	r24, 0x49	; 73
    9afa:	81 f4       	brne	.+32     	; 0x9b1c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x12e>
    9afc:	8d ad       	sts	0x6d, r24
    9afe:	83 35       	cpi	r24, 0x53	; 83
    9b00:	81 f4       	brne	.+32     	; 0x9b22 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x134>
    9b02:	8e ad       	sts	0x6e, r24
    9b04:	84 35       	cpi	r24, 0x54	; 84
    9b06:	81 f4       	brne	.+32     	; 0x9b28 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13a>
//** This section finds the starting point and length of the tag info
	if(found == 0){ xFile.close(); if(ifOpen()){ interrupts();} return 0; }

	unsigned long listEnd;
	unsigned int listLen;
	char* tagNames[] = {"INAM","IART","IPRD"};
    9b08:	fe 01       	movw	r30, r28
    9b0a:	ff 96       	adiw	r30, 0x3f	; 63
    9b0c:	a2 ea       	ldi	r26, 0xA2	; 162
    9b0e:	b2 e0       	ldi	r27, 0x02	; 2
    9b10:	86 e0       	ldi	r24, 0x06	; 6
    9b12:	0d 90       	ld	r0, X+
    9b14:	01 92       	st	Z+, r0
    9b16:	81 50       	subi	r24, 0x01	; 1
    9b18:	e1 f7       	brne	.-8      	; 0x9b12 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x124>
    9b1a:	5f c0       	rjmp	.+190    	; 0x9bda <_ZN6TMRpcm8metaInfoEhPcS0_h+0x1ec>
		xFile.open(filename);
		xFile.seekSet(36);
	#endif

	boolean found=0;
		char* datStr = "LIST";
    9b1c:	4a e7       	ldi	r20, 0x7A	; 122
    9b1e:	52 e0       	ldi	r21, 0x02	; 2
    9b20:	05 c0       	rjmp	.+10     	; 0x9b2c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13e>
    9b22:	4a e7       	ldi	r20, 0x7A	; 122
    9b24:	52 e0       	ldi	r21, 0x02	; 2
    9b26:	02 c0       	rjmp	.+4      	; 0x9b2c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13e>
    9b28:	4a e7       	ldi	r20, 0x7A	; 122
    9b2a:	52 e0       	ldi	r21, 0x02	; 2
    9b2c:	29 96       	adiw	r28, 0x09	; 9
    9b2e:	8e ad       	sts	0x6e, r24
    9b30:	9f ad       	sts	0x6f, r25
    9b32:	29 97       	sbiw	r28, 0x09	; 9
    9b34:	9c 83       	std	Y+4, r25	; 0x04
    9b36:	8b 83       	std	Y+3, r24	; 0x03
    9b38:	2d 96       	adiw	r28, 0x0d	; 13
    9b3a:	8c ad       	sts	0x6c, r24
    9b3c:	9d ad       	sts	0x6d, r25
    9b3e:	ae ad       	sts	0x6e, r26
    9b40:	bf ad       	sts	0x6f, r27
    9b42:	2d 97       	sbiw	r28, 0x0d	; 13
    9b44:	8d 83       	std	Y+5, r24	; 0x05
    9b46:	9e 83       	std	Y+6, r25	; 0x06
    9b48:	af 83       	std	Y+7, r26	; 0x07
    9b4a:	b8 87       	std	Y+8, r27	; 0x08
    9b4c:	61 96       	adiw	r28, 0x11	; 17
    9b4e:	8c ad       	sts	0x6c, r24
    9b50:	9d ad       	sts	0x6d, r25
    9b52:	ae ad       	sts	0x6e, r26
    9b54:	bf ad       	sts	0x6f, r27
    9b56:	61 97       	sbiw	r28, 0x11	; 17
    9b58:	89 87       	std	Y+9, r24	; 0x09
    9b5a:	9a 87       	std	Y+10, r25	; 0x0a
    9b5c:	ab 87       	std	Y+11, r26	; 0x0b
    9b5e:	bc 87       	std	Y+12, r27	; 0x0c
    9b60:	80 e5       	ldi	r24, 0x50	; 80
    9b62:	92 e0       	ldi	r25, 0x02	; 2
    9b64:	9a 83       	std	Y+2, r25	; 0x02
    9b66:	89 83       	std	Y+1, r24	; 0x01
    9b68:	de 01       	movw	r26, r28
    9b6a:	1d 96       	adiw	r26, 0x0d	; 13
    9b6c:	e5 e4       	ldi	r30, 0x45	; 69
    9b6e:	f0 e0       	ldi	r31, 0x00	; 0
    9b70:	ec 0f       	add	r30, r28
    9b72:	fd 1f       	adc	r31, r29
    9b74:	3c 96       	adiw	r30, 0x0c	; 12
    9b76:	8d e0       	ldi	r24, 0x0D	; 13
    9b78:	01 90       	ld	r0, Z+
    9b7a:	0d 92       	st	X+, r0
    9b7c:	81 50       	subi	r24, 0x01	; 1
    9b7e:	e1 f7       	brne	.-8      	; 0x9b78 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x18a>
    9b80:	a0 96       	adiw	r28, 0x20	; 32
    9b82:	8e ad       	sts	0x6e, r24
    9b84:	9f ad       	sts	0x6f, r25
    9b86:	a0 97       	sbiw	r28, 0x20	; 32
    9b88:	9b 8f       	std	Y+27, r25	; 0x1b
    9b8a:	8a 8f       	std	Y+26, r24	; 0x1a
		  	}
		}
	}
	if(found == 0){
		#if !defined (SDFAT)
			found = searchMainTags(xFile, datStr);
    9b8c:	a2 96       	adiw	r28, 0x22	; 34
    9b8e:	8e ad       	sts	0x6e, r24
    9b90:	9f ad       	sts	0x6f, r25
    9b92:	a2 97       	sbiw	r28, 0x22	; 34
    9b94:	be 01       	movw	r22, r28
    9b96:	6f 5f       	subi	r22, 0xFF	; 255
    9b98:	7f 4f       	sbci	r23, 0xFF	; 255
    9b9a:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <_ZN6TMRpcm14searchMainTagsEN5SDLib4FileEPc>
			if(pos > 0){ found = 1; }
		#endif
	}

//** This section finds the starting point and length of the tag info
	if(found == 0){ xFile.close(); if(ifOpen()){ interrupts();} return 0; }
    9b9e:	88 23       	and	r24, r24
    9ba0:	89 f4       	brne	.+34     	; 0x9bc4 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x1d6>
    9ba2:	ce 01       	movw	r24, r28
    9ba4:	8b 5b       	subi	r24, 0xBB	; 187
    9ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ba8:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
    9bac:	a2 96       	adiw	r28, 0x22	; 34
    9bae:	8e ad       	sts	0x6e, r24
    9bb0:	9f ad       	sts	0x6f, r25
    9bb2:	a2 97       	sbiw	r28, 0x22	; 34
    9bb4:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    9bb8:	88 23       	and	r24, r24
    9bba:	09 f4       	brne	.+2      	; 0x9bbe <_ZN6TMRpcm8metaInfoEhPcS0_h+0x1d0>
    9bbc:	be c1       	rjmp	.+892    	; 0x9f3a <_ZN6TMRpcm8metaInfoEhPcS0_h+0x54c>
    9bbe:	78 94       	sei
    9bc0:	80 e0       	ldi	r24, 0x00	; 0
    9bc2:	be c1       	rjmp	.+892    	; 0x9f40 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x552>

	unsigned long listEnd;
	unsigned int listLen;
	char* tagNames[] = {"INAM","IART","IPRD"};
    9bc4:	fe 01       	movw	r30, r28
    9bc6:	ff 96       	adiw	r30, 0x3f	; 63
    9bc8:	a2 ea       	ldi	r26, 0xA2	; 162
    9bca:	b2 e0       	ldi	r27, 0x02	; 2
    9bcc:	86 e0       	ldi	r24, 0x06	; 6
    9bce:	0d 90       	ld	r0, X+
    9bd0:	01 92       	st	Z+, r0
    9bd2:	81 50       	subi	r24, 0x01	; 1
    9bd4:	e1 f7       	brne	.-8      	; 0x9bce <_ZN6TMRpcm8metaInfoEhPcS0_h+0x1e0>

	if(infoType == 0){ //LIST format
    9bd6:	ee 20       	and	r14, r14
    9bd8:	91 f5       	brne	.+100    	; 0x9c3e <_ZN6TMRpcm8metaInfoEhPcS0_h+0x250>
		listLen = xFile.read(); listLen = xFile.read() << 8 | listLen;
    9bda:	ce 01       	movw	r24, r28
    9bdc:	8b 5b       	subi	r24, 0xBB	; 187
    9bde:	9f 4f       	sbci	r25, 0xFF	; 255
    9be0:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9be4:	08 2f       	mov	r16, r24
    9be6:	19 2f       	mov	r17, r25
    9be8:	ce 01       	movw	r24, r28
    9bea:	8b 5b       	subi	r24, 0xBB	; 187
    9bec:	9f 4f       	sbci	r25, 0xFF	; 255
    9bee:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9bf2:	38 2f       	mov	r19, r24
    9bf4:	20 e0       	ldi	r18, 0x00	; 0
    9bf6:	02 2b       	or	r16, r18
    9bf8:	13 2b       	or	r17, r19
		#if !defined (SDFAT)
			xFile.seek(xFile.position() +6);
    9bfa:	ce 01       	movw	r24, r28
    9bfc:	8b 5b       	subi	r24, 0xBB	; 187
    9bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    9c00:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9c04:	dc 01       	movw	r26, r24
    9c06:	cb 01       	movw	r24, r22
    9c08:	ac 01       	movw	r20, r24
    9c0a:	bd 01       	movw	r22, r26
    9c0c:	4a 5f       	subi	r20, 0xFA	; 250
    9c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    9c10:	6f 4f       	sbci	r22, 0xFF	; 255
    9c12:	7f 4f       	sbci	r23, 0xFF	; 255
    9c14:	ce 01       	movw	r24, r28
    9c16:	8b 5b       	subi	r24, 0xBB	; 187
    9c18:	9f 4f       	sbci	r25, 0xFF	; 255
    9c1a:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
			listEnd = xFile.position() + listLen;
    9c1e:	ce 01       	movw	r24, r28
    9c20:	8b 5b       	subi	r24, 0xBB	; 187
    9c22:	9f 4f       	sbci	r25, 0xFF	; 255
    9c24:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9c28:	dc 01       	movw	r26, r24
    9c2a:	cb 01       	movw	r24, r22
    9c2c:	20 e0       	ldi	r18, 0x00	; 0
    9c2e:	30 e0       	ldi	r19, 0x00	; 0
    9c30:	28 01       	movw	r4, r16
    9c32:	39 01       	movw	r6, r18
    9c34:	48 0e       	add	r4, r24
    9c36:	59 1e       	adc	r5, r25
    9c38:	6a 1e       	adc	r6, r26
    9c3a:	7b 1e       	adc	r7, r27
    9c3c:	45 c0       	rjmp	.+138    	; 0x9cc8 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x2da>
		#endif

	}else{				//ID3 format

		#if !defined (SDFAT)
			xFile.seek(xFile.position() + 5);
    9c3e:	ce 01       	movw	r24, r28
    9c40:	8b 5b       	subi	r24, 0xBB	; 187
    9c42:	9f 4f       	sbci	r25, 0xFF	; 255
    9c44:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9c48:	ab 01       	movw	r20, r22
    9c4a:	bc 01       	movw	r22, r24
    9c4c:	4b 5f       	subi	r20, 0xFB	; 251
    9c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    9c50:	6f 4f       	sbci	r22, 0xFF	; 255
    9c52:	7f 4f       	sbci	r23, 0xFF	; 255
    9c54:	ce 01       	movw	r24, r28
    9c56:	8b 5b       	subi	r24, 0xBB	; 187
    9c58:	9f 4f       	sbci	r25, 0xFF	; 255
    9c5a:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
		#else
			xFile.seekSet(xFile.curPosition() + 5);
		#endif
			listLen = xFile.read() << 7 | listLen; listLen = xFile.read() | listLen;
    9c5e:	ce 01       	movw	r24, r28
    9c60:	8b 5b       	subi	r24, 0xBB	; 187
    9c62:	9f 4f       	sbci	r25, 0xFF	; 255
    9c64:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9c68:	8c 01       	movw	r16, r24
    9c6a:	ce 01       	movw	r24, r28
    9c6c:	8b 5b       	subi	r24, 0xBB	; 187
    9c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c70:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9c74:	98 01       	movw	r18, r16
    9c76:	36 95       	lsr	r19
    9c78:	32 2f       	mov	r19, r18
    9c7a:	22 27       	eor	r18, r18
    9c7c:	37 95       	ror	r19
    9c7e:	27 95       	ror	r18
    9c80:	8c 01       	movw	r16, r24
    9c82:	02 2b       	or	r16, r18
    9c84:	13 2b       	or	r17, r19
			tagNames[0] = "TPE1"; tagNames[1] ="TIT2"; tagNames[2] ="TALB";
    9c86:	84 e8       	ldi	r24, 0x84	; 132
    9c88:	92 e0       	ldi	r25, 0x02	; 2
    9c8a:	21 96       	adiw	r28, 0x01	; 1
    9c8c:	9f af       	sts	0x7f, r25
    9c8e:	8e af       	sts	0x7e, r24
    9c90:	21 97       	sbiw	r28, 0x01	; 1
    9c92:	89 e8       	ldi	r24, 0x89	; 137
    9c94:	92 e0       	ldi	r25, 0x02	; 2
    9c96:	23 96       	adiw	r28, 0x03	; 3
    9c98:	9f af       	sts	0x7f, r25
    9c9a:	8e af       	sts	0x7e, r24
    9c9c:	23 97       	sbiw	r28, 0x03	; 3
    9c9e:	8e e8       	ldi	r24, 0x8E	; 142
    9ca0:	92 e0       	ldi	r25, 0x02	; 2
    9ca2:	25 96       	adiw	r28, 0x05	; 5
    9ca4:	9f af       	sts	0x7f, r25
    9ca6:	8e af       	sts	0x7e, r24
    9ca8:	25 97       	sbiw	r28, 0x05	; 5
		#if !defined (SDFAT)
			listEnd = xFile.position() + listLen;
    9caa:	ce 01       	movw	r24, r28
    9cac:	8b 5b       	subi	r24, 0xBB	; 187
    9cae:	9f 4f       	sbci	r25, 0xFF	; 255
    9cb0:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9cb4:	dc 01       	movw	r26, r24
    9cb6:	cb 01       	movw	r24, r22
    9cb8:	20 e0       	ldi	r18, 0x00	; 0
    9cba:	30 e0       	ldi	r19, 0x00	; 0
    9cbc:	28 01       	movw	r4, r16
    9cbe:	39 01       	movw	r6, r18
    9cc0:	48 0e       	add	r4, r24
    9cc2:	59 1e       	adc	r5, r25
    9cc4:	6a 1e       	adc	r6, r26
    9cc6:	7b 1e       	adc	r7, r27
		#endif
	}

	char tgs[4];
	unsigned int len = 0;
	unsigned long tagPos = 0;
    9cc8:	88 24       	eor	r8, r8
    9cca:	99 24       	eor	r9, r9
    9ccc:	54 01       	movw	r10, r8

		found =0;
	//** This section checks to see if the tag we found is the one requested
	//** If so, it loads the data into the buffer
		for(int p=0; p<4;p++){
			if(tgs[p] != tagNames[whichInfo][p]){
    9cce:	8f 2d       	mov	r24, r15
    9cd0:	90 e0       	ldi	r25, 0x00	; 0
    9cd2:	88 0f       	add	r24, r24
    9cd4:	99 1f       	adc	r25, r25
    9cd6:	8c 0f       	add	r24, r28
    9cd8:	9d 1f       	adc	r25, r29
    9cda:	dc 01       	movw	r26, r24
    9cdc:	df 96       	adiw	r26, 0x3f	; 63
    9cde:	a4 96       	adiw	r28, 0x24	; 36
    9ce0:	bf af       	sts	0x7f, r27
    9ce2:	ae af       	sts	0x7e, r26
    9ce4:	a4 97       	sbiw	r28, 0x24	; 36
	unsigned long tagPos = 0;

//** This section reads the tags and gets the size of the tag data and its position
//** Should work with very long tags if a big enough buffer is provided
#if !defined (SDFAT)
	while(xFile.position() < listEnd){
    9ce6:	0c c1       	rjmp	.+536    	; 0x9f00 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x512>
#endif
#if defined (SDFAT)
	while(xFile.curPosition() < listEnd){
#endif

		xFile.read((char*)tgs,4);
    9ce8:	ce 01       	movw	r24, r28
    9cea:	8b 5b       	subi	r24, 0xBB	; 187
    9cec:	9f 4f       	sbci	r25, 0xFF	; 255
    9cee:	be 01       	movw	r22, r28
    9cf0:	69 5c       	subi	r22, 0xC9	; 201
    9cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    9cf4:	44 e0       	ldi	r20, 0x04	; 4
    9cf6:	50 e0       	ldi	r21, 0x00	; 0
    9cf8:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>

		if(infoType == 0){ //LIST
    9cfc:	ee 20       	and	r14, r14
    9cfe:	61 f5       	brne	.+88     	; 0x9d58 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x36a>
			len = xFile.read()-1;
    9d00:	ce 01       	movw	r24, r28
    9d02:	8b 5b       	subi	r24, 0xBB	; 187
    9d04:	9f 4f       	sbci	r25, 0xFF	; 255
    9d06:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9d0a:	8c 01       	movw	r16, r24
    9d0c:	01 50       	subi	r16, 0x01	; 1
    9d0e:	10 40       	sbci	r17, 0x00	; 0
			len = xFile.read() << 8 | len;
    9d10:	ce 01       	movw	r24, r28
    9d12:	8b 5b       	subi	r24, 0xBB	; 187
    9d14:	9f 4f       	sbci	r25, 0xFF	; 255
    9d16:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9d1a:	a6 96       	adiw	r28, 0x26	; 38
    9d1c:	8f af       	sts	0x7f, r24
    9d1e:	a6 97       	sbiw	r28, 0x26	; 38
    9d20:	a5 96       	adiw	r28, 0x25	; 37
    9d22:	1f ae       	sts	0xbf, r17
    9d24:	a5 97       	sbiw	r28, 0x25	; 37
    9d26:	a6 96       	adiw	r28, 0x26	; 38
    9d28:	ce ac       	sts	0xae, r28
    9d2a:	df ac       	sts	0xaf, r29
    9d2c:	a6 97       	sbiw	r28, 0x26	; 38
    9d2e:	c0 2a       	or	r12, r16
    9d30:	d1 2a       	or	r13, r17
			#if !defined (SDFAT)
				xFile.seek(xFile.position()+2);
    9d32:	ce 01       	movw	r24, r28
    9d34:	8b 5b       	subi	r24, 0xBB	; 187
    9d36:	9f 4f       	sbci	r25, 0xFF	; 255
    9d38:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9d3c:	dc 01       	movw	r26, r24
    9d3e:	cb 01       	movw	r24, r22
    9d40:	ac 01       	movw	r20, r24
    9d42:	bd 01       	movw	r22, r26
    9d44:	4e 5f       	subi	r20, 0xFE	; 254
    9d46:	5f 4f       	sbci	r21, 0xFF	; 255
    9d48:	6f 4f       	sbci	r22, 0xFF	; 255
    9d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d4c:	ce 01       	movw	r24, r28
    9d4e:	8b 5b       	subi	r24, 0xBB	; 187
    9d50:	9f 4f       	sbci	r25, 0xFF	; 255
    9d52:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
    9d56:	45 c0       	rjmp	.+138    	; 0x9de2 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x3f4>
			#else
				xFile.seekSet(xFile.curPosition()+2);
			#endif
		}else{ 				//ID3
			#if !defined (SDFAT)
				xFile.seek(xFile.position()+3);
    9d58:	ce 01       	movw	r24, r28
    9d5a:	8b 5b       	subi	r24, 0xBB	; 187
    9d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d5e:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9d62:	dc 01       	movw	r26, r24
    9d64:	cb 01       	movw	r24, r22
    9d66:	ac 01       	movw	r20, r24
    9d68:	bd 01       	movw	r22, r26
    9d6a:	4d 5f       	subi	r20, 0xFD	; 253
    9d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    9d6e:	6f 4f       	sbci	r22, 0xFF	; 255
    9d70:	7f 4f       	sbci	r23, 0xFF	; 255
    9d72:	ce 01       	movw	r24, r28
    9d74:	8b 5b       	subi	r24, 0xBB	; 187
    9d76:	9f 4f       	sbci	r25, 0xFF	; 255
    9d78:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
			#else
				xFile.seekSet(xFile.curPosition()+3);
			#endif
			len = xFile.read();
    9d7c:	ce 01       	movw	r24, r28
    9d7e:	8b 5b       	subi	r24, 0xBB	; 187
    9d80:	9f 4f       	sbci	r25, 0xFF	; 255
    9d82:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9d86:	08 2f       	mov	r16, r24
    9d88:	19 2f       	mov	r17, r25
			len = xFile.read() << 8 | len;
    9d8a:	ce 01       	movw	r24, r28
    9d8c:	8b 5b       	subi	r24, 0xBB	; 187
    9d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d90:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9d94:	a8 96       	adiw	r28, 0x28	; 40
    9d96:	8f af       	sts	0x7f, r24
    9d98:	a8 97       	sbiw	r28, 0x28	; 40
    9d9a:	a7 96       	adiw	r28, 0x27	; 39
    9d9c:	1f ae       	sts	0xbf, r17
    9d9e:	a7 97       	sbiw	r28, 0x27	; 39
    9da0:	a8 96       	adiw	r28, 0x28	; 40
    9da2:	8e ad       	sts	0x6e, r24
    9da4:	9f ad       	sts	0x6f, r25
    9da6:	a8 97       	sbiw	r28, 0x28	; 40
    9da8:	80 2b       	or	r24, r16
    9daa:	91 2b       	or	r25, r17
			len = (len-3)/2;
    9dac:	03 97       	sbiw	r24, 0x03	; 3
    9dae:	6c 01       	movw	r12, r24
    9db0:	d6 94       	lsr	r13
    9db2:	c7 94       	ror	r12
			#if !defined (SDFAT)
				tagPos = xFile.position() + 4;
    9db4:	ce 01       	movw	r24, r28
    9db6:	8b 5b       	subi	r24, 0xBB	; 187
    9db8:	9f 4f       	sbci	r25, 0xFF	; 255
    9dba:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9dbe:	dc 01       	movw	r26, r24
    9dc0:	cb 01       	movw	r24, r22
    9dc2:	88 24       	eor	r8, r8
    9dc4:	99 24       	eor	r9, r9
    9dc6:	54 01       	movw	r10, r8
    9dc8:	68 94       	set
    9dca:	82 f8       	bld	r8, 2
    9dcc:	88 0e       	add	r8, r24
    9dce:	99 1e       	adc	r9, r25
    9dd0:	aa 1e       	adc	r10, r26
    9dd2:	bb 1e       	adc	r11, r27
				xFile.seek(tagPos);
    9dd4:	ce 01       	movw	r24, r28
    9dd6:	8b 5b       	subi	r24, 0xBB	; 187
    9dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    9dda:	b5 01       	movw	r22, r10
    9ddc:	a4 01       	movw	r20, r8
    9dde:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>

		found =0;
	//** This section checks to see if the tag we found is the one requested
	//** If so, it loads the data into the buffer
		for(int p=0; p<4;p++){
			if(tgs[p] != tagNames[whichInfo][p]){
    9de2:	a4 96       	adiw	r28, 0x24	; 36
    9de4:	ae ad       	sts	0x6e, r26
    9de6:	bf ad       	sts	0x6f, r27
    9de8:	a4 97       	sbiw	r28, 0x24	; 36
    9dea:	ed 91       	ld	r30, X+
    9dec:	fc 91       	ld	r31, X
    9dee:	11 97       	sbiw	r26, 0x01	; 1
    9df0:	9f a9       	sts	0x4f, r25
    9df2:	80 81       	ld	r24, Z
    9df4:	98 17       	cp	r25, r24
    9df6:	09 f0       	breq	.+2      	; 0x9dfa <_ZN6TMRpcm8metaInfoEhPcS0_h+0x40c>
    9df8:	46 c0       	rjmp	.+140    	; 0x9e86 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x498>
    9dfa:	98 ad       	sts	0x68, r25
    9dfc:	81 81       	ldd	r24, Z+1	; 0x01
    9dfe:	98 17       	cp	r25, r24
    9e00:	09 f0       	breq	.+2      	; 0x9e04 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x416>
    9e02:	41 c0       	rjmp	.+130    	; 0x9e86 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x498>
    9e04:	99 ad       	sts	0x69, r25
    9e06:	82 81       	ldd	r24, Z+2	; 0x02
    9e08:	98 17       	cp	r25, r24
    9e0a:	e9 f5       	brne	.+122    	; 0x9e86 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x498>
    9e0c:	9a ad       	sts	0x6a, r25
    9e0e:	83 81       	ldd	r24, Z+3	; 0x03
    9e10:	98 17       	cp	r25, r24
    9e12:	c9 f5       	brne	.+114    	; 0x9e86 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x498>
				break;
			}else{
				if(p==3){
					if(infoType == 1){
    9e14:	b1 e0       	ldi	r27, 0x01	; 1
    9e16:	eb 16       	cp	r14, r27
    9e18:	d9 f4       	brne	.+54     	; 0x9e50 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x462>
						byte junk;
						for(byte j=0; j<len; j++){
    9e1a:	c1 14       	cp	r12, r1
    9e1c:	d1 04       	cpc	r13, r1
    9e1e:	f9 f0       	breq	.+62     	; 0x9e5e <_ZN6TMRpcm8metaInfoEhPcS0_h+0x470>
    9e20:	00 e0       	ldi	r16, 0x00	; 0
    9e22:	10 e0       	ldi	r17, 0x00	; 0
    9e24:	ff 24       	eor	r15, r15
							tagData[j] = xFile.read();
    9e26:	02 0d       	add	r16, r2
    9e28:	13 1d       	adc	r17, r3
    9e2a:	ce 01       	movw	r24, r28
    9e2c:	8b 5b       	subi	r24, 0xBB	; 187
    9e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    9e30:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9e34:	f8 01       	movw	r30, r16
    9e36:	80 83       	st	Z, r24
							junk=xFile.read();
    9e38:	ce 01       	movw	r24, r28
    9e3a:	8b 5b       	subi	r24, 0xBB	; 187
    9e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    9e3e:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
				break;
			}else{
				if(p==3){
					if(infoType == 1){
						byte junk;
						for(byte j=0; j<len; j++){
    9e42:	f3 94       	inc	r15
    9e44:	0f 2d       	mov	r16, r15
    9e46:	10 e0       	ldi	r17, 0x00	; 0
    9e48:	0c 15       	cp	r16, r12
    9e4a:	1d 05       	cpc	r17, r13
    9e4c:	60 f3       	brcs	.-40     	; 0x9e26 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x438>
    9e4e:	07 c0       	rjmp	.+14     	; 0x9e5e <_ZN6TMRpcm8metaInfoEhPcS0_h+0x470>
							tagData[j] = xFile.read();
							junk=xFile.read();
						}
					}else{
						xFile.read((char*)tagData,len);
    9e50:	ce 01       	movw	r24, r28
    9e52:	8b 5b       	subi	r24, 0xBB	; 187
    9e54:	9f 4f       	sbci	r25, 0xFF	; 255
    9e56:	b1 01       	movw	r22, r2
    9e58:	a6 01       	movw	r20, r12
    9e5a:	0e 94 20 25 	call	0x4a40	; 0x4a40 <_ZN5SDLib4File4readEPvj>
					}
					tagData[len] = '\0';
    9e5e:	f1 01       	movw	r30, r2
    9e60:	ec 0d       	add	r30, r12
    9e62:	fd 1d       	adc	r31, r13
    9e64:	10 82       	st	Z, r1
					xFile.close();
    9e66:	ce 01       	movw	r24, r28
    9e68:	8b 5b       	subi	r24, 0xBB	; 187
    9e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e6c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
					if(ifOpen()){ interrupts();}
    9e70:	a2 96       	adiw	r28, 0x22	; 34
    9e72:	8e ad       	sts	0x6e, r24
    9e74:	9f ad       	sts	0x6f, r25
    9e76:	a2 97       	sbiw	r28, 0x22	; 34
    9e78:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    9e7c:	88 23       	and	r24, r24
    9e7e:	09 f0       	breq	.+2      	; 0x9e82 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x494>
    9e80:	78 94       	sei
 					return len;
    9e82:	8c 2d       	mov	r24, r12
    9e84:	5d c0       	rjmp	.+186    	; 0x9f40 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x552>

		if(found){break;}

	//**This section jumps to the next tag position if the requested tag wasn't found
	#if !defined (SDFAT)
		if(infoType == 0){
    9e86:	ee 20       	and	r14, r14
    9e88:	09 f5       	brne	.+66     	; 0x9ecc <_ZN6TMRpcm8metaInfoEhPcS0_h+0x4de>
			if(!found){	xFile.seek(xFile.position()+len);}
    9e8a:	ce 01       	movw	r24, r28
    9e8c:	8b 5b       	subi	r24, 0xBB	; 187
    9e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9e90:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9e94:	dc 01       	movw	r26, r24
    9e96:	cb 01       	movw	r24, r22
    9e98:	a6 01       	movw	r20, r12
    9e9a:	60 e0       	ldi	r22, 0x00	; 0
    9e9c:	70 e0       	ldi	r23, 0x00	; 0
    9e9e:	48 0f       	add	r20, r24
    9ea0:	59 1f       	adc	r21, r25
    9ea2:	6a 1f       	adc	r22, r26
    9ea4:	7b 1f       	adc	r23, r27
    9ea6:	ce 01       	movw	r24, r28
    9ea8:	8b 5b       	subi	r24, 0xBB	; 187
    9eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    9eac:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
    9eb0:	05 c0       	rjmp	.+10     	; 0x9ebc <_ZN6TMRpcm8metaInfoEhPcS0_h+0x4ce>
			while(xFile.peek() == 0){xFile.read();}
    9eb2:	ce 01       	movw	r24, r28
    9eb4:	8b 5b       	subi	r24, 0xBB	; 187
    9eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9eb8:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9ebc:	ce 01       	movw	r24, r28
    9ebe:	8b 5b       	subi	r24, 0xBB	; 187
    9ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ec2:	0e 94 46 24 	call	0x488c	; 0x488c <_ZN5SDLib4File4peekEv>
    9ec6:	00 97       	sbiw	r24, 0x00	; 0
    9ec8:	a1 f3       	breq	.-24     	; 0x9eb2 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x4c4>
    9eca:	1a c0       	rjmp	.+52     	; 0x9f00 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x512>
		}else{
			if(!found){	xFile.seek(tagPos+len); }
    9ecc:	a6 01       	movw	r20, r12
    9ece:	60 e0       	ldi	r22, 0x00	; 0
    9ed0:	70 e0       	ldi	r23, 0x00	; 0
    9ed2:	48 0d       	add	r20, r8
    9ed4:	59 1d       	adc	r21, r9
    9ed6:	6a 1d       	adc	r22, r10
    9ed8:	7b 1d       	adc	r23, r11
    9eda:	ce 01       	movw	r24, r28
    9edc:	8b 5b       	subi	r24, 0xBB	; 187
    9ede:	9f 4f       	sbci	r25, 0xFF	; 255
    9ee0:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <_ZN5SDLib4File4seekEm>
    9ee4:	05 c0       	rjmp	.+10     	; 0x9ef0 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x502>
			while(xFile.peek() != 'T'){xFile.read();}
    9ee6:	ce 01       	movw	r24, r28
    9ee8:	8b 5b       	subi	r24, 0xBB	; 187
    9eea:	9f 4f       	sbci	r25, 0xFF	; 255
    9eec:	0e 94 a4 24 	call	0x4948	; 0x4948 <_ZN5SDLib4File4readEv>
    9ef0:	ce 01       	movw	r24, r28
    9ef2:	8b 5b       	subi	r24, 0xBB	; 187
    9ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ef6:	0e 94 46 24 	call	0x488c	; 0x488c <_ZN5SDLib4File4peekEv>
    9efa:	84 35       	cpi	r24, 0x54	; 84
    9efc:	91 05       	cpc	r25, r1
    9efe:	99 f7       	brne	.-26     	; 0x9ee6 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x4f8>
	unsigned long tagPos = 0;

//** This section reads the tags and gets the size of the tag data and its position
//** Should work with very long tags if a big enough buffer is provided
#if !defined (SDFAT)
	while(xFile.position() < listEnd){
    9f00:	ce 01       	movw	r24, r28
    9f02:	8b 5b       	subi	r24, 0xBB	; 187
    9f04:	9f 4f       	sbci	r25, 0xFF	; 255
    9f06:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_ZN5SDLib4File8positionEv>
    9f0a:	dc 01       	movw	r26, r24
    9f0c:	cb 01       	movw	r24, r22
    9f0e:	84 15       	cp	r24, r4
    9f10:	95 05       	cpc	r25, r5
    9f12:	a6 05       	cpc	r26, r6
    9f14:	b7 05       	cpc	r27, r7
    9f16:	08 f4       	brcc	.+2      	; 0x9f1a <_ZN6TMRpcm8metaInfoEhPcS0_h+0x52c>
    9f18:	e7 ce       	rjmp	.-562    	; 0x9ce8 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x2fa>
		}
	#endif


 	}
 	xFile.close();
    9f1a:	ce 01       	movw	r24, r28
    9f1c:	8b 5b       	subi	r24, 0xBB	; 187
    9f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    9f20:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>
 	if(ifOpen()){ interrupts();}
    9f24:	a2 96       	adiw	r28, 0x22	; 34
    9f26:	8e ad       	sts	0x6e, r24
    9f28:	9f ad       	sts	0x6f, r25
    9f2a:	a2 97       	sbiw	r28, 0x22	; 34
    9f2c:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN6TMRpcm6ifOpenEv>
    9f30:	88 23       	and	r24, r24
    9f32:	29 f0       	breq	.+10     	; 0x9f3e <_ZN6TMRpcm8metaInfoEhPcS0_h+0x550>
    9f34:	78 94       	sei
 	return 0;
    9f36:	80 e0       	ldi	r24, 0x00	; 0
    9f38:	03 c0       	rjmp	.+6      	; 0x9f40 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x552>
			if(pos > 0){ found = 1; }
		#endif
	}

//** This section finds the starting point and length of the tag info
	if(found == 0){ xFile.close(); if(ifOpen()){ interrupts();} return 0; }
    9f3a:	80 e0       	ldi	r24, 0x00	; 0
    9f3c:	01 c0       	rjmp	.+2      	; 0x9f40 <_ZN6TMRpcm8metaInfoEhPcS0_h+0x552>


 	}
 	xFile.close();
 	if(ifOpen()){ interrupts();}
 	return 0;
    9f3e:	80 e0       	ldi	r24, 0x00	; 0
}
    9f40:	c9 59       	subi	r28, 0x99	; 153
    9f42:	df 4f       	sbci	r29, 0xFF	; 255
    9f44:	0f b6       	in	r0, 0x3f	; 63
    9f46:	f8 94       	cli
    9f48:	de bf       	out	0x3e, r29	; 62
    9f4a:	0f be       	out	0x3f, r0	; 63
    9f4c:	cd bf       	out	0x3d, r28	; 61
    9f4e:	df 91       	pop	r29
    9f50:	cf 91       	pop	r28
    9f52:	1f 91       	pop	r17
    9f54:	0f 91       	pop	r16
    9f56:	ff 90       	pop	r15
    9f58:	ef 90       	pop	r14
    9f5a:	df 90       	pop	r13
    9f5c:	cf 90       	pop	r12
    9f5e:	bf 90       	pop	r11
    9f60:	af 90       	pop	r10
    9f62:	9f 90       	pop	r9
    9f64:	8f 90       	pop	r8
    9f66:	7f 90       	pop	r7
    9f68:	6f 90       	pop	r6
    9f6a:	5f 90       	pop	r5
    9f6c:	4f 90       	pop	r4
    9f6e:	3f 90       	pop	r3
    9f70:	2f 90       	pop	r2
    9f72:	08 95       	ret
		xFile.open(filename);
		xFile.seekSet(36);
	#endif

	boolean found=0;
		char* datStr = "LIST";
    9f74:	4a e7       	ldi	r20, 0x7A	; 122
    9f76:	52 e0       	ldi	r21, 0x02	; 2
    9f78:	d9 cd       	rjmp	.-1102   	; 0x9b2c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13e>
    9f7a:	4a e7       	ldi	r20, 0x7A	; 122
    9f7c:	52 e0       	ldi	r21, 0x02	; 2
    9f7e:	d6 cd       	rjmp	.-1108   	; 0x9b2c <_ZN6TMRpcm8metaInfoEhPcS0_h+0x13e>

00009f80 <_ZN6TMRpcm7id3InfoEPcS0_h>:
}



//http://id3.org/id3v2.3.0
byte TMRpcm::id3Info(char* filename, char* tagData, byte infoNum){
    9f80:	0f 93       	push	r16
    9f82:	fb 01       	movw	r30, r22
    9f84:	da 01       	movw	r26, r20
    9f86:	02 2f       	mov	r16, r18
	return metaInfo(1, filename, tagData, infoNum);
    9f88:	61 e0       	ldi	r22, 0x01	; 1
    9f8a:	af 01       	movw	r20, r30
    9f8c:	9d 01       	movw	r18, r26
    9f8e:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <_ZN6TMRpcm8metaInfoEhPcS0_h>
}
    9f92:	0f 91       	pop	r16
    9f94:	08 95       	ret

00009f96 <_ZN6TMRpcm8listInfoEPcS0_h>:
	}
	return gotInfo;

}

byte TMRpcm::listInfo(char* filename, char* tagData, byte infoNum){
    9f96:	0f 93       	push	r16
    9f98:	fb 01       	movw	r30, r22
    9f9a:	da 01       	movw	r26, r20
    9f9c:	02 2f       	mov	r16, r18
	return metaInfo(0, filename, tagData, infoNum);
    9f9e:	60 e0       	ldi	r22, 0x00	; 0
    9fa0:	af 01       	movw	r20, r30
    9fa2:	9d 01       	movw	r18, r26
    9fa4:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <_ZN6TMRpcm8metaInfoEhPcS0_h>

}
    9fa8:	0f 91       	pop	r16
    9faa:	08 95       	ret

00009fac <_ZN6TMRpcm7getInfoEPcS0_h>:
//****************** Metadata Features ****************************
//****************** ID3 and LIST Tags ****************************



byte TMRpcm::getInfo(char* filename, char* tagData, byte infoNum){
    9fac:	af 92       	push	r10
    9fae:	bf 92       	push	r11
    9fb0:	cf 92       	push	r12
    9fb2:	df 92       	push	r13
    9fb4:	ef 92       	push	r14
    9fb6:	ff 92       	push	r15
    9fb8:	0f 93       	push	r16
    9fba:	cf 93       	push	r28
    9fbc:	7c 01       	movw	r14, r24
    9fbe:	6b 01       	movw	r12, r22
    9fc0:	5a 01       	movw	r10, r20
    9fc2:	c2 2f       	mov	r28, r18
	byte gotInfo = 0;
	if( (gotInfo = metaInfo(1,filename, tagData, infoNum)) < 1){
    9fc4:	61 e0       	ldi	r22, 0x01	; 1
    9fc6:	a6 01       	movw	r20, r12
    9fc8:	95 01       	movw	r18, r10
    9fca:	0c 2f       	mov	r16, r28
    9fcc:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <_ZN6TMRpcm8metaInfoEhPcS0_h>
    9fd0:	88 23       	and	r24, r24
    9fd2:	31 f4       	brne	.+12     	; 0x9fe0 <_ZN6TMRpcm7getInfoEPcS0_h+0x34>
		gotInfo = metaInfo(0,filename, tagData, infoNum);
    9fd4:	c7 01       	movw	r24, r14
    9fd6:	60 e0       	ldi	r22, 0x00	; 0
    9fd8:	a6 01       	movw	r20, r12
    9fda:	95 01       	movw	r18, r10
    9fdc:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <_ZN6TMRpcm8metaInfoEhPcS0_h>
	}
	return gotInfo;

}
    9fe0:	cf 91       	pop	r28
    9fe2:	0f 91       	pop	r16
    9fe4:	ff 90       	pop	r15
    9fe6:	ef 90       	pop	r14
    9fe8:	df 90       	pop	r13
    9fea:	cf 90       	pop	r12
    9fec:	bf 90       	pop	r11
    9fee:	af 90       	pop	r10
    9ff0:	08 95       	ret

00009ff2 <_ZN6TMRpcm19finalizeWavTemplateEPc>:

/*********************************************************************************
********************** DIY Digital Audio Generation ******************************/


void TMRpcm::finalizeWavTemplate(char* filename){
    9ff2:	6f 92       	push	r6
    9ff4:	7f 92       	push	r7
    9ff6:	8f 92       	push	r8
    9ff8:	9f 92       	push	r9
    9ffa:	af 92       	push	r10
    9ffc:	bf 92       	push	r11
    9ffe:	cf 92       	push	r12
    a000:	df 92       	push	r13
    a002:	ef 92       	push	r14
    a004:	ff 92       	push	r15
    a006:	0f 93       	push	r16
    a008:	1f 93       	push	r17
    a00a:	cf 93       	push	r28
    a00c:	df 93       	push	r29
    a00e:	cd b7       	in	r28, 0x3d	; 61
    a010:	de b7       	in	r29, 0x3e	; 62
    a012:	6f 97       	sbiw	r28, 0x1f	; 31
    a014:	0f b6       	in	r0, 0x3f	; 63
    a016:	f8 94       	cli
    a018:	de bf       	out	0x3e, r29	; 62
    a01a:	0f be       	out	0x3f, r0	; 63
    a01c:	cd bf       	out	0x3d, r28	; 61
    a01e:	3c 01       	movw	r6, r24
    a020:	6b 01       	movw	r12, r22
	disable();
    a022:	0e 94 1b 49 	call	0x9236	; 0x9236 <_ZN6TMRpcm7disableEv>

	unsigned long fSize = 0;

  #if !defined (SDFAT)
		sFile = SD.open(filename,FILE_WRITE);
    a026:	ce 01       	movw	r24, r28
    a028:	01 96       	adiw	r24, 0x01	; 1
    a02a:	6e e2       	ldi	r22, 0x2E	; 46
    a02c:	76 e0       	ldi	r23, 0x06	; 6
    a02e:	a6 01       	movw	r20, r12
    a030:	27 e1       	ldi	r18, 0x17	; 23
    a032:	0e 94 cb 28 	call	0x5196	; 0x5196 <_ZN5SDLib7SDClass4openEPKch>
    a036:	8b 81       	ldd	r24, Y+3	; 0x03
    a038:	9c 81       	ldd	r25, Y+4	; 0x04
    a03a:	90 93 8d 08 	sts	0x088D, r25
    a03e:	80 93 8c 08 	sts	0x088C, r24
    a042:	8d 81       	ldd	r24, Y+5	; 0x05
    a044:	9e 81       	ldd	r25, Y+6	; 0x06
    a046:	af 81       	ldd	r26, Y+7	; 0x07
    a048:	b8 85       	ldd	r27, Y+8	; 0x08
    a04a:	80 93 8e 08 	sts	0x088E, r24
    a04e:	90 93 8f 08 	sts	0x088F, r25
    a052:	a0 93 90 08 	sts	0x0890, r26
    a056:	b0 93 91 08 	sts	0x0891, r27
    a05a:	89 85       	ldd	r24, Y+9	; 0x09
    a05c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a05e:	ab 85       	ldd	r26, Y+11	; 0x0b
    a060:	bc 85       	ldd	r27, Y+12	; 0x0c
    a062:	80 93 92 08 	sts	0x0892, r24
    a066:	90 93 93 08 	sts	0x0893, r25
    a06a:	a0 93 94 08 	sts	0x0894, r26
    a06e:	b0 93 95 08 	sts	0x0895, r27
    a072:	a6 e9       	ldi	r26, 0x96	; 150
    a074:	b8 e0       	ldi	r27, 0x08	; 8
    a076:	fe 01       	movw	r30, r28
    a078:	3d 96       	adiw	r30, 0x0d	; 13
    a07a:	8d e0       	ldi	r24, 0x0D	; 13
    a07c:	01 90       	ld	r0, Z+
    a07e:	0d 92       	st	X+, r0
    a080:	81 50       	subi	r24, 0x01	; 1
    a082:	e1 f7       	brne	.-8      	; 0xa07c <_ZN6TMRpcm19finalizeWavTemplateEPc+0x8a>
    a084:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a086:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a088:	90 93 a4 08 	sts	0x08A4, r25
    a08c:	80 93 a3 08 	sts	0x08A3, r24

    if(!sFile){
    a090:	8a e8       	ldi	r24, 0x8A	; 138
    a092:	98 e0       	ldi	r25, 0x08	; 8
    a094:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <_ZN5SDLib4FilecvbEv>
    a098:	88 23       	and	r24, r24
    a09a:	09 f4       	brne	.+2      	; 0xa09e <_ZN6TMRpcm19finalizeWavTemplateEPc+0xac>
    a09c:	43 c0       	rjmp	.+134    	; 0xa124 <_ZN6TMRpcm19finalizeWavTemplateEPc+0x132>
		#if defined (debug)
			Serial.println("fl");
		#endif
		return;
	}
	fSize = sFile.size()-8;
    a09e:	0a e8       	ldi	r16, 0x8A	; 138
    a0a0:	18 e0       	ldi	r17, 0x08	; 8
    a0a2:	c8 01       	movw	r24, r16
    a0a4:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <_ZN5SDLib4File4sizeEv>
    a0a8:	6b 01       	movw	r12, r22
    a0aa:	7c 01       	movw	r14, r24
    a0ac:	0f 2e       	mov	r0, r31
    a0ae:	f8 ef       	ldi	r31, 0xF8	; 248
    a0b0:	8f 2e       	mov	r8, r31
    a0b2:	ff ef       	ldi	r31, 0xFF	; 255
    a0b4:	9f 2e       	mov	r9, r31
    a0b6:	ff ef       	ldi	r31, 0xFF	; 255
    a0b8:	af 2e       	mov	r10, r31
    a0ba:	ff ef       	ldi	r31, 0xFF	; 255
    a0bc:	bf 2e       	mov	r11, r31
    a0be:	f0 2d       	mov	r31, r0
    a0c0:	86 0e       	add	r8, r22
    a0c2:	97 1e       	adc	r9, r23
    a0c4:	a8 1e       	adc	r10, r24
    a0c6:	b9 1e       	adc	r11, r25

  #endif



	seek(4); byte data[4] = {lowByte(fSize),highByte(fSize), fSize >> 16,fSize >> 24};
    a0c8:	c3 01       	movw	r24, r6
    a0ca:	44 e0       	ldi	r20, 0x04	; 4
    a0cc:	50 e0       	ldi	r21, 0x00	; 0
    a0ce:	60 e0       	ldi	r22, 0x00	; 0
    a0d0:	70 e0       	ldi	r23, 0x00	; 0
    a0d2:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
    a0d6:	8c 8e       	std	Y+28, r8	; 0x1c
    a0d8:	9d 8e       	std	Y+29, r9	; 0x1d
    a0da:	ae 8e       	std	Y+30, r10	; 0x1e
    a0dc:	bf 8e       	std	Y+31, r11	; 0x1f
	sFile.write(data,4);
    a0de:	c8 01       	movw	r24, r16
    a0e0:	be 01       	movw	r22, r28
    a0e2:	64 5e       	subi	r22, 0xE4	; 228
    a0e4:	7f 4f       	sbci	r23, 0xFF	; 255
    a0e6:	44 e0       	ldi	r20, 0x04	; 4
    a0e8:	50 e0       	ldi	r21, 0x00	; 0
    a0ea:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
	byte tmp;
	seek(40);
    a0ee:	c3 01       	movw	r24, r6
    a0f0:	48 e2       	ldi	r20, 0x28	; 40
    a0f2:	50 e0       	ldi	r21, 0x00	; 0
    a0f4:	60 e0       	ldi	r22, 0x00	; 0
    a0f6:	70 e0       	ldi	r23, 0x00	; 0
    a0f8:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
	fSize = fSize - 36;
    a0fc:	d7 01       	movw	r26, r14
    a0fe:	c6 01       	movw	r24, r12
    a100:	8c 97       	sbiw	r24, 0x2c	; 44
    a102:	a1 09       	sbc	r26, r1
    a104:	b1 09       	sbc	r27, r1
	data[0] = lowByte(fSize); data[1]=highByte(fSize);data[2]=fSize >> 16;data[3]=fSize >> 24;
    a106:	8c 8f       	std	Y+28, r24	; 0x1c
    a108:	9d 8f       	std	Y+29, r25	; 0x1d
    a10a:	ae 8f       	std	Y+30, r26	; 0x1e
    a10c:	bf 8f       	std	Y+31, r27	; 0x1f
	sFile.write((byte*)data,4);
    a10e:	c8 01       	movw	r24, r16
    a110:	be 01       	movw	r22, r28
    a112:	64 5e       	subi	r22, 0xE4	; 228
    a114:	7f 4f       	sbci	r23, 0xFF	; 255
    a116:	44 e0       	ldi	r20, 0x04	; 4
    a118:	50 e0       	ldi	r21, 0x00	; 0
    a11a:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
	sFile.close();
    a11e:	c8 01       	movw	r24, r16
    a120:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>

	   	//Serial.println(sFile.size());
    	sFile.close();
	}
	#endif
}
    a124:	6f 96       	adiw	r28, 0x1f	; 31
    a126:	0f b6       	in	r0, 0x3f	; 63
    a128:	f8 94       	cli
    a12a:	de bf       	out	0x3e, r29	; 62
    a12c:	0f be       	out	0x3f, r0	; 63
    a12e:	cd bf       	out	0x3d, r28	; 61
    a130:	df 91       	pop	r29
    a132:	cf 91       	pop	r28
    a134:	1f 91       	pop	r17
    a136:	0f 91       	pop	r16
    a138:	ff 90       	pop	r15
    a13a:	ef 90       	pop	r14
    a13c:	df 90       	pop	r13
    a13e:	cf 90       	pop	r12
    a140:	bf 90       	pop	r11
    a142:	af 90       	pop	r10
    a144:	9f 90       	pop	r9
    a146:	8f 90       	pop	r8
    a148:	7f 90       	pop	r7
    a14a:	6f 90       	pop	r6
    a14c:	08 95       	ret

0000a14e <_ZN6TMRpcm17createWavTemplateEPcj>:



void TMRpcm::createWavTemplate(char* filename, unsigned int sampleRate){
    a14e:	bf 92       	push	r11
    a150:	cf 92       	push	r12
    a152:	df 92       	push	r13
    a154:	ef 92       	push	r14
    a156:	ff 92       	push	r15
    a158:	0f 93       	push	r16
    a15a:	1f 93       	push	r17
    a15c:	cf 93       	push	r28
    a15e:	df 93       	push	r29
    a160:	cd b7       	in	r28, 0x3d	; 61
    a162:	de b7       	in	r29, 0x3e	; 62
    a164:	a5 97       	sbiw	r28, 0x25	; 37
    a166:	0f b6       	in	r0, 0x3f	; 63
    a168:	f8 94       	cli
    a16a:	de bf       	out	0x3e, r29	; 62
    a16c:	0f be       	out	0x3f, r0	; 63
    a16e:	cd bf       	out	0x3d, r28	; 61
    a170:	7c 01       	movw	r14, r24
    a172:	8b 01       	movw	r16, r22
    a174:	c4 2e       	mov	r12, r20
    a176:	b5 2e       	mov	r11, r21
	disable();
    a178:	0e 94 1b 49 	call	0x9236	; 0x9236 <_ZN6TMRpcm7disableEv>

  #if !defined (SDFAT)
  	if(SD.exists(filename)){SD.remove(filename);}
    a17c:	8e e2       	ldi	r24, 0x2E	; 46
    a17e:	96 e0       	ldi	r25, 0x06	; 6
    a180:	b8 01       	movw	r22, r16
    a182:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <_ZN5SDLib7SDClass6existsEPKc>
    a186:	88 23       	and	r24, r24
    a188:	29 f0       	breq	.+10     	; 0xa194 <_ZN6TMRpcm17createWavTemplateEPcj+0x46>
    a18a:	8e e2       	ldi	r24, 0x2E	; 46
    a18c:	96 e0       	ldi	r25, 0x06	; 6
    a18e:	b8 01       	movw	r22, r16
    a190:	0e 94 05 2a 	call	0x540a	; 0x540a <_ZN5SDLib7SDClass6removeEPKc>
	rut.close();
	fil.close();
#endif

  #if !defined (SDFAT)
  		if(SD.exists(filename)){SD.remove(filename);}
    a194:	8e e2       	ldi	r24, 0x2E	; 46
    a196:	96 e0       	ldi	r25, 0x06	; 6
    a198:	b8 01       	movw	r22, r16
    a19a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <_ZN5SDLib7SDClass6existsEPKc>
    a19e:	88 23       	and	r24, r24
    a1a0:	29 f0       	breq	.+10     	; 0xa1ac <_ZN6TMRpcm17createWavTemplateEPcj+0x5e>
    a1a2:	8e e2       	ldi	r24, 0x2E	; 46
    a1a4:	96 e0       	ldi	r25, 0x06	; 6
    a1a6:	b8 01       	movw	r22, r16
    a1a8:	0e 94 05 2a 	call	0x540a	; 0x540a <_ZN5SDLib7SDClass6removeEPKc>
		sFile = SD.open(filename,FILE_WRITE);
    a1ac:	ce 01       	movw	r24, r28
    a1ae:	01 96       	adiw	r24, 0x01	; 1
    a1b0:	6e e2       	ldi	r22, 0x2E	; 46
    a1b2:	76 e0       	ldi	r23, 0x06	; 6
    a1b4:	a8 01       	movw	r20, r16
    a1b6:	27 e1       	ldi	r18, 0x17	; 23
    a1b8:	0e 94 cb 28 	call	0x5196	; 0x5196 <_ZN5SDLib7SDClass4openEPKch>
    a1bc:	8b 81       	ldd	r24, Y+3	; 0x03
    a1be:	9c 81       	ldd	r25, Y+4	; 0x04
    a1c0:	90 93 8d 08 	sts	0x088D, r25
    a1c4:	80 93 8c 08 	sts	0x088C, r24
    a1c8:	8d 81       	ldd	r24, Y+5	; 0x05
    a1ca:	9e 81       	ldd	r25, Y+6	; 0x06
    a1cc:	af 81       	ldd	r26, Y+7	; 0x07
    a1ce:	b8 85       	ldd	r27, Y+8	; 0x08
    a1d0:	80 93 8e 08 	sts	0x088E, r24
    a1d4:	90 93 8f 08 	sts	0x088F, r25
    a1d8:	a0 93 90 08 	sts	0x0890, r26
    a1dc:	b0 93 91 08 	sts	0x0891, r27
    a1e0:	89 85       	ldd	r24, Y+9	; 0x09
    a1e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a1e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    a1e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    a1e8:	80 93 92 08 	sts	0x0892, r24
    a1ec:	90 93 93 08 	sts	0x0893, r25
    a1f0:	a0 93 94 08 	sts	0x0894, r26
    a1f4:	b0 93 95 08 	sts	0x0895, r27
    a1f8:	a6 e9       	ldi	r26, 0x96	; 150
    a1fa:	b8 e0       	ldi	r27, 0x08	; 8
    a1fc:	fe 01       	movw	r30, r28
    a1fe:	3d 96       	adiw	r30, 0x0d	; 13
    a200:	8d e0       	ldi	r24, 0x0D	; 13
    a202:	01 90       	ld	r0, Z+
    a204:	0d 92       	st	X+, r0
    a206:	81 50       	subi	r24, 0x01	; 1
    a208:	e1 f7       	brne	.-8      	; 0xa202 <_ZN6TMRpcm17createWavTemplateEPcj+0xb4>
    a20a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a20c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a20e:	90 93 a4 08 	sts	0x08A4, r25
    a212:	80 93 a3 08 	sts	0x08A3, r24
	if(!sFile){
    a216:	8a e8       	ldi	r24, 0x8A	; 138
    a218:	98 e0       	ldi	r25, 0x08	; 8
    a21a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <_ZN5SDLib4FilecvbEv>
    a21e:	88 23       	and	r24, r24
    a220:	09 f4       	brne	.+2      	; 0xa224 <_ZN6TMRpcm17createWavTemplateEPcj+0xd6>
    a222:	44 c0       	rjmp	.+136    	; 0xa2ac <_ZN6TMRpcm17createWavTemplateEPcj+0x15e>
	}else{

  #endif
  		//Serial.print("Sr: ");
  		//Serial.println(sampleRate);
  		seek(0);
    a224:	c7 01       	movw	r24, r14
    a226:	40 e0       	ldi	r20, 0x00	; 0
    a228:	50 e0       	ldi	r21, 0x00	; 0
    a22a:	ba 01       	movw	r22, r20
    a22c:	0e 94 33 46 	call	0x8c66	; 0x8c66 <_ZN6TMRpcm4seekEm>
		byte data[] = {16,0,0,0,1,0,1,0,lowByte(sampleRate),highByte(sampleRate)};
    a230:	0f 2e       	mov	r0, r31
    a232:	fc e1       	ldi	r31, 0x1C	; 28
    a234:	ef 2e       	mov	r14, r31
    a236:	ff 24       	eor	r15, r15
    a238:	f0 2d       	mov	r31, r0
    a23a:	ec 0e       	add	r14, r28
    a23c:	fd 1e       	adc	r15, r29
    a23e:	8a e0       	ldi	r24, 0x0A	; 10
    a240:	f7 01       	movw	r30, r14
    a242:	11 92       	st	Z+, r1
    a244:	8a 95       	dec	r24
    a246:	e9 f7       	brne	.-6      	; 0xa242 <_ZN6TMRpcm17createWavTemplateEPcj+0xf4>
    a248:	80 e1       	ldi	r24, 0x10	; 16
    a24a:	8c 8f       	std	Y+28, r24	; 0x1c
    a24c:	dd 24       	eor	r13, r13
    a24e:	d3 94       	inc	r13
    a250:	d8 a2       	lds	r29, 0x98
    a252:	da a2       	lds	r29, 0x9a
    a254:	cc a2       	lds	r28, 0x9c
    a256:	bd a2       	lds	r27, 0x9d
		sFile.write((byte*)"RIFF    WAVEfmt ",16);
    a258:	0a e8       	ldi	r16, 0x8A	; 138
    a25a:	18 e0       	ldi	r17, 0x08	; 8
    a25c:	c8 01       	movw	r24, r16
    a25e:	68 ea       	ldi	r22, 0xA8	; 168
    a260:	72 e0       	ldi	r23, 0x02	; 2
    a262:	40 e1       	ldi	r20, 0x10	; 16
    a264:	50 e0       	ldi	r21, 0x00	; 0
    a266:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
		sFile.write((byte*)data,10);
    a26a:	c8 01       	movw	r24, r16
    a26c:	b7 01       	movw	r22, r14
    a26e:	4a e0       	ldi	r20, 0x0A	; 10
    a270:	50 e0       	ldi	r21, 0x00	; 0
    a272:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
		//unsigned int byteRate = (sampleRate/8)*monoStereo*8;
		//byte blockAlign = monoStereo * (bps/8); //monoStereo*(bps/8)
		data[0] = 0; data[1] = 0; data[2] = lowByte(sampleRate); data[3] =highByte(sampleRate);//Should be byteRate
    a276:	1c 8e       	std	Y+28, r1	; 0x1c
    a278:	1d 8e       	std	Y+29, r1	; 0x1d
    a27a:	ce 8e       	std	Y+30, r12	; 0x1e
    a27c:	bf 8e       	std	Y+31, r11	; 0x1f
		data[4]=0;data[5]=0;data[6]=1; //BlockAlign
    a27e:	18 a2       	lds	r17, 0x98
    a280:	19 a2       	lds	r17, 0x99
    a282:	da a2       	lds	r29, 0x9a
		data[7]=0;data[8]=8;data[9]=0;
    a284:	1b a2       	lds	r17, 0x9b
    a286:	88 e0       	ldi	r24, 0x08	; 8
    a288:	8c a3       	lds	r24, 0x5c
    a28a:	1d a2       	lds	r17, 0x9d
		sFile.write((byte*)data,10);
    a28c:	c8 01       	movw	r24, r16
    a28e:	b7 01       	movw	r22, r14
    a290:	4a e0       	ldi	r20, 0x0A	; 10
    a292:	50 e0       	ldi	r21, 0x00	; 0
    a294:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
		sFile.write((byte*)"data    ",8);
    a298:	c8 01       	movw	r24, r16
    a29a:	69 eb       	ldi	r22, 0xB9	; 185
    a29c:	72 e0       	ldi	r23, 0x02	; 2
    a29e:	48 e0       	ldi	r20, 0x08	; 8
    a2a0:	50 e0       	ldi	r21, 0x00	; 0
    a2a2:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN5SDLib4File5writeEPKhj>
		//Serial.print("siz");
		//Serial.println(sFile.size());
		sFile.close();
    a2a6:	c8 01       	movw	r24, r16
    a2a8:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5SDLib4File5closeEv>

	}
}
    a2ac:	a5 96       	adiw	r28, 0x25	; 37
    a2ae:	0f b6       	in	r0, 0x3f	; 63
    a2b0:	f8 94       	cli
    a2b2:	de bf       	out	0x3e, r29	; 62
    a2b4:	0f be       	out	0x3f, r0	; 63
    a2b6:	cd bf       	out	0x3d, r28	; 61
    a2b8:	df 91       	pop	r29
    a2ba:	cf 91       	pop	r28
    a2bc:	1f 91       	pop	r17
    a2be:	0f 91       	pop	r16
    a2c0:	ff 90       	pop	r15
    a2c2:	ef 90       	pop	r14
    a2c4:	df 90       	pop	r13
    a2c6:	cf 90       	pop	r12
    a2c8:	bf 90       	pop	r11
    a2ca:	08 95       	ret

0000a2cc <_GLOBAL__sub_I_TIMSK>:
#else
	volatile byte loadCounter = 0, SR = 3;
#endif

#if !defined (SDFAT)
	File sFile;
    a2cc:	8a e8       	ldi	r24, 0x8A	; 138
    a2ce:	98 e0       	ldi	r25, 0x08	; 8
    a2d0:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_ZN5SDLib4FileC1Ev>
		//Serial.print("siz");
		//Serial.println(sFile.size());
		sFile.close();

	}
}
    a2d4:	08 95       	ret

0000a2d6 <_Z41__static_initialization_and_destruction_0ii>:
  urat_transmit(note,instr);
  
  string_generation(note,instrument);
  play_audio_file();
}
}
    a2d6:	81 30       	cpi	r24, 0x01	; 1
    a2d8:	91 05       	cpc	r25, r1
    a2da:	59 f4       	brne	.+22     	; 0xa2f2 <_Z41__static_initialization_and_destruction_0ii+0x1c>
    a2dc:	8f ef       	ldi	r24, 0xFF	; 255
    a2de:	6f 3f       	cpi	r22, 0xFF	; 255
    a2e0:	78 07       	cpc	r23, r24
    a2e2:	89 f4       	brne	.+34     	; 0xa306 <_Z41__static_initialization_and_destruction_0ii+0x30>

TMRpcm tmrpcm;                                                             // Create an object for use in this sketch

// declarations
char note;
String mystring;
    a2e4:	8d ec       	ldi	r24, 0xCD	; 205
    a2e6:	9a e0       	ldi	r25, 0x0A	; 10
    a2e8:	6d ef       	ldi	r22, 0xFD	; 253
    a2ea:	72 e0       	ldi	r23, 0x02	; 2
    a2ec:	0e 94 8b 1a 	call	0x3516	; 0x3516 <_ZN6StringC1EPKc>
    a2f0:	08 95       	ret
    a2f2:	00 97       	sbiw	r24, 0x00	; 0
    a2f4:	41 f4       	brne	.+16     	; 0xa306 <_Z41__static_initialization_and_destruction_0ii+0x30>
    a2f6:	8f ef       	ldi	r24, 0xFF	; 255
    a2f8:	6f 3f       	cpi	r22, 0xFF	; 255
    a2fa:	78 07       	cpc	r23, r24
    a2fc:	21 f4       	brne	.+8      	; 0xa306 <_Z41__static_initialization_and_destruction_0ii+0x30>
    a2fe:	8d ec       	ldi	r24, 0xCD	; 205
    a300:	9a e0       	ldi	r25, 0x0A	; 10
    a302:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringD1Ev>
    a306:	08 95       	ret

0000a308 <_Z8read_keyv>:
Functionality  :  Identification of the keys struck
Example call   :  read_key();
********************************************************/

void read_key()
{
    a308:	ef 92       	push	r14
    a30a:	ff 92       	push	r15
    a30c:	0f 93       	push	r16
    a30e:	1f 93       	push	r17
    a310:	cf 93       	push	r28
    a312:	df 93       	push	r29
	int l=0,m=0,r=0;
	int i =1;
	int del;
	for(i=1;i<2;i++){
	    l= digitalRead(L);
    a314:	80 91 26 03 	lds	r24, 0x0326
    a318:	0e 94 e5 17 	call	0x2fca	; 0x2fca <digitalRead>
    a31c:	ec 01       	movw	r28, r24
		m =digitalRead(M);
    a31e:	80 91 24 03 	lds	r24, 0x0324
    a322:	0e 94 e5 17 	call	0x2fca	; 0x2fca <digitalRead>
    a326:	8c 01       	movw	r16, r24
		r= digitalRead(R);
    a328:	80 91 22 03 	lds	r24, 0x0322
    a32c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <digitalRead>
    a330:	7c 01       	movw	r14, r24
		del = 100 * i;
		delay(del);
    a332:	64 e6       	ldi	r22, 0x64	; 100
    a334:	70 e0       	ldi	r23, 0x00	; 0
    a336:	80 e0       	ldi	r24, 0x00	; 0
    a338:	90 e0       	ldi	r25, 0x00	; 0
    a33a:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <delay>
	}
	if(PINF==0x02)
    a33e:	8f b1       	in	r24, 0x0f	; 15
    a340:	82 30       	cpi	r24, 0x02	; 2
    a342:	51 f4       	brne	.+20     	; 0xa358 <_Z8read_keyv+0x50>
	{
		note='C';
    a344:	83 e4       	ldi	r24, 0x43	; 67
    a346:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a34a:	81 e0       	ldi	r24, 0x01	; 1
    a34c:	90 e0       	ldi	r25, 0x00	; 0
    a34e:	90 93 cc 0a 	sts	0x0ACC, r25
    a352:	80 93 cb 0a 	sts	0x0ACB, r24
    a356:	ef c0       	rjmp	.+478    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x04)
    a358:	8f b1       	in	r24, 0x0f	; 15
    a35a:	84 30       	cpi	r24, 0x04	; 4
    a35c:	51 f4       	brne	.+20     	; 0xa372 <_Z8read_keyv+0x6a>
	{
		note='D';
    a35e:	84 e4       	ldi	r24, 0x44	; 68
    a360:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a364:	81 e0       	ldi	r24, 0x01	; 1
    a366:	90 e0       	ldi	r25, 0x00	; 0
    a368:	90 93 cc 0a 	sts	0x0ACC, r25
    a36c:	80 93 cb 0a 	sts	0x0ACB, r24
    a370:	e2 c0       	rjmp	.+452    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x08)
    a372:	8f b1       	in	r24, 0x0f	; 15
    a374:	88 30       	cpi	r24, 0x08	; 8
    a376:	51 f4       	brne	.+20     	; 0xa38c <_Z8read_keyv+0x84>
	{
		note='E';
    a378:	85 e4       	ldi	r24, 0x45	; 69
    a37a:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a37e:	81 e0       	ldi	r24, 0x01	; 1
    a380:	90 e0       	ldi	r25, 0x00	; 0
    a382:	90 93 cc 0a 	sts	0x0ACC, r25
    a386:	80 93 cb 0a 	sts	0x0ACB, r24
    a38a:	d5 c0       	rjmp	.+426    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x10)
    a38c:	8f b1       	in	r24, 0x0f	; 15
    a38e:	80 31       	cpi	r24, 0x10	; 16
    a390:	51 f4       	brne	.+20     	; 0xa3a6 <_Z8read_keyv+0x9e>
	{
		note='F';
    a392:	86 e4       	ldi	r24, 0x46	; 70
    a394:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a398:	81 e0       	ldi	r24, 0x01	; 1
    a39a:	90 e0       	ldi	r25, 0x00	; 0
    a39c:	90 93 cc 0a 	sts	0x0ACC, r25
    a3a0:	80 93 cb 0a 	sts	0x0ACB, r24
    a3a4:	c8 c0       	rjmp	.+400    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x20)
    a3a6:	8f b1       	in	r24, 0x0f	; 15
    a3a8:	80 32       	cpi	r24, 0x20	; 32
    a3aa:	51 f4       	brne	.+20     	; 0xa3c0 <_Z8read_keyv+0xb8>
	{
		note='G';
    a3ac:	87 e4       	ldi	r24, 0x47	; 71
    a3ae:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a3b2:	81 e0       	ldi	r24, 0x01	; 1
    a3b4:	90 e0       	ldi	r25, 0x00	; 0
    a3b6:	90 93 cc 0a 	sts	0x0ACC, r25
    a3ba:	80 93 cb 0a 	sts	0x0ACB, r24
    a3be:	bb c0       	rjmp	.+374    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x40)
    a3c0:	8f b1       	in	r24, 0x0f	; 15
    a3c2:	80 34       	cpi	r24, 0x40	; 64
    a3c4:	51 f4       	brne	.+20     	; 0xa3da <_Z8read_keyv+0xd2>
	{
		note='A';
    a3c6:	81 e4       	ldi	r24, 0x41	; 65
    a3c8:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a3cc:	81 e0       	ldi	r24, 0x01	; 1
    a3ce:	90 e0       	ldi	r25, 0x00	; 0
    a3d0:	90 93 cc 0a 	sts	0x0ACC, r25
    a3d4:	80 93 cb 0a 	sts	0x0ACB, r24
    a3d8:	ae c0       	rjmp	.+348    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x80)
    a3da:	8f b1       	in	r24, 0x0f	; 15
    a3dc:	80 38       	cpi	r24, 0x80	; 128
    a3de:	51 f4       	brne	.+20     	; 0xa3f4 <_Z8read_keyv+0xec>
	{
		note='B';
    a3e0:	82 e4       	ldi	r24, 0x42	; 66
    a3e2:	80 93 d3 0a 	sts	0x0AD3, r24
		x =1;
    a3e6:	81 e0       	ldi	r24, 0x01	; 1
    a3e8:	90 e0       	ldi	r25, 0x00	; 0
    a3ea:	90 93 cc 0a 	sts	0x0ACC, r25
    a3ee:	80 93 cb 0a 	sts	0x0ACB, r24
    a3f2:	a1 c0       	rjmp	.+322    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(PINF==0x01)
    a3f4:	8f b1       	in	r24, 0x0f	; 15
    a3f6:	81 30       	cpi	r24, 0x01	; 1
    a3f8:	59 f4       	brne	.+22     	; 0xa410 <_Z8read_keyv+0x108>
	{
		end_key = 1;
    a3fa:	81 e0       	ldi	r24, 0x01	; 1
    a3fc:	90 e0       	ldi	r25, 0x00	; 0
    a3fe:	90 93 ba 0a 	sts	0x0ABA, r25
    a402:	80 93 b9 0a 	sts	0x0AB9, r24
		x =1;
    a406:	90 93 cc 0a 	sts	0x0ACC, r25
    a40a:	80 93 cb 0a 	sts	0x0ACB, r24
    a40e:	93 c0       	rjmp	.+294    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==1 && m==0 && r==0){
    a410:	c1 30       	cpi	r28, 0x01	; 1
    a412:	d1 05       	cpc	r29, r1
    a414:	91 f4       	brne	.+36     	; 0xa43a <_Z8read_keyv+0x132>
    a416:	01 15       	cp	r16, r1
    a418:	11 05       	cpc	r17, r1
    a41a:	79 f4       	brne	.+30     	; 0xa43a <_Z8read_keyv+0x132>
    a41c:	e1 14       	cp	r14, r1
    a41e:	f1 04       	cpc	r15, r1
    a420:	99 f5       	brne	.+102    	; 0xa488 <_Z8read_keyv+0x180>
		note = 'C';
    a422:	83 e4       	ldi	r24, 0x43	; 67
    a424:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a428:	82 e0       	ldi	r24, 0x02	; 2
    a42a:	90 e0       	ldi	r25, 0x00	; 0
    a42c:	90 93 cc 0a 	sts	0x0ACC, r25
    a430:	80 93 cb 0a 	sts	0x0ACB, r24
		PORTE = 0x08;
    a434:	88 e0       	ldi	r24, 0x08	; 8
    a436:	8e b9       	out	0x0e, r24	; 14
    a438:	7e c0       	rjmp	.+252    	; 0xa536 <_Z8read_keyv+0x22e>
		
	}
	else if(l==0 && m==1 && r==0){
    a43a:	20 97       	sbiw	r28, 0x00	; 0
    a43c:	29 f5       	brne	.+74     	; 0xa488 <_Z8read_keyv+0x180>
    a43e:	01 30       	cpi	r16, 0x01	; 1
    a440:	11 05       	cpc	r17, r1
    a442:	79 f4       	brne	.+30     	; 0xa462 <_Z8read_keyv+0x15a>
    a444:	e1 14       	cp	r14, r1
    a446:	f1 04       	cpc	r15, r1
    a448:	f9 f4       	brne	.+62     	; 0xa488 <_Z8read_keyv+0x180>
		note = 'D';
    a44a:	84 e4       	ldi	r24, 0x44	; 68
    a44c:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a450:	82 e0       	ldi	r24, 0x02	; 2
    a452:	90 e0       	ldi	r25, 0x00	; 0
    a454:	90 93 cc 0a 	sts	0x0ACC, r25
    a458:	80 93 cb 0a 	sts	0x0ACB, r24
		PORTE = 0x10;
    a45c:	80 e1       	ldi	r24, 0x10	; 16
    a45e:	8e b9       	out	0x0e, r24	; 14
    a460:	6a c0       	rjmp	.+212    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==0 && m==0 && r==1){
    a462:	01 15       	cp	r16, r1
    a464:	11 05       	cpc	r17, r1
    a466:	81 f4       	brne	.+32     	; 0xa488 <_Z8read_keyv+0x180>
    a468:	81 e0       	ldi	r24, 0x01	; 1
    a46a:	e8 16       	cp	r14, r24
    a46c:	f1 04       	cpc	r15, r1
    a46e:	09 f5       	brne	.+66     	; 0xa4b2 <_Z8read_keyv+0x1aa>
		note = 'E';
    a470:	85 e4       	ldi	r24, 0x45	; 69
    a472:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a476:	82 e0       	ldi	r24, 0x02	; 2
    a478:	90 e0       	ldi	r25, 0x00	; 0
    a47a:	90 93 cc 0a 	sts	0x0ACC, r25
    a47e:	80 93 cb 0a 	sts	0x0ACB, r24
	PORTE = 0x20;
    a482:	80 e2       	ldi	r24, 0x20	; 32
    a484:	8e b9       	out	0x0e, r24	; 14
    a486:	57 c0       	rjmp	.+174    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==1 && m==1 && r==0){
    a488:	c1 30       	cpi	r28, 0x01	; 1
    a48a:	d1 05       	cpc	r29, r1
    a48c:	91 f4       	brne	.+36     	; 0xa4b2 <_Z8read_keyv+0x1aa>
    a48e:	01 30       	cpi	r16, 0x01	; 1
    a490:	11 05       	cpc	r17, r1
    a492:	79 f4       	brne	.+30     	; 0xa4b2 <_Z8read_keyv+0x1aa>
    a494:	e1 14       	cp	r14, r1
    a496:	f1 04       	cpc	r15, r1
    a498:	21 f5       	brne	.+72     	; 0xa4e2 <_Z8read_keyv+0x1da>
		note = 'F';
    a49a:	86 e4       	ldi	r24, 0x46	; 70
    a49c:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a4a0:	82 e0       	ldi	r24, 0x02	; 2
    a4a2:	90 e0       	ldi	r25, 0x00	; 0
    a4a4:	90 93 cc 0a 	sts	0x0ACC, r25
    a4a8:	80 93 cb 0a 	sts	0x0ACB, r24
PORTE = 0x18;
    a4ac:	88 e1       	ldi	r24, 0x18	; 24
    a4ae:	8e b9       	out	0x0e, r24	; 14
    a4b0:	42 c0       	rjmp	.+132    	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==0 && m==1 && r==1){
    a4b2:	20 97       	sbiw	r28, 0x00	; 0
    a4b4:	99 f4       	brne	.+38     	; 0xa4dc <_Z8read_keyv+0x1d4>
    a4b6:	01 30       	cpi	r16, 0x01	; 1
    a4b8:	11 05       	cpc	r17, r1
    a4ba:	81 f4       	brne	.+32     	; 0xa4dc <_Z8read_keyv+0x1d4>
    a4bc:	81 e0       	ldi	r24, 0x01	; 1
    a4be:	e8 16       	cp	r14, r24
    a4c0:	f1 04       	cpc	r15, r1
    a4c2:	a9 f5       	brne	.+106    	; 0xa52e <_Z8read_keyv+0x226>
		note = 'G';
    a4c4:	87 e4       	ldi	r24, 0x47	; 71
    a4c6:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a4ca:	82 e0       	ldi	r24, 0x02	; 2
    a4cc:	90 e0       	ldi	r25, 0x00	; 0
    a4ce:	90 93 cc 0a 	sts	0x0ACC, r25
    a4d2:	80 93 cb 0a 	sts	0x0ACB, r24
PORTE = 0x30;
    a4d6:	80 e3       	ldi	r24, 0x30	; 48
    a4d8:	8e b9       	out	0x0e, r24	; 14
    a4da:	2d c0       	rjmp	.+90     	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==1 && m==0 && r==1){
    a4dc:	c1 30       	cpi	r28, 0x01	; 1
    a4de:	d1 05       	cpc	r29, r1
    a4e0:	31 f5       	brne	.+76     	; 0xa52e <_Z8read_keyv+0x226>
    a4e2:	01 15       	cp	r16, r1
    a4e4:	11 05       	cpc	r17, r1
    a4e6:	81 f4       	brne	.+32     	; 0xa508 <_Z8read_keyv+0x200>
    a4e8:	81 e0       	ldi	r24, 0x01	; 1
    a4ea:	e8 16       	cp	r14, r24
    a4ec:	f1 04       	cpc	r15, r1
    a4ee:	f9 f4       	brne	.+62     	; 0xa52e <_Z8read_keyv+0x226>
		note = 'A';
    a4f0:	81 e4       	ldi	r24, 0x41	; 65
    a4f2:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a4f6:	82 e0       	ldi	r24, 0x02	; 2
    a4f8:	90 e0       	ldi	r25, 0x00	; 0
    a4fa:	90 93 cc 0a 	sts	0x0ACC, r25
    a4fe:	80 93 cb 0a 	sts	0x0ACB, r24
PORTE =0x28;
    a502:	88 e2       	ldi	r24, 0x28	; 40
    a504:	8e b9       	out	0x0e, r24	; 14
    a506:	17 c0       	rjmp	.+46     	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else if(l==1 && m==1 && r==1){
    a508:	01 30       	cpi	r16, 0x01	; 1
    a50a:	11 05       	cpc	r17, r1
    a50c:	81 f4       	brne	.+32     	; 0xa52e <_Z8read_keyv+0x226>
    a50e:	81 e0       	ldi	r24, 0x01	; 1
    a510:	e8 16       	cp	r14, r24
    a512:	f1 04       	cpc	r15, r1
    a514:	61 f4       	brne	.+24     	; 0xa52e <_Z8read_keyv+0x226>
		note = 'B';
    a516:	82 e4       	ldi	r24, 0x42	; 66
    a518:	80 93 d3 0a 	sts	0x0AD3, r24
		x = 2;
    a51c:	82 e0       	ldi	r24, 0x02	; 2
    a51e:	90 e0       	ldi	r25, 0x00	; 0
    a520:	90 93 cc 0a 	sts	0x0ACC, r25
    a524:	80 93 cb 0a 	sts	0x0ACB, r24
PORTE = 0x38;
    a528:	88 e3       	ldi	r24, 0x38	; 56
    a52a:	8e b9       	out	0x0e, r24	; 14
    a52c:	04 c0       	rjmp	.+8      	; 0xa536 <_Z8read_keyv+0x22e>
	}
	else
	{
		x=0;
    a52e:	10 92 cc 0a 	sts	0x0ACC, r1
    a532:	10 92 cb 0a 	sts	0x0ACB, r1
	}
	
}
    a536:	df 91       	pop	r29
    a538:	cf 91       	pop	r28
    a53a:	1f 91       	pop	r17
    a53c:	0f 91       	pop	r16
    a53e:	ff 90       	pop	r15
    a540:	ef 90       	pop	r14
    a542:	08 95       	ret

0000a544 <_Z17string_generationcPc>:
Functionality  :  Generates string to search the audio file in the SD card
Example call   :  string_generation();
********************************************************/

void string_generation(char note ,char* instrument)
{
    a544:	cf 93       	push	r28
    a546:	df 93       	push	r29
    a548:	eb 01       	movw	r28, r22
	string[j] = note;
	j++;
	
	if(sharp_note[i] == 'Y' ){
		string[j] = '#';
		j++;
    a54a:	ed eb       	ldi	r30, 0xBD	; 189
    a54c:	fa e0       	ldi	r31, 0x0A	; 10
Output         :  None
Functionality  :  Generates string to search the audio file in the SD card
Example call   :  string_generation();
********************************************************/

void string_generation(char note ,char* instrument)
    a54e:	9f 01       	movw	r18, r30
    a550:	24 5f       	subi	r18, 0xF4	; 244
    a552:	3f 4f       	sbci	r19, 0xFF	; 255
{
	for(int h=0;h<12;h++){
		string[h] = '\0';
    a554:	11 92       	st	Z+, r1
Example call   :  string_generation();
********************************************************/

void string_generation(char note ,char* instrument)
{
	for(int h=0;h<12;h++){
    a556:	e2 17       	cp	r30, r18
    a558:	f3 07       	cpc	r31, r19
    a55a:	e1 f7       	brne	.-8      	; 0xa554 <_Z17string_generationcPc+0x10>
		string[h] = '\0';
	}
	int j=0,k=0;
	string[j] = note;
    a55c:	80 93 bd 0a 	sts	0x0ABD, r24
	j++;
	
	if(sharp_note[i] == 'Y' ){
    a560:	80 91 af 0a 	lds	r24, 0x0AAF
    a564:	90 91 b0 0a 	lds	r25, 0x0AB0
    a568:	fc 01       	movw	r30, r24
    a56a:	e0 5d       	subi	r30, 0xD0	; 208
    a56c:	fc 4f       	sbci	r31, 0xFC	; 252
    a56e:	20 81       	ld	r18, Z
    a570:	29 35       	cpi	r18, 0x59	; 89
    a572:	31 f4       	brne	.+12     	; 0xa580 <_Z17string_generationcPc+0x3c>
		string[j] = '#';
    a574:	23 e2       	ldi	r18, 0x23	; 35
    a576:	20 93 be 0a 	sts	0x0ABE, r18
		j++;
    a57a:	e2 e0       	ldi	r30, 0x02	; 2
    a57c:	f0 e0       	ldi	r31, 0x00	; 0
    a57e:	02 c0       	rjmp	.+4      	; 0xa584 <_Z17string_generationcPc+0x40>
	for(int h=0;h<12;h++){
		string[h] = '\0';
	}
	int j=0,k=0;
	string[j] = note;
	j++;
    a580:	e1 e0       	ldi	r30, 0x01	; 1
    a582:	f0 e0       	ldi	r31, 0x00	; 0
	
	if(sharp_note[i] == 'Y' ){
		string[j] = '#';
		j++;
	}
	string[j] = octave[i];
    a584:	e3 54       	subi	r30, 0x43	; 67
    a586:	f5 4f       	sbci	r31, 0xF5	; 245
    a588:	dc 01       	movw	r26, r24
    a58a:	a8 5d       	subi	r26, 0xD8	; 216
    a58c:	bc 4f       	sbci	r27, 0xFC	; 252
    a58e:	2c 91       	ld	r18, X
    a590:	20 83       	st	Z, r18
	j++;
	string[j] = '_';
    a592:	2f e5       	ldi	r18, 0x5F	; 95
    a594:	21 83       	std	Z+1, r18	; 0x01
	j++;
	for(k=0;k<3;k++){
		string[j] = instrument[k];
    a596:	28 81       	ld	r18, Y
    a598:	22 83       	std	Z+2, r18	; 0x02
    a59a:	29 81       	ldd	r18, Y+1	; 0x01
    a59c:	23 83       	std	Z+3, r18	; 0x03
    a59e:	2a 81       	ldd	r18, Y+2	; 0x02
    a5a0:	24 83       	std	Z+4, r18	; 0x04
		j++;
	}
	string[j] = '.';
    a5a2:	2e e2       	ldi	r18, 0x2E	; 46
    a5a4:	25 83       	std	Z+5, r18	; 0x05
	j++;
	string[j] = 'w';
    a5a6:	27 e7       	ldi	r18, 0x77	; 119
    a5a8:	26 83       	std	Z+6, r18	; 0x06
	j++;
	string[j] = 'a';
    a5aa:	21 e6       	ldi	r18, 0x61	; 97
    a5ac:	27 83       	std	Z+7, r18	; 0x07
	j++;
	string[j] = 'v';
    a5ae:	26 e7       	ldi	r18, 0x76	; 118
    a5b0:	20 87       	std	Z+8, r18	; 0x08
	i++;
    a5b2:	01 96       	adiw	r24, 0x01	; 1
    a5b4:	90 93 b0 0a 	sts	0x0AB0, r25
    a5b8:	80 93 af 0a 	sts	0x0AAF, r24
	

}
    a5bc:	df 91       	pop	r29
    a5be:	cf 91       	pop	r28
    a5c0:	08 95       	ret

0000a5c2 <_Z15play_audio_filev>:
Example call   :  play_audio_file();
********************************************************/

void play_audio_file()
{
	tmrpcm.play(string);
    a5c2:	84 ed       	ldi	r24, 0xD4	; 212
    a5c4:	9a e0       	ldi	r25, 0x0A	; 10
    a5c6:	6d eb       	ldi	r22, 0xBD	; 189
    a5c8:	7a e0       	ldi	r23, 0x0A	; 10
    a5ca:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <_ZN6TMRpcm4playEPc>
}
    a5ce:	08 95       	ret

0000a5d0 <_Z22boot_switch_pin_configv>:
Example call   :  boot_switch_pin_config();
********************************************************/

void boot_switch_pin_config()
{
	DDRD  = DDRD & 0xBF;		                                           // set PD.6 as input
    a5d0:	56 98       	cbi	0x0a, 6	; 10
	PORTD = PORTD | 0x40;		                                           // set PD.6 HIGH to enable the internal pull-up
    a5d2:	5e 9a       	sbi	0x0b, 6	; 11
}
    a5d4:	08 95       	ret

0000a5d6 <_Z10uart0_initv>:
Example call   :  uart0_init();
********************************************************/

void uart0_init()
{
	UCSR0B = 0x00;                                                           // disable while setting baud rate
    a5d6:	e1 ec       	ldi	r30, 0xC1	; 193
    a5d8:	f0 e0       	ldi	r31, 0x00	; 0
    a5da:	10 82       	st	Z, r1
	
	UBRR0  = 95;                                                             // for F_CPU = 14.7456 MHz and baud rate = 9600, UBBR = 95
    a5dc:	8f e5       	ldi	r24, 0x5F	; 95
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	90 93 c5 00 	sts	0x00C5, r25
    a5e4:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0C = UCSR0C | (1 << UCSZ01) | (1 << UCSZ00);
    a5e8:	a2 ec       	ldi	r26, 0xC2	; 194
    a5ea:	b0 e0       	ldi	r27, 0x00	; 0
    a5ec:	8c 91       	ld	r24, X
    a5ee:	86 60       	ori	r24, 0x06	; 6
    a5f0:	8c 93       	st	X, r24
	
	UCSR0B = UCSR0B | (1 << RX_EN) | (1 << TX_EN);
    a5f2:	80 81       	ld	r24, Z
    a5f4:	88 61       	ori	r24, 0x18	; 24
    a5f6:	80 83       	st	Z, r24
}
    a5f8:	08 95       	ret

0000a5fa <_Z12init_devicesv>:
Example call   :  init_devices();
********************************************************/

void init_devices()
{
	boot_switch_pin_config();
    a5fa:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <_Z22boot_switch_pin_configv>
	
	cli();
    a5fe:	f8 94       	cli
	
	uart0_init();
    a600:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <_Z10uart0_initv>
	
	sei();
    a604:	78 94       	sei
}
    a606:	08 95       	ret

0000a608 <_Z7uart_txc>:
********************************************************/

void uart_tx(char data)
{
	// waiting to transmit
	while(!(UCSR0A & (1 << UDR_EMPTY)));
    a608:	e0 ec       	ldi	r30, 0xC0	; 192
    a60a:	f0 e0       	ldi	r31, 0x00	; 0
    a60c:	90 81       	ld	r25, Z
    a60e:	95 ff       	sbrs	r25, 5
    a610:	fd cf       	rjmp	.-6      	; 0xa60c <_Z7uart_txc+0x4>
	UDR0 = data;
    a612:	80 93 c6 00 	sts	0x00C6, r24
}
    a616:	08 95       	ret

0000a618 <_Z14uart_tx_stringPc>:
Functionality  :  sends a string
Example call   :  uart_tx_string();
********************************************************/

void uart_tx_string(char *data)
{
    a618:	cf 93       	push	r28
    a61a:	df 93       	push	r29
    a61c:	ec 01       	movw	r28, r24
	while (*data != '\0')
    a61e:	88 81       	ld	r24, Y
    a620:	88 23       	and	r24, r24
    a622:	31 f0       	breq	.+12     	; 0xa630 <_Z14uart_tx_stringPc+0x18>
Output         :  None
Functionality  :  sends a string
Example call   :  uart_tx_string();
********************************************************/

void uart_tx_string(char *data)
    a624:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data != '\0')
	{
		uart_tx(*data);
    a626:	0e 94 04 53 	call	0xa608	; 0xa608 <_Z7uart_txc>
Example call   :  uart_tx_string();
********************************************************/

void uart_tx_string(char *data)
{
	while (*data != '\0')
    a62a:	89 91       	ld	r24, Y+
    a62c:	88 23       	and	r24, r24
    a62e:	d9 f7       	brne	.-10     	; 0xa626 <_Z14uart_tx_stringPc+0xe>
	{
		uart_tx(*data);
		data++;
	}
}
    a630:	df 91       	pop	r29
    a632:	cf 91       	pop	r28
    a634:	08 95       	ret

0000a636 <_Z16check_boot_pressv>:
********************************************************/

void check_boot_press()
{
	
	if ((PIND & 0x40) == 0x40)                                             // boot switch not pressed
    a636:	4e 9b       	sbis	0x09, 6	; 9
    a638:	05 c0       	rjmp	.+10     	; 0xa644 <_Z16check_boot_pressv+0xe>
	{
		switch_flag = 0;
    a63a:	10 92 ac 0a 	sts	0x0AAC, r1
    a63e:	10 92 ab 0a 	sts	0x0AAB, r1
    a642:	08 95       	ret
	}
	
	else
	{
		switch_flag = 1;                                                    // if boot switch pressed
    a644:	81 e0       	ldi	r24, 0x01	; 1
    a646:	90 e0       	ldi	r25, 0x00	; 0
    a648:	90 93 ac 0a 	sts	0x0AAC, r25
    a64c:	80 93 ab 0a 	sts	0x0AAB, r24
		uart_tx_string("#");                                                // send '#' to Python script
    a650:	8e ef       	ldi	r24, 0xFE	; 254
    a652:	92 e0       	ldi	r25, 0x02	; 2
    a654:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
		uart_tx_string("\n");                                               // this is indicated as Start of Task
    a658:	80 e0       	ldi	r24, 0x00	; 0
    a65a:	93 e0       	ldi	r25, 0x03	; 3
    a65c:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
		PORTA=PORTA | 0x02;
    a660:	11 9a       	sbi	0x02, 1	; 2
    a662:	08 95       	ret

0000a664 <_Z13urat_transmitcc>:
Output         :  None
Functionality  :  transmits the note and the instrument struck serially to the python console
Example call   :  urat_transmit();
********************************************************/

void urat_transmit(char note, char instr){
    a664:	1f 93       	push	r17
    a666:	cf 93       	push	r28
    a668:	df 93       	push	r29
    a66a:	00 d0       	rcall	.+0      	; 0xa66c <_Z13urat_transmitcc+0x8>
    a66c:	00 d0       	rcall	.+0      	; 0xa66e <_Z13urat_transmitcc+0xa>
    a66e:	cd b7       	in	r28, 0x3d	; 61
    a670:	de b7       	in	r29, 0x3e	; 62
    a672:	18 2f       	mov	r17, r24
	int m =0;
	char Note[6];
	//char Onset[10];
	if(instr == 'P'){
    a674:	60 35       	cpi	r22, 0x50	; 80
    a676:	49 f4       	brne	.+18     	; 0xa68a <_Z13urat_transmitcc+0x26>
		uart_tx_string("Piano");
    a678:	82 e0       	ldi	r24, 0x02	; 2
    a67a:	93 e0       	ldi	r25, 0x03	; 3
    a67c:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
		uart_tx_string("\n");
    a680:	80 e0       	ldi	r24, 0x00	; 0
    a682:	93 e0       	ldi	r25, 0x03	; 3
    a684:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
    a688:	0a c0       	rjmp	.+20     	; 0xa69e <_Z13urat_transmitcc+0x3a>
	}
	else if(instr =='T'){
    a68a:	64 35       	cpi	r22, 0x54	; 84
    a68c:	41 f4       	brne	.+16     	; 0xa69e <_Z13urat_transmitcc+0x3a>
		uart_tx_string("Trumpet");
    a68e:	88 e0       	ldi	r24, 0x08	; 8
    a690:	93 e0       	ldi	r25, 0x03	; 3
    a692:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
		uart_tx_string("\n");
    a696:	80 e0       	ldi	r24, 0x00	; 0
    a698:	93 e0       	ldi	r25, 0x03	; 3
    a69a:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
	}
	Note[m] = note;
    a69e:	19 83       	std	Y+1, r17	; 0x01
	m++;
	if(sharp_note[n] == 'Y'){
    a6a0:	80 91 ad 0a 	lds	r24, 0x0AAD
    a6a4:	90 91 ae 0a 	lds	r25, 0x0AAE
    a6a8:	fc 01       	movw	r30, r24
    a6aa:	e0 5d       	subi	r30, 0xD0	; 208
    a6ac:	fc 4f       	sbci	r31, 0xFC	; 252
    a6ae:	20 81       	ld	r18, Z
    a6b0:	29 35       	cpi	r18, 0x59	; 89
    a6b2:	41 f4       	brne	.+16     	; 0xa6c4 <_Z13urat_transmitcc+0x60>
		Note[m] = '#';
    a6b4:	23 e2       	ldi	r18, 0x23	; 35
    a6b6:	2a 83       	std	Y+2, r18	; 0x02
		m++;
		Note[m] = octave[n];
    a6b8:	88 5d       	subi	r24, 0xD8	; 216
    a6ba:	9c 4f       	sbci	r25, 0xFC	; 252
    a6bc:	fc 01       	movw	r30, r24
    a6be:	80 81       	ld	r24, Z
    a6c0:	8b 83       	std	Y+3, r24	; 0x03
    a6c2:	07 c0       	rjmp	.+14     	; 0xa6d2 <_Z13urat_transmitcc+0x6e>
	}
	else{
		Note[m] = octave[n];
    a6c4:	88 5d       	subi	r24, 0xD8	; 216
    a6c6:	9c 4f       	sbci	r25, 0xFC	; 252
    a6c8:	fc 01       	movw	r30, r24
    a6ca:	80 81       	ld	r24, Z
    a6cc:	8a 83       	std	Y+2, r24	; 0x02
		m++;
		Note[m] = ' ';
    a6ce:	80 e2       	ldi	r24, 0x20	; 32
    a6d0:	8b 83       	std	Y+3, r24	; 0x03
	}
	n++;
    a6d2:	80 91 ad 0a 	lds	r24, 0x0AAD
    a6d6:	90 91 ae 0a 	lds	r25, 0x0AAE
    a6da:	01 96       	adiw	r24, 0x01	; 1
    a6dc:	90 93 ae 0a 	sts	0x0AAE, r25
    a6e0:	80 93 ad 0a 	sts	0x0AAD, r24
	uart_tx_string(Note);
    a6e4:	ce 01       	movw	r24, r28
    a6e6:	01 96       	adiw	r24, 0x01	; 1
    a6e8:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
	uart_tx_string("\n");
    a6ec:	80 e0       	ldi	r24, 0x00	; 0
    a6ee:	93 e0       	ldi	r25, 0x03	; 3
    a6f0:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
}
    a6f4:	26 96       	adiw	r28, 0x06	; 6
    a6f6:	0f b6       	in	r0, 0x3f	; 63
    a6f8:	f8 94       	cli
    a6fa:	de bf       	out	0x3e, r29	; 62
    a6fc:	0f be       	out	0x3f, r0	; 63
    a6fe:	cd bf       	out	0x3d, r28	; 61
    a700:	df 91       	pop	r29
    a702:	cf 91       	pop	r28
    a704:	1f 91       	pop	r17
    a706:	08 95       	ret

0000a708 <setup>:
Example call   :  Called automatically  
********************************************************/

void setup() {

   DDRA= 0x03;
    a708:	83 e0       	ldi	r24, 0x03	; 3
    a70a:	81 b9       	out	0x01, r24	; 1
   DDRF= 0x00;
    a70c:	10 ba       	out	0x10, r1	; 16
   tmrpcm.quality(1);
    a70e:	84 ed       	ldi	r24, 0xD4	; 212
    a710:	9a e0       	ldi	r25, 0x0A	; 10
    a712:	61 e0       	ldi	r22, 0x01	; 1
    a714:	0e 94 e5 45 	call	0x8bca	; 0x8bca <_ZN6TMRpcm7qualityEh>
   tmrpcm.speakerPin = 11;
    a718:	8b e0       	ldi	r24, 0x0B	; 11
    a71a:	80 93 d4 0a 	sts	0x0AD4, r24
   PORTA= 0x00;
    a71e:	12 b8       	out	0x02, r1	; 2
   DDRH =  0x00;
    a720:	10 92 01 01 	sts	0x0101, r1
   DDRE = 0xFF;
    a724:	8f ef       	ldi	r24, 0xFF	; 255
    a726:	8d b9       	out	0x0d, r24	; 13
   PORTE = 0x00;
    a728:	1e b8       	out	0x0e, r1	; 14
   init_devices();
    a72a:	0e 94 fd 52 	call	0xa5fa	; 0xa5fa <_Z12init_devicesv>
   
   if (!SD.begin(SD_ChipSelectPin)) {                                         // see if the card is present and can be initialized:
    a72e:	8e e2       	ldi	r24, 0x2E	; 46
    a730:	96 e0       	ldi	r25, 0x06	; 6
    a732:	65 e3       	ldi	r22, 0x35	; 53
    a734:	0e 94 42 27 	call	0x4e84	; 0x4e84 <_ZN5SDLib7SDClass5beginEh>
    a738:	88 23       	and	r24, r24
    a73a:	a1 f0       	breq	.+40     	; 0xa764 <setup+0x5c>
  
    return;                                                                   // don't do anything more if not;
  }
  else
  { PORTA=PORTA | 0x01;
    a73c:	10 9a       	sbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    a73e:	8f ef       	ldi	r24, 0xFF	; 255
    a740:	9f e7       	ldi	r25, 0x7F	; 127
    a742:	a6 e1       	ldi	r26, 0x16	; 22
    a744:	81 50       	subi	r24, 0x01	; 1
    a746:	90 40       	sbci	r25, 0x00	; 0
    a748:	a0 40       	sbci	r26, 0x00	; 0
    a74a:	e1 f7       	brne	.-8      	; 0xa744 <setup+0x3c>
    a74c:	00 c0       	rjmp	.+0      	; 0xa74e <setup+0x46>
    a74e:	00 00       	nop
	_delay_ms(500);
	 PORTA=PORTA & 0xFE;                                                  //led will blink indicating sd card is initialized; 
    a750:	10 98       	cbi	0x02, 0	; 2
    a752:	8f ef       	ldi	r24, 0xFF	; 255
    a754:	9f e7       	ldi	r25, 0x7F	; 127
    a756:	a6 e1       	ldi	r26, 0x16	; 22
    a758:	81 50       	subi	r24, 0x01	; 1
    a75a:	90 40       	sbci	r25, 0x00	; 0
    a75c:	a0 40       	sbci	r26, 0x00	; 0
    a75e:	e1 f7       	brne	.-8      	; 0xa758 <setup+0x50>
    a760:	00 c0       	rjmp	.+0      	; 0xa762 <setup+0x5a>
    a762:	00 00       	nop
    a764:	08 95       	ret

0000a766 <loop>:
Functionality  :  all the sub functions required for this task are called in this functions 
Example call   :  Called automatically
********************************************************/

void loop() 
{
    a766:	0f 93       	push	r16
    a768:	1f 93       	push	r17
    a76a:	cf 93       	push	r28
    a76c:	df 93       	push	r29
  int l= 0;
  char instr;
  check_boot_press();                    
    a76e:	0e 94 1b 53 	call	0xa636	; 0xa636 <_Z16check_boot_pressv>

  while(l<12 && switch_flag == 1)
    a772:	80 91 ab 0a 	lds	r24, 0x0AAB
    a776:	90 91 ac 0a 	lds	r25, 0x0AAC
    a77a:	81 30       	cpi	r24, 0x01	; 1
    a77c:	91 05       	cpc	r25, r1
    a77e:	09 f0       	breq	.+2      	; 0xa782 <loop+0x1c>
    a780:	5c c0       	rjmp	.+184    	; 0xa83a <loop+0xd4>
  if(x==1){
  instrument = "Pia";
  instr = 'P';
  }
  else if(x==2){
	  instrument = "Tru";
    a782:	0e e1       	ldi	r16, 0x1E	; 30
    a784:	13 e0       	ldi	r17, 0x03	; 3
  char instr;
  check_boot_press();                    

  while(l<12 && switch_flag == 1)
  {
  x=0;
    a786:	10 92 cc 0a 	sts	0x0ACC, r1
    a78a:	10 92 cb 0a 	sts	0x0ACB, r1
  delay(500);
    a78e:	64 ef       	ldi	r22, 0xF4	; 244
    a790:	71 e0       	ldi	r23, 0x01	; 1
    a792:	80 e0       	ldi	r24, 0x00	; 0
    a794:	90 e0       	ldi	r25, 0x00	; 0
    a796:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <delay>
  while(x==0){
    a79a:	80 91 cb 0a 	lds	r24, 0x0ACB
    a79e:	90 91 cc 0a 	lds	r25, 0x0ACC
    a7a2:	00 97       	sbiw	r24, 0x00	; 0
    a7a4:	41 f4       	brne	.+16     	; 0xa7b6 <loop+0x50>
    read_key();
    a7a6:	0e 94 84 51 	call	0xa308	; 0xa308 <_Z8read_keyv>

  while(l<12 && switch_flag == 1)
  {
  x=0;
  delay(500);
  while(x==0){
    a7aa:	80 91 cb 0a 	lds	r24, 0x0ACB
    a7ae:	90 91 cc 0a 	lds	r25, 0x0ACC
    a7b2:	00 97       	sbiw	r24, 0x00	; 0
    a7b4:	c1 f3       	breq	.-16     	; 0xa7a6 <loop+0x40>
    read_key();
  }
  if(end_key == 1){
    a7b6:	20 91 b9 0a 	lds	r18, 0x0AB9
    a7ba:	30 91 ba 0a 	lds	r19, 0x0ABA
    a7be:	21 30       	cpi	r18, 0x01	; 1
    a7c0:	31 05       	cpc	r19, r1
    a7c2:	89 f4       	brne	.+34     	; 0xa7e6 <loop+0x80>
	uart_tx_string("$");
    a7c4:	80 e1       	ldi	r24, 0x10	; 16
    a7c6:	93 e0       	ldi	r25, 0x03	; 3
    a7c8:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
	uart_tx_string("\n");
    a7cc:	80 e0       	ldi	r24, 0x00	; 0
    a7ce:	93 e0       	ldi	r25, 0x03	; 3
    a7d0:	0e 94 0c 53 	call	0xa618	; 0xa618 <_Z14uart_tx_stringPc>
	
	while (1)
		tmrpcm.play("end.wav");
    a7d4:	c4 ed       	ldi	r28, 0xD4	; 212
    a7d6:	da e0       	ldi	r29, 0x0A	; 10
    a7d8:	02 e1       	ldi	r16, 0x12	; 18
    a7da:	13 e0       	ldi	r17, 0x03	; 3
    a7dc:	ce 01       	movw	r24, r28
    a7de:	b8 01       	movw	r22, r16
    a7e0:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <_ZN6TMRpcm4playEPc>
    a7e4:	fb cf       	rjmp	.-10     	; 0xa7dc <loop+0x76>

  }
  if(x==1){
    a7e6:	81 30       	cpi	r24, 0x01	; 1
    a7e8:	91 05       	cpc	r25, r1
    a7ea:	41 f4       	brne	.+16     	; 0xa7fc <loop+0x96>
  instrument = "Pia";
    a7ec:	8a e1       	ldi	r24, 0x1A	; 26
    a7ee:	93 e0       	ldi	r25, 0x03	; 3
    a7f0:	90 93 ca 0a 	sts	0x0ACA, r25
    a7f4:	80 93 c9 0a 	sts	0x0AC9, r24
  instr = 'P';
    a7f8:	c0 e5       	ldi	r28, 0x50	; 80
    a7fa:	08 c0       	rjmp	.+16     	; 0xa80c <loop+0xa6>
  }
  else if(x==2){
    a7fc:	82 30       	cpi	r24, 0x02	; 2
    a7fe:	91 05       	cpc	r25, r1
    a800:	29 f4       	brne	.+10     	; 0xa80c <loop+0xa6>
	  instrument = "Tru";
    a802:	10 93 ca 0a 	sts	0x0ACA, r17
    a806:	00 93 c9 0a 	sts	0x0AC9, r16
	  instr = 'T';
    a80a:	c4 e5       	ldi	r28, 0x54	; 84
  }
  urat_transmit(note,instr);
    a80c:	80 91 d3 0a 	lds	r24, 0x0AD3
    a810:	6c 2f       	mov	r22, r28
    a812:	0e 94 32 53 	call	0xa664	; 0xa664 <_Z13urat_transmitcc>
  
  string_generation(note,instrument);
    a816:	60 91 c9 0a 	lds	r22, 0x0AC9
    a81a:	70 91 ca 0a 	lds	r23, 0x0ACA
    a81e:	80 91 d3 0a 	lds	r24, 0x0AD3
    a822:	0e 94 a2 52 	call	0xa544	; 0xa544 <_Z17string_generationcPc>
  play_audio_file();
    a826:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <_Z15play_audio_filev>
{
  int l= 0;
  char instr;
  check_boot_press();                    

  while(l<12 && switch_flag == 1)
    a82a:	80 91 ab 0a 	lds	r24, 0x0AAB
    a82e:	90 91 ac 0a 	lds	r25, 0x0AAC
    a832:	81 30       	cpi	r24, 0x01	; 1
    a834:	91 05       	cpc	r25, r1
    a836:	09 f4       	brne	.+2      	; 0xa83a <loop+0xd4>
    a838:	a6 cf       	rjmp	.-180    	; 0xa786 <loop+0x20>
  urat_transmit(note,instr);
  
  string_generation(note,instrument);
  play_audio_file();
}
}
    a83a:	df 91       	pop	r29
    a83c:	cf 91       	pop	r28
    a83e:	1f 91       	pop	r17
    a840:	0f 91       	pop	r16
    a842:	08 95       	ret

0000a844 <_GLOBAL__sub_I_tmrpcm>:
    a844:	81 e0       	ldi	r24, 0x01	; 1
    a846:	90 e0       	ldi	r25, 0x00	; 0
    a848:	6f ef       	ldi	r22, 0xFF	; 255
    a84a:	7f ef       	ldi	r23, 0xFF	; 255
    a84c:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <_Z41__static_initialization_and_destruction_0ii>
    a850:	08 95       	ret

0000a852 <_GLOBAL__sub_D_tmrpcm>:
    a852:	80 e0       	ldi	r24, 0x00	; 0
    a854:	90 e0       	ldi	r25, 0x00	; 0
    a856:	6f ef       	ldi	r22, 0xFF	; 255
    a858:	7f ef       	ldi	r23, 0xFF	; 255
    a85a:	0e 94 6b 51 	call	0xa2d6	; 0xa2d6 <_Z41__static_initialization_and_destruction_0ii>
    a85e:	08 95       	ret

0000a860 <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
    a860:	cf 93       	push	r28
    a862:	df 93       	push	r29
    a864:	ac 01       	movw	r20, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    a866:	82 30       	cpi	r24, 0x02	; 2
    a868:	91 05       	cpc	r25, r1
    a86a:	10 f4       	brcc	.+4      	; 0xa870 <malloc+0x10>
		len = sizeof(struct __freelist) - sizeof(size_t);
    a86c:	42 e0       	ldi	r20, 0x02	; 2
    a86e:	50 e0       	ldi	r21, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    a870:	e0 91 de 0a 	lds	r30, 0x0ADE
    a874:	f0 91 df 0a 	lds	r31, 0x0ADF
    a878:	30 97       	sbiw	r30, 0x00	; 0
    a87a:	09 f4       	brne	.+2      	; 0xa87e <malloc+0x1e>
    a87c:	5a c0       	rjmp	.+180    	; 0xa932 <malloc+0xd2>
    a87e:	20 e0       	ldi	r18, 0x00	; 0
    a880:	30 e0       	ldi	r19, 0x00	; 0
    a882:	a0 e0       	ldi	r26, 0x00	; 0
    a884:	b0 e0       	ldi	r27, 0x00	; 0
    a886:	02 c0       	rjmp	.+4      	; 0xa88c <malloc+0x2c>
    a888:	df 01       	movw	r26, r30
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    a88a:	fc 01       	movw	r30, r24
		if (fp1->sz < len)
    a88c:	80 81       	ld	r24, Z
    a88e:	91 81       	ldd	r25, Z+1	; 0x01
    a890:	84 17       	cp	r24, r20
    a892:	95 07       	cpc	r25, r21
    a894:	10 f1       	brcs	.+68     	; 0xa8da <malloc+0x7a>
			continue;
		if (fp1->sz == len) {
    a896:	48 17       	cp	r20, r24
    a898:	59 07       	cpc	r21, r25
    a89a:	89 f4       	brne	.+34     	; 0xa8be <malloc+0x5e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    a89c:	10 97       	sbiw	r26, 0x00	; 0
    a89e:	39 f0       	breq	.+14     	; 0xa8ae <malloc+0x4e>
				fp2->nx = fp1->nx;
    a8a0:	82 81       	ldd	r24, Z+2	; 0x02
    a8a2:	93 81       	ldd	r25, Z+3	; 0x03
    a8a4:	13 96       	adiw	r26, 0x03	; 3
    a8a6:	9c 93       	st	X, r25
    a8a8:	8e 93       	st	-X, r24
    a8aa:	12 97       	sbiw	r26, 0x02	; 2
    a8ac:	06 c0       	rjmp	.+12     	; 0xa8ba <malloc+0x5a>
			else
				__flp = fp1->nx;
    a8ae:	82 81       	ldd	r24, Z+2	; 0x02
    a8b0:	93 81       	ldd	r25, Z+3	; 0x03
    a8b2:	90 93 df 0a 	sts	0x0ADF, r25
    a8b6:	80 93 de 0a 	sts	0x0ADE, r24
			return &(fp1->nx);
    a8ba:	32 96       	adiw	r30, 0x02	; 2
    a8bc:	79 c0       	rjmp	.+242    	; 0xa9b0 <malloc+0x150>
		}
		else {
			if (s == 0 || fp1->sz < s) {
    a8be:	21 15       	cp	r18, r1
    a8c0:	31 05       	cpc	r19, r1
    a8c2:	21 f0       	breq	.+8      	; 0xa8cc <malloc+0x6c>
    a8c4:	82 17       	cp	r24, r18
    a8c6:	93 07       	cpc	r25, r19
    a8c8:	28 f0       	brcs	.+10     	; 0xa8d4 <malloc+0x74>
    a8ca:	07 c0       	rjmp	.+14     	; 0xa8da <malloc+0x7a>
				/* this is the smallest chunk found so far */
				s = fp1->sz;
    a8cc:	9c 01       	movw	r18, r24
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    a8ce:	ed 01       	movw	r28, r26
    a8d0:	bf 01       	movw	r22, r30
    a8d2:	03 c0       	rjmp	.+6      	; 0xa8da <malloc+0x7a>
				/* this is the smallest chunk found so far */
				s = fp1->sz;
    a8d4:	9c 01       	movw	r18, r24
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    a8d6:	ed 01       	movw	r28, r26
    a8d8:	bf 01       	movw	r22, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    a8da:	82 81       	ldd	r24, Z+2	; 0x02
    a8dc:	93 81       	ldd	r25, Z+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    a8de:	00 97       	sbiw	r24, 0x00	; 0
    a8e0:	99 f6       	brne	.-90     	; 0xa888 <malloc+0x28>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    a8e2:	21 15       	cp	r18, r1
    a8e4:	31 05       	cpc	r19, r1
    a8e6:	29 f1       	breq	.+74     	; 0xa932 <malloc+0xd2>
		if (s - len < sizeof(struct __freelist)) {
    a8e8:	24 1b       	sub	r18, r20
    a8ea:	35 0b       	sbc	r19, r21
    a8ec:	24 30       	cpi	r18, 0x04	; 4
    a8ee:	31 05       	cpc	r19, r1
    a8f0:	a0 f4       	brcc	.+40     	; 0xa91a <malloc+0xba>
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    a8f2:	20 97       	sbiw	r28, 0x00	; 0
    a8f4:	41 f0       	breq	.+16     	; 0xa906 <malloc+0xa6>
				sfp2->nx = sfp1->nx;
    a8f6:	db 01       	movw	r26, r22
    a8f8:	12 96       	adiw	r26, 0x02	; 2
    a8fa:	8d 91       	ld	r24, X+
    a8fc:	9c 91       	ld	r25, X
    a8fe:	13 97       	sbiw	r26, 0x03	; 3
    a900:	9b 83       	std	Y+3, r25	; 0x03
    a902:	8a 83       	std	Y+2, r24	; 0x02
    a904:	07 c0       	rjmp	.+14     	; 0xa914 <malloc+0xb4>
			else
				__flp = sfp1->nx;
    a906:	fb 01       	movw	r30, r22
    a908:	82 81       	ldd	r24, Z+2	; 0x02
    a90a:	93 81       	ldd	r25, Z+3	; 0x03
    a90c:	90 93 df 0a 	sts	0x0ADF, r25
    a910:	80 93 de 0a 	sts	0x0ADE, r24
			return &(sfp1->nx);
    a914:	fb 01       	movw	r30, r22
    a916:	32 96       	adiw	r30, 0x02	; 2
    a918:	4b c0       	rjmp	.+150    	; 0xa9b0 <malloc+0x150>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    a91a:	fb 01       	movw	r30, r22
    a91c:	e2 0f       	add	r30, r18
    a91e:	f3 1f       	adc	r31, r19
    a920:	41 93       	st	Z+, r20
    a922:	51 93       	st	Z+, r21
		sfp1->sz = s - sizeof(size_t);
    a924:	22 50       	subi	r18, 0x02	; 2
    a926:	30 40       	sbci	r19, 0x00	; 0
    a928:	db 01       	movw	r26, r22
    a92a:	11 96       	adiw	r26, 0x01	; 1
    a92c:	3c 93       	st	X, r19
    a92e:	2e 93       	st	-X, r18
		return &(sfp2->nx);
    a930:	3f c0       	rjmp	.+126    	; 0xa9b0 <malloc+0x150>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    a932:	80 91 dc 0a 	lds	r24, 0x0ADC
    a936:	90 91 dd 0a 	lds	r25, 0x0ADD
    a93a:	00 97       	sbiw	r24, 0x00	; 0
    a93c:	41 f4       	brne	.+16     	; 0xa94e <malloc+0xee>
		__brkval = __malloc_heap_start;
    a93e:	80 91 02 02 	lds	r24, 0x0202
    a942:	90 91 03 02 	lds	r25, 0x0203
    a946:	90 93 dd 0a 	sts	0x0ADD, r25
    a94a:	80 93 dc 0a 	sts	0x0ADC, r24
	cp = __malloc_heap_end;
    a94e:	80 91 00 02 	lds	r24, 0x0200
    a952:	90 91 01 02 	lds	r25, 0x0201
	if (cp == 0)
    a956:	00 97       	sbiw	r24, 0x00	; 0
    a958:	41 f4       	brne	.+16     	; 0xa96a <malloc+0x10a>
		cp = STACK_POINTER() - __malloc_margin;
    a95a:	8d b7       	in	r24, 0x3d	; 61
    a95c:	9e b7       	in	r25, 0x3e	; 62
    a95e:	20 91 04 02 	lds	r18, 0x0204
    a962:	30 91 05 02 	lds	r19, 0x0205
    a966:	82 1b       	sub	r24, r18
    a968:	93 0b       	sbc	r25, r19
	if (cp <= __brkval)
    a96a:	e0 91 dc 0a 	lds	r30, 0x0ADC
    a96e:	f0 91 dd 0a 	lds	r31, 0x0ADD
    a972:	e8 17       	cp	r30, r24
    a974:	f9 07       	cpc	r31, r25
    a976:	a0 f4       	brcc	.+40     	; 0xa9a0 <malloc+0x140>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    a978:	8e 1b       	sub	r24, r30
    a97a:	9f 0b       	sbc	r25, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    a97c:	84 17       	cp	r24, r20
    a97e:	95 07       	cpc	r25, r21
    a980:	90 f0       	brcs	.+36     	; 0xa9a6 <malloc+0x146>
    a982:	9a 01       	movw	r18, r20
    a984:	2e 5f       	subi	r18, 0xFE	; 254
    a986:	3f 4f       	sbci	r19, 0xFF	; 255
    a988:	82 17       	cp	r24, r18
    a98a:	93 07       	cpc	r25, r19
    a98c:	78 f0       	brcs	.+30     	; 0xa9ac <malloc+0x14c>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    a98e:	2e 0f       	add	r18, r30
    a990:	3f 1f       	adc	r19, r31
    a992:	30 93 dd 0a 	sts	0x0ADD, r19
    a996:	20 93 dc 0a 	sts	0x0ADC, r18
		fp1->sz = len;
    a99a:	41 93       	st	Z+, r20
    a99c:	51 93       	st	Z+, r21
		return &(fp1->nx);
    a99e:	08 c0       	rjmp	.+16     	; 0xa9b0 <malloc+0x150>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    a9a0:	e0 e0       	ldi	r30, 0x00	; 0
    a9a2:	f0 e0       	ldi	r31, 0x00	; 0
    a9a4:	05 c0       	rjmp	.+10     	; 0xa9b0 <malloc+0x150>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
    a9a6:	e0 e0       	ldi	r30, 0x00	; 0
    a9a8:	f0 e0       	ldi	r31, 0x00	; 0
    a9aa:	02 c0       	rjmp	.+4      	; 0xa9b0 <malloc+0x150>
    a9ac:	e0 e0       	ldi	r30, 0x00	; 0
    a9ae:	f0 e0       	ldi	r31, 0x00	; 0
}
    a9b0:	8e 2f       	mov	r24, r30
    a9b2:	9f 2f       	mov	r25, r31
    a9b4:	df 91       	pop	r29
    a9b6:	cf 91       	pop	r28
    a9b8:	08 95       	ret

0000a9ba <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
    a9ba:	cf 93       	push	r28
    a9bc:	df 93       	push	r29
    a9be:	9c 01       	movw	r18, r24
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    a9c0:	00 97       	sbiw	r24, 0x00	; 0
    a9c2:	09 f4       	brne	.+2      	; 0xa9c6 <free+0xc>
    a9c4:	9d c0       	rjmp	.+314    	; 0xab00 <free+0x146>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    a9c6:	ec 01       	movw	r28, r24
    a9c8:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    a9ca:	1b 82       	std	Y+3, r1	; 0x03
    a9cc:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    a9ce:	a0 91 de 0a 	lds	r26, 0x0ADE
    a9d2:	b0 91 df 0a 	lds	r27, 0x0ADF
    a9d6:	10 97       	sbiw	r26, 0x00	; 0
    a9d8:	31 f0       	breq	.+12     	; 0xa9e6 <free+0x2c>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    a9da:	ac 17       	cp	r26, r28
    a9dc:	bd 07       	cpc	r27, r29
    a9de:	f0 f0       	brcs	.+60     	; 0xaa1c <free+0x62>
    a9e0:	60 e0       	ldi	r22, 0x00	; 0
    a9e2:	70 e0       	ldi	r23, 0x00	; 0
    a9e4:	25 c0       	rjmp	.+74     	; 0xaa30 <free+0x76>
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
		if ((char *)p + fpnew->sz == __brkval)
    a9e6:	fc 01       	movw	r30, r24
    a9e8:	32 97       	sbiw	r30, 0x02	; 2
    a9ea:	80 81       	ld	r24, Z
    a9ec:	91 81       	ldd	r25, Z+1	; 0x01
    a9ee:	28 0f       	add	r18, r24
    a9f0:	39 1f       	adc	r19, r25
    a9f2:	80 91 dc 0a 	lds	r24, 0x0ADC
    a9f6:	90 91 dd 0a 	lds	r25, 0x0ADD
    a9fa:	82 17       	cp	r24, r18
    a9fc:	93 07       	cpc	r25, r19
    a9fe:	29 f4       	brne	.+10     	; 0xaa0a <free+0x50>
			__brkval = cpnew;
    aa00:	d0 93 dd 0a 	sts	0x0ADD, r29
    aa04:	c0 93 dc 0a 	sts	0x0ADC, r28
    aa08:	7b c0       	rjmp	.+246    	; 0xab00 <free+0x146>
		else
			__flp = fpnew;
    aa0a:	d0 93 df 0a 	sts	0x0ADF, r29
    aa0e:	c0 93 de 0a 	sts	0x0ADE, r28
    aa12:	76 c0       	rjmp	.+236    	; 0xab00 <free+0x146>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    aa14:	8c 17       	cp	r24, r28
    aa16:	9d 07       	cpc	r25, r29
    aa18:	48 f4       	brcc	.+18     	; 0xaa2c <free+0x72>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    aa1a:	dc 01       	movw	r26, r24
    aa1c:	12 96       	adiw	r26, 0x02	; 2
    aa1e:	8d 91       	ld	r24, X+
    aa20:	9c 91       	ld	r25, X
    aa22:	13 97       	sbiw	r26, 0x03	; 3
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    aa24:	00 97       	sbiw	r24, 0x00	; 0
    aa26:	b1 f7       	brne	.-20     	; 0xaa14 <free+0x5a>
    aa28:	bd 01       	movw	r22, r26
    aa2a:	25 c0       	rjmp	.+74     	; 0xaa76 <free+0xbc>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    aa2c:	bd 01       	movw	r22, r26
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    aa2e:	dc 01       	movw	r26, r24
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    aa30:	f9 01       	movw	r30, r18
    aa32:	32 97       	sbiw	r30, 0x02	; 2
    aa34:	b3 83       	std	Z+3, r27	; 0x03
    aa36:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    aa38:	40 81       	ld	r20, Z
    aa3a:	51 81       	ldd	r21, Z+1	; 0x01
    aa3c:	c9 01       	movw	r24, r18
    aa3e:	84 0f       	add	r24, r20
    aa40:	95 1f       	adc	r25, r21
    aa42:	a8 17       	cp	r26, r24
    aa44:	b9 07       	cpc	r27, r25
    aa46:	79 f4       	brne	.+30     	; 0xaa66 <free+0xac>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    aa48:	f9 01       	movw	r30, r18
    aa4a:	8d 91       	ld	r24, X+
    aa4c:	9c 91       	ld	r25, X
    aa4e:	11 97       	sbiw	r26, 0x01	; 1
    aa50:	84 0f       	add	r24, r20
    aa52:	95 1f       	adc	r25, r21
    aa54:	02 96       	adiw	r24, 0x02	; 2
    aa56:	92 93       	st	-Z, r25
    aa58:	82 93       	st	-Z, r24
			fpnew->nx = fp1->nx;
    aa5a:	12 96       	adiw	r26, 0x02	; 2
    aa5c:	8d 91       	ld	r24, X+
    aa5e:	9c 91       	ld	r25, X
    aa60:	13 97       	sbiw	r26, 0x03	; 3
    aa62:	93 83       	std	Z+3, r25	; 0x03
    aa64:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    aa66:	61 15       	cp	r22, r1
    aa68:	71 05       	cpc	r23, r1
    aa6a:	29 f4       	brne	.+10     	; 0xaa76 <free+0xbc>
			/* new head of freelist */
			__flp = fpnew;
    aa6c:	d0 93 df 0a 	sts	0x0ADF, r29
    aa70:	c0 93 de 0a 	sts	0x0ADE, r28
			return;
    aa74:	45 c0       	rjmp	.+138    	; 0xab00 <free+0x146>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    aa76:	db 01       	movw	r26, r22
    aa78:	13 96       	adiw	r26, 0x03	; 3
    aa7a:	dc 93       	st	X, r29
    aa7c:	ce 93       	st	-X, r28
    aa7e:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    aa80:	fb 01       	movw	r30, r22
    aa82:	81 91       	ld	r24, Z+
    aa84:	91 91       	ld	r25, Z+
    aa86:	e8 0f       	add	r30, r24
    aa88:	f9 1f       	adc	r31, r25
    aa8a:	ce 17       	cp	r28, r30
    aa8c:	df 07       	cpc	r29, r31
    aa8e:	79 f4       	brne	.+30     	; 0xaaae <free+0xf4>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    aa90:	f9 01       	movw	r30, r18
    aa92:	32 91       	ld	r19, -Z
    aa94:	22 91       	ld	r18, -Z
    aa96:	82 0f       	add	r24, r18
    aa98:	93 1f       	adc	r25, r19
    aa9a:	02 96       	adiw	r24, 0x02	; 2
    aa9c:	11 96       	adiw	r26, 0x01	; 1
    aa9e:	9c 93       	st	X, r25
    aaa0:	8e 93       	st	-X, r24
		fp2->nx = fpnew->nx;
    aaa2:	82 81       	ldd	r24, Z+2	; 0x02
    aaa4:	93 81       	ldd	r25, Z+3	; 0x03
    aaa6:	13 96       	adiw	r26, 0x03	; 3
    aaa8:	9c 93       	st	X, r25
    aaaa:	8e 93       	st	-X, r24
    aaac:	12 97       	sbiw	r26, 0x02	; 2
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    aaae:	e0 91 de 0a 	lds	r30, 0x0ADE
    aab2:	f0 91 df 0a 	lds	r31, 0x0ADF
    aab6:	a0 e0       	ldi	r26, 0x00	; 0
    aab8:	b0 e0       	ldi	r27, 0x00	; 0
    aaba:	02 c0       	rjmp	.+4      	; 0xaac0 <free+0x106>
    aabc:	df 01       	movw	r26, r30
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
    aabe:	fc 01       	movw	r30, r24
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    aac0:	82 81       	ldd	r24, Z+2	; 0x02
    aac2:	93 81       	ldd	r25, Z+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    aac4:	00 97       	sbiw	r24, 0x00	; 0
    aac6:	d1 f7       	brne	.-12     	; 0xaabc <free+0x102>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    aac8:	cf 01       	movw	r24, r30
    aaca:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
    aacc:	20 81       	ld	r18, Z
    aace:	31 81       	ldd	r19, Z+1	; 0x01
    aad0:	82 0f       	add	r24, r18
    aad2:	93 1f       	adc	r25, r19
    aad4:	20 91 dc 0a 	lds	r18, 0x0ADC
    aad8:	30 91 dd 0a 	lds	r19, 0x0ADD
    aadc:	28 17       	cp	r18, r24
    aade:	39 07       	cpc	r19, r25
    aae0:	79 f4       	brne	.+30     	; 0xab00 <free+0x146>
		if (fp2 == NULL)
    aae2:	10 97       	sbiw	r26, 0x00	; 0
    aae4:	29 f4       	brne	.+10     	; 0xaaf0 <free+0x136>
			/* Freelist is empty now. */
			__flp = NULL;
    aae6:	10 92 df 0a 	sts	0x0ADF, r1
    aaea:	10 92 de 0a 	sts	0x0ADE, r1
    aaee:	04 c0       	rjmp	.+8      	; 0xaaf8 <free+0x13e>
		else
			fp2->nx = NULL;
    aaf0:	13 96       	adiw	r26, 0x03	; 3
    aaf2:	1c 92       	st	X, r1
    aaf4:	1e 92       	st	-X, r1
    aaf6:	12 97       	sbiw	r26, 0x02	; 2
		__brkval = cp2 - sizeof(size_t);
    aaf8:	f0 93 dd 0a 	sts	0x0ADD, r31
    aafc:	e0 93 dc 0a 	sts	0x0ADC, r30
	}
}
    ab00:	df 91       	pop	r29
    ab02:	cf 91       	pop	r28
    ab04:	08 95       	ret

0000ab06 <realloc>:
#include <avr/io.h>

ATTRIBUTE_CLIB_SECTION
void *
realloc(void *ptr, size_t len)
{
    ab06:	af 92       	push	r10
    ab08:	bf 92       	push	r11
    ab0a:	cf 92       	push	r12
    ab0c:	df 92       	push	r13
    ab0e:	ef 92       	push	r14
    ab10:	ff 92       	push	r15
    ab12:	0f 93       	push	r16
    ab14:	1f 93       	push	r17
    ab16:	cf 93       	push	r28
    ab18:	df 93       	push	r29
    ab1a:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    ab1c:	00 97       	sbiw	r24, 0x00	; 0
    ab1e:	31 f4       	brne	.+12     	; 0xab2c <realloc+0x26>
		return malloc(len);
    ab20:	cb 01       	movw	r24, r22
    ab22:	0e 94 30 54 	call	0xa860	; 0xa860 <malloc>
    ab26:	08 2f       	mov	r16, r24
    ab28:	19 2f       	mov	r17, r25
    ab2a:	c8 c0       	rjmp	.+400    	; 0xacbc <realloc+0x1b6>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    ab2c:	5c 01       	movw	r10, r24
    ab2e:	a6 0e       	add	r10, r22
    ab30:	b7 1e       	adc	r11, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    ab32:	02 97       	sbiw	r24, 0x02	; 2
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    ab34:	a8 16       	cp	r10, r24
    ab36:	b9 06       	cpc	r11, r25
    ab38:	08 f4       	brcc	.+2      	; 0xab3c <realloc+0x36>
    ab3a:	b8 c0       	rjmp	.+368    	; 0xacac <realloc+0x1a6>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    ab3c:	fc 01       	movw	r30, r24
    ab3e:	e0 80       	ld	r14, Z
    ab40:	f1 80       	ldd	r15, Z+1	; 0x01
    ab42:	e6 16       	cp	r14, r22
    ab44:	f7 06       	cpc	r15, r23
    ab46:	d8 f0       	brcs	.+54     	; 0xab7e <realloc+0x78>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    ab48:	85 e0       	ldi	r24, 0x05	; 5
    ab4a:	e8 16       	cp	r14, r24
    ab4c:	f1 04       	cpc	r15, r1
    ab4e:	08 f4       	brcc	.+2      	; 0xab52 <realloc+0x4c>
    ab50:	b5 c0       	rjmp	.+362    	; 0xacbc <realloc+0x1b6>
		    len > fp1->sz - sizeof(struct __freelist))
    ab52:	c7 01       	movw	r24, r14
    ab54:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    ab56:	86 17       	cp	r24, r22
    ab58:	97 07       	cpc	r25, r23
    ab5a:	08 f4       	brcc	.+2      	; 0xab5e <realloc+0x58>
    ab5c:	af c0       	rjmp	.+350    	; 0xacbc <realloc+0x1b6>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    ab5e:	c7 01       	movw	r24, r14
    ab60:	02 97       	sbiw	r24, 0x02	; 2
    ab62:	7c 01       	movw	r14, r24
    ab64:	e6 1a       	sub	r14, r22
    ab66:	f7 0a       	sbc	r15, r23
    ab68:	f5 01       	movw	r30, r10
    ab6a:	e1 92       	st	Z+, r14
    ab6c:	f1 92       	st	Z+, r15
    ab6e:	cf 01       	movw	r24, r30
		fp1->sz = len;
    ab70:	f8 01       	movw	r30, r16
    ab72:	32 97       	sbiw	r30, 0x02	; 2
    ab74:	71 83       	std	Z+1, r23	; 0x01
    ab76:	60 83       	st	Z, r22
		free(&(fp2->nx));
    ab78:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
		return ptr;
    ab7c:	9f c0       	rjmp	.+318    	; 0xacbc <realloc+0x1b6>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    ab7e:	6b 01       	movw	r12, r22
    ab80:	ce 18       	sub	r12, r14
    ab82:	df 08       	sbc	r13, r15
	cp = (char *)ptr + fp1->sz;
    ab84:	d8 01       	movw	r26, r16
    ab86:	ae 0d       	add	r26, r14
    ab88:	bf 1d       	adc	r27, r15
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    ab8a:	e0 91 de 0a 	lds	r30, 0x0ADE
    ab8e:	f0 91 df 0a 	lds	r31, 0x0ADF
    ab92:	30 97       	sbiw	r30, 0x00	; 0
    ab94:	09 f4       	brne	.+2      	; 0xab98 <realloc+0x92>
    ab96:	52 c0       	rjmp	.+164    	; 0xac3c <realloc+0x136>
    ab98:	20 e0       	ldi	r18, 0x00	; 0
    ab9a:	30 e0       	ldi	r19, 0x00	; 0
    ab9c:	c0 e0       	ldi	r28, 0x00	; 0
    ab9e:	d0 e0       	ldi	r29, 0x00	; 0
    aba0:	02 c0       	rjmp	.+4      	; 0xaba6 <realloc+0xa0>
    aba2:	ef 01       	movw	r28, r30
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    aba4:	fc 01       	movw	r30, r24
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    aba6:	ea 17       	cp	r30, r26
    aba8:	fb 07       	cpc	r31, r27
    abaa:	e1 f5       	brne	.+120    	; 0xac24 <realloc+0x11e>
    abac:	4d 91       	ld	r20, X+
    abae:	5c 91       	ld	r21, X
    abb0:	11 97       	sbiw	r26, 0x01	; 1
    abb2:	ca 01       	movw	r24, r20
    abb4:	02 96       	adiw	r24, 0x02	; 2
    abb6:	8c 15       	cp	r24, r12
    abb8:	9d 05       	cpc	r25, r13
    abba:	a0 f1       	brcs	.+104    	; 0xac24 <realloc+0x11e>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    abbc:	ca 01       	movw	r24, r20
    abbe:	8c 19       	sub	r24, r12
    abc0:	9d 09       	sbc	r25, r13
    abc2:	02 96       	adiw	r24, 0x02	; 2
    abc4:	85 30       	cpi	r24, 0x05	; 5
    abc6:	91 05       	cpc	r25, r1
    abc8:	a8 f0       	brcs	.+42     	; 0xabf4 <realloc+0xee>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    abca:	12 96       	adiw	r26, 0x02	; 2
    abcc:	8d 91       	ld	r24, X+
    abce:	9c 91       	ld	r25, X
    abd0:	13 97       	sbiw	r26, 0x03	; 3
    abd2:	f5 01       	movw	r30, r10
    abd4:	93 83       	std	Z+3, r25	; 0x03
    abd6:	82 83       	std	Z+2, r24	; 0x02
				fp2->sz = fp3->sz - incr;
    abd8:	8d 91       	ld	r24, X+
    abda:	9c 91       	ld	r25, X
    abdc:	11 97       	sbiw	r26, 0x01	; 1
    abde:	8c 19       	sub	r24, r12
    abe0:	9d 09       	sbc	r25, r13
    abe2:	91 83       	std	Z+1, r25	; 0x01
    abe4:	80 83       	st	Z, r24
				fp1->sz = len;
    abe6:	f8 01       	movw	r30, r16
    abe8:	32 97       	sbiw	r30, 0x02	; 2
    abea:	71 83       	std	Z+1, r23	; 0x01
    abec:	60 83       	st	Z, r22
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    abee:	9a 2d       	mov	r25, r10
    abf0:	8b 2d       	mov	r24, r11
    abf2:	0e c0       	rjmp	.+28     	; 0xac10 <realloc+0x10a>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    abf4:	f8 01       	movw	r30, r16
    abf6:	32 97       	sbiw	r30, 0x02	; 2
    abf8:	c7 01       	movw	r24, r14
    abfa:	02 96       	adiw	r24, 0x02	; 2
    abfc:	84 0f       	add	r24, r20
    abfe:	95 1f       	adc	r25, r21
    ac00:	91 83       	std	Z+1, r25	; 0x01
    ac02:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    ac04:	12 96       	adiw	r26, 0x02	; 2
    ac06:	9c 91       	ld	r25, X
    ac08:	12 97       	sbiw	r26, 0x02	; 2
    ac0a:	13 96       	adiw	r26, 0x03	; 3
    ac0c:	8c 91       	ld	r24, X
    ac0e:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (ofp3)
    ac10:	20 97       	sbiw	r28, 0x00	; 0
    ac12:	19 f0       	breq	.+6      	; 0xac1a <realloc+0x114>
				ofp3->nx = fp2;
    ac14:	9a 83       	std	Y+2, r25	; 0x02
    ac16:	8b 83       	std	Y+3, r24	; 0x03
    ac18:	51 c0       	rjmp	.+162    	; 0xacbc <realloc+0x1b6>
			else
				__flp = fp2;
    ac1a:	90 93 de 0a 	sts	0x0ADE, r25
    ac1e:	80 93 df 0a 	sts	0x0ADF, r24
    ac22:	4c c0       	rjmp	.+152    	; 0xacbc <realloc+0x1b6>
    ac24:	80 81       	ld	r24, Z
    ac26:	91 81       	ldd	r25, Z+1	; 0x01
    ac28:	28 17       	cp	r18, r24
    ac2a:	39 07       	cpc	r19, r25
    ac2c:	08 f4       	brcc	.+2      	; 0xac30 <realloc+0x12a>
    ac2e:	9c 01       	movw	r18, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    ac30:	82 81       	ldd	r24, Z+2	; 0x02
    ac32:	93 81       	ldd	r25, Z+3	; 0x03
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    ac34:	00 97       	sbiw	r24, 0x00	; 0
    ac36:	09 f0       	breq	.+2      	; 0xac3a <realloc+0x134>
    ac38:	b4 cf       	rjmp	.-152    	; 0xaba2 <realloc+0x9c>
    ac3a:	02 c0       	rjmp	.+4      	; 0xac40 <realloc+0x13a>
    ac3c:	20 e0       	ldi	r18, 0x00	; 0
    ac3e:	30 e0       	ldi	r19, 0x00	; 0
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    ac40:	80 91 dc 0a 	lds	r24, 0x0ADC
    ac44:	90 91 dd 0a 	lds	r25, 0x0ADD
    ac48:	a8 17       	cp	r26, r24
    ac4a:	b9 07       	cpc	r27, r25
    ac4c:	e9 f4       	brne	.+58     	; 0xac88 <realloc+0x182>
    ac4e:	26 17       	cp	r18, r22
    ac50:	37 07       	cpc	r19, r23
    ac52:	d0 f4       	brcc	.+52     	; 0xac88 <realloc+0x182>
		cp1 = __malloc_heap_end;
    ac54:	80 91 00 02 	lds	r24, 0x0200
    ac58:	90 91 01 02 	lds	r25, 0x0201
		cp = (char *)ptr + len;
		if (cp1 == 0)
    ac5c:	00 97       	sbiw	r24, 0x00	; 0
    ac5e:	41 f4       	brne	.+16     	; 0xac70 <realloc+0x16a>
			cp1 = STACK_POINTER() - __malloc_margin;
    ac60:	8d b7       	in	r24, 0x3d	; 61
    ac62:	9e b7       	in	r25, 0x3e	; 62
    ac64:	20 91 04 02 	lds	r18, 0x0204
    ac68:	30 91 05 02 	lds	r19, 0x0205
    ac6c:	82 1b       	sub	r24, r18
    ac6e:	93 0b       	sbc	r25, r19
		if (cp < cp1) {
    ac70:	a8 16       	cp	r10, r24
    ac72:	b9 06       	cpc	r11, r25
    ac74:	f0 f4       	brcc	.+60     	; 0xacb2 <realloc+0x1ac>
			__brkval = cp;
    ac76:	b0 92 dd 0a 	sts	0x0ADD, r11
    ac7a:	a0 92 dc 0a 	sts	0x0ADC, r10
			fp1->sz = len;
    ac7e:	f8 01       	movw	r30, r16
    ac80:	32 97       	sbiw	r30, 0x02	; 2
    ac82:	71 83       	std	Z+1, r23	; 0x01
    ac84:	60 83       	st	Z, r22
			return ptr;
    ac86:	1a c0       	rjmp	.+52     	; 0xacbc <realloc+0x1b6>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    ac88:	cb 01       	movw	r24, r22
    ac8a:	0e 94 30 54 	call	0xa860	; 0xa860 <malloc>
    ac8e:	c8 2f       	mov	r28, r24
    ac90:	d9 2f       	mov	r29, r25
    ac92:	20 97       	sbiw	r28, 0x00	; 0
    ac94:	89 f0       	breq	.+34     	; 0xacb8 <realloc+0x1b2>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    ac96:	60 2f       	mov	r22, r16
    ac98:	71 2f       	mov	r23, r17
    ac9a:	4e 2d       	mov	r20, r14
    ac9c:	5f 2d       	mov	r21, r15
    ac9e:	0e 94 0b 5a 	call	0xb416	; 0xb416 <memcpy>
	free(ptr);
    aca2:	c8 01       	movw	r24, r16
    aca4:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <free>
	return memp;
    aca8:	8e 01       	movw	r16, r28
    acaa:	08 c0       	rjmp	.+16     	; 0xacbc <realloc+0x1b6>
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
		/* Pointer wrapped across top of RAM, fail. */
		return 0;
    acac:	00 e0       	ldi	r16, 0x00	; 0
    acae:	10 e0       	ldi	r17, 0x00	; 0
    acb0:	05 c0       	rjmp	.+10     	; 0xacbc <realloc+0x1b6>
			__brkval = cp;
			fp1->sz = len;
			return ptr;
		}
		/* If that failed, we are out of luck. */
		return 0;
    acb2:	00 e0       	ldi	r16, 0x00	; 0
    acb4:	10 e0       	ldi	r17, 0x00	; 0
    acb6:	02 c0       	rjmp	.+4      	; 0xacbc <realloc+0x1b6>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    acb8:	00 e0       	ldi	r16, 0x00	; 0
    acba:	10 e0       	ldi	r17, 0x00	; 0
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    acbc:	80 2f       	mov	r24, r16
    acbe:	91 2f       	mov	r25, r17
    acc0:	df 91       	pop	r29
    acc2:	cf 91       	pop	r28
    acc4:	1f 91       	pop	r17
    acc6:	0f 91       	pop	r16
    acc8:	ff 90       	pop	r15
    acca:	ef 90       	pop	r14
    accc:	df 90       	pop	r13
    acce:	cf 90       	pop	r12
    acd0:	bf 90       	pop	r11
    acd2:	af 90       	pop	r10
    acd4:	08 95       	ret

0000acd6 <__subsf3>:
    acd6:	50 58       	subi	r21, 0x80	; 128

0000acd8 <__addsf3>:
    acd8:	bb 27       	eor	r27, r27
    acda:	aa 27       	eor	r26, r26
    acdc:	0e d0       	rcall	.+28     	; 0xacfa <__addsf3x>
    acde:	75 c1       	rjmp	.+746    	; 0xafca <__fp_round>
    ace0:	66 d1       	rcall	.+716    	; 0xafae <__fp_pscA>
    ace2:	30 f0       	brcs	.+12     	; 0xacf0 <__addsf3+0x18>
    ace4:	6b d1       	rcall	.+726    	; 0xafbc <__fp_pscB>
    ace6:	20 f0       	brcs	.+8      	; 0xacf0 <__addsf3+0x18>
    ace8:	31 f4       	brne	.+12     	; 0xacf6 <__addsf3+0x1e>
    acea:	9f 3f       	cpi	r25, 0xFF	; 255
    acec:	11 f4       	brne	.+4      	; 0xacf2 <__addsf3+0x1a>
    acee:	1e f4       	brtc	.+6      	; 0xacf6 <__addsf3+0x1e>
    acf0:	5b c1       	rjmp	.+694    	; 0xafa8 <__fp_nan>
    acf2:	0e f4       	brtc	.+2      	; 0xacf6 <__addsf3+0x1e>
    acf4:	e0 95       	com	r30
    acf6:	e7 fb       	bst	r30, 7
    acf8:	51 c1       	rjmp	.+674    	; 0xaf9c <__fp_inf>

0000acfa <__addsf3x>:
    acfa:	e9 2f       	mov	r30, r25
    acfc:	77 d1       	rcall	.+750    	; 0xafec <__fp_split3>
    acfe:	80 f3       	brcs	.-32     	; 0xace0 <__addsf3+0x8>
    ad00:	ba 17       	cp	r27, r26
    ad02:	62 07       	cpc	r22, r18
    ad04:	73 07       	cpc	r23, r19
    ad06:	84 07       	cpc	r24, r20
    ad08:	95 07       	cpc	r25, r21
    ad0a:	18 f0       	brcs	.+6      	; 0xad12 <__addsf3x+0x18>
    ad0c:	71 f4       	brne	.+28     	; 0xad2a <__addsf3x+0x30>
    ad0e:	9e f5       	brtc	.+102    	; 0xad76 <__addsf3x+0x7c>
    ad10:	8f c1       	rjmp	.+798    	; 0xb030 <__fp_zero>
    ad12:	0e f4       	brtc	.+2      	; 0xad16 <__addsf3x+0x1c>
    ad14:	e0 95       	com	r30
    ad16:	0b 2e       	mov	r0, r27
    ad18:	ba 2f       	mov	r27, r26
    ad1a:	a0 2d       	mov	r26, r0
    ad1c:	0b 01       	movw	r0, r22
    ad1e:	b9 01       	movw	r22, r18
    ad20:	90 01       	movw	r18, r0
    ad22:	0c 01       	movw	r0, r24
    ad24:	ca 01       	movw	r24, r20
    ad26:	a0 01       	movw	r20, r0
    ad28:	11 24       	eor	r1, r1
    ad2a:	ff 27       	eor	r31, r31
    ad2c:	59 1b       	sub	r21, r25
    ad2e:	99 f0       	breq	.+38     	; 0xad56 <__addsf3x+0x5c>
    ad30:	59 3f       	cpi	r21, 0xF9	; 249
    ad32:	50 f4       	brcc	.+20     	; 0xad48 <__addsf3x+0x4e>
    ad34:	50 3e       	cpi	r21, 0xE0	; 224
    ad36:	68 f1       	brcs	.+90     	; 0xad92 <__addsf3x+0x98>
    ad38:	1a 16       	cp	r1, r26
    ad3a:	f0 40       	sbci	r31, 0x00	; 0
    ad3c:	a2 2f       	mov	r26, r18
    ad3e:	23 2f       	mov	r18, r19
    ad40:	34 2f       	mov	r19, r20
    ad42:	44 27       	eor	r20, r20
    ad44:	58 5f       	subi	r21, 0xF8	; 248
    ad46:	f3 cf       	rjmp	.-26     	; 0xad2e <__addsf3x+0x34>
    ad48:	46 95       	lsr	r20
    ad4a:	37 95       	ror	r19
    ad4c:	27 95       	ror	r18
    ad4e:	a7 95       	ror	r26
    ad50:	f0 40       	sbci	r31, 0x00	; 0
    ad52:	53 95       	inc	r21
    ad54:	c9 f7       	brne	.-14     	; 0xad48 <__addsf3x+0x4e>
    ad56:	7e f4       	brtc	.+30     	; 0xad76 <__addsf3x+0x7c>
    ad58:	1f 16       	cp	r1, r31
    ad5a:	ba 0b       	sbc	r27, r26
    ad5c:	62 0b       	sbc	r22, r18
    ad5e:	73 0b       	sbc	r23, r19
    ad60:	84 0b       	sbc	r24, r20
    ad62:	ba f0       	brmi	.+46     	; 0xad92 <__addsf3x+0x98>
    ad64:	91 50       	subi	r25, 0x01	; 1
    ad66:	a1 f0       	breq	.+40     	; 0xad90 <__addsf3x+0x96>
    ad68:	ff 0f       	add	r31, r31
    ad6a:	bb 1f       	adc	r27, r27
    ad6c:	66 1f       	adc	r22, r22
    ad6e:	77 1f       	adc	r23, r23
    ad70:	88 1f       	adc	r24, r24
    ad72:	c2 f7       	brpl	.-16     	; 0xad64 <__addsf3x+0x6a>
    ad74:	0e c0       	rjmp	.+28     	; 0xad92 <__addsf3x+0x98>
    ad76:	ba 0f       	add	r27, r26
    ad78:	62 1f       	adc	r22, r18
    ad7a:	73 1f       	adc	r23, r19
    ad7c:	84 1f       	adc	r24, r20
    ad7e:	48 f4       	brcc	.+18     	; 0xad92 <__addsf3x+0x98>
    ad80:	87 95       	ror	r24
    ad82:	77 95       	ror	r23
    ad84:	67 95       	ror	r22
    ad86:	b7 95       	ror	r27
    ad88:	f7 95       	ror	r31
    ad8a:	9e 3f       	cpi	r25, 0xFE	; 254
    ad8c:	08 f0       	brcs	.+2      	; 0xad90 <__addsf3x+0x96>
    ad8e:	b3 cf       	rjmp	.-154    	; 0xacf6 <__addsf3+0x1e>
    ad90:	93 95       	inc	r25
    ad92:	88 0f       	add	r24, r24
    ad94:	08 f0       	brcs	.+2      	; 0xad98 <__addsf3x+0x9e>
    ad96:	99 27       	eor	r25, r25
    ad98:	ee 0f       	add	r30, r30
    ad9a:	97 95       	ror	r25
    ad9c:	87 95       	ror	r24
    ad9e:	08 95       	ret

0000ada0 <__cmpsf2>:
    ada0:	d9 d0       	rcall	.+434    	; 0xaf54 <__fp_cmp>
    ada2:	08 f4       	brcc	.+2      	; 0xada6 <__cmpsf2+0x6>
    ada4:	81 e0       	ldi	r24, 0x01	; 1
    ada6:	08 95       	ret

0000ada8 <__divsf3>:
    ada8:	0c d0       	rcall	.+24     	; 0xadc2 <__divsf3x>
    adaa:	0f c1       	rjmp	.+542    	; 0xafca <__fp_round>
    adac:	07 d1       	rcall	.+526    	; 0xafbc <__fp_pscB>
    adae:	40 f0       	brcs	.+16     	; 0xadc0 <__divsf3+0x18>
    adb0:	fe d0       	rcall	.+508    	; 0xafae <__fp_pscA>
    adb2:	30 f0       	brcs	.+12     	; 0xadc0 <__divsf3+0x18>
    adb4:	21 f4       	brne	.+8      	; 0xadbe <__divsf3+0x16>
    adb6:	5f 3f       	cpi	r21, 0xFF	; 255
    adb8:	19 f0       	breq	.+6      	; 0xadc0 <__divsf3+0x18>
    adba:	f0 c0       	rjmp	.+480    	; 0xaf9c <__fp_inf>
    adbc:	51 11       	cpse	r21, r1
    adbe:	39 c1       	rjmp	.+626    	; 0xb032 <__fp_szero>
    adc0:	f3 c0       	rjmp	.+486    	; 0xafa8 <__fp_nan>

0000adc2 <__divsf3x>:
    adc2:	14 d1       	rcall	.+552    	; 0xafec <__fp_split3>
    adc4:	98 f3       	brcs	.-26     	; 0xadac <__divsf3+0x4>

0000adc6 <__divsf3_pse>:
    adc6:	99 23       	and	r25, r25
    adc8:	c9 f3       	breq	.-14     	; 0xadbc <__divsf3+0x14>
    adca:	55 23       	and	r21, r21
    adcc:	b1 f3       	breq	.-20     	; 0xadba <__divsf3+0x12>
    adce:	95 1b       	sub	r25, r21
    add0:	55 0b       	sbc	r21, r21
    add2:	bb 27       	eor	r27, r27
    add4:	aa 27       	eor	r26, r26
    add6:	62 17       	cp	r22, r18
    add8:	73 07       	cpc	r23, r19
    adda:	84 07       	cpc	r24, r20
    addc:	38 f0       	brcs	.+14     	; 0xadec <__divsf3_pse+0x26>
    adde:	9f 5f       	subi	r25, 0xFF	; 255
    ade0:	5f 4f       	sbci	r21, 0xFF	; 255
    ade2:	22 0f       	add	r18, r18
    ade4:	33 1f       	adc	r19, r19
    ade6:	44 1f       	adc	r20, r20
    ade8:	aa 1f       	adc	r26, r26
    adea:	a9 f3       	breq	.-22     	; 0xadd6 <__divsf3_pse+0x10>
    adec:	33 d0       	rcall	.+102    	; 0xae54 <__divsf3_pse+0x8e>
    adee:	0e 2e       	mov	r0, r30
    adf0:	3a f0       	brmi	.+14     	; 0xae00 <__divsf3_pse+0x3a>
    adf2:	e0 e8       	ldi	r30, 0x80	; 128
    adf4:	30 d0       	rcall	.+96     	; 0xae56 <__divsf3_pse+0x90>
    adf6:	91 50       	subi	r25, 0x01	; 1
    adf8:	50 40       	sbci	r21, 0x00	; 0
    adfa:	e6 95       	lsr	r30
    adfc:	00 1c       	adc	r0, r0
    adfe:	ca f7       	brpl	.-14     	; 0xadf2 <__divsf3_pse+0x2c>
    ae00:	29 d0       	rcall	.+82     	; 0xae54 <__divsf3_pse+0x8e>
    ae02:	fe 2f       	mov	r31, r30
    ae04:	27 d0       	rcall	.+78     	; 0xae54 <__divsf3_pse+0x8e>
    ae06:	66 0f       	add	r22, r22
    ae08:	77 1f       	adc	r23, r23
    ae0a:	88 1f       	adc	r24, r24
    ae0c:	bb 1f       	adc	r27, r27
    ae0e:	26 17       	cp	r18, r22
    ae10:	37 07       	cpc	r19, r23
    ae12:	48 07       	cpc	r20, r24
    ae14:	ab 07       	cpc	r26, r27
    ae16:	b0 e8       	ldi	r27, 0x80	; 128
    ae18:	09 f0       	breq	.+2      	; 0xae1c <__divsf3_pse+0x56>
    ae1a:	bb 0b       	sbc	r27, r27
    ae1c:	80 2d       	mov	r24, r0
    ae1e:	bf 01       	movw	r22, r30
    ae20:	ff 27       	eor	r31, r31
    ae22:	93 58       	subi	r25, 0x83	; 131
    ae24:	5f 4f       	sbci	r21, 0xFF	; 255
    ae26:	2a f0       	brmi	.+10     	; 0xae32 <__divsf3_pse+0x6c>
    ae28:	9e 3f       	cpi	r25, 0xFE	; 254
    ae2a:	51 05       	cpc	r21, r1
    ae2c:	68 f0       	brcs	.+26     	; 0xae48 <__divsf3_pse+0x82>
    ae2e:	b6 c0       	rjmp	.+364    	; 0xaf9c <__fp_inf>
    ae30:	00 c1       	rjmp	.+512    	; 0xb032 <__fp_szero>
    ae32:	5f 3f       	cpi	r21, 0xFF	; 255
    ae34:	ec f3       	brlt	.-6      	; 0xae30 <__divsf3_pse+0x6a>
    ae36:	98 3e       	cpi	r25, 0xE8	; 232
    ae38:	dc f3       	brlt	.-10     	; 0xae30 <__divsf3_pse+0x6a>
    ae3a:	86 95       	lsr	r24
    ae3c:	77 95       	ror	r23
    ae3e:	67 95       	ror	r22
    ae40:	b7 95       	ror	r27
    ae42:	f7 95       	ror	r31
    ae44:	9f 5f       	subi	r25, 0xFF	; 255
    ae46:	c9 f7       	brne	.-14     	; 0xae3a <__divsf3_pse+0x74>
    ae48:	88 0f       	add	r24, r24
    ae4a:	91 1d       	adc	r25, r1
    ae4c:	96 95       	lsr	r25
    ae4e:	87 95       	ror	r24
    ae50:	97 f9       	bld	r25, 7
    ae52:	08 95       	ret
    ae54:	e1 e0       	ldi	r30, 0x01	; 1
    ae56:	66 0f       	add	r22, r22
    ae58:	77 1f       	adc	r23, r23
    ae5a:	88 1f       	adc	r24, r24
    ae5c:	bb 1f       	adc	r27, r27
    ae5e:	62 17       	cp	r22, r18
    ae60:	73 07       	cpc	r23, r19
    ae62:	84 07       	cpc	r24, r20
    ae64:	ba 07       	cpc	r27, r26
    ae66:	20 f0       	brcs	.+8      	; 0xae70 <__divsf3_pse+0xaa>
    ae68:	62 1b       	sub	r22, r18
    ae6a:	73 0b       	sbc	r23, r19
    ae6c:	84 0b       	sbc	r24, r20
    ae6e:	ba 0b       	sbc	r27, r26
    ae70:	ee 1f       	adc	r30, r30
    ae72:	88 f7       	brcc	.-30     	; 0xae56 <__divsf3_pse+0x90>
    ae74:	e0 95       	com	r30
    ae76:	08 95       	ret

0000ae78 <__fixsfsi>:
    ae78:	04 d0       	rcall	.+8      	; 0xae82 <__fixunssfsi>
    ae7a:	68 94       	set
    ae7c:	b1 11       	cpse	r27, r1
    ae7e:	d9 c0       	rjmp	.+434    	; 0xb032 <__fp_szero>
    ae80:	08 95       	ret

0000ae82 <__fixunssfsi>:
    ae82:	bc d0       	rcall	.+376    	; 0xaffc <__fp_splitA>
    ae84:	88 f0       	brcs	.+34     	; 0xaea8 <__fixunssfsi+0x26>
    ae86:	9f 57       	subi	r25, 0x7F	; 127
    ae88:	90 f0       	brcs	.+36     	; 0xaeae <__fixunssfsi+0x2c>
    ae8a:	b9 2f       	mov	r27, r25
    ae8c:	99 27       	eor	r25, r25
    ae8e:	b7 51       	subi	r27, 0x17	; 23
    ae90:	a0 f0       	brcs	.+40     	; 0xaeba <__fixunssfsi+0x38>
    ae92:	d1 f0       	breq	.+52     	; 0xaec8 <__fixunssfsi+0x46>
    ae94:	66 0f       	add	r22, r22
    ae96:	77 1f       	adc	r23, r23
    ae98:	88 1f       	adc	r24, r24
    ae9a:	99 1f       	adc	r25, r25
    ae9c:	1a f0       	brmi	.+6      	; 0xaea4 <__fixunssfsi+0x22>
    ae9e:	ba 95       	dec	r27
    aea0:	c9 f7       	brne	.-14     	; 0xae94 <__fixunssfsi+0x12>
    aea2:	12 c0       	rjmp	.+36     	; 0xaec8 <__fixunssfsi+0x46>
    aea4:	b1 30       	cpi	r27, 0x01	; 1
    aea6:	81 f0       	breq	.+32     	; 0xaec8 <__fixunssfsi+0x46>
    aea8:	c3 d0       	rcall	.+390    	; 0xb030 <__fp_zero>
    aeaa:	b1 e0       	ldi	r27, 0x01	; 1
    aeac:	08 95       	ret
    aeae:	c0 c0       	rjmp	.+384    	; 0xb030 <__fp_zero>
    aeb0:	67 2f       	mov	r22, r23
    aeb2:	78 2f       	mov	r23, r24
    aeb4:	88 27       	eor	r24, r24
    aeb6:	b8 5f       	subi	r27, 0xF8	; 248
    aeb8:	39 f0       	breq	.+14     	; 0xaec8 <__fixunssfsi+0x46>
    aeba:	b9 3f       	cpi	r27, 0xF9	; 249
    aebc:	cc f3       	brlt	.-14     	; 0xaeb0 <__fixunssfsi+0x2e>
    aebe:	86 95       	lsr	r24
    aec0:	77 95       	ror	r23
    aec2:	67 95       	ror	r22
    aec4:	b3 95       	inc	r27
    aec6:	d9 f7       	brne	.-10     	; 0xaebe <__fixunssfsi+0x3c>
    aec8:	3e f4       	brtc	.+14     	; 0xaed8 <__fixunssfsi+0x56>
    aeca:	90 95       	com	r25
    aecc:	80 95       	com	r24
    aece:	70 95       	com	r23
    aed0:	61 95       	neg	r22
    aed2:	7f 4f       	sbci	r23, 0xFF	; 255
    aed4:	8f 4f       	sbci	r24, 0xFF	; 255
    aed6:	9f 4f       	sbci	r25, 0xFF	; 255
    aed8:	08 95       	ret

0000aeda <__floatunsisf>:
    aeda:	e8 94       	clt
    aedc:	09 c0       	rjmp	.+18     	; 0xaef0 <__floatsisf+0x12>

0000aede <__floatsisf>:
    aede:	97 fb       	bst	r25, 7
    aee0:	3e f4       	brtc	.+14     	; 0xaef0 <__floatsisf+0x12>
    aee2:	90 95       	com	r25
    aee4:	80 95       	com	r24
    aee6:	70 95       	com	r23
    aee8:	61 95       	neg	r22
    aeea:	7f 4f       	sbci	r23, 0xFF	; 255
    aeec:	8f 4f       	sbci	r24, 0xFF	; 255
    aeee:	9f 4f       	sbci	r25, 0xFF	; 255
    aef0:	99 23       	and	r25, r25
    aef2:	a9 f0       	breq	.+42     	; 0xaf1e <__floatsisf+0x40>
    aef4:	f9 2f       	mov	r31, r25
    aef6:	96 e9       	ldi	r25, 0x96	; 150
    aef8:	bb 27       	eor	r27, r27
    aefa:	93 95       	inc	r25
    aefc:	f6 95       	lsr	r31
    aefe:	87 95       	ror	r24
    af00:	77 95       	ror	r23
    af02:	67 95       	ror	r22
    af04:	b7 95       	ror	r27
    af06:	f1 11       	cpse	r31, r1
    af08:	f8 cf       	rjmp	.-16     	; 0xaefa <__floatsisf+0x1c>
    af0a:	fa f4       	brpl	.+62     	; 0xaf4a <__floatsisf+0x6c>
    af0c:	bb 0f       	add	r27, r27
    af0e:	11 f4       	brne	.+4      	; 0xaf14 <__floatsisf+0x36>
    af10:	60 ff       	sbrs	r22, 0
    af12:	1b c0       	rjmp	.+54     	; 0xaf4a <__floatsisf+0x6c>
    af14:	6f 5f       	subi	r22, 0xFF	; 255
    af16:	7f 4f       	sbci	r23, 0xFF	; 255
    af18:	8f 4f       	sbci	r24, 0xFF	; 255
    af1a:	9f 4f       	sbci	r25, 0xFF	; 255
    af1c:	16 c0       	rjmp	.+44     	; 0xaf4a <__floatsisf+0x6c>
    af1e:	88 23       	and	r24, r24
    af20:	11 f0       	breq	.+4      	; 0xaf26 <__floatsisf+0x48>
    af22:	96 e9       	ldi	r25, 0x96	; 150
    af24:	11 c0       	rjmp	.+34     	; 0xaf48 <__floatsisf+0x6a>
    af26:	77 23       	and	r23, r23
    af28:	21 f0       	breq	.+8      	; 0xaf32 <__floatsisf+0x54>
    af2a:	9e e8       	ldi	r25, 0x8E	; 142
    af2c:	87 2f       	mov	r24, r23
    af2e:	76 2f       	mov	r23, r22
    af30:	05 c0       	rjmp	.+10     	; 0xaf3c <__floatsisf+0x5e>
    af32:	66 23       	and	r22, r22
    af34:	71 f0       	breq	.+28     	; 0xaf52 <__floatsisf+0x74>
    af36:	96 e8       	ldi	r25, 0x86	; 134
    af38:	86 2f       	mov	r24, r22
    af3a:	70 e0       	ldi	r23, 0x00	; 0
    af3c:	60 e0       	ldi	r22, 0x00	; 0
    af3e:	2a f0       	brmi	.+10     	; 0xaf4a <__floatsisf+0x6c>
    af40:	9a 95       	dec	r25
    af42:	66 0f       	add	r22, r22
    af44:	77 1f       	adc	r23, r23
    af46:	88 1f       	adc	r24, r24
    af48:	da f7       	brpl	.-10     	; 0xaf40 <__floatsisf+0x62>
    af4a:	88 0f       	add	r24, r24
    af4c:	96 95       	lsr	r25
    af4e:	87 95       	ror	r24
    af50:	97 f9       	bld	r25, 7
    af52:	08 95       	ret

0000af54 <__fp_cmp>:
    af54:	99 0f       	add	r25, r25
    af56:	00 08       	sbc	r0, r0
    af58:	55 0f       	add	r21, r21
    af5a:	aa 0b       	sbc	r26, r26
    af5c:	e0 e8       	ldi	r30, 0x80	; 128
    af5e:	fe ef       	ldi	r31, 0xFE	; 254
    af60:	16 16       	cp	r1, r22
    af62:	17 06       	cpc	r1, r23
    af64:	e8 07       	cpc	r30, r24
    af66:	f9 07       	cpc	r31, r25
    af68:	c0 f0       	brcs	.+48     	; 0xaf9a <__fp_cmp+0x46>
    af6a:	12 16       	cp	r1, r18
    af6c:	13 06       	cpc	r1, r19
    af6e:	e4 07       	cpc	r30, r20
    af70:	f5 07       	cpc	r31, r21
    af72:	98 f0       	brcs	.+38     	; 0xaf9a <__fp_cmp+0x46>
    af74:	62 1b       	sub	r22, r18
    af76:	73 0b       	sbc	r23, r19
    af78:	84 0b       	sbc	r24, r20
    af7a:	95 0b       	sbc	r25, r21
    af7c:	39 f4       	brne	.+14     	; 0xaf8c <__fp_cmp+0x38>
    af7e:	0a 26       	eor	r0, r26
    af80:	61 f0       	breq	.+24     	; 0xaf9a <__fp_cmp+0x46>
    af82:	23 2b       	or	r18, r19
    af84:	24 2b       	or	r18, r20
    af86:	25 2b       	or	r18, r21
    af88:	21 f4       	brne	.+8      	; 0xaf92 <__fp_cmp+0x3e>
    af8a:	08 95       	ret
    af8c:	0a 26       	eor	r0, r26
    af8e:	09 f4       	brne	.+2      	; 0xaf92 <__fp_cmp+0x3e>
    af90:	a1 40       	sbci	r26, 0x01	; 1
    af92:	a6 95       	lsr	r26
    af94:	8f ef       	ldi	r24, 0xFF	; 255
    af96:	81 1d       	adc	r24, r1
    af98:	81 1d       	adc	r24, r1
    af9a:	08 95       	ret

0000af9c <__fp_inf>:
    af9c:	97 f9       	bld	r25, 7
    af9e:	9f 67       	ori	r25, 0x7F	; 127
    afa0:	80 e8       	ldi	r24, 0x80	; 128
    afa2:	70 e0       	ldi	r23, 0x00	; 0
    afa4:	60 e0       	ldi	r22, 0x00	; 0
    afa6:	08 95       	ret

0000afa8 <__fp_nan>:
    afa8:	9f ef       	ldi	r25, 0xFF	; 255
    afaa:	80 ec       	ldi	r24, 0xC0	; 192
    afac:	08 95       	ret

0000afae <__fp_pscA>:
    afae:	00 24       	eor	r0, r0
    afb0:	0a 94       	dec	r0
    afb2:	16 16       	cp	r1, r22
    afb4:	17 06       	cpc	r1, r23
    afb6:	18 06       	cpc	r1, r24
    afb8:	09 06       	cpc	r0, r25
    afba:	08 95       	ret

0000afbc <__fp_pscB>:
    afbc:	00 24       	eor	r0, r0
    afbe:	0a 94       	dec	r0
    afc0:	12 16       	cp	r1, r18
    afc2:	13 06       	cpc	r1, r19
    afc4:	14 06       	cpc	r1, r20
    afc6:	05 06       	cpc	r0, r21
    afc8:	08 95       	ret

0000afca <__fp_round>:
    afca:	09 2e       	mov	r0, r25
    afcc:	03 94       	inc	r0
    afce:	00 0c       	add	r0, r0
    afd0:	11 f4       	brne	.+4      	; 0xafd6 <__fp_round+0xc>
    afd2:	88 23       	and	r24, r24
    afd4:	52 f0       	brmi	.+20     	; 0xafea <__fp_round+0x20>
    afd6:	bb 0f       	add	r27, r27
    afd8:	40 f4       	brcc	.+16     	; 0xafea <__fp_round+0x20>
    afda:	bf 2b       	or	r27, r31
    afdc:	11 f4       	brne	.+4      	; 0xafe2 <__fp_round+0x18>
    afde:	60 ff       	sbrs	r22, 0
    afe0:	04 c0       	rjmp	.+8      	; 0xafea <__fp_round+0x20>
    afe2:	6f 5f       	subi	r22, 0xFF	; 255
    afe4:	7f 4f       	sbci	r23, 0xFF	; 255
    afe6:	8f 4f       	sbci	r24, 0xFF	; 255
    afe8:	9f 4f       	sbci	r25, 0xFF	; 255
    afea:	08 95       	ret

0000afec <__fp_split3>:
    afec:	57 fd       	sbrc	r21, 7
    afee:	90 58       	subi	r25, 0x80	; 128
    aff0:	44 0f       	add	r20, r20
    aff2:	55 1f       	adc	r21, r21
    aff4:	59 f0       	breq	.+22     	; 0xb00c <__fp_splitA+0x10>
    aff6:	5f 3f       	cpi	r21, 0xFF	; 255
    aff8:	71 f0       	breq	.+28     	; 0xb016 <__fp_splitA+0x1a>
    affa:	47 95       	ror	r20

0000affc <__fp_splitA>:
    affc:	88 0f       	add	r24, r24
    affe:	97 fb       	bst	r25, 7
    b000:	99 1f       	adc	r25, r25
    b002:	61 f0       	breq	.+24     	; 0xb01c <__fp_splitA+0x20>
    b004:	9f 3f       	cpi	r25, 0xFF	; 255
    b006:	79 f0       	breq	.+30     	; 0xb026 <__fp_splitA+0x2a>
    b008:	87 95       	ror	r24
    b00a:	08 95       	ret
    b00c:	12 16       	cp	r1, r18
    b00e:	13 06       	cpc	r1, r19
    b010:	14 06       	cpc	r1, r20
    b012:	55 1f       	adc	r21, r21
    b014:	f2 cf       	rjmp	.-28     	; 0xaffa <__fp_split3+0xe>
    b016:	46 95       	lsr	r20
    b018:	f1 df       	rcall	.-30     	; 0xaffc <__fp_splitA>
    b01a:	08 c0       	rjmp	.+16     	; 0xb02c <__fp_splitA+0x30>
    b01c:	16 16       	cp	r1, r22
    b01e:	17 06       	cpc	r1, r23
    b020:	18 06       	cpc	r1, r24
    b022:	99 1f       	adc	r25, r25
    b024:	f1 cf       	rjmp	.-30     	; 0xb008 <__fp_splitA+0xc>
    b026:	86 95       	lsr	r24
    b028:	71 05       	cpc	r23, r1
    b02a:	61 05       	cpc	r22, r1
    b02c:	08 94       	sec
    b02e:	08 95       	ret

0000b030 <__fp_zero>:
    b030:	e8 94       	clt

0000b032 <__fp_szero>:
    b032:	bb 27       	eor	r27, r27
    b034:	66 27       	eor	r22, r22
    b036:	77 27       	eor	r23, r23
    b038:	cb 01       	movw	r24, r22
    b03a:	97 f9       	bld	r25, 7
    b03c:	08 95       	ret

0000b03e <__gesf2>:
    b03e:	8a df       	rcall	.-236    	; 0xaf54 <__fp_cmp>
    b040:	08 f4       	brcc	.+2      	; 0xb044 <__gesf2+0x6>
    b042:	8f ef       	ldi	r24, 0xFF	; 255
    b044:	08 95       	ret

0000b046 <__mulsf3>:
    b046:	0b d0       	rcall	.+22     	; 0xb05e <__mulsf3x>
    b048:	c0 cf       	rjmp	.-128    	; 0xafca <__fp_round>
    b04a:	b1 df       	rcall	.-158    	; 0xafae <__fp_pscA>
    b04c:	28 f0       	brcs	.+10     	; 0xb058 <__mulsf3+0x12>
    b04e:	b6 df       	rcall	.-148    	; 0xafbc <__fp_pscB>
    b050:	18 f0       	brcs	.+6      	; 0xb058 <__mulsf3+0x12>
    b052:	95 23       	and	r25, r21
    b054:	09 f0       	breq	.+2      	; 0xb058 <__mulsf3+0x12>
    b056:	a2 cf       	rjmp	.-188    	; 0xaf9c <__fp_inf>
    b058:	a7 cf       	rjmp	.-178    	; 0xafa8 <__fp_nan>
    b05a:	11 24       	eor	r1, r1
    b05c:	ea cf       	rjmp	.-44     	; 0xb032 <__fp_szero>

0000b05e <__mulsf3x>:
    b05e:	c6 df       	rcall	.-116    	; 0xafec <__fp_split3>
    b060:	a0 f3       	brcs	.-24     	; 0xb04a <__mulsf3+0x4>

0000b062 <__mulsf3_pse>:
    b062:	95 9f       	mul	r25, r21
    b064:	d1 f3       	breq	.-12     	; 0xb05a <__mulsf3+0x14>
    b066:	95 0f       	add	r25, r21
    b068:	50 e0       	ldi	r21, 0x00	; 0
    b06a:	55 1f       	adc	r21, r21
    b06c:	62 9f       	mul	r22, r18
    b06e:	f0 01       	movw	r30, r0
    b070:	72 9f       	mul	r23, r18
    b072:	bb 27       	eor	r27, r27
    b074:	f0 0d       	add	r31, r0
    b076:	b1 1d       	adc	r27, r1
    b078:	63 9f       	mul	r22, r19
    b07a:	aa 27       	eor	r26, r26
    b07c:	f0 0d       	add	r31, r0
    b07e:	b1 1d       	adc	r27, r1
    b080:	aa 1f       	adc	r26, r26
    b082:	64 9f       	mul	r22, r20
    b084:	66 27       	eor	r22, r22
    b086:	b0 0d       	add	r27, r0
    b088:	a1 1d       	adc	r26, r1
    b08a:	66 1f       	adc	r22, r22
    b08c:	82 9f       	mul	r24, r18
    b08e:	22 27       	eor	r18, r18
    b090:	b0 0d       	add	r27, r0
    b092:	a1 1d       	adc	r26, r1
    b094:	62 1f       	adc	r22, r18
    b096:	73 9f       	mul	r23, r19
    b098:	b0 0d       	add	r27, r0
    b09a:	a1 1d       	adc	r26, r1
    b09c:	62 1f       	adc	r22, r18
    b09e:	83 9f       	mul	r24, r19
    b0a0:	a0 0d       	add	r26, r0
    b0a2:	61 1d       	adc	r22, r1
    b0a4:	22 1f       	adc	r18, r18
    b0a6:	74 9f       	mul	r23, r20
    b0a8:	33 27       	eor	r19, r19
    b0aa:	a0 0d       	add	r26, r0
    b0ac:	61 1d       	adc	r22, r1
    b0ae:	23 1f       	adc	r18, r19
    b0b0:	84 9f       	mul	r24, r20
    b0b2:	60 0d       	add	r22, r0
    b0b4:	21 1d       	adc	r18, r1
    b0b6:	82 2f       	mov	r24, r18
    b0b8:	76 2f       	mov	r23, r22
    b0ba:	6a 2f       	mov	r22, r26
    b0bc:	11 24       	eor	r1, r1
    b0be:	9f 57       	subi	r25, 0x7F	; 127
    b0c0:	50 40       	sbci	r21, 0x00	; 0
    b0c2:	8a f0       	brmi	.+34     	; 0xb0e6 <__mulsf3_pse+0x84>
    b0c4:	e1 f0       	breq	.+56     	; 0xb0fe <__mulsf3_pse+0x9c>
    b0c6:	88 23       	and	r24, r24
    b0c8:	4a f0       	brmi	.+18     	; 0xb0dc <__mulsf3_pse+0x7a>
    b0ca:	ee 0f       	add	r30, r30
    b0cc:	ff 1f       	adc	r31, r31
    b0ce:	bb 1f       	adc	r27, r27
    b0d0:	66 1f       	adc	r22, r22
    b0d2:	77 1f       	adc	r23, r23
    b0d4:	88 1f       	adc	r24, r24
    b0d6:	91 50       	subi	r25, 0x01	; 1
    b0d8:	50 40       	sbci	r21, 0x00	; 0
    b0da:	a9 f7       	brne	.-22     	; 0xb0c6 <__mulsf3_pse+0x64>
    b0dc:	9e 3f       	cpi	r25, 0xFE	; 254
    b0de:	51 05       	cpc	r21, r1
    b0e0:	70 f0       	brcs	.+28     	; 0xb0fe <__mulsf3_pse+0x9c>
    b0e2:	5c cf       	rjmp	.-328    	; 0xaf9c <__fp_inf>
    b0e4:	a6 cf       	rjmp	.-180    	; 0xb032 <__fp_szero>
    b0e6:	5f 3f       	cpi	r21, 0xFF	; 255
    b0e8:	ec f3       	brlt	.-6      	; 0xb0e4 <__mulsf3_pse+0x82>
    b0ea:	98 3e       	cpi	r25, 0xE8	; 232
    b0ec:	dc f3       	brlt	.-10     	; 0xb0e4 <__mulsf3_pse+0x82>
    b0ee:	86 95       	lsr	r24
    b0f0:	77 95       	ror	r23
    b0f2:	67 95       	ror	r22
    b0f4:	b7 95       	ror	r27
    b0f6:	f7 95       	ror	r31
    b0f8:	e7 95       	ror	r30
    b0fa:	9f 5f       	subi	r25, 0xFF	; 255
    b0fc:	c1 f7       	brne	.-16     	; 0xb0ee <__mulsf3_pse+0x8c>
    b0fe:	fe 2b       	or	r31, r30
    b100:	88 0f       	add	r24, r24
    b102:	91 1d       	adc	r25, r1
    b104:	96 95       	lsr	r25
    b106:	87 95       	ror	r24
    b108:	97 f9       	bld	r25, 7
    b10a:	08 95       	ret

0000b10c <__unordsf2>:
    b10c:	23 df       	rcall	.-442    	; 0xaf54 <__fp_cmp>
    b10e:	88 0b       	sbc	r24, r24
    b110:	99 0b       	sbc	r25, r25
    b112:	08 95       	ret

0000b114 <__mulsi3>:
    b114:	62 9f       	mul	r22, r18
    b116:	d0 01       	movw	r26, r0
    b118:	73 9f       	mul	r23, r19
    b11a:	f0 01       	movw	r30, r0
    b11c:	82 9f       	mul	r24, r18
    b11e:	e0 0d       	add	r30, r0
    b120:	f1 1d       	adc	r31, r1
    b122:	64 9f       	mul	r22, r20
    b124:	e0 0d       	add	r30, r0
    b126:	f1 1d       	adc	r31, r1
    b128:	92 9f       	mul	r25, r18
    b12a:	f0 0d       	add	r31, r0
    b12c:	83 9f       	mul	r24, r19
    b12e:	f0 0d       	add	r31, r0
    b130:	74 9f       	mul	r23, r20
    b132:	f0 0d       	add	r31, r0
    b134:	65 9f       	mul	r22, r21
    b136:	f0 0d       	add	r31, r0
    b138:	99 27       	eor	r25, r25
    b13a:	72 9f       	mul	r23, r18
    b13c:	b0 0d       	add	r27, r0
    b13e:	e1 1d       	adc	r30, r1
    b140:	f9 1f       	adc	r31, r25
    b142:	63 9f       	mul	r22, r19
    b144:	b0 0d       	add	r27, r0
    b146:	e1 1d       	adc	r30, r1
    b148:	f9 1f       	adc	r31, r25
    b14a:	bd 01       	movw	r22, r26
    b14c:	cf 01       	movw	r24, r30
    b14e:	11 24       	eor	r1, r1
    b150:	08 95       	ret

0000b152 <__udivmodqi4>:
    b152:	99 1b       	sub	r25, r25
    b154:	79 e0       	ldi	r23, 0x09	; 9
    b156:	04 c0       	rjmp	.+8      	; 0xb160 <__udivmodqi4_ep>

0000b158 <__udivmodqi4_loop>:
    b158:	99 1f       	adc	r25, r25
    b15a:	96 17       	cp	r25, r22
    b15c:	08 f0       	brcs	.+2      	; 0xb160 <__udivmodqi4_ep>
    b15e:	96 1b       	sub	r25, r22

0000b160 <__udivmodqi4_ep>:
    b160:	88 1f       	adc	r24, r24
    b162:	7a 95       	dec	r23
    b164:	c9 f7       	brne	.-14     	; 0xb158 <__udivmodqi4_loop>
    b166:	80 95       	com	r24
    b168:	08 95       	ret

0000b16a <__divmodhi4>:
    b16a:	97 fb       	bst	r25, 7
    b16c:	09 2e       	mov	r0, r25
    b16e:	07 26       	eor	r0, r23
    b170:	0a d0       	rcall	.+20     	; 0xb186 <__divmodhi4_neg1>
    b172:	77 fd       	sbrc	r23, 7
    b174:	04 d0       	rcall	.+8      	; 0xb17e <__divmodhi4_neg2>
    b176:	49 d0       	rcall	.+146    	; 0xb20a <__udivmodhi4>
    b178:	06 d0       	rcall	.+12     	; 0xb186 <__divmodhi4_neg1>
    b17a:	00 20       	and	r0, r0
    b17c:	1a f4       	brpl	.+6      	; 0xb184 <__divmodhi4_exit>

0000b17e <__divmodhi4_neg2>:
    b17e:	70 95       	com	r23
    b180:	61 95       	neg	r22
    b182:	7f 4f       	sbci	r23, 0xFF	; 255

0000b184 <__divmodhi4_exit>:
    b184:	08 95       	ret

0000b186 <__divmodhi4_neg1>:
    b186:	f6 f7       	brtc	.-4      	; 0xb184 <__divmodhi4_exit>
    b188:	90 95       	com	r25
    b18a:	81 95       	neg	r24
    b18c:	9f 4f       	sbci	r25, 0xFF	; 255
    b18e:	08 95       	ret

0000b190 <__udivmodsi4>:
    b190:	a1 e2       	ldi	r26, 0x21	; 33
    b192:	1a 2e       	mov	r1, r26
    b194:	aa 1b       	sub	r26, r26
    b196:	bb 1b       	sub	r27, r27
    b198:	fd 01       	movw	r30, r26
    b19a:	0d c0       	rjmp	.+26     	; 0xb1b6 <__udivmodsi4_ep>

0000b19c <__udivmodsi4_loop>:
    b19c:	aa 1f       	adc	r26, r26
    b19e:	bb 1f       	adc	r27, r27
    b1a0:	ee 1f       	adc	r30, r30
    b1a2:	ff 1f       	adc	r31, r31
    b1a4:	a2 17       	cp	r26, r18
    b1a6:	b3 07       	cpc	r27, r19
    b1a8:	e4 07       	cpc	r30, r20
    b1aa:	f5 07       	cpc	r31, r21
    b1ac:	20 f0       	brcs	.+8      	; 0xb1b6 <__udivmodsi4_ep>
    b1ae:	a2 1b       	sub	r26, r18
    b1b0:	b3 0b       	sbc	r27, r19
    b1b2:	e4 0b       	sbc	r30, r20
    b1b4:	f5 0b       	sbc	r31, r21

0000b1b6 <__udivmodsi4_ep>:
    b1b6:	66 1f       	adc	r22, r22
    b1b8:	77 1f       	adc	r23, r23
    b1ba:	88 1f       	adc	r24, r24
    b1bc:	99 1f       	adc	r25, r25
    b1be:	1a 94       	dec	r1
    b1c0:	69 f7       	brne	.-38     	; 0xb19c <__udivmodsi4_loop>
    b1c2:	60 95       	com	r22
    b1c4:	70 95       	com	r23
    b1c6:	80 95       	com	r24
    b1c8:	90 95       	com	r25
    b1ca:	9b 01       	movw	r18, r22
    b1cc:	ac 01       	movw	r20, r24
    b1ce:	bd 01       	movw	r22, r26
    b1d0:	cf 01       	movw	r24, r30
    b1d2:	08 95       	ret

0000b1d4 <__divmodsi4>:
    b1d4:	97 fb       	bst	r25, 7
    b1d6:	09 2e       	mov	r0, r25
    b1d8:	05 26       	eor	r0, r21
    b1da:	0e d0       	rcall	.+28     	; 0xb1f8 <__divmodsi4_neg1>
    b1dc:	57 fd       	sbrc	r21, 7
    b1de:	04 d0       	rcall	.+8      	; 0xb1e8 <__divmodsi4_neg2>
    b1e0:	d7 df       	rcall	.-82     	; 0xb190 <__udivmodsi4>
    b1e2:	0a d0       	rcall	.+20     	; 0xb1f8 <__divmodsi4_neg1>
    b1e4:	00 1c       	adc	r0, r0
    b1e6:	38 f4       	brcc	.+14     	; 0xb1f6 <__divmodsi4_exit>

0000b1e8 <__divmodsi4_neg2>:
    b1e8:	50 95       	com	r21
    b1ea:	40 95       	com	r20
    b1ec:	30 95       	com	r19
    b1ee:	21 95       	neg	r18
    b1f0:	3f 4f       	sbci	r19, 0xFF	; 255
    b1f2:	4f 4f       	sbci	r20, 0xFF	; 255
    b1f4:	5f 4f       	sbci	r21, 0xFF	; 255

0000b1f6 <__divmodsi4_exit>:
    b1f6:	08 95       	ret

0000b1f8 <__divmodsi4_neg1>:
    b1f8:	f6 f7       	brtc	.-4      	; 0xb1f6 <__divmodsi4_exit>
    b1fa:	90 95       	com	r25
    b1fc:	80 95       	com	r24
    b1fe:	70 95       	com	r23
    b200:	61 95       	neg	r22
    b202:	7f 4f       	sbci	r23, 0xFF	; 255
    b204:	8f 4f       	sbci	r24, 0xFF	; 255
    b206:	9f 4f       	sbci	r25, 0xFF	; 255
    b208:	08 95       	ret

0000b20a <__udivmodhi4>:
    b20a:	aa 1b       	sub	r26, r26
    b20c:	bb 1b       	sub	r27, r27
    b20e:	51 e1       	ldi	r21, 0x11	; 17
    b210:	07 c0       	rjmp	.+14     	; 0xb220 <__udivmodhi4_ep>

0000b212 <__udivmodhi4_loop>:
    b212:	aa 1f       	adc	r26, r26
    b214:	bb 1f       	adc	r27, r27
    b216:	a6 17       	cp	r26, r22
    b218:	b7 07       	cpc	r27, r23
    b21a:	10 f0       	brcs	.+4      	; 0xb220 <__udivmodhi4_ep>
    b21c:	a6 1b       	sub	r26, r22
    b21e:	b7 0b       	sbc	r27, r23

0000b220 <__udivmodhi4_ep>:
    b220:	88 1f       	adc	r24, r24
    b222:	99 1f       	adc	r25, r25
    b224:	5a 95       	dec	r21
    b226:	a9 f7       	brne	.-22     	; 0xb212 <__udivmodhi4_loop>
    b228:	80 95       	com	r24
    b22a:	90 95       	com	r25
    b22c:	bc 01       	movw	r22, r24
    b22e:	cd 01       	movw	r24, r26
    b230:	08 95       	ret

0000b232 <__tablejump_elpm__>:
    b232:	07 90       	elpm	r0, Z+
    b234:	f6 91       	elpm	r31, Z
    b236:	e0 2d       	mov	r30, r0
    b238:	19 94       	eijmp

0000b23a <dtostrf>:
    b23a:	ef 92       	push	r14
    b23c:	0f 93       	push	r16
    b23e:	1f 93       	push	r17
    b240:	cf 93       	push	r28
    b242:	32 2f       	mov	r19, r18
    b244:	c0 2f       	mov	r28, r16
    b246:	47 ff       	sbrs	r20, 7
    b248:	02 c0       	rjmp	.+4      	; 0xb24e <dtostrf+0x14>
    b24a:	a4 e1       	ldi	r26, 0x14	; 20
    b24c:	01 c0       	rjmp	.+2      	; 0xb250 <dtostrf+0x16>
    b24e:	a4 e0       	ldi	r26, 0x04	; 4
    b250:	e4 2f       	mov	r30, r20
    b252:	ff 27       	eor	r31, r31
    b254:	e7 fd       	sbrc	r30, 7
    b256:	f0 95       	com	r31
    b258:	f7 ff       	sbrs	r31, 7
    b25a:	03 c0       	rjmp	.+6      	; 0xb262 <dtostrf+0x28>
    b25c:	f0 95       	com	r31
    b25e:	e1 95       	neg	r30
    b260:	ff 4f       	sbci	r31, 0xFF	; 255
    b262:	4c 2f       	mov	r20, r28
    b264:	51 2f       	mov	r21, r17
    b266:	2e 2f       	mov	r18, r30
    b268:	03 2f       	mov	r16, r19
    b26a:	ea 2e       	mov	r14, r26
    b26c:	0e 94 28 5b 	call	0xb650	; 0xb650 <dtoa_prf>
    b270:	8c 2f       	mov	r24, r28
    b272:	91 2f       	mov	r25, r17
    b274:	cf 91       	pop	r28
    b276:	1f 91       	pop	r17
    b278:	0f 91       	pop	r16
    b27a:	ef 90       	pop	r14
    b27c:	08 95       	ret

0000b27e <do_random>:
    b27e:	8f 92       	push	r8
    b280:	9f 92       	push	r9
    b282:	af 92       	push	r10
    b284:	bf 92       	push	r11
    b286:	cf 92       	push	r12
    b288:	df 92       	push	r13
    b28a:	ef 92       	push	r14
    b28c:	ff 92       	push	r15
    b28e:	0f 93       	push	r16
    b290:	1f 93       	push	r17
    b292:	cf 93       	push	r28
    b294:	df 93       	push	r29
    b296:	ec 01       	movw	r28, r24
    b298:	88 81       	ld	r24, Y
    b29a:	99 81       	ldd	r25, Y+1	; 0x01
    b29c:	aa 81       	ldd	r26, Y+2	; 0x02
    b29e:	bb 81       	ldd	r27, Y+3	; 0x03
    b2a0:	00 97       	sbiw	r24, 0x00	; 0
    b2a2:	a1 05       	cpc	r26, r1
    b2a4:	b1 05       	cpc	r27, r1
    b2a6:	21 f4       	brne	.+8      	; 0xb2b0 <do_random+0x32>
    b2a8:	84 e2       	ldi	r24, 0x24	; 36
    b2aa:	99 ed       	ldi	r25, 0xD9	; 217
    b2ac:	ab e5       	ldi	r26, 0x5B	; 91
    b2ae:	b7 e0       	ldi	r27, 0x07	; 7
    b2b0:	bc 01       	movw	r22, r24
    b2b2:	cd 01       	movw	r24, r26
    b2b4:	2d e1       	ldi	r18, 0x1D	; 29
    b2b6:	33 ef       	ldi	r19, 0xF3	; 243
    b2b8:	41 e0       	ldi	r20, 0x01	; 1
    b2ba:	50 e0       	ldi	r21, 0x00	; 0
    b2bc:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__divmodsi4>
    b2c0:	49 01       	movw	r8, r18
    b2c2:	5a 01       	movw	r10, r20
    b2c4:	27 ea       	ldi	r18, 0xA7	; 167
    b2c6:	31 e4       	ldi	r19, 0x41	; 65
    b2c8:	40 e0       	ldi	r20, 0x00	; 0
    b2ca:	50 e0       	ldi	r21, 0x00	; 0
    b2cc:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    b2d0:	6b 01       	movw	r12, r22
    b2d2:	7c 01       	movw	r14, r24
    b2d4:	c5 01       	movw	r24, r10
    b2d6:	b4 01       	movw	r22, r8
    b2d8:	2c ee       	ldi	r18, 0xEC	; 236
    b2da:	34 ef       	ldi	r19, 0xF4	; 244
    b2dc:	4f ef       	ldi	r20, 0xFF	; 255
    b2de:	5f ef       	ldi	r21, 0xFF	; 255
    b2e0:	0e 94 8a 58 	call	0xb114	; 0xb114 <__mulsi3>
    b2e4:	dc 01       	movw	r26, r24
    b2e6:	cb 01       	movw	r24, r22
    b2e8:	c8 0e       	add	r12, r24
    b2ea:	d9 1e       	adc	r13, r25
    b2ec:	ea 1e       	adc	r14, r26
    b2ee:	fb 1e       	adc	r15, r27
    b2f0:	f7 fe       	sbrs	r15, 7
    b2f2:	08 c0       	rjmp	.+16     	; 0xb304 <do_random+0x86>
    b2f4:	8f ef       	ldi	r24, 0xFF	; 255
    b2f6:	9f ef       	ldi	r25, 0xFF	; 255
    b2f8:	af ef       	ldi	r26, 0xFF	; 255
    b2fa:	bf e7       	ldi	r27, 0x7F	; 127
    b2fc:	c8 0e       	add	r12, r24
    b2fe:	d9 1e       	adc	r13, r25
    b300:	ea 1e       	adc	r14, r26
    b302:	fb 1e       	adc	r15, r27
    b304:	c8 82       	st	Y, r12
    b306:	d9 82       	std	Y+1, r13	; 0x01
    b308:	ea 82       	std	Y+2, r14	; 0x02
    b30a:	fb 82       	std	Y+3, r15	; 0x03
    b30c:	97 01       	movw	r18, r14
    b30e:	86 01       	movw	r16, r12
    b310:	3f 77       	andi	r19, 0x7F	; 127
    b312:	b8 01       	movw	r22, r16
    b314:	c9 01       	movw	r24, r18
    b316:	df 91       	pop	r29
    b318:	cf 91       	pop	r28
    b31a:	1f 91       	pop	r17
    b31c:	0f 91       	pop	r16
    b31e:	ff 90       	pop	r15
    b320:	ef 90       	pop	r14
    b322:	df 90       	pop	r13
    b324:	cf 90       	pop	r12
    b326:	bf 90       	pop	r11
    b328:	af 90       	pop	r10
    b32a:	9f 90       	pop	r9
    b32c:	8f 90       	pop	r8
    b32e:	08 95       	ret

0000b330 <random_r>:
    b330:	0e 94 3f 59 	call	0xb27e	; 0xb27e <do_random>
    b334:	08 95       	ret

0000b336 <random>:
    b336:	88 e3       	ldi	r24, 0x38	; 56
    b338:	93 e0       	ldi	r25, 0x03	; 3
    b33a:	0e 94 3f 59 	call	0xb27e	; 0xb27e <do_random>
    b33e:	08 95       	ret

0000b340 <srandom>:
    b340:	dc 01       	movw	r26, r24
    b342:	cb 01       	movw	r24, r22
    b344:	80 93 38 03 	sts	0x0338, r24
    b348:	90 93 39 03 	sts	0x0339, r25
    b34c:	a0 93 3a 03 	sts	0x033A, r26
    b350:	b0 93 3b 03 	sts	0x033B, r27
    b354:	08 95       	ret

0000b356 <atof>:
    b356:	66 27       	eor	r22, r22
    b358:	77 27       	eor	r23, r23
    b35a:	0c 94 a1 5c 	jmp	0xb942	; 0xb942 <strtod>

0000b35e <atol>:
    b35e:	1f 93       	push	r17
    b360:	fc 01       	movw	r30, r24
    b362:	99 27       	eor	r25, r25
    b364:	88 27       	eor	r24, r24
    b366:	bc 01       	movw	r22, r24
    b368:	e8 94       	clt
    b36a:	11 91       	ld	r17, Z+
    b36c:	10 32       	cpi	r17, 0x20	; 32
    b36e:	e9 f3       	breq	.-6      	; 0xb36a <atol+0xc>
    b370:	19 30       	cpi	r17, 0x09	; 9
    b372:	10 f0       	brcs	.+4      	; 0xb378 <atol+0x1a>
    b374:	1e 30       	cpi	r17, 0x0E	; 14
    b376:	c8 f3       	brcs	.-14     	; 0xb36a <atol+0xc>
    b378:	1b 32       	cpi	r17, 0x2B	; 43
    b37a:	51 f0       	breq	.+20     	; 0xb390 <atol+0x32>
    b37c:	1d 32       	cpi	r17, 0x2D	; 45
    b37e:	49 f4       	brne	.+18     	; 0xb392 <atol+0x34>
    b380:	68 94       	set
    b382:	06 c0       	rjmp	.+12     	; 0xb390 <atol+0x32>
    b384:	0e 94 d8 5a 	call	0xb5b0	; 0xb5b0 <__mulsi_const_10>
    b388:	61 0f       	add	r22, r17
    b38a:	71 1d       	adc	r23, r1
    b38c:	81 1d       	adc	r24, r1
    b38e:	91 1d       	adc	r25, r1
    b390:	11 91       	ld	r17, Z+
    b392:	10 53       	subi	r17, 0x30	; 48
    b394:	1a 30       	cpi	r17, 0x0A	; 10
    b396:	b0 f3       	brcs	.-20     	; 0xb384 <atol+0x26>
    b398:	3e f4       	brtc	.+14     	; 0xb3a8 <atol+0x4a>
    b39a:	90 95       	com	r25
    b39c:	80 95       	com	r24
    b39e:	70 95       	com	r23
    b3a0:	61 95       	neg	r22
    b3a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b3a4:	8f 4f       	sbci	r24, 0xFF	; 255
    b3a6:	9f 4f       	sbci	r25, 0xFF	; 255
    b3a8:	1f 91       	pop	r17
    b3aa:	08 95       	ret

0000b3ac <isspace>:
    b3ac:	91 11       	cpse	r25, r1
    b3ae:	1d c5       	rjmp	.+2618   	; 0xbdea <__ctype_isfalse>
    b3b0:	80 32       	cpi	r24, 0x20	; 32
    b3b2:	19 f0       	breq	.+6      	; 0xb3ba <isspace+0xe>
    b3b4:	89 50       	subi	r24, 0x09	; 9
    b3b6:	85 50       	subi	r24, 0x05	; 5
    b3b8:	d0 f7       	brcc	.-12     	; 0xb3ae <isspace+0x2>
    b3ba:	08 95       	ret

0000b3bc <tolower>:
    b3bc:	91 11       	cpse	r25, r1
    b3be:	08 95       	ret
    b3c0:	81 54       	subi	r24, 0x41	; 65
    b3c2:	8a 51       	subi	r24, 0x1A	; 26
    b3c4:	08 f4       	brcc	.+2      	; 0xb3c8 <tolower+0xc>
    b3c6:	80 5e       	subi	r24, 0xE0	; 224
    b3c8:	85 5a       	subi	r24, 0xA5	; 165
    b3ca:	08 95       	ret

0000b3cc <toupper>:
    b3cc:	91 11       	cpse	r25, r1
    b3ce:	08 95       	ret
    b3d0:	81 56       	subi	r24, 0x61	; 97
    b3d2:	8a 51       	subi	r24, 0x1A	; 26
    b3d4:	08 f4       	brcc	.+2      	; 0xb3d8 <toupper+0xc>
    b3d6:	80 52       	subi	r24, 0x20	; 32
    b3d8:	85 58       	subi	r24, 0x85	; 133
    b3da:	08 95       	ret

0000b3dc <strcpy_P>:
    b3dc:	fb 01       	movw	r30, r22
    b3de:	dc 01       	movw	r26, r24
    b3e0:	05 90       	lpm	r0, Z+
    b3e2:	0d 92       	st	X+, r0
    b3e4:	00 20       	and	r0, r0
    b3e6:	e1 f7       	brne	.-8      	; 0xb3e0 <strcpy_P+0x4>
    b3e8:	08 95       	ret

0000b3ea <__strlen_P>:
    b3ea:	fc 01       	movw	r30, r24
    b3ec:	05 90       	lpm	r0, Z+
    b3ee:	00 20       	and	r0, r0
    b3f0:	e9 f7       	brne	.-6      	; 0xb3ec <__strlen_P+0x2>
    b3f2:	80 95       	com	r24
    b3f4:	90 95       	com	r25
    b3f6:	8e 0f       	add	r24, r30
    b3f8:	9f 1f       	adc	r25, r31
    b3fa:	08 95       	ret

0000b3fc <memcmp>:
    b3fc:	fb 01       	movw	r30, r22
    b3fe:	dc 01       	movw	r26, r24
    b400:	04 c0       	rjmp	.+8      	; 0xb40a <memcmp+0xe>
    b402:	8d 91       	ld	r24, X+
    b404:	01 90       	ld	r0, Z+
    b406:	80 19       	sub	r24, r0
    b408:	21 f4       	brne	.+8      	; 0xb412 <memcmp+0x16>
    b40a:	41 50       	subi	r20, 0x01	; 1
    b40c:	50 40       	sbci	r21, 0x00	; 0
    b40e:	c8 f7       	brcc	.-14     	; 0xb402 <memcmp+0x6>
    b410:	88 1b       	sub	r24, r24
    b412:	99 0b       	sbc	r25, r25
    b414:	08 95       	ret

0000b416 <memcpy>:
    b416:	fb 01       	movw	r30, r22
    b418:	dc 01       	movw	r26, r24
    b41a:	02 c0       	rjmp	.+4      	; 0xb420 <memcpy+0xa>
    b41c:	01 90       	ld	r0, Z+
    b41e:	0d 92       	st	X+, r0
    b420:	41 50       	subi	r20, 0x01	; 1
    b422:	50 40       	sbci	r21, 0x00	; 0
    b424:	d8 f7       	brcc	.-10     	; 0xb41c <memcpy+0x6>
    b426:	08 95       	ret

0000b428 <memmove>:
    b428:	68 17       	cp	r22, r24
    b42a:	79 07       	cpc	r23, r25
    b42c:	68 f4       	brcc	.+26     	; 0xb448 <memmove+0x20>
    b42e:	fb 01       	movw	r30, r22
    b430:	dc 01       	movw	r26, r24
    b432:	e4 0f       	add	r30, r20
    b434:	f5 1f       	adc	r31, r21
    b436:	a4 0f       	add	r26, r20
    b438:	b5 1f       	adc	r27, r21
    b43a:	02 c0       	rjmp	.+4      	; 0xb440 <memmove+0x18>
    b43c:	02 90       	ld	r0, -Z
    b43e:	0e 92       	st	-X, r0
    b440:	41 50       	subi	r20, 0x01	; 1
    b442:	50 40       	sbci	r21, 0x00	; 0
    b444:	d8 f7       	brcc	.-10     	; 0xb43c <memmove+0x14>
    b446:	08 95       	ret
    b448:	0c 94 0b 5a 	jmp	0xb416	; 0xb416 <memcpy>

0000b44c <strchr>:
    b44c:	fc 01       	movw	r30, r24
    b44e:	81 91       	ld	r24, Z+
    b450:	86 17       	cp	r24, r22
    b452:	21 f0       	breq	.+8      	; 0xb45c <strchr+0x10>
    b454:	88 23       	and	r24, r24
    b456:	d9 f7       	brne	.-10     	; 0xb44e <strchr+0x2>
    b458:	99 27       	eor	r25, r25
    b45a:	08 95       	ret
    b45c:	31 97       	sbiw	r30, 0x01	; 1
    b45e:	cf 01       	movw	r24, r30
    b460:	08 95       	ret

0000b462 <strcmp>:
    b462:	fb 01       	movw	r30, r22
    b464:	dc 01       	movw	r26, r24
    b466:	8d 91       	ld	r24, X+
    b468:	01 90       	ld	r0, Z+
    b46a:	80 19       	sub	r24, r0
    b46c:	01 10       	cpse	r0, r1
    b46e:	d9 f3       	breq	.-10     	; 0xb466 <strcmp+0x4>
    b470:	99 0b       	sbc	r25, r25
    b472:	08 95       	ret

0000b474 <strcpy>:
    b474:	fb 01       	movw	r30, r22
    b476:	dc 01       	movw	r26, r24
    b478:	01 90       	ld	r0, Z+
    b47a:	0d 92       	st	X+, r0
    b47c:	00 20       	and	r0, r0
    b47e:	e1 f7       	brne	.-8      	; 0xb478 <strcpy+0x4>
    b480:	08 95       	ret

0000b482 <strncmp>:
    b482:	fb 01       	movw	r30, r22
    b484:	dc 01       	movw	r26, r24
    b486:	41 50       	subi	r20, 0x01	; 1
    b488:	50 40       	sbci	r21, 0x00	; 0
    b48a:	30 f0       	brcs	.+12     	; 0xb498 <strncmp+0x16>
    b48c:	8d 91       	ld	r24, X+
    b48e:	01 90       	ld	r0, Z+
    b490:	80 19       	sub	r24, r0
    b492:	19 f4       	brne	.+6      	; 0xb49a <strncmp+0x18>
    b494:	00 20       	and	r0, r0
    b496:	b9 f7       	brne	.-18     	; 0xb486 <strncmp+0x4>
    b498:	88 1b       	sub	r24, r24
    b49a:	99 0b       	sbc	r25, r25
    b49c:	08 95       	ret

0000b49e <strncpy>:
    b49e:	fb 01       	movw	r30, r22
    b4a0:	dc 01       	movw	r26, r24
    b4a2:	41 50       	subi	r20, 0x01	; 1
    b4a4:	50 40       	sbci	r21, 0x00	; 0
    b4a6:	48 f0       	brcs	.+18     	; 0xb4ba <strncpy+0x1c>
    b4a8:	01 90       	ld	r0, Z+
    b4aa:	0d 92       	st	X+, r0
    b4ac:	00 20       	and	r0, r0
    b4ae:	c9 f7       	brne	.-14     	; 0xb4a2 <strncpy+0x4>
    b4b0:	01 c0       	rjmp	.+2      	; 0xb4b4 <strncpy+0x16>
    b4b2:	1d 92       	st	X+, r1
    b4b4:	41 50       	subi	r20, 0x01	; 1
    b4b6:	50 40       	sbci	r21, 0x00	; 0
    b4b8:	e0 f7       	brcc	.-8      	; 0xb4b2 <strncpy+0x14>
    b4ba:	08 95       	ret

0000b4bc <strrchr>:
    b4bc:	fc 01       	movw	r30, r24
    b4be:	81 e0       	ldi	r24, 0x01	; 1
    b4c0:	90 e0       	ldi	r25, 0x00	; 0
    b4c2:	01 90       	ld	r0, Z+
    b4c4:	06 16       	cp	r0, r22
    b4c6:	09 f4       	brne	.+2      	; 0xb4ca <strrchr+0xe>
    b4c8:	cf 01       	movw	r24, r30
    b4ca:	00 20       	and	r0, r0
    b4cc:	d1 f7       	brne	.-12     	; 0xb4c2 <strrchr+0x6>
    b4ce:	01 97       	sbiw	r24, 0x01	; 1
    b4d0:	08 95       	ret

0000b4d2 <strstr>:
    b4d2:	fb 01       	movw	r30, r22
    b4d4:	51 91       	ld	r21, Z+
    b4d6:	55 23       	and	r21, r21
    b4d8:	a9 f0       	breq	.+42     	; 0xb504 <strstr+0x32>
    b4da:	bf 01       	movw	r22, r30
    b4dc:	dc 01       	movw	r26, r24
    b4de:	4d 91       	ld	r20, X+
    b4e0:	45 17       	cp	r20, r21
    b4e2:	41 11       	cpse	r20, r1
    b4e4:	e1 f7       	brne	.-8      	; 0xb4de <strstr+0xc>
    b4e6:	59 f4       	brne	.+22     	; 0xb4fe <strstr+0x2c>
    b4e8:	cd 01       	movw	r24, r26
    b4ea:	01 90       	ld	r0, Z+
    b4ec:	00 20       	and	r0, r0
    b4ee:	49 f0       	breq	.+18     	; 0xb502 <strstr+0x30>
    b4f0:	4d 91       	ld	r20, X+
    b4f2:	40 15       	cp	r20, r0
    b4f4:	41 11       	cpse	r20, r1
    b4f6:	c9 f3       	breq	.-14     	; 0xb4ea <strstr+0x18>
    b4f8:	fb 01       	movw	r30, r22
    b4fa:	41 11       	cpse	r20, r1
    b4fc:	ef cf       	rjmp	.-34     	; 0xb4dc <strstr+0xa>
    b4fe:	81 e0       	ldi	r24, 0x01	; 1
    b500:	90 e0       	ldi	r25, 0x00	; 0
    b502:	01 97       	sbiw	r24, 0x01	; 1
    b504:	08 95       	ret

0000b506 <itoa>:
    b506:	fb 01       	movw	r30, r22
    b508:	9f 01       	movw	r18, r30
    b50a:	e8 94       	clt
    b50c:	42 30       	cpi	r20, 0x02	; 2
    b50e:	c4 f0       	brlt	.+48     	; 0xb540 <itoa+0x3a>
    b510:	45 32       	cpi	r20, 0x25	; 37
    b512:	b4 f4       	brge	.+44     	; 0xb540 <itoa+0x3a>
    b514:	4a 30       	cpi	r20, 0x0A	; 10
    b516:	29 f4       	brne	.+10     	; 0xb522 <itoa+0x1c>
    b518:	97 fb       	bst	r25, 7
    b51a:	1e f4       	brtc	.+6      	; 0xb522 <itoa+0x1c>
    b51c:	90 95       	com	r25
    b51e:	81 95       	neg	r24
    b520:	9f 4f       	sbci	r25, 0xFF	; 255
    b522:	64 2f       	mov	r22, r20
    b524:	77 27       	eor	r23, r23
    b526:	0e 94 05 59 	call	0xb20a	; 0xb20a <__udivmodhi4>
    b52a:	80 5d       	subi	r24, 0xD0	; 208
    b52c:	8a 33       	cpi	r24, 0x3A	; 58
    b52e:	0c f0       	brlt	.+2      	; 0xb532 <itoa+0x2c>
    b530:	89 5d       	subi	r24, 0xD9	; 217
    b532:	81 93       	st	Z+, r24
    b534:	cb 01       	movw	r24, r22
    b536:	00 97       	sbiw	r24, 0x00	; 0
    b538:	a1 f7       	brne	.-24     	; 0xb522 <itoa+0x1c>
    b53a:	16 f4       	brtc	.+4      	; 0xb540 <itoa+0x3a>
    b53c:	5d e2       	ldi	r21, 0x2D	; 45
    b53e:	51 93       	st	Z+, r21
    b540:	10 82       	st	Z, r1
    b542:	c9 01       	movw	r24, r18
    b544:	0c 94 10 5f 	jmp	0xbe20	; 0xbe20 <strrev>

0000b548 <ltoa>:
    b548:	fa 01       	movw	r30, r20
    b54a:	cf 93       	push	r28
    b54c:	ff 93       	push	r31
    b54e:	ef 93       	push	r30
    b550:	22 30       	cpi	r18, 0x02	; 2
    b552:	44 f1       	brlt	.+80     	; 0xb5a4 <ltoa+0x5c>
    b554:	25 32       	cpi	r18, 0x25	; 37
    b556:	34 f5       	brge	.+76     	; 0xb5a4 <ltoa+0x5c>
    b558:	c2 2f       	mov	r28, r18
    b55a:	e8 94       	clt
    b55c:	ca 30       	cpi	r28, 0x0A	; 10
    b55e:	49 f4       	brne	.+18     	; 0xb572 <ltoa+0x2a>
    b560:	97 fb       	bst	r25, 7
    b562:	3e f4       	brtc	.+14     	; 0xb572 <ltoa+0x2a>
    b564:	90 95       	com	r25
    b566:	80 95       	com	r24
    b568:	70 95       	com	r23
    b56a:	61 95       	neg	r22
    b56c:	7f 4f       	sbci	r23, 0xFF	; 255
    b56e:	8f 4f       	sbci	r24, 0xFF	; 255
    b570:	9f 4f       	sbci	r25, 0xFF	; 255
    b572:	2c 2f       	mov	r18, r28
    b574:	33 27       	eor	r19, r19
    b576:	44 27       	eor	r20, r20
    b578:	55 27       	eor	r21, r21
    b57a:	ff 93       	push	r31
    b57c:	ef 93       	push	r30
    b57e:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    b582:	ef 91       	pop	r30
    b584:	ff 91       	pop	r31
    b586:	60 5d       	subi	r22, 0xD0	; 208
    b588:	6a 33       	cpi	r22, 0x3A	; 58
    b58a:	0c f0       	brlt	.+2      	; 0xb58e <ltoa+0x46>
    b58c:	69 5d       	subi	r22, 0xD9	; 217
    b58e:	61 93       	st	Z+, r22
    b590:	b9 01       	movw	r22, r18
    b592:	ca 01       	movw	r24, r20
    b594:	60 50       	subi	r22, 0x00	; 0
    b596:	70 40       	sbci	r23, 0x00	; 0
    b598:	80 40       	sbci	r24, 0x00	; 0
    b59a:	90 40       	sbci	r25, 0x00	; 0
    b59c:	51 f7       	brne	.-44     	; 0xb572 <ltoa+0x2a>
    b59e:	16 f4       	brtc	.+4      	; 0xb5a4 <ltoa+0x5c>
    b5a0:	cd e2       	ldi	r28, 0x2D	; 45
    b5a2:	c1 93       	st	Z+, r28
    b5a4:	10 82       	st	Z, r1
    b5a6:	8f 91       	pop	r24
    b5a8:	9f 91       	pop	r25
    b5aa:	cf 91       	pop	r28
    b5ac:	0c 94 10 5f 	jmp	0xbe20	; 0xbe20 <strrev>

0000b5b0 <__mulsi_const_10>:
    b5b0:	59 2f       	mov	r21, r25
    b5b2:	48 2f       	mov	r20, r24
    b5b4:	37 2f       	mov	r19, r23
    b5b6:	26 2f       	mov	r18, r22
    b5b8:	66 0f       	add	r22, r22
    b5ba:	77 1f       	adc	r23, r23
    b5bc:	88 1f       	adc	r24, r24
    b5be:	99 1f       	adc	r25, r25
    b5c0:	66 0f       	add	r22, r22
    b5c2:	77 1f       	adc	r23, r23
    b5c4:	88 1f       	adc	r24, r24
    b5c6:	99 1f       	adc	r25, r25
    b5c8:	62 0f       	add	r22, r18
    b5ca:	73 1f       	adc	r23, r19
    b5cc:	84 1f       	adc	r24, r20
    b5ce:	95 1f       	adc	r25, r21
    b5d0:	66 0f       	add	r22, r22
    b5d2:	77 1f       	adc	r23, r23
    b5d4:	88 1f       	adc	r24, r24
    b5d6:	99 1f       	adc	r25, r25
    b5d8:	08 95       	ret

0000b5da <ultoa>:
    b5da:	fa 01       	movw	r30, r20
    b5dc:	cf 93       	push	r28
    b5de:	ff 93       	push	r31
    b5e0:	ef 93       	push	r30
    b5e2:	22 30       	cpi	r18, 0x02	; 2
    b5e4:	cc f0       	brlt	.+50     	; 0xb618 <ultoa+0x3e>
    b5e6:	25 32       	cpi	r18, 0x25	; 37
    b5e8:	bc f4       	brge	.+46     	; 0xb618 <ultoa+0x3e>
    b5ea:	c2 2f       	mov	r28, r18
    b5ec:	2c 2f       	mov	r18, r28
    b5ee:	33 27       	eor	r19, r19
    b5f0:	44 27       	eor	r20, r20
    b5f2:	55 27       	eor	r21, r21
    b5f4:	ff 93       	push	r31
    b5f6:	ef 93       	push	r30
    b5f8:	0e 94 c8 58 	call	0xb190	; 0xb190 <__udivmodsi4>
    b5fc:	ef 91       	pop	r30
    b5fe:	ff 91       	pop	r31
    b600:	60 5d       	subi	r22, 0xD0	; 208
    b602:	6a 33       	cpi	r22, 0x3A	; 58
    b604:	0c f0       	brlt	.+2      	; 0xb608 <ultoa+0x2e>
    b606:	69 5d       	subi	r22, 0xD9	; 217
    b608:	61 93       	st	Z+, r22
    b60a:	b9 01       	movw	r22, r18
    b60c:	ca 01       	movw	r24, r20
    b60e:	60 50       	subi	r22, 0x00	; 0
    b610:	70 40       	sbci	r23, 0x00	; 0
    b612:	80 40       	sbci	r24, 0x00	; 0
    b614:	90 40       	sbci	r25, 0x00	; 0
    b616:	51 f7       	brne	.-44     	; 0xb5ec <ultoa+0x12>
    b618:	10 82       	st	Z, r1
    b61a:	8f 91       	pop	r24
    b61c:	9f 91       	pop	r25
    b61e:	cf 91       	pop	r28
    b620:	0c 94 10 5f 	jmp	0xbe20	; 0xbe20 <strrev>

0000b624 <utoa>:
    b624:	fb 01       	movw	r30, r22
    b626:	9f 01       	movw	r18, r30
    b628:	42 30       	cpi	r20, 0x02	; 2
    b62a:	74 f0       	brlt	.+28     	; 0xb648 <utoa+0x24>
    b62c:	45 32       	cpi	r20, 0x25	; 37
    b62e:	64 f4       	brge	.+24     	; 0xb648 <utoa+0x24>
    b630:	64 2f       	mov	r22, r20
    b632:	77 27       	eor	r23, r23
    b634:	0e 94 05 59 	call	0xb20a	; 0xb20a <__udivmodhi4>
    b638:	80 5d       	subi	r24, 0xD0	; 208
    b63a:	8a 33       	cpi	r24, 0x3A	; 58
    b63c:	0c f0       	brlt	.+2      	; 0xb640 <utoa+0x1c>
    b63e:	89 5d       	subi	r24, 0xD9	; 217
    b640:	81 93       	st	Z+, r24
    b642:	cb 01       	movw	r24, r22
    b644:	00 97       	sbiw	r24, 0x00	; 0
    b646:	a1 f7       	brne	.-24     	; 0xb630 <utoa+0xc>
    b648:	10 82       	st	Z, r1
    b64a:	c9 01       	movw	r24, r18
    b64c:	0c 94 10 5f 	jmp	0xbe20	; 0xbe20 <strrev>

0000b650 <dtoa_prf>:
    b650:	6f 92       	push	r6
    b652:	7f 92       	push	r7
    b654:	8f 92       	push	r8
    b656:	9f 92       	push	r9
    b658:	af 92       	push	r10
    b65a:	bf 92       	push	r11
    b65c:	cf 92       	push	r12
    b65e:	df 92       	push	r13
    b660:	ef 92       	push	r14
    b662:	ff 92       	push	r15
    b664:	0f 93       	push	r16
    b666:	1f 93       	push	r17
    b668:	cf 93       	push	r28
    b66a:	df 93       	push	r29
    b66c:	cd b7       	in	r28, 0x3d	; 61
    b66e:	de b7       	in	r29, 0x3e	; 62
    b670:	29 97       	sbiw	r28, 0x09	; 9
    b672:	0f b6       	in	r0, 0x3f	; 63
    b674:	f8 94       	cli
    b676:	de bf       	out	0x3e, r29	; 62
    b678:	0f be       	out	0x3f, r0	; 63
    b67a:	cd bf       	out	0x3d, r28	; 61
    b67c:	6a 01       	movw	r12, r20
    b67e:	12 2f       	mov	r17, r18
    b680:	f0 2e       	mov	r15, r16
    b682:	2b e3       	ldi	r18, 0x3B	; 59
    b684:	20 17       	cp	r18, r16
    b686:	18 f0       	brcs	.+6      	; 0xb68e <dtoa_prf+0x3e>
    b688:	b0 2e       	mov	r11, r16
    b68a:	b3 94       	inc	r11
    b68c:	02 c0       	rjmp	.+4      	; 0xb692 <dtoa_prf+0x42>
    b68e:	3c e3       	ldi	r19, 0x3C	; 60
    b690:	b3 2e       	mov	r11, r19
    b692:	ae 01       	movw	r20, r28
    b694:	4f 5f       	subi	r20, 0xFF	; 255
    b696:	5f 4f       	sbci	r21, 0xFF	; 255
    b698:	27 e0       	ldi	r18, 0x07	; 7
    b69a:	0b 2d       	mov	r16, r11
    b69c:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <__ftoa_engine>
    b6a0:	bc 01       	movw	r22, r24
    b6a2:	a9 81       	ldd	r26, Y+1	; 0x01
    b6a4:	b0 e0       	ldi	r27, 0x00	; 0
    b6a6:	cd 01       	movw	r24, r26
    b6a8:	89 70       	andi	r24, 0x09	; 9
    b6aa:	90 70       	andi	r25, 0x00	; 0
    b6ac:	81 30       	cpi	r24, 0x01	; 1
    b6ae:	91 05       	cpc	r25, r1
    b6b0:	31 f0       	breq	.+12     	; 0xb6be <dtoa_prf+0x6e>
    b6b2:	e1 fc       	sbrc	r14, 1
    b6b4:	06 c0       	rjmp	.+12     	; 0xb6c2 <dtoa_prf+0x72>
    b6b6:	e0 fe       	sbrs	r14, 0
    b6b8:	06 c0       	rjmp	.+12     	; 0xb6c6 <dtoa_prf+0x76>
    b6ba:	40 e2       	ldi	r20, 0x20	; 32
    b6bc:	05 c0       	rjmp	.+10     	; 0xb6c8 <dtoa_prf+0x78>
    b6be:	4d e2       	ldi	r20, 0x2D	; 45
    b6c0:	03 c0       	rjmp	.+6      	; 0xb6c8 <dtoa_prf+0x78>
    b6c2:	4b e2       	ldi	r20, 0x2B	; 43
    b6c4:	01 c0       	rjmp	.+2      	; 0xb6c8 <dtoa_prf+0x78>
    b6c6:	40 e0       	ldi	r20, 0x00	; 0
    b6c8:	a3 ff       	sbrs	r26, 3
    b6ca:	36 c0       	rjmp	.+108    	; 0xb738 <dtoa_prf+0xe8>
    b6cc:	44 23       	and	r20, r20
    b6ce:	11 f0       	breq	.+4      	; 0xb6d4 <dtoa_prf+0x84>
    b6d0:	84 e0       	ldi	r24, 0x04	; 4
    b6d2:	01 c0       	rjmp	.+2      	; 0xb6d6 <dtoa_prf+0x86>
    b6d4:	83 e0       	ldi	r24, 0x03	; 3
    b6d6:	81 17       	cp	r24, r17
    b6d8:	10 f4       	brcc	.+4      	; 0xb6de <dtoa_prf+0x8e>
    b6da:	18 1b       	sub	r17, r24
    b6dc:	01 c0       	rjmp	.+2      	; 0xb6e0 <dtoa_prf+0x90>
    b6de:	10 e0       	ldi	r17, 0x00	; 0
    b6e0:	e4 fc       	sbrc	r14, 4
    b6e2:	0b c0       	rjmp	.+22     	; 0xb6fa <dtoa_prf+0xaa>
    b6e4:	91 2f       	mov	r25, r17
    b6e6:	f6 01       	movw	r30, r12
    b6e8:	80 e2       	ldi	r24, 0x20	; 32
    b6ea:	02 c0       	rjmp	.+4      	; 0xb6f0 <dtoa_prf+0xa0>
    b6ec:	81 93       	st	Z+, r24
    b6ee:	91 50       	subi	r25, 0x01	; 1
    b6f0:	99 23       	and	r25, r25
    b6f2:	e1 f7       	brne	.-8      	; 0xb6ec <dtoa_prf+0x9c>
    b6f4:	c1 0e       	add	r12, r17
    b6f6:	d1 1c       	adc	r13, r1
    b6f8:	10 e0       	ldi	r17, 0x00	; 0
    b6fa:	44 23       	and	r20, r20
    b6fc:	19 f0       	breq	.+6      	; 0xb704 <dtoa_prf+0xb4>
    b6fe:	f6 01       	movw	r30, r12
    b700:	41 93       	st	Z+, r20
    b702:	6f 01       	movw	r12, r30
    b704:	e2 fe       	sbrs	r14, 2
    b706:	05 c0       	rjmp	.+10     	; 0xb712 <dtoa_prf+0xc2>
    b708:	8e e4       	ldi	r24, 0x4E	; 78
    b70a:	f6 01       	movw	r30, r12
    b70c:	80 83       	st	Z, r24
    b70e:	91 e4       	ldi	r25, 0x41	; 65
    b710:	04 c0       	rjmp	.+8      	; 0xb71a <dtoa_prf+0xca>
    b712:	8e e6       	ldi	r24, 0x6E	; 110
    b714:	f6 01       	movw	r30, r12
    b716:	80 83       	st	Z, r24
    b718:	91 e6       	ldi	r25, 0x61	; 97
    b71a:	91 83       	std	Z+1, r25	; 0x01
    b71c:	82 83       	std	Z+2, r24	; 0x02
    b71e:	83 e0       	ldi	r24, 0x03	; 3
    b720:	90 e0       	ldi	r25, 0x00	; 0
    b722:	c8 0e       	add	r12, r24
    b724:	d9 1e       	adc	r13, r25
    b726:	81 2f       	mov	r24, r17
    b728:	f6 01       	movw	r30, r12
    b72a:	90 e2       	ldi	r25, 0x20	; 32
    b72c:	02 c0       	rjmp	.+4      	; 0xb732 <dtoa_prf+0xe2>
    b72e:	91 93       	st	Z+, r25
    b730:	81 50       	subi	r24, 0x01	; 1
    b732:	88 23       	and	r24, r24
    b734:	e1 f7       	brne	.-8      	; 0xb72e <dtoa_prf+0xde>
    b736:	3a c0       	rjmp	.+116    	; 0xb7ac <dtoa_prf+0x15c>
    b738:	a2 ff       	sbrs	r26, 2
    b73a:	3f c0       	rjmp	.+126    	; 0xb7ba <dtoa_prf+0x16a>
    b73c:	44 23       	and	r20, r20
    b73e:	11 f0       	breq	.+4      	; 0xb744 <dtoa_prf+0xf4>
    b740:	84 e0       	ldi	r24, 0x04	; 4
    b742:	01 c0       	rjmp	.+2      	; 0xb746 <dtoa_prf+0xf6>
    b744:	83 e0       	ldi	r24, 0x03	; 3
    b746:	81 17       	cp	r24, r17
    b748:	10 f4       	brcc	.+4      	; 0xb74e <dtoa_prf+0xfe>
    b74a:	18 1b       	sub	r17, r24
    b74c:	01 c0       	rjmp	.+2      	; 0xb750 <dtoa_prf+0x100>
    b74e:	10 e0       	ldi	r17, 0x00	; 0
    b750:	e4 fc       	sbrc	r14, 4
    b752:	0b c0       	rjmp	.+22     	; 0xb76a <dtoa_prf+0x11a>
    b754:	91 2f       	mov	r25, r17
    b756:	f6 01       	movw	r30, r12
    b758:	80 e2       	ldi	r24, 0x20	; 32
    b75a:	02 c0       	rjmp	.+4      	; 0xb760 <dtoa_prf+0x110>
    b75c:	81 93       	st	Z+, r24
    b75e:	91 50       	subi	r25, 0x01	; 1
    b760:	99 23       	and	r25, r25
    b762:	e1 f7       	brne	.-8      	; 0xb75c <dtoa_prf+0x10c>
    b764:	c1 0e       	add	r12, r17
    b766:	d1 1c       	adc	r13, r1
    b768:	10 e0       	ldi	r17, 0x00	; 0
    b76a:	44 23       	and	r20, r20
    b76c:	19 f0       	breq	.+6      	; 0xb774 <dtoa_prf+0x124>
    b76e:	f6 01       	movw	r30, r12
    b770:	41 93       	st	Z+, r20
    b772:	6f 01       	movw	r12, r30
    b774:	e2 fe       	sbrs	r14, 2
    b776:	07 c0       	rjmp	.+14     	; 0xb786 <dtoa_prf+0x136>
    b778:	89 e4       	ldi	r24, 0x49	; 73
    b77a:	f6 01       	movw	r30, r12
    b77c:	80 83       	st	Z, r24
    b77e:	8e e4       	ldi	r24, 0x4E	; 78
    b780:	81 83       	std	Z+1, r24	; 0x01
    b782:	86 e4       	ldi	r24, 0x46	; 70
    b784:	06 c0       	rjmp	.+12     	; 0xb792 <dtoa_prf+0x142>
    b786:	89 e6       	ldi	r24, 0x69	; 105
    b788:	f6 01       	movw	r30, r12
    b78a:	80 83       	st	Z, r24
    b78c:	8e e6       	ldi	r24, 0x6E	; 110
    b78e:	81 83       	std	Z+1, r24	; 0x01
    b790:	86 e6       	ldi	r24, 0x66	; 102
    b792:	82 83       	std	Z+2, r24	; 0x02
    b794:	83 e0       	ldi	r24, 0x03	; 3
    b796:	90 e0       	ldi	r25, 0x00	; 0
    b798:	c8 0e       	add	r12, r24
    b79a:	d9 1e       	adc	r13, r25
    b79c:	81 2f       	mov	r24, r17
    b79e:	f6 01       	movw	r30, r12
    b7a0:	90 e2       	ldi	r25, 0x20	; 32
    b7a2:	02 c0       	rjmp	.+4      	; 0xb7a8 <dtoa_prf+0x158>
    b7a4:	91 93       	st	Z+, r25
    b7a6:	81 50       	subi	r24, 0x01	; 1
    b7a8:	88 23       	and	r24, r24
    b7aa:	e1 f7       	brne	.-8      	; 0xb7a4 <dtoa_prf+0x154>
    b7ac:	c1 0e       	add	r12, r17
    b7ae:	d1 1c       	adc	r13, r1
    b7b0:	f6 01       	movw	r30, r12
    b7b2:	10 82       	st	Z, r1
    b7b4:	8e ef       	ldi	r24, 0xFE	; 254
    b7b6:	9f ef       	ldi	r25, 0xFF	; 255
    b7b8:	af c0       	rjmp	.+350    	; 0xb918 <dtoa_prf+0x2c8>
    b7ba:	21 e0       	ldi	r18, 0x01	; 1
    b7bc:	30 e0       	ldi	r19, 0x00	; 0
    b7be:	44 23       	and	r20, r20
    b7c0:	11 f4       	brne	.+4      	; 0xb7c6 <dtoa_prf+0x176>
    b7c2:	20 e0       	ldi	r18, 0x00	; 0
    b7c4:	30 e0       	ldi	r19, 0x00	; 0
    b7c6:	16 16       	cp	r1, r22
    b7c8:	17 06       	cpc	r1, r23
    b7ca:	1c f4       	brge	.+6      	; 0xb7d2 <dtoa_prf+0x182>
    b7cc:	cb 01       	movw	r24, r22
    b7ce:	01 96       	adiw	r24, 0x01	; 1
    b7d0:	02 c0       	rjmp	.+4      	; 0xb7d6 <dtoa_prf+0x186>
    b7d2:	81 e0       	ldi	r24, 0x01	; 1
    b7d4:	90 e0       	ldi	r25, 0x00	; 0
    b7d6:	28 0f       	add	r18, r24
    b7d8:	39 1f       	adc	r19, r25
    b7da:	ff 20       	and	r15, r15
    b7dc:	21 f0       	breq	.+8      	; 0xb7e6 <dtoa_prf+0x196>
    b7de:	8f 2d       	mov	r24, r15
    b7e0:	90 e0       	ldi	r25, 0x00	; 0
    b7e2:	01 96       	adiw	r24, 0x01	; 1
    b7e4:	02 c0       	rjmp	.+4      	; 0xb7ea <dtoa_prf+0x19a>
    b7e6:	80 e0       	ldi	r24, 0x00	; 0
    b7e8:	90 e0       	ldi	r25, 0x00	; 0
    b7ea:	82 0f       	add	r24, r18
    b7ec:	93 1f       	adc	r25, r19
    b7ee:	21 2f       	mov	r18, r17
    b7f0:	30 e0       	ldi	r19, 0x00	; 0
    b7f2:	82 17       	cp	r24, r18
    b7f4:	93 07       	cpc	r25, r19
    b7f6:	1c f4       	brge	.+6      	; 0xb7fe <dtoa_prf+0x1ae>
    b7f8:	51 2f       	mov	r21, r17
    b7fa:	58 1b       	sub	r21, r24
    b7fc:	01 c0       	rjmp	.+2      	; 0xb800 <dtoa_prf+0x1b0>
    b7fe:	50 e0       	ldi	r21, 0x00	; 0
    b800:	8e 2d       	mov	r24, r14
    b802:	90 e0       	ldi	r25, 0x00	; 0
    b804:	9c 01       	movw	r18, r24
    b806:	20 71       	andi	r18, 0x10	; 16
    b808:	30 70       	andi	r19, 0x00	; 0
    b80a:	e4 fc       	sbrc	r14, 4
    b80c:	0d c0       	rjmp	.+26     	; 0xb828 <dtoa_prf+0x1d8>
    b80e:	e3 fc       	sbrc	r14, 3
    b810:	0b c0       	rjmp	.+22     	; 0xb828 <dtoa_prf+0x1d8>
    b812:	85 2f       	mov	r24, r21
    b814:	f6 01       	movw	r30, r12
    b816:	90 e2       	ldi	r25, 0x20	; 32
    b818:	02 c0       	rjmp	.+4      	; 0xb81e <dtoa_prf+0x1ce>
    b81a:	91 93       	st	Z+, r25
    b81c:	81 50       	subi	r24, 0x01	; 1
    b81e:	88 23       	and	r24, r24
    b820:	e1 f7       	brne	.-8      	; 0xb81a <dtoa_prf+0x1ca>
    b822:	c5 0e       	add	r12, r21
    b824:	d1 1c       	adc	r13, r1
    b826:	50 e0       	ldi	r21, 0x00	; 0
    b828:	44 23       	and	r20, r20
    b82a:	19 f0       	breq	.+6      	; 0xb832 <dtoa_prf+0x1e2>
    b82c:	f6 01       	movw	r30, r12
    b82e:	41 93       	st	Z+, r20
    b830:	6f 01       	movw	r12, r30
    b832:	21 15       	cp	r18, r1
    b834:	31 05       	cpc	r19, r1
    b836:	59 f4       	brne	.+22     	; 0xb84e <dtoa_prf+0x1fe>
    b838:	85 2f       	mov	r24, r21
    b83a:	f6 01       	movw	r30, r12
    b83c:	90 e3       	ldi	r25, 0x30	; 48
    b83e:	02 c0       	rjmp	.+4      	; 0xb844 <dtoa_prf+0x1f4>
    b840:	91 93       	st	Z+, r25
    b842:	81 50       	subi	r24, 0x01	; 1
    b844:	88 23       	and	r24, r24
    b846:	e1 f7       	brne	.-8      	; 0xb840 <dtoa_prf+0x1f0>
    b848:	c5 0e       	add	r12, r21
    b84a:	d1 1c       	adc	r13, r1
    b84c:	50 e0       	ldi	r21, 0x00	; 0
    b84e:	b6 0e       	add	r11, r22
    b850:	4a 81       	ldd	r20, Y+2	; 0x02
    b852:	20 e1       	ldi	r18, 0x10	; 16
    b854:	62 2e       	mov	r6, r18
    b856:	71 2c       	mov	r7, r1
    b858:	6a 22       	and	r6, r26
    b85a:	7b 22       	and	r7, r27
    b85c:	a4 ff       	sbrs	r26, 4
    b85e:	03 c0       	rjmp	.+6      	; 0xb866 <dtoa_prf+0x216>
    b860:	41 33       	cpi	r20, 0x31	; 49
    b862:	09 f4       	brne	.+2      	; 0xb866 <dtoa_prf+0x216>
    b864:	ba 94       	dec	r11
    b866:	1b 14       	cp	r1, r11
    b868:	2c f4       	brge	.+10     	; 0xb874 <dtoa_prf+0x224>
    b86a:	8b 2d       	mov	r24, r11
    b86c:	89 30       	cpi	r24, 0x09	; 9
    b86e:	18 f0       	brcs	.+6      	; 0xb876 <dtoa_prf+0x226>
    b870:	88 e0       	ldi	r24, 0x08	; 8
    b872:	01 c0       	rjmp	.+2      	; 0xb876 <dtoa_prf+0x226>
    b874:	81 e0       	ldi	r24, 0x01	; 1
    b876:	9b 01       	movw	r18, r22
    b878:	77 ff       	sbrs	r23, 7
    b87a:	02 c0       	rjmp	.+4      	; 0xb880 <dtoa_prf+0x230>
    b87c:	20 e0       	ldi	r18, 0x00	; 0
    b87e:	30 e0       	ldi	r19, 0x00	; 0
    b880:	a0 e0       	ldi	r26, 0x00	; 0
    b882:	b0 e0       	ldi	r27, 0x00	; 0
    b884:	9e e2       	ldi	r25, 0x2E	; 46
    b886:	e9 2e       	mov	r14, r25
    b888:	4b 01       	movw	r8, r22
    b88a:	88 1a       	sub	r8, r24
    b88c:	91 08       	sbc	r9, r1
    b88e:	cb 01       	movw	r24, r22
    b890:	82 1b       	sub	r24, r18
    b892:	93 0b       	sbc	r25, r19
    b894:	8e 01       	movw	r16, r28
    b896:	0f 5f       	subi	r16, 0xFF	; 255
    b898:	1f 4f       	sbci	r17, 0xFF	; 255
    b89a:	08 0f       	add	r16, r24
    b89c:	19 1f       	adc	r17, r25
    b89e:	8f 2d       	mov	r24, r15
    b8a0:	90 e0       	ldi	r25, 0x00	; 0
    b8a2:	aa 24       	eor	r10, r10
    b8a4:	bb 24       	eor	r11, r11
    b8a6:	a8 1a       	sub	r10, r24
    b8a8:	b9 0a       	sbc	r11, r25
    b8aa:	ff ef       	ldi	r31, 0xFF	; 255
    b8ac:	2f 3f       	cpi	r18, 0xFF	; 255
    b8ae:	3f 07       	cpc	r19, r31
    b8b0:	19 f4       	brne	.+6      	; 0xb8b8 <dtoa_prf+0x268>
    b8b2:	f6 01       	movw	r30, r12
    b8b4:	e1 92       	st	Z+, r14
    b8b6:	6f 01       	movw	r12, r30
    b8b8:	62 17       	cp	r22, r18
    b8ba:	73 07       	cpc	r23, r19
    b8bc:	44 f0       	brlt	.+16     	; 0xb8ce <dtoa_prf+0x27e>
    b8be:	82 16       	cp	r8, r18
    b8c0:	93 06       	cpc	r9, r19
    b8c2:	2c f4       	brge	.+10     	; 0xb8ce <dtoa_prf+0x27e>
    b8c4:	f8 01       	movw	r30, r16
    b8c6:	ea 0f       	add	r30, r26
    b8c8:	fb 1f       	adc	r31, r27
    b8ca:	81 81       	ldd	r24, Z+1	; 0x01
    b8cc:	01 c0       	rjmp	.+2      	; 0xb8d0 <dtoa_prf+0x280>
    b8ce:	80 e3       	ldi	r24, 0x30	; 48
    b8d0:	21 50       	subi	r18, 0x01	; 1
    b8d2:	30 40       	sbci	r19, 0x00	; 0
    b8d4:	11 96       	adiw	r26, 0x01	; 1
    b8d6:	2a 15       	cp	r18, r10
    b8d8:	3b 05       	cpc	r19, r11
    b8da:	24 f0       	brlt	.+8      	; 0xb8e4 <dtoa_prf+0x294>
    b8dc:	f6 01       	movw	r30, r12
    b8de:	81 93       	st	Z+, r24
    b8e0:	6f 01       	movw	r12, r30
    b8e2:	e3 cf       	rjmp	.-58     	; 0xb8aa <dtoa_prf+0x25a>
    b8e4:	26 17       	cp	r18, r22
    b8e6:	37 07       	cpc	r19, r23
    b8e8:	41 f4       	brne	.+16     	; 0xb8fa <dtoa_prf+0x2aa>
    b8ea:	46 33       	cpi	r20, 0x36	; 54
    b8ec:	28 f4       	brcc	.+10     	; 0xb8f8 <dtoa_prf+0x2a8>
    b8ee:	45 33       	cpi	r20, 0x35	; 53
    b8f0:	21 f4       	brne	.+8      	; 0xb8fa <dtoa_prf+0x2aa>
    b8f2:	61 14       	cp	r6, r1
    b8f4:	71 04       	cpc	r7, r1
    b8f6:	09 f4       	brne	.+2      	; 0xb8fa <dtoa_prf+0x2aa>
    b8f8:	81 e3       	ldi	r24, 0x31	; 49
    b8fa:	f6 01       	movw	r30, r12
    b8fc:	81 93       	st	Z+, r24
    b8fe:	85 2f       	mov	r24, r21
    b900:	df 01       	movw	r26, r30
    b902:	90 e2       	ldi	r25, 0x20	; 32
    b904:	02 c0       	rjmp	.+4      	; 0xb90a <dtoa_prf+0x2ba>
    b906:	9d 93       	st	X+, r25
    b908:	81 50       	subi	r24, 0x01	; 1
    b90a:	88 23       	and	r24, r24
    b90c:	e1 f7       	brne	.-8      	; 0xb906 <dtoa_prf+0x2b6>
    b90e:	e5 0f       	add	r30, r21
    b910:	f1 1d       	adc	r31, r1
    b912:	10 82       	st	Z, r1
    b914:	80 e0       	ldi	r24, 0x00	; 0
    b916:	90 e0       	ldi	r25, 0x00	; 0
    b918:	29 96       	adiw	r28, 0x09	; 9
    b91a:	0f b6       	in	r0, 0x3f	; 63
    b91c:	f8 94       	cli
    b91e:	de bf       	out	0x3e, r29	; 62
    b920:	0f be       	out	0x3f, r0	; 63
    b922:	cd bf       	out	0x3d, r28	; 61
    b924:	df 91       	pop	r29
    b926:	cf 91       	pop	r28
    b928:	1f 91       	pop	r17
    b92a:	0f 91       	pop	r16
    b92c:	ff 90       	pop	r15
    b92e:	ef 90       	pop	r14
    b930:	df 90       	pop	r13
    b932:	cf 90       	pop	r12
    b934:	bf 90       	pop	r11
    b936:	af 90       	pop	r10
    b938:	9f 90       	pop	r9
    b93a:	8f 90       	pop	r8
    b93c:	7f 90       	pop	r7
    b93e:	6f 90       	pop	r6
    b940:	08 95       	ret

0000b942 <strtod>:
    b942:	6f 92       	push	r6
    b944:	7f 92       	push	r7
    b946:	8f 92       	push	r8
    b948:	9f 92       	push	r9
    b94a:	af 92       	push	r10
    b94c:	bf 92       	push	r11
    b94e:	cf 92       	push	r12
    b950:	df 92       	push	r13
    b952:	ef 92       	push	r14
    b954:	ff 92       	push	r15
    b956:	0f 93       	push	r16
    b958:	1f 93       	push	r17
    b95a:	cf 93       	push	r28
    b95c:	df 93       	push	r29
    b95e:	5b 01       	movw	r10, r22
    b960:	61 15       	cp	r22, r1
    b962:	71 05       	cpc	r23, r1
    b964:	21 f0       	breq	.+8      	; 0xb96e <strtod+0x2c>
    b966:	db 01       	movw	r26, r22
    b968:	8c 93       	st	X, r24
    b96a:	11 96       	adiw	r26, 0x01	; 1
    b96c:	9c 93       	st	X, r25
    b96e:	7c 01       	movw	r14, r24
    b970:	e7 01       	movw	r28, r14
    b972:	08 94       	sec
    b974:	e1 1c       	adc	r14, r1
    b976:	f1 1c       	adc	r15, r1
    b978:	08 81       	ld	r16, Y
    b97a:	67 01       	movw	r12, r14
    b97c:	80 2f       	mov	r24, r16
    b97e:	90 e0       	ldi	r25, 0x00	; 0
    b980:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <isspace>
    b984:	00 97       	sbiw	r24, 0x00	; 0
    b986:	a1 f7       	brne	.-24     	; 0xb970 <strtod+0x2e>
    b988:	0d 32       	cpi	r16, 0x2D	; 45
    b98a:	41 f4       	brne	.+16     	; 0xb99c <strtod+0x5a>
    b98c:	09 81       	ldd	r16, Y+1	; 0x01
    b98e:	42 e0       	ldi	r20, 0x02	; 2
    b990:	c4 2e       	mov	r12, r20
    b992:	d1 2c       	mov	r13, r1
    b994:	cc 0e       	add	r12, r28
    b996:	dd 1e       	adc	r13, r29
    b998:	11 e0       	ldi	r17, 0x01	; 1
    b99a:	09 c0       	rjmp	.+18     	; 0xb9ae <strtod+0x6c>
    b99c:	0b 32       	cpi	r16, 0x2B	; 43
    b99e:	31 f4       	brne	.+12     	; 0xb9ac <strtod+0x6a>
    b9a0:	09 81       	ldd	r16, Y+1	; 0x01
    b9a2:	32 e0       	ldi	r19, 0x02	; 2
    b9a4:	c3 2e       	mov	r12, r19
    b9a6:	d1 2c       	mov	r13, r1
    b9a8:	cc 0e       	add	r12, r28
    b9aa:	dd 1e       	adc	r13, r29
    b9ac:	10 e0       	ldi	r17, 0x00	; 0
    b9ae:	e6 01       	movw	r28, r12
    b9b0:	21 97       	sbiw	r28, 0x01	; 1
    b9b2:	ce 01       	movw	r24, r28
    b9b4:	65 e1       	ldi	r22, 0x15	; 21
    b9b6:	72 e0       	ldi	r23, 0x02	; 2
    b9b8:	43 e0       	ldi	r20, 0x03	; 3
    b9ba:	50 e0       	ldi	r21, 0x00	; 0
    b9bc:	0e 94 f8 5e 	call	0xbdf0	; 0xbdf0 <strncasecmp_P>
    b9c0:	00 97       	sbiw	r24, 0x00	; 0
    b9c2:	d1 f4       	brne	.+52     	; 0xb9f8 <strtod+0xb6>
    b9c4:	e6 01       	movw	r28, r12
    b9c6:	22 96       	adiw	r28, 0x02	; 2
    b9c8:	ce 01       	movw	r24, r28
    b9ca:	68 e1       	ldi	r22, 0x18	; 24
    b9cc:	72 e0       	ldi	r23, 0x02	; 2
    b9ce:	45 e0       	ldi	r20, 0x05	; 5
    b9d0:	50 e0       	ldi	r21, 0x00	; 0
    b9d2:	0e 94 f8 5e 	call	0xbdf0	; 0xbdf0 <strncasecmp_P>
    b9d6:	00 97       	sbiw	r24, 0x00	; 0
    b9d8:	11 f4       	brne	.+4      	; 0xb9de <strtod+0x9c>
    b9da:	e6 01       	movw	r28, r12
    b9dc:	27 96       	adiw	r28, 0x07	; 7
    b9de:	a1 14       	cp	r10, r1
    b9e0:	b1 04       	cpc	r11, r1
    b9e2:	19 f0       	breq	.+6      	; 0xb9ea <strtod+0xa8>
    b9e4:	f5 01       	movw	r30, r10
    b9e6:	d1 83       	std	Z+1, r29	; 0x01
    b9e8:	c0 83       	st	Z, r28
    b9ea:	30 e0       	ldi	r19, 0x00	; 0
    b9ec:	20 e0       	ldi	r18, 0x00	; 0
    b9ee:	90 e8       	ldi	r25, 0x80	; 128
    b9f0:	11 23       	and	r17, r17
    b9f2:	09 f4       	brne	.+2      	; 0xb9f6 <strtod+0xb4>
    b9f4:	0a c1       	rjmp	.+532    	; 0xbc0a <strtod+0x2c8>
    b9f6:	04 c1       	rjmp	.+520    	; 0xbc00 <strtod+0x2be>
    b9f8:	ce 01       	movw	r24, r28
    b9fa:	6d e1       	ldi	r22, 0x1D	; 29
    b9fc:	72 e0       	ldi	r23, 0x02	; 2
    b9fe:	43 e0       	ldi	r20, 0x03	; 3
    ba00:	50 e0       	ldi	r21, 0x00	; 0
    ba02:	0e 94 f8 5e 	call	0xbdf0	; 0xbdf0 <strncasecmp_P>
    ba06:	00 97       	sbiw	r24, 0x00	; 0
    ba08:	59 f4       	brne	.+22     	; 0xba20 <strtod+0xde>
    ba0a:	a1 14       	cp	r10, r1
    ba0c:	b1 04       	cpc	r11, r1
    ba0e:	09 f4       	brne	.+2      	; 0xba12 <strtod+0xd0>
    ba10:	f9 c0       	rjmp	.+498    	; 0xbc04 <strtod+0x2c2>
    ba12:	c6 01       	movw	r24, r12
    ba14:	02 96       	adiw	r24, 0x02	; 2
    ba16:	d5 01       	movw	r26, r10
    ba18:	11 96       	adiw	r26, 0x01	; 1
    ba1a:	9c 93       	st	X, r25
    ba1c:	8e 93       	st	-X, r24
    ba1e:	f2 c0       	rjmp	.+484    	; 0xbc04 <strtod+0x2c2>
    ba20:	40 e0       	ldi	r20, 0x00	; 0
    ba22:	50 e0       	ldi	r21, 0x00	; 0
    ba24:	ba 01       	movw	r22, r20
    ba26:	88 24       	eor	r8, r8
    ba28:	99 24       	eor	r9, r9
    ba2a:	00 53       	subi	r16, 0x30	; 48
    ba2c:	0a 30       	cpi	r16, 0x0A	; 10
    ba2e:	90 f5       	brcc	.+100    	; 0xba94 <strtod+0x152>
    ba30:	12 60       	ori	r17, 0x02	; 2
    ba32:	21 2f       	mov	r18, r17
    ba34:	30 e0       	ldi	r19, 0x00	; 0
    ba36:	c9 01       	movw	r24, r18
    ba38:	88 70       	andi	r24, 0x08	; 8
    ba3a:	90 70       	andi	r25, 0x00	; 0
    ba3c:	12 ff       	sbrs	r17, 2
    ba3e:	06 c0       	rjmp	.+12     	; 0xba4c <strtod+0x10a>
    ba40:	00 97       	sbiw	r24, 0x00	; 0
    ba42:	69 f5       	brne	.+90     	; 0xba9e <strtod+0x15c>
    ba44:	08 94       	sec
    ba46:	81 1c       	adc	r8, r1
    ba48:	91 1c       	adc	r9, r1
    ba4a:	29 c0       	rjmp	.+82     	; 0xba9e <strtod+0x15c>
    ba4c:	00 97       	sbiw	r24, 0x00	; 0
    ba4e:	19 f0       	breq	.+6      	; 0xba56 <strtod+0x114>
    ba50:	08 94       	sec
    ba52:	81 08       	sbc	r8, r1
    ba54:	91 08       	sbc	r9, r1
    ba56:	db 01       	movw	r26, r22
    ba58:	ca 01       	movw	r24, r20
    ba5a:	d2 e0       	ldi	r29, 0x02	; 2
    ba5c:	88 0f       	add	r24, r24
    ba5e:	99 1f       	adc	r25, r25
    ba60:	aa 1f       	adc	r26, r26
    ba62:	bb 1f       	adc	r27, r27
    ba64:	da 95       	dec	r29
    ba66:	d1 f7       	brne	.-12     	; 0xba5c <strtod+0x11a>
    ba68:	48 0f       	add	r20, r24
    ba6a:	59 1f       	adc	r21, r25
    ba6c:	6a 1f       	adc	r22, r26
    ba6e:	7b 1f       	adc	r23, r27
    ba70:	44 0f       	add	r20, r20
    ba72:	55 1f       	adc	r21, r21
    ba74:	66 1f       	adc	r22, r22
    ba76:	77 1f       	adc	r23, r23
    ba78:	40 0f       	add	r20, r16
    ba7a:	51 1d       	adc	r21, r1
    ba7c:	61 1d       	adc	r22, r1
    ba7e:	71 1d       	adc	r23, r1
    ba80:	48 39       	cpi	r20, 0x98	; 152
    ba82:	b9 e9       	ldi	r27, 0x99	; 153
    ba84:	5b 07       	cpc	r21, r27
    ba86:	b9 e9       	ldi	r27, 0x99	; 153
    ba88:	6b 07       	cpc	r22, r27
    ba8a:	b9 e1       	ldi	r27, 0x19	; 25
    ba8c:	7b 07       	cpc	r23, r27
    ba8e:	38 f0       	brcs	.+14     	; 0xba9e <strtod+0x15c>
    ba90:	14 60       	ori	r17, 0x04	; 4
    ba92:	05 c0       	rjmp	.+10     	; 0xba9e <strtod+0x15c>
    ba94:	0e 3f       	cpi	r16, 0xFE	; 254
    ba96:	39 f4       	brne	.+14     	; 0xbaa6 <strtod+0x164>
    ba98:	13 fd       	sbrc	r17, 3
    ba9a:	43 c0       	rjmp	.+134    	; 0xbb22 <strtod+0x1e0>
    ba9c:	18 60       	ori	r17, 0x08	; 8
    ba9e:	f6 01       	movw	r30, r12
    baa0:	01 91       	ld	r16, Z+
    baa2:	6f 01       	movw	r12, r30
    baa4:	c2 cf       	rjmp	.-124    	; 0xba2a <strtod+0xe8>
    baa6:	05 33       	cpi	r16, 0x35	; 53
    baa8:	11 f0       	breq	.+4      	; 0xbaae <strtod+0x16c>
    baaa:	05 31       	cpi	r16, 0x15	; 21
    baac:	d1 f5       	brne	.+116    	; 0xbb22 <strtod+0x1e0>
    baae:	d6 01       	movw	r26, r12
    bab0:	ec 91       	ld	r30, X
    bab2:	ed 32       	cpi	r30, 0x2D	; 45
    bab4:	11 f4       	brne	.+4      	; 0xbaba <strtod+0x178>
    bab6:	10 61       	ori	r17, 0x10	; 16
    bab8:	08 c0       	rjmp	.+16     	; 0xbaca <strtod+0x188>
    baba:	eb 32       	cpi	r30, 0x2B	; 43
    babc:	29 f0       	breq	.+10     	; 0xbac8 <strtod+0x186>
    babe:	c6 01       	movw	r24, r12
    bac0:	01 96       	adiw	r24, 0x01	; 1
    bac2:	21 e0       	ldi	r18, 0x01	; 1
    bac4:	30 e0       	ldi	r19, 0x00	; 0
    bac6:	08 c0       	rjmp	.+16     	; 0xbad8 <strtod+0x196>
    bac8:	d6 01       	movw	r26, r12
    baca:	11 96       	adiw	r26, 0x01	; 1
    bacc:	ec 91       	ld	r30, X
    bace:	11 97       	sbiw	r26, 0x01	; 1
    bad0:	c6 01       	movw	r24, r12
    bad2:	02 96       	adiw	r24, 0x02	; 2
    bad4:	22 e0       	ldi	r18, 0x02	; 2
    bad6:	30 e0       	ldi	r19, 0x00	; 0
    bad8:	e0 53       	subi	r30, 0x30	; 48
    bada:	ea 30       	cpi	r30, 0x0A	; 10
    badc:	20 f0       	brcs	.+8      	; 0xbae6 <strtod+0x1a4>
    bade:	6c 01       	movw	r12, r24
    bae0:	c2 1a       	sub	r12, r18
    bae2:	d3 0a       	sbc	r13, r19
    bae4:	1e c0       	rjmp	.+60     	; 0xbb22 <strtod+0x1e0>
    bae6:	dc 01       	movw	r26, r24
    bae8:	20 e0       	ldi	r18, 0x00	; 0
    baea:	30 e0       	ldi	r19, 0x00	; 0
    baec:	fc e0       	ldi	r31, 0x0C	; 12
    baee:	20 38       	cpi	r18, 0x80	; 128
    baf0:	3f 07       	cpc	r19, r31
    baf2:	5c f4       	brge	.+22     	; 0xbb0a <strtod+0x1c8>
    baf4:	c9 01       	movw	r24, r18
    baf6:	88 0f       	add	r24, r24
    baf8:	99 1f       	adc	r25, r25
    bafa:	88 0f       	add	r24, r24
    bafc:	99 1f       	adc	r25, r25
    bafe:	28 0f       	add	r18, r24
    bb00:	39 1f       	adc	r19, r25
    bb02:	22 0f       	add	r18, r18
    bb04:	33 1f       	adc	r19, r19
    bb06:	2e 0f       	add	r18, r30
    bb08:	31 1d       	adc	r19, r1
    bb0a:	ed 91       	ld	r30, X+
    bb0c:	e0 53       	subi	r30, 0x30	; 48
    bb0e:	6d 01       	movw	r12, r26
    bb10:	ea 30       	cpi	r30, 0x0A	; 10
    bb12:	60 f3       	brcs	.-40     	; 0xbaec <strtod+0x1aa>
    bb14:	14 ff       	sbrs	r17, 4
    bb16:	03 c0       	rjmp	.+6      	; 0xbb1e <strtod+0x1dc>
    bb18:	30 95       	com	r19
    bb1a:	21 95       	neg	r18
    bb1c:	3f 4f       	sbci	r19, 0xFF	; 255
    bb1e:	82 0e       	add	r8, r18
    bb20:	93 1e       	adc	r9, r19
    bb22:	c1 2f       	mov	r28, r17
    bb24:	d0 e0       	ldi	r29, 0x00	; 0
    bb26:	11 ff       	sbrs	r17, 1
    bb28:	08 c0       	rjmp	.+16     	; 0xbb3a <strtod+0x1f8>
    bb2a:	a1 14       	cp	r10, r1
    bb2c:	b1 04       	cpc	r11, r1
    bb2e:	29 f0       	breq	.+10     	; 0xbb3a <strtod+0x1f8>
    bb30:	c6 01       	movw	r24, r12
    bb32:	01 97       	sbiw	r24, 0x01	; 1
    bb34:	d5 01       	movw	r26, r10
    bb36:	8d 93       	st	X+, r24
    bb38:	9c 93       	st	X, r25
    bb3a:	cb 01       	movw	r24, r22
    bb3c:	ba 01       	movw	r22, r20
    bb3e:	0e 94 6d 57 	call	0xaeda	; 0xaeda <__floatunsisf>
    bb42:	6b 01       	movw	r12, r22
    bb44:	7c 01       	movw	r14, r24
    bb46:	ce 01       	movw	r24, r28
    bb48:	83 70       	andi	r24, 0x03	; 3
    bb4a:	90 70       	andi	r25, 0x00	; 0
    bb4c:	83 30       	cpi	r24, 0x03	; 3
    bb4e:	91 05       	cpc	r25, r1
    bb50:	21 f4       	brne	.+8      	; 0xbb5a <strtod+0x218>
    bb52:	f7 fa       	bst	r15, 7
    bb54:	f0 94       	com	r15
    bb56:	f7 f8       	bld	r15, 7
    bb58:	f0 94       	com	r15
    bb5a:	c7 01       	movw	r24, r14
    bb5c:	b6 01       	movw	r22, r12
    bb5e:	20 e0       	ldi	r18, 0x00	; 0
    bb60:	30 e0       	ldi	r19, 0x00	; 0
    bb62:	a9 01       	movw	r20, r18
    bb64:	0e 94 d0 56 	call	0xada0	; 0xada0 <__cmpsf2>
    bb68:	88 23       	and	r24, r24
    bb6a:	09 f4       	brne	.+2      	; 0xbb6e <strtod+0x22c>
    bb6c:	44 c0       	rjmp	.+136    	; 0xbbf6 <strtod+0x2b4>
    bb6e:	97 fe       	sbrs	r9, 7
    bb70:	07 c0       	rjmp	.+14     	; 0xbb80 <strtod+0x23e>
    bb72:	90 94       	com	r9
    bb74:	81 94       	neg	r8
    bb76:	91 08       	sbc	r9, r1
    bb78:	93 94       	inc	r9
    bb7a:	cc e4       	ldi	r28, 0x4C	; 76
    bb7c:	d2 e0       	ldi	r29, 0x02	; 2
    bb7e:	02 c0       	rjmp	.+4      	; 0xbb84 <strtod+0x242>
    bb80:	c4 e3       	ldi	r28, 0x34	; 52
    bb82:	d2 e0       	ldi	r29, 0x02	; 2
    bb84:	98 ee       	ldi	r25, 0xE8	; 232
    bb86:	69 2e       	mov	r6, r25
    bb88:	9f ef       	ldi	r25, 0xFF	; 255
    bb8a:	79 2e       	mov	r7, r25
    bb8c:	6c 0e       	add	r6, r28
    bb8e:	7d 1e       	adc	r7, r29
    bb90:	20 e2       	ldi	r18, 0x20	; 32
    bb92:	a2 2e       	mov	r10, r18
    bb94:	b1 2c       	mov	r11, r1
    bb96:	0f c0       	rjmp	.+30     	; 0xbbb6 <strtod+0x274>
    bb98:	fe 01       	movw	r30, r28
    bb9a:	05 91       	lpm	r16, Z+
    bb9c:	15 91       	lpm	r17, Z+
    bb9e:	25 91       	lpm	r18, Z+
    bba0:	34 91       	lpm	r19, Z
    bba2:	c7 01       	movw	r24, r14
    bba4:	b6 01       	movw	r22, r12
    bba6:	a9 01       	movw	r20, r18
    bba8:	98 01       	movw	r18, r16
    bbaa:	0e 94 23 58 	call	0xb046	; 0xb046 <__mulsf3>
    bbae:	6b 01       	movw	r12, r22
    bbb0:	7c 01       	movw	r14, r24
    bbb2:	8a 18       	sub	r8, r10
    bbb4:	9b 08       	sbc	r9, r11
    bbb6:	8a 14       	cp	r8, r10
    bbb8:	9b 04       	cpc	r9, r11
    bbba:	74 f7       	brge	.-36     	; 0xbb98 <strtod+0x256>
    bbbc:	24 97       	sbiw	r28, 0x04	; 4
    bbbe:	b5 94       	asr	r11
    bbc0:	a7 94       	ror	r10
    bbc2:	c6 15       	cp	r28, r6
    bbc4:	d7 05       	cpc	r29, r7
    bbc6:	b9 f7       	brne	.-18     	; 0xbbb6 <strtod+0x274>
    bbc8:	c6 01       	movw	r24, r12
    bbca:	d7 01       	movw	r26, r14
    bbcc:	2a 2f       	mov	r18, r26
    bbce:	22 0f       	add	r18, r18
    bbd0:	2b 2f       	mov	r18, r27
    bbd2:	22 1f       	adc	r18, r18
    bbd4:	2f 3f       	cpi	r18, 0xFF	; 255
    bbd6:	49 f0       	breq	.+18     	; 0xbbea <strtod+0x2a8>
    bbd8:	bc 01       	movw	r22, r24
    bbda:	cd 01       	movw	r24, r26
    bbdc:	20 e0       	ldi	r18, 0x00	; 0
    bbde:	30 e0       	ldi	r19, 0x00	; 0
    bbe0:	a9 01       	movw	r20, r18
    bbe2:	0e 94 d0 56 	call	0xada0	; 0xada0 <__cmpsf2>
    bbe6:	88 23       	and	r24, r24
    bbe8:	31 f4       	brne	.+12     	; 0xbbf6 <strtod+0x2b4>
    bbea:	82 e2       	ldi	r24, 0x22	; 34
    bbec:	90 e0       	ldi	r25, 0x00	; 0
    bbee:	90 93 e1 0a 	sts	0x0AE1, r25
    bbf2:	80 93 e0 0a 	sts	0x0AE0, r24
    bbf6:	3c 2d       	mov	r19, r12
    bbf8:	2d 2d       	mov	r18, r13
    bbfa:	9e 2d       	mov	r25, r14
    bbfc:	8f 2d       	mov	r24, r15
    bbfe:	06 c0       	rjmp	.+12     	; 0xbc0c <strtod+0x2ca>
    bc00:	8f ef       	ldi	r24, 0xFF	; 255
    bc02:	04 c0       	rjmp	.+8      	; 0xbc0c <strtod+0x2ca>
    bc04:	30 e0       	ldi	r19, 0x00	; 0
    bc06:	20 e0       	ldi	r18, 0x00	; 0
    bc08:	90 ec       	ldi	r25, 0xC0	; 192
    bc0a:	8f e7       	ldi	r24, 0x7F	; 127
    bc0c:	b9 01       	movw	r22, r18
    bc0e:	ac 01       	movw	r20, r24
    bc10:	87 2f       	mov	r24, r23
    bc12:	92 2f       	mov	r25, r18
    bc14:	a5 2f       	mov	r26, r21
    bc16:	b4 2f       	mov	r27, r20
    bc18:	bc 01       	movw	r22, r24
    bc1a:	cd 01       	movw	r24, r26
    bc1c:	df 91       	pop	r29
    bc1e:	cf 91       	pop	r28
    bc20:	1f 91       	pop	r17
    bc22:	0f 91       	pop	r16
    bc24:	ff 90       	pop	r15
    bc26:	ef 90       	pop	r14
    bc28:	df 90       	pop	r13
    bc2a:	cf 90       	pop	r12
    bc2c:	bf 90       	pop	r11
    bc2e:	af 90       	pop	r10
    bc30:	9f 90       	pop	r9
    bc32:	8f 90       	pop	r8
    bc34:	7f 90       	pop	r7
    bc36:	6f 90       	pop	r6
    bc38:	08 95       	ret

0000bc3a <__ftoa_engine>:
    bc3a:	28 30       	cpi	r18, 0x08	; 8
    bc3c:	08 f0       	brcs	.+2      	; 0xbc40 <__ftoa_engine+0x6>
    bc3e:	27 e0       	ldi	r18, 0x07	; 7
    bc40:	33 27       	eor	r19, r19
    bc42:	da 01       	movw	r26, r20
    bc44:	99 0f       	add	r25, r25
    bc46:	31 1d       	adc	r19, r1
    bc48:	87 fd       	sbrc	r24, 7
    bc4a:	91 60       	ori	r25, 0x01	; 1
    bc4c:	00 96       	adiw	r24, 0x00	; 0
    bc4e:	61 05       	cpc	r22, r1
    bc50:	71 05       	cpc	r23, r1
    bc52:	39 f4       	brne	.+14     	; 0xbc62 <__ftoa_engine+0x28>
    bc54:	32 60       	ori	r19, 0x02	; 2
    bc56:	2e 5f       	subi	r18, 0xFE	; 254
    bc58:	3d 93       	st	X+, r19
    bc5a:	30 e3       	ldi	r19, 0x30	; 48
    bc5c:	2a 95       	dec	r18
    bc5e:	e1 f7       	brne	.-8      	; 0xbc58 <__ftoa_engine+0x1e>
    bc60:	08 95       	ret
    bc62:	9f 3f       	cpi	r25, 0xFF	; 255
    bc64:	30 f0       	brcs	.+12     	; 0xbc72 <__ftoa_engine+0x38>
    bc66:	80 38       	cpi	r24, 0x80	; 128
    bc68:	71 05       	cpc	r23, r1
    bc6a:	61 05       	cpc	r22, r1
    bc6c:	09 f0       	breq	.+2      	; 0xbc70 <__ftoa_engine+0x36>
    bc6e:	3c 5f       	subi	r19, 0xFC	; 252
    bc70:	3c 5f       	subi	r19, 0xFC	; 252
    bc72:	3d 93       	st	X+, r19
    bc74:	91 30       	cpi	r25, 0x01	; 1
    bc76:	08 f0       	brcs	.+2      	; 0xbc7a <__ftoa_engine+0x40>
    bc78:	80 68       	ori	r24, 0x80	; 128
    bc7a:	91 1d       	adc	r25, r1
    bc7c:	df 93       	push	r29
    bc7e:	cf 93       	push	r28
    bc80:	1f 93       	push	r17
    bc82:	0f 93       	push	r16
    bc84:	ff 92       	push	r15
    bc86:	ef 92       	push	r14
    bc88:	19 2f       	mov	r17, r25
    bc8a:	98 7f       	andi	r25, 0xF8	; 248
    bc8c:	96 95       	lsr	r25
    bc8e:	e9 2f       	mov	r30, r25
    bc90:	96 95       	lsr	r25
    bc92:	96 95       	lsr	r25
    bc94:	e9 0f       	add	r30, r25
    bc96:	ff 27       	eor	r31, r31
    bc98:	e6 55       	subi	r30, 0x56	; 86
    bc9a:	fd 4f       	sbci	r31, 0xFD	; 253
    bc9c:	99 27       	eor	r25, r25
    bc9e:	33 27       	eor	r19, r19
    bca0:	ee 24       	eor	r14, r14
    bca2:	ff 24       	eor	r15, r15
    bca4:	a7 01       	movw	r20, r14
    bca6:	e7 01       	movw	r28, r14
    bca8:	05 90       	lpm	r0, Z+
    bcaa:	08 94       	sec
    bcac:	07 94       	ror	r0
    bcae:	28 f4       	brcc	.+10     	; 0xbcba <__ftoa_engine+0x80>
    bcb0:	36 0f       	add	r19, r22
    bcb2:	e7 1e       	adc	r14, r23
    bcb4:	f8 1e       	adc	r15, r24
    bcb6:	49 1f       	adc	r20, r25
    bcb8:	51 1d       	adc	r21, r1
    bcba:	66 0f       	add	r22, r22
    bcbc:	77 1f       	adc	r23, r23
    bcbe:	88 1f       	adc	r24, r24
    bcc0:	99 1f       	adc	r25, r25
    bcc2:	06 94       	lsr	r0
    bcc4:	a1 f7       	brne	.-24     	; 0xbcae <__ftoa_engine+0x74>
    bcc6:	05 90       	lpm	r0, Z+
    bcc8:	07 94       	ror	r0
    bcca:	28 f4       	brcc	.+10     	; 0xbcd6 <__ftoa_engine+0x9c>
    bccc:	e7 0e       	add	r14, r23
    bcce:	f8 1e       	adc	r15, r24
    bcd0:	49 1f       	adc	r20, r25
    bcd2:	56 1f       	adc	r21, r22
    bcd4:	c1 1d       	adc	r28, r1
    bcd6:	77 0f       	add	r23, r23
    bcd8:	88 1f       	adc	r24, r24
    bcda:	99 1f       	adc	r25, r25
    bcdc:	66 1f       	adc	r22, r22
    bcde:	06 94       	lsr	r0
    bce0:	a1 f7       	brne	.-24     	; 0xbcca <__ftoa_engine+0x90>
    bce2:	05 90       	lpm	r0, Z+
    bce4:	07 94       	ror	r0
    bce6:	28 f4       	brcc	.+10     	; 0xbcf2 <__ftoa_engine+0xb8>
    bce8:	f8 0e       	add	r15, r24
    bcea:	49 1f       	adc	r20, r25
    bcec:	56 1f       	adc	r21, r22
    bcee:	c7 1f       	adc	r28, r23
    bcf0:	d1 1d       	adc	r29, r1
    bcf2:	88 0f       	add	r24, r24
    bcf4:	99 1f       	adc	r25, r25
    bcf6:	66 1f       	adc	r22, r22
    bcf8:	77 1f       	adc	r23, r23
    bcfa:	06 94       	lsr	r0
    bcfc:	a1 f7       	brne	.-24     	; 0xbce6 <__ftoa_engine+0xac>
    bcfe:	05 90       	lpm	r0, Z+
    bd00:	07 94       	ror	r0
    bd02:	20 f4       	brcc	.+8      	; 0xbd0c <__ftoa_engine+0xd2>
    bd04:	49 0f       	add	r20, r25
    bd06:	56 1f       	adc	r21, r22
    bd08:	c7 1f       	adc	r28, r23
    bd0a:	d8 1f       	adc	r29, r24
    bd0c:	99 0f       	add	r25, r25
    bd0e:	66 1f       	adc	r22, r22
    bd10:	77 1f       	adc	r23, r23
    bd12:	88 1f       	adc	r24, r24
    bd14:	06 94       	lsr	r0
    bd16:	a9 f7       	brne	.-22     	; 0xbd02 <__ftoa_engine+0xc8>
    bd18:	84 91       	lpm	r24, Z
    bd1a:	10 95       	com	r17
    bd1c:	17 70       	andi	r17, 0x07	; 7
    bd1e:	41 f0       	breq	.+16     	; 0xbd30 <__ftoa_engine+0xf6>
    bd20:	d6 95       	lsr	r29
    bd22:	c7 95       	ror	r28
    bd24:	57 95       	ror	r21
    bd26:	47 95       	ror	r20
    bd28:	f7 94       	ror	r15
    bd2a:	e7 94       	ror	r14
    bd2c:	1a 95       	dec	r17
    bd2e:	c1 f7       	brne	.-16     	; 0xbd20 <__ftoa_engine+0xe6>
    bd30:	e0 e5       	ldi	r30, 0x50	; 80
    bd32:	f2 e0       	ldi	r31, 0x02	; 2
    bd34:	68 94       	set
    bd36:	15 90       	lpm	r1, Z+
    bd38:	15 91       	lpm	r17, Z+
    bd3a:	35 91       	lpm	r19, Z+
    bd3c:	65 91       	lpm	r22, Z+
    bd3e:	95 91       	lpm	r25, Z+
    bd40:	05 90       	lpm	r0, Z+
    bd42:	7f e2       	ldi	r23, 0x2F	; 47
    bd44:	73 95       	inc	r23
    bd46:	e1 18       	sub	r14, r1
    bd48:	f1 0a       	sbc	r15, r17
    bd4a:	43 0b       	sbc	r20, r19
    bd4c:	56 0b       	sbc	r21, r22
    bd4e:	c9 0b       	sbc	r28, r25
    bd50:	d0 09       	sbc	r29, r0
    bd52:	c0 f7       	brcc	.-16     	; 0xbd44 <__ftoa_engine+0x10a>
    bd54:	e1 0c       	add	r14, r1
    bd56:	f1 1e       	adc	r15, r17
    bd58:	43 1f       	adc	r20, r19
    bd5a:	56 1f       	adc	r21, r22
    bd5c:	c9 1f       	adc	r28, r25
    bd5e:	d0 1d       	adc	r29, r0
    bd60:	7e f4       	brtc	.+30     	; 0xbd80 <__ftoa_engine+0x146>
    bd62:	70 33       	cpi	r23, 0x30	; 48
    bd64:	11 f4       	brne	.+4      	; 0xbd6a <__ftoa_engine+0x130>
    bd66:	8a 95       	dec	r24
    bd68:	e6 cf       	rjmp	.-52     	; 0xbd36 <__ftoa_engine+0xfc>
    bd6a:	e8 94       	clt
    bd6c:	01 50       	subi	r16, 0x01	; 1
    bd6e:	30 f0       	brcs	.+12     	; 0xbd7c <__ftoa_engine+0x142>
    bd70:	08 0f       	add	r16, r24
    bd72:	0a f4       	brpl	.+2      	; 0xbd76 <__ftoa_engine+0x13c>
    bd74:	00 27       	eor	r16, r16
    bd76:	02 17       	cp	r16, r18
    bd78:	08 f4       	brcc	.+2      	; 0xbd7c <__ftoa_engine+0x142>
    bd7a:	20 2f       	mov	r18, r16
    bd7c:	23 95       	inc	r18
    bd7e:	02 2f       	mov	r16, r18
    bd80:	7a 33       	cpi	r23, 0x3A	; 58
    bd82:	28 f0       	brcs	.+10     	; 0xbd8e <__ftoa_engine+0x154>
    bd84:	79 e3       	ldi	r23, 0x39	; 57
    bd86:	7d 93       	st	X+, r23
    bd88:	2a 95       	dec	r18
    bd8a:	e9 f7       	brne	.-6      	; 0xbd86 <__ftoa_engine+0x14c>
    bd8c:	10 c0       	rjmp	.+32     	; 0xbdae <__ftoa_engine+0x174>
    bd8e:	7d 93       	st	X+, r23
    bd90:	2a 95       	dec	r18
    bd92:	89 f6       	brne	.-94     	; 0xbd36 <__ftoa_engine+0xfc>
    bd94:	06 94       	lsr	r0
    bd96:	97 95       	ror	r25
    bd98:	67 95       	ror	r22
    bd9a:	37 95       	ror	r19
    bd9c:	17 95       	ror	r17
    bd9e:	17 94       	ror	r1
    bda0:	e1 18       	sub	r14, r1
    bda2:	f1 0a       	sbc	r15, r17
    bda4:	43 0b       	sbc	r20, r19
    bda6:	56 0b       	sbc	r21, r22
    bda8:	c9 0b       	sbc	r28, r25
    bdaa:	d0 09       	sbc	r29, r0
    bdac:	98 f0       	brcs	.+38     	; 0xbdd4 <__ftoa_engine+0x19a>
    bdae:	23 95       	inc	r18
    bdb0:	7e 91       	ld	r23, -X
    bdb2:	73 95       	inc	r23
    bdb4:	7a 33       	cpi	r23, 0x3A	; 58
    bdb6:	08 f0       	brcs	.+2      	; 0xbdba <__ftoa_engine+0x180>
    bdb8:	70 e3       	ldi	r23, 0x30	; 48
    bdba:	7c 93       	st	X, r23
    bdbc:	20 13       	cpse	r18, r16
    bdbe:	b8 f7       	brcc	.-18     	; 0xbdae <__ftoa_engine+0x174>
    bdc0:	7e 91       	ld	r23, -X
    bdc2:	70 61       	ori	r23, 0x10	; 16
    bdc4:	7d 93       	st	X+, r23
    bdc6:	30 f0       	brcs	.+12     	; 0xbdd4 <__ftoa_engine+0x19a>
    bdc8:	83 95       	inc	r24
    bdca:	71 e3       	ldi	r23, 0x31	; 49
    bdcc:	7d 93       	st	X+, r23
    bdce:	70 e3       	ldi	r23, 0x30	; 48
    bdd0:	2a 95       	dec	r18
    bdd2:	e1 f7       	brne	.-8      	; 0xbdcc <__ftoa_engine+0x192>
    bdd4:	11 24       	eor	r1, r1
    bdd6:	ef 90       	pop	r14
    bdd8:	ff 90       	pop	r15
    bdda:	0f 91       	pop	r16
    bddc:	1f 91       	pop	r17
    bdde:	cf 91       	pop	r28
    bde0:	df 91       	pop	r29
    bde2:	99 27       	eor	r25, r25
    bde4:	87 fd       	sbrc	r24, 7
    bde6:	90 95       	com	r25
    bde8:	08 95       	ret

0000bdea <__ctype_isfalse>:
    bdea:	99 27       	eor	r25, r25
    bdec:	88 27       	eor	r24, r24

0000bdee <__ctype_istrue>:
    bdee:	08 95       	ret

0000bdf0 <strncasecmp_P>:
    bdf0:	fb 01       	movw	r30, r22
    bdf2:	dc 01       	movw	r26, r24
    bdf4:	41 50       	subi	r20, 0x01	; 1
    bdf6:	50 40       	sbci	r21, 0x00	; 0
    bdf8:	88 f0       	brcs	.+34     	; 0xbe1c <strncasecmp_P+0x2c>
    bdfa:	8d 91       	ld	r24, X+
    bdfc:	81 34       	cpi	r24, 0x41	; 65
    bdfe:	1c f0       	brlt	.+6      	; 0xbe06 <strncasecmp_P+0x16>
    be00:	8b 35       	cpi	r24, 0x5B	; 91
    be02:	0c f4       	brge	.+2      	; 0xbe06 <strncasecmp_P+0x16>
    be04:	80 5e       	subi	r24, 0xE0	; 224
    be06:	65 91       	lpm	r22, Z+
    be08:	61 34       	cpi	r22, 0x41	; 65
    be0a:	1c f0       	brlt	.+6      	; 0xbe12 <strncasecmp_P+0x22>
    be0c:	6b 35       	cpi	r22, 0x5B	; 91
    be0e:	0c f4       	brge	.+2      	; 0xbe12 <strncasecmp_P+0x22>
    be10:	60 5e       	subi	r22, 0xE0	; 224
    be12:	86 1b       	sub	r24, r22
    be14:	61 11       	cpse	r22, r1
    be16:	71 f3       	breq	.-36     	; 0xbdf4 <strncasecmp_P+0x4>
    be18:	99 0b       	sbc	r25, r25
    be1a:	08 95       	ret
    be1c:	88 1b       	sub	r24, r24
    be1e:	fc cf       	rjmp	.-8      	; 0xbe18 <strncasecmp_P+0x28>

0000be20 <strrev>:
    be20:	dc 01       	movw	r26, r24
    be22:	fc 01       	movw	r30, r24
    be24:	67 2f       	mov	r22, r23
    be26:	71 91       	ld	r23, Z+
    be28:	77 23       	and	r23, r23
    be2a:	e1 f7       	brne	.-8      	; 0xbe24 <strrev+0x4>
    be2c:	32 97       	sbiw	r30, 0x02	; 2
    be2e:	04 c0       	rjmp	.+8      	; 0xbe38 <strrev+0x18>
    be30:	7c 91       	ld	r23, X
    be32:	6d 93       	st	X+, r22
    be34:	70 83       	st	Z, r23
    be36:	62 91       	ld	r22, -Z
    be38:	ae 17       	cp	r26, r30
    be3a:	bf 07       	cpc	r27, r31
    be3c:	c8 f3       	brcs	.-14     	; 0xbe30 <strrev+0x10>
    be3e:	08 95       	ret

0000be40 <__do_global_dtors>:
    be40:	13 e0       	ldi	r17, 0x03	; 3
    be42:	c6 e5       	ldi	r28, 0x56	; 86
    be44:	d3 e0       	ldi	r29, 0x03	; 3
    be46:	00 e0       	ldi	r16, 0x00	; 0
    be48:	06 c0       	rjmp	.+12     	; 0xbe56 <__do_global_dtors+0x16>
    be4a:	22 97       	sbiw	r28, 0x02	; 2
    be4c:	01 09       	sbc	r16, r1
    be4e:	fe 01       	movw	r30, r28
    be50:	0b bf       	out	0x3b, r16	; 59
    be52:	0e 94 19 59 	call	0xb232	; 0xb232 <__tablejump_elpm__>
    be56:	c8 35       	cpi	r28, 0x58	; 88
    be58:	d1 07       	cpc	r29, r17
    be5a:	80 e0       	ldi	r24, 0x00	; 0
    be5c:	08 07       	cpc	r16, r24
    be5e:	a9 f7       	brne	.-22     	; 0xbe4a <__do_global_dtors+0xa>
    be60:	1b be       	out	0x3b, r1	; 59
    be62:	f8 94       	cli

0000be64 <__stop_program>:
    be64:	ff cf       	rjmp	.-2      	; 0xbe64 <__stop_program>
